/sb/MixinAssetProxyDispatcher.sol
jar:file:/usr/local/lib/node_modules/@smartdec/smartcheck/jdeploy-bundle/smartcheck-2.0-jar-with-dependencies.jar!/solidity-rules.xmlruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 74
column: 4
content: functionrawAddress(bytesmemoryinput)internalpurereturns(uint256memoryAddress){assembly{memoryAddress:=input}returnmemoryAddress;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 88
column: 4
content: functioncontentAddress(bytesmemoryinput)internalpurereturns(uint256memoryAddress){assembly{memoryAddress:=add(input,32)}returnmemoryAddress;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 103
column: 4
content: functionmemCopy(uint256dest,uint256source,uint256length)internalpure{if(length<32){assembly{letmask:=sub(exp(256,sub(32,length)),1)lets:=and(mload(source),not(mask))letd:=and(mload(dest),mask)mstore(dest,or(s,d))}}else{if(source==dest){return;}if(source>dest){assembly{length:=sub(length,32)letsEnd:=add(source,length)letdEnd:=add(dest,length)letlast:=mload(sEnd)for{}lt(source,sEnd){}{mstore(dest,mload(source))source:=add(source,32)dest:=add(dest,32)}mstore(dEnd,last)}}else{assembly{length:=sub(length,32)letsEnd:=add(source,length)letdEnd:=add(dest,length)letfirst:=mload(source)for{}slt(dest,dEnd){}{mstore(dEnd,mload(sEnd))sEnd:=sub(sEnd,32)dEnd:=sub(dEnd,32)}mstore(dest,first)}}}}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 244
column: 4
content: functionsliceDestructive(bytesmemoryb,uint256from,uint256to)internalpurereturns(bytesmemoryresult){require(from<=to,"FROM_LESS_THAN_TO_REQUIRED");require(to<b.length,"TO_LESS_THAN_LENGTH_REQUIRED");assembly{result:=add(b,from)mstore(result,sub(to,from))}returnresult;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 273
column: 4
content: functionpopLastByte(bytesmemoryb)internalpurereturns(bytes1result){require(b.length>0,"GREATER_THAN_ZERO_LENGTH_REQUIRED");result=b[b.length-1];assembly{letnewLen:=sub(mload(b),1)mstore(b,newLen)}returnresult;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 297
column: 4
content: functionpopLast20Bytes(bytesmemoryb)internalpurereturns(addressresult){require(b.length>=20,"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED");result=readAddress(b,b.length-20);assembly{letnewLen:=sub(mload(b),20)mstore(b,newLen)}returnresult;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 340
column: 4
content: functionreadAddress(bytesmemoryb,uint256index)internalpurereturns(addressresult){require(b.length>=index+20,"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED");index+=20;assembly{result:=and(mload(add(b,index)),0xffffffffffffffffffffffffffffffffffffffff)}returnresult;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 372
column: 4
content: functionwriteAddress(bytesmemoryb,uint256index,addressinput)internalpure{require(b.length>=index+20,"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED");index+=20;assembly{letneighbors:=and(mload(add(b,index)),0xffffffffffffffffffffffff0000000000000000000000000000000000000000)input:=and(input,0xffffffffffffffffffffffffffffffffffffffff)mstore(add(b,index),xor(input,neighbors))}}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 418
column: 4
content: functionreadBytes32(bytesmemoryb,uint256index)internalpurereturns(bytes32result){require(b.length>=index+32,"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED");index+=32;assembly{result:=mload(add(b,index))}returnresult;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 445
column: 4
content: functionwriteBytes32(bytesmemoryb,uint256index,bytes32input)internalpure{require(b.length>=index+32,"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED");index+=32;assembly{mstore(add(b,index),input)}}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 501
column: 4
content: functionreadBytes4(bytesmemoryb,uint256index)internalpurereturns(bytes4result){require(b.length>=index+4,"GREATER_OR_EQUAL_TO_4_LENGTH_REQUIRED");assembly{result:=mload(add(b,32))result:=and(result,0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)}returnresult;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 528
column: 4
content: functionreadBytesWithLength(bytesmemoryb,uint256index)internalpurereturns(bytesmemoryresult){uint256nestedBytesLength=readUint256(b,index);index+=32;require(b.length>=index+nestedBytesLength,"GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED");assembly{result:=add(b,index)}returnresult;}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 79
column: 8
content: assembly{memoryAddress:=input}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 93
column: 8
content: assembly{memoryAddress:=add(input,32)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 115
column: 12
content: assembly{letmask:=sub(exp(256,sub(32,length)),1)lets:=and(mload(source),not(mask))letd:=and(mload(dest),mask)mstore(dest,or(s,d))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 143
column: 16
content: assembly{length:=sub(length,32)letsEnd:=add(source,length)letdEnd:=add(dest,length)letlast:=mload(sEnd)for{}lt(source,sEnd){}{mstore(dest,mload(source))source:=add(source,32)dest:=add(dest,32)}mstore(dEnd,last)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 172
column: 16
content: assembly{length:=sub(length,32)letsEnd:=add(source,length)letdEnd:=add(dest,length)letfirst:=mload(source)for{}slt(dest,dEnd){}{mstore(dEnd,mload(sEnd))sEnd:=sub(sEnd,32)dEnd:=sub(dEnd,32)}mstore(dest,first)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 263
column: 8
content: assembly{result:=add(b,from)mstore(result,sub(to,from))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 286
column: 8
content: assembly{letnewLen:=sub(mload(b),1)mstore(b,newLen)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 310
column: 8
content: assembly{letnewLen:=sub(mload(b),20)mstore(b,newLen)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 359
column: 8
content: assembly{result:=and(mload(add(b,index)),0xffffffffffffffffffffffffffffffffffffffff)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 391
column: 8
content: assembly{letneighbors:=and(mload(add(b,index)),0xffffffffffffffffffffffff0000000000000000000000000000000000000000)input:=and(input,0xffffffffffffffffffffffffffffffffffffffff)mstore(add(b,index),xor(input,neighbors))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 435
column: 8
content: assembly{result:=mload(add(b,index))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 462
column: 8
content: assembly{mstore(add(b,index),input)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 513
column: 8
content: assembly{result:=mload(add(b,32))result:=and(result,0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 548
column: 8
content: assembly{result:=add(b,index)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 852
column: 12
content: assembly{assetProxyId:=and(mload(add(assetData,32)),0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 881
column: 12
content: assembly{letcdStart:=mload(64)letdataAreaLength:=and(add(mload(assetData),63),0xFFFFFFFFFFFE0)letcdEnd:=add(cdStart,add(132,dataAreaLength))mstore(cdStart,0xa85e59e400000000000000000000000000000000000000000000000000000000)mstore(add(cdStart,4),128)mstore(add(cdStart,36),and(from,0xffffffffffffffffffffffffffffffffffffffff))mstore(add(cdStart,68),and(to,0xffffffffffffffffffffffffffffffffffffffff))mstore(add(cdStart,100),amount)letdataArea:=add(cdStart,132)for{}lt(dataArea,cdEnd){}{mstore(dataArea,mload(assetData))dataArea:=add(dataArea,32)assetData:=add(assetData,32)}letsuccess:=call(gas,assetProxy,0,cdStart,sub(cdEnd,cdStart),cdStart,512)ifiszero(success){revert(cdStart,returndatasize())}}

SOLIDITY_USING_INLINE_ASSEMBLY :16
SOLIDITY_SHOULD_NOT_BE_PURE :12
