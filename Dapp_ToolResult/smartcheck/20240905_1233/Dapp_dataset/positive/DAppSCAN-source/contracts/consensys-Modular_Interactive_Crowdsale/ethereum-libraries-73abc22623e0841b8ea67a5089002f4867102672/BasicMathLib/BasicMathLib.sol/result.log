/sb/BasicMathLib.sol
jar:file:/usr/local/lib/node_modules/@smartdec/smartcheck/jdeploy-bundle/smartcheck-2.0-jar-with-dependencies.jar!/solidity-rules.xmlruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 58bdd3
severity: 1
line: 39
column: 2
content: functiontimes(uint256a,uint256b)publicpurereturns(boolerr,uint256res){assembly{res:=mul(a,b)switchor(iszero(b),eq(div(res,b),a))case0{err:=1res:=0}}}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 58bdd3
severity: 1
line: 56
column: 2
content: functiondividedBy(uint256a,uint256b)publicpurereturns(boolerr,uint256i){uint256res;assembly{switchiszero(b)case0{res:=div(a,b)letloc:=mload(0x40)mstore(add(loc,0x20),res)i:=mload(add(loc,0x20))}default{err:=1i:=0}}}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 58bdd3
severity: 1
line: 79
column: 2
content: functionplus(uint256a,uint256b)publicpurereturns(boolerr,uint256res){assembly{res:=add(a,b)switchand(eq(sub(res,b),a),or(gt(res,b),eq(res,b)))case0{err:=1res:=0}}}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 58bdd3
severity: 1
line: 96
column: 2
content: functionminus(uint256a,uint256b)publicpurereturns(boolerr,uint256res){assembly{res:=sub(a,b)switcheq(and(eq(add(res,b),a),or(lt(res,a),eq(res,a))),1)case0{err:=1res:=0}}}

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 1
column: 16
content: ^

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 39
column: 2
content: functiontimes(uint256a,uint256b)publicpurereturns(boolerr,uint256res){assembly{res:=mul(a,b)switchor(iszero(b),eq(div(res,b),a))case0{err:=1res:=0}}}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 56
column: 2
content: functiondividedBy(uint256a,uint256b)publicpurereturns(boolerr,uint256i){uint256res;assembly{switchiszero(b)case0{res:=div(a,b)letloc:=mload(0x40)mstore(add(loc,0x20),res)i:=mload(add(loc,0x20))}default{err:=1i:=0}}}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 79
column: 2
content: functionplus(uint256a,uint256b)publicpurereturns(boolerr,uint256res){assembly{res:=add(a,b)switchand(eq(sub(res,b),a),or(gt(res,b),eq(res,b)))case0{err:=1res:=0}}}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 96
column: 2
content: functionminus(uint256a,uint256b)publicpurereturns(boolerr,uint256res){assembly{res:=sub(a,b)switcheq(and(eq(add(res,b),a),or(lt(res,a),eq(res,a))),1)case0{err:=1res:=0}}}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 40
column: 4
content: assembly{res:=mul(a,b)switchor(iszero(b),eq(div(res,b),a))case0{err:=1res:=0}}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 58
column: 4
content: assembly{switchiszero(b)case0{res:=div(a,b)letloc:=mload(0x40)mstore(add(loc,0x20),res)i:=mload(add(loc,0x20))}default{err:=1i:=0}}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 80
column: 4
content: assembly{res:=add(a,b)switchand(eq(sub(res,b),a),or(gt(res,b),eq(res,b)))case0{err:=1res:=0}}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 97
column: 4
content: assembly{res:=sub(a,b)switcheq(and(eq(add(res,b),a),or(lt(res,a),eq(res,a))),1)case0{err:=1res:=0}}

SOLIDITY_PRAGMAS_VERSION :1
SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN :4
SOLIDITY_USING_INLINE_ASSEMBLY :4
SOLIDITY_SHOULD_NOT_BE_PURE :4
