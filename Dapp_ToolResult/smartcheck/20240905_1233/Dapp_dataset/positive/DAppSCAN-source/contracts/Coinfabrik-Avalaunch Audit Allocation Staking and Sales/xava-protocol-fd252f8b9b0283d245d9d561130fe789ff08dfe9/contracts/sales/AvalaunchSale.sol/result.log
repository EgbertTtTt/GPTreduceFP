/sb/AvalaunchSale.sol
line 426:31 mismatched input 'payable' expecting {',', ')'}
line 426:48 no viable alternative at input 'recipient,'
line 426:48 mismatched input ',' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 426:64 mismatched input ')' expecting {';', '='}
line 427:15 mismatched input '(' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 427:23 mismatched input '(' expecting ')'
line 427:29 extraneous input '.' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 427:38 mismatched input '>=' expecting {';', '='}
line 427:47 mismatched input ',' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 430:14 missing ')' at 'success'
line 430:21 mismatched input ',' expecting {';', '='}
line 430:41 extraneous input '{' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 430:48 mismatched input ':' expecting {';', '='}
line 430:57 mismatched input '}' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 430:58 extraneous input '(' expecting {<EOF>, 'pragma', 'import', 'contract', 'library', 'interface'}
line 627:49 no viable alternative at input '(bool))'
line 627:48 no viable alternative at input 'bool)'
line 627:50 mismatched input ',' expecting ';'
line 627:96 extraneous input ')' expecting ';'
line 835:27 extraneous input 'startTimes' expecting {',', ')'}
line 836:27 extraneous input 'maxParticipations' expecting {',', ')'}
line 955:27 extraneous input 'rounds' expecting {',', ')'}
line 956:27 extraneous input 'caps' expecting {',', ')'}
line 1091:33 no viable alternative at input '.call{'
line 1091:33 missing ';' at '{'
jar:file:/usr/local/lib/node_modules/@smartdec/smartcheck/jdeploy-bundle/smartcheck-2.0-jar-with-dependencies.jar!/solidity-rules.xmlruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: f32db1
severity: 1
line: 1124
column: 44
content: 1

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 770
column: 8
content: for(uint256i=0;i<_unlockingTimes.length;i++){vestingPortionsUnlockTime.push(_unlockingTimes[i]);vestingPercentPerPortion.push(_percents[i]);}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 847
column: 8
content: for(uinti=0;i<startTimes.length;i++){require(startTimes[i]>registration.registrationTimeEnds);require(startTimes[i]<sale.saleEnd);require(startTimes[i]>=block.timestamp);require(maxParticipations[i]>0);require(startTimes[i]>lastTimestamp);lastTimestamp=startTimes[i];uintroundId=i+1;roundIds.push(roundId);Roundmemoryround=Round(startTimes[i],maxParticipations[i]);roundIdToRound[roundId]=round;emitRoundAdded(roundId,round.startTime,round.maxParticipation);}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 932
column: 8
content: for(uinti=0;i<roundIds.length;i++){Roundstorageround=roundIdToRound[roundIds[i]];round.startTime=round.startTime.add(timeToShift);}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 964
column: 8
content: for(uinti=0;i<rounds.length;i++){require(caps[i]>0,"Can't set max participation to 0");Roundstorageround=roundIdToRound[rounds[i]];round.maxParticipation=caps[i];emitMaxParticipationSet(rounds[i],round.maxParticipation);}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: k4o1l4
severity: 1
line: 1136
column: 8
content: while((i+1)<roundIds.length&&block.timestamp>roundIdToRound[roundIds[i+1]].startTime){i++;}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 770
column: 8
content: for(uint256i=0;i<_unlockingTimes.length;i++){vestingPortionsUnlockTime.push(_unlockingTimes[i]);vestingPercentPerPortion.push(_percents[i]);}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 847
column: 8
content: for(uinti=0;i<startTimes.length;i++){require(startTimes[i]>registration.registrationTimeEnds);require(startTimes[i]<sale.saleEnd);require(startTimes[i]>=block.timestamp);require(maxParticipations[i]>0);require(startTimes[i]>lastTimestamp);lastTimestamp=startTimes[i];uintroundId=i+1;roundIds.push(roundId);Roundmemoryround=Round(startTimes[i],maxParticipations[i]);roundIdToRound[roundId]=round;emitRoundAdded(roundId,round.startTime,round.maxParticipation);}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 932
column: 8
content: for(uinti=0;i<roundIds.length;i++){Roundstorageround=roundIdToRound[roundIds[i]];round.startTime=round.startTime.add(timeToShift);}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 964
column: 8
content: for(uinti=0;i<rounds.length;i++){require(caps[i]>0,"Can't set max participation to 0");Roundstorageround=roundIdToRound[rounds[i]];round.maxParticipation=caps[i];emitMaxParticipationSet(rounds[i],round.maxParticipation);}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: 17f23a
severity: 1
line: 1136
column: 14
content: (i+1)<roundIds.length&&block.timestamp>roundIdToRound[roundIds[i+1]].startTime

ruleId: SOLIDITY_LOCKED_MONEY
patternId: 30281d
severity: 3
line: 646
column: 0
content: contractAvalaunchSale{usingECDSAforbytes32;usingSafeMathforuint256;usingSafeERC20forIERC20;IAllocationStakingpublicallocationStakingContract;ISalesFactorypublicfactory;IAdminpublicadmin;structSale{IERC20token;boolisCreated;boolearningsWithdrawn;booltokensDeposited;addresssaleOwner;uint256tokenPriceInAVAX;uint256amountOfTokensToSell;uint256totalTokensSold;uint256totalAVAXRaised;uint256saleEnd;uint256tokensUnlockTime;}structParticipation{uint256amountBought;uint256amountAVAXPaid;uint256timeParticipated;uint256roundId;bool[]isPortionWithdrawn;}structRound{uintstartTime;uintmaxParticipation;}structRegistration{uint256registrationTimeStarts;uint256registrationTimeEnds;uint256numberOfRegistrants;}Salepublicsale;Registrationpublicregistration;uint256publicnumberOfParticipants;uint256[]publicroundIds;mapping(uint256=>Round)publicroundIdToRound;mapping(address=>Participation)publicuserToParticipation;mapping(address=>uint256)publicaddressToRoundRegisteredFor;mapping(address=>bool)publicisParticipated;uint256publicconstantone=10**18;uint256[]publicvestingPortionsUnlockTime;uint256[]publicvestingPercentPerPortion;modifieronlySaleOwner{require(msg.sender==sale.saleOwner,'OnlySaleOwner:: Restricted');_;}modifieronlyAdmin{require(admin.isAdmin(msg.sender),"Only admin can call this function.");_;}eventTokensSold(addressuser,uint256amount);eventUserRegistered(addressuser,uint256roundId);eventTokenPriceSet(uint256newPrice);eventMaxParticipationSet(uint256roundId,uint256maxParticipation);eventTokensWithdrawn(addressuser,uint256amount);eventSaleCreated(addresssaleOwner,uint256tokenPriceInAVAX,uint256amountOfTokensToSell,uint256saleEnd,uint256tokensUnlockTime);eventRegistrationTimeSet(uint256registrationTimeStarts,uint256registrationTimeEnds);eventRoundAdded(uint256roundId,uint256startTime,uint256maxParticipation);constructor(address_admin,address_allocationStaking)public{require(_admin!=address(0));require(_allocationStaking!=address(0));admin=IAdmin(_admin);factory=ISalesFactory(msg.sender);allocationStakingContract=IAllocationStaking(_allocationStaking);}functionsetVestingParams(uint256[]memory_unlockingTimes,uint256[]memory_percents)externalonlyAdmin{require(vestingPercentPerPortion.length==0&&vestingPortionsUnlockTime.length==0);require(_unlockingTimes.length==_percents.length);for(uint256i=0;i<_unlockingTimes.length;i++){vestingPortionsUnlockTime.push(_unlockingTimes[i]);vestingPercentPerPortion.push(_percents[i]);}}functionsetSaleParams(address_token,address_saleOwner,uint256_tokenPriceInAVAX,uint256_amountOfTokensToSell,uint256_saleEnd,uint256_tokensUnlockTime)externalonlyAdmin{require(!sale.isCreated,"setSaleParams: Sale is already created.");require(_token!=address(0),"setSaleParams: Token address can not be 0.");require(_saleOwner!=address(0),"setSaleParams: Sale owner address can not be 0.");require(_tokenPriceInAVAX!=0&&_amountOfTokensToSell!=0&&_saleEnd>block.timestamp&&_tokensUnlockTime>block.timestamp,"setSaleParams: Bad input");sale.token=IERC20(_token);sale.isCreated=true;sale.saleOwner=_saleOwner;sale.tokenPriceInAVAX=_tokenPriceInAVAX;sale.amountOfTokensToSell=_amountOfTokensToSell;sale.saleEnd=_saleEnd;sale.tokensUnlockTime=_tokensUnlockTime;factory.setSaleOwnerAndToken(sale.saleOwner,address(sale.token));emitSaleCreated(sale.saleOwner,sale.tokenPriceInAVAX,sale.amountOfTokensToSell,sale.saleEnd,sale.tokensUnlockTime);}functionsetRegistrationTime(uint256_registrationTimeStarts,uint256_registrationTimeEnds)externalonlyAdmin{require(sale.isCreated==true);require(registration.registrationTimeStarts==0);require(_registrationTimeStarts>=block.timestamp&&_registrationTimeEnds>_registrationTimeStarts);require(_registrationTimeEnds<sale.saleEnd);if(roundIds.length>0){require(_registrationTimeEnds<roundIdToRound[roundIds[0]].startTime);}registration.registrationTimeStarts=_registrationTimeStarts;registration.registrationTimeEnds=_registrationTimeEnds;emitRegistrationTimeSet(registration.registrationTimeStarts,registration.registrationTimeEnds);}functionsetRounds(uint256[]calldatastartTimes,uint256[]calldatamaxParticipations)externalonlyAdmin{require(sale.isCreated==true);require(startTimes.length==maxParticipations.length,"setRounds: Bad input.");require(roundIds.length==0,"setRounds: Rounds are already");require(startTimes.length>0);uint256lastTimestamp=0;for(uinti=0;i<startTimes.length;i++){require(startTimes[i]>registration.registrationTimeEnds);require(startTimes[i]<sale.saleEnd);require(startTimes[i]>=block.timestamp);require(maxParticipations[i]>0);require(startTimes[i]>lastTimestamp);lastTimestamp=startTimes[i];uintroundId=i+1;roundIds.push(roundId);Roundmemoryround=Round(startTimes[i],maxParticipations[i]);roundIdToRound[roundId]=round;emitRoundAdded(roundId,round.startTime,round.maxParticipation);}}functionregisterForSale(bytesmemorysignature,uintroundId)external{require(roundId!=0,"Round ID can not be 0.");require(roundId<=roundIds.length,"Invalid round id");require(block.timestamp>=registration.registrationTimeStarts&&block.timestamp<=registration.registrationTimeEnds,"Registration gate is closed.");require(checkRegistrationSignature(signature,msg.sender,roundId),"Invalid signature");require(addressToRoundRegisteredFor[msg.sender]==0,"User can not register twice.");addressToRoundRegisteredFor[msg.sender]=roundId;if(roundId==2){allocationStakingContract.setTokensUnlockTime(0,msg.sender,sale.saleEnd);}registration.numberOfRegistrants++;emitUserRegistered(msg.sender,roundId);}functionupdateTokenPriceInAVAX(uint256price)externalonlyAdmin{require(block.timestamp<roundIdToRound[roundIds[0]].startTime,"1st round already started.");require(price>0,"Price can not be 0.");sale.tokenPriceInAVAX=price;emitTokenPriceSet(price);}functionpostponeSale(uint256timeToShift)externalonlyAdmin{require(block.timestamp<roundIdToRound[roundIds[0]].startTime,"1st round already started.");for(uinti=0;i<roundIds.length;i++){Roundstorageround=roundIdToRound[roundIds[i]];round.startTime=round.startTime.add(timeToShift);}}functionextendRegistrationPeriod(uint256timeToAdd)externalonlyAdmin{require(registration.registrationTimeEnds.add(timeToAdd)<roundIdToRound[roundIds[0]].startTime,"Registration period overflows sale start.");registration.registrationTimeEnds=registration.registrationTimeEnds.add(timeToAdd);}functionsetCapPerRound(uint256[]calldatarounds,uint256[]calldatacaps)externalonlyAdmin{require(block.timestamp<roundIdToRound[roundIds[0]].startTime,"1st round already started.");require(rounds.length==caps.length,"Arrays length is different.");for(uinti=0;i<rounds.length;i++){require(caps[i]>0,"Can't set max participation to 0");Roundstorageround=roundIdToRound[rounds[i]];round.maxParticipation=caps[i];emitMaxParticipationSet(rounds[i],round.maxParticipation);}}functiondepositTokens()externalonlySaleOwner{require(sale.totalTokensSold==0&&sale.token.balanceOf(address(this))==0,"Deposit can be done only once");require(block.timestamp<roundIdToRound[roundIds[0]].startTime,"Deposit too late. Round already started.");sale.token.safeTransferFrom(msg.sender,address(this),sale.amountOfTokensToSell);sale.tokensDeposited=true;}functionparticipate(bytesmemorysignature,uint256amount,uint256amountXavaToBurn,uint256roundId)externalpayable{require(sale.tokensDeposited==true,"Tokens not deposited yet");require(roundId!=0,"Round can not be 0.");require(amount<=roundIdToRound[roundId].maxParticipation,"Overflowing maximal participation for this round.");require(addressToRoundRegisteredFor[msg.sender]==roundId,"Not registered for this round");require(checkParticipationSignature(signature,msg.sender,amount,amountXavaToBurn,roundId),"Invalid signature. Verification failed");require(isParticipated[msg.sender]==false,"User can participate only once.");require(msg.sender==tx.origin,"Only direct contract calls.");uint256currentRound=getCurrentRound();require(roundId==currentRound,"You can not participate in this round.");uint256amountOfTokensBuying=(msg.value).mul(10**18).div(sale.tokenPriceInAVAX);require(amountOfTokensBuying>0,"Can't buy 0 tokens");require(amountOfTokensBuying<=amount,"Trying to buy more than allowed.");sale.totalTokensSold=sale.totalTokensSold.add(amountOfTokensBuying);sale.totalAVAXRaised=sale.totalAVAXRaised.add(msg.value);Participationmemoryp;p.amountBought=amountOfTokensBuying;p.amountAVAXPaid=msg.value;p.timeParticipated=block.timestamp;p.roundId=roundId;if(roundId==2){allocationStakingContract.redistributeXava(0,msg.sender,amountXavaToBurn);}userToParticipation[msg.sender]=p;isParticipated[msg.sender]=true;numberOfParticipants++;emitTokensSold(msg.sender,amountOfTokensBuying);}functionwithdrawTokens(uintportionId)external{require(block.timestamp>=sale.tokensUnlockTime,"Tokens can not be withdrawn yet.");require(portionId<vestingPercentPerPortion.length);Participationstoragep=userToParticipation[msg.sender];if(!p.isPortionWithdrawn[portionId]&&vestingPortionsUnlockTime[portionId]>=block.timestamp){p.isPortionWithdrawn[portionId];uint256amountWithdrawing=p.amountBought.mul(vestingPercentPerPortion[portionId]).div(100);sale.token.safeTransfer(msg.sender,amountWithdrawing);emitTokensWithdrawn(msg.sender,amountWithdrawing);}else{revert("Tokens already withdrawn.");}}functionsafeTransferAVAX(addressto,uintvalue)internal{(boolsuccess,)=to.call<missing ';'>{value:value}(newbytes(0));require(success);}functionwithdrawEarningsAndLeftover(boolwithBurn)externalonlySaleOwner{require(block.timestamp>=sale.saleEnd);require(sale.earningsWithdrawn==false);sale.earningsWithdrawn=true;uinttotalProfit=address(this).balance;uintleftover=sale.amountOfTokensToSell.sub(sale.totalTokensSold);safeTransferAVAX(msg.sender,totalProfit);if(leftover>0&&!withBurn){sale.token.safeTransfer(msg.sender,leftover);return;}if(withBurn){sale.token.safeTransfer(address(1),leftover);}}functiongetCurrentRound()publicviewreturns(uint){uinti=0;if(block.timestamp<roundIdToRound[roundIds[0]].startTime){return0;}while((i+1)<roundIds.length&&block.timestamp>roundIdToRound[roundIds[i+1]].startTime){i++;}if(block.timestamp>=sale.saleEnd){return0;}returnroundIds[i];}functioncheckRegistrationSignature(bytesmemorysignature,addressuser,uint256roundId)publicviewreturns(bool){bytes32hash=keccak256(abi.encodePacked(user,roundId,address(this)));bytes32messageHash=hash.toEthSignedMessageHash();returnadmin.isAdmin(messageHash.recover(signature));}functioncheckParticipationSignature(bytesmemorysignature,addressuser,uint256amount,uint256amountXavaToBurn,uint256round)publicviewreturns(bool){returnadmin.isAdmin(getParticipationSigner(signature,user,amount,amountXavaToBurn,round));}functiongetParticipationSigner(bytesmemorysignature,addressuser,uint256amount,uint256amountXavaToBurn,uint256roundId)publicviewreturns(address){bytes32hash=keccak256(abi.encodePacked(user,amount,amountXavaToBurn,roundId,address(this)));bytes32messageHash=hash.toEthSignedMessageHash();returnmessageHash.recover(signature);}functiongetParticipation(address_user)externalviewreturns(uint256,uint256,uint256,uint256,bool[]memory){Participationmemoryp=userToParticipation[_user];return(p.amountBought,p.amountAVAXPaid,p.timeParticipated,p.roundId,p.isPortionWithdrawn);}functiongetRegistrationInfo()externalviewreturns(uint256,uint256){return(registration.registrationTimeEnds,registration.numberOfRegistrants);}}

ruleId: SOLIDITY_REVERT_REQUIRE
patternId: c56b12
severity: 1
line: 107
column: 8
content: if(signature.length!=65){revert("ECDSA: invalid signature length");}

ruleId: SOLIDITY_REVERT_REQUIRE
patternId: c56b12
severity: 1
line: 1072
column: 8
content: if(!p.isPortionWithdrawn[portionId]&&vestingPortionsUnlockTime[portionId]>=block.timestamp){p.isPortionWithdrawn[portionId];uint256amountWithdrawing=p.amountBought.mul(vestingPercentPerPortion[portionId]).div(100);sale.token.safeTransfer(msg.sender,amountWithdrawing);emitTokensWithdrawn(msg.sender,amountWithdrawing);}else{revert("Tokens already withdrawn.");}

ruleId: SOLIDITY_SAFEMATH
patternId: 837cac
severity: 1
line: 574
column: 4
content: usingSafeMathforuint256;

ruleId: SOLIDITY_SAFEMATH
patternId: 837cac
severity: 1
line: 649
column: 4
content: usingSafeMathforuint256;

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 105
column: 4
content: functionrecover(bytes32hash,bytesmemorysignature)internalpurereturns(address){if(signature.length!=65){revert("ECDSA: invalid signature length");}bytes32r;bytes32s;uint8v;assembly{r:=mload(add(signature,0x20))s:=mload(add(signature,0x40))v:=byte(0,mload(add(signature,0x60)))}returnrecover(hash,v,r,s);}

ruleId: SOLIDITY_SHOULD_NOT_BE_VIEW
patternId: 189abf
severity: 1
line: 399
column: 4
content: functionisContract(addressaccount)internalviewreturns(bool){uint256size;assembly{size:=extcodesize(account)}returnsize>0;}

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 83hf3l
severity: 1
line: 186
column: 64
content: (bool,uint256)

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 83hf3l
severity: 1
line: 197
column: 64
content: (bool,uint256)

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 83hf3l
severity: 1
line: 207
column: 64
content: (bool,uint256)

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 83hf3l
severity: 1
line: 222
column: 64
content: (bool,uint256)

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 83hf3l
severity: 1
line: 232
column: 64
content: (bool,uint256)

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 83hf3l
severity: 1
line: 1204
column: 67
content: (uint256,uint256,uint256,uint256,bool[]memory)

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 83hf3l
severity: 1
line: 1216
column: 57
content: (uint256,uint256)

ruleId: SOLIDITY_UNCHECKED_CALL
patternId: f39eed
severity: 3
line: 578
column: 8
content: _callOptionalReturn(token,abi.encodeWithSelector(token.transfer.selector,to,value))

ruleId: SOLIDITY_UNCHECKED_CALL
patternId: f39eed
severity: 3
line: 582
column: 8
content: _callOptionalReturn(token,abi.encodeWithSelector(token.transferFrom.selector,from,to,value))

ruleId: SOLIDITY_UNCHECKED_CALL
patternId: f39eed
severity: 3
line: 600
column: 8
content: _callOptionalReturn(token,abi.encodeWithSelector(token.approve.selector,spender,value))

ruleId: SOLIDITY_UNCHECKED_CALL
patternId: f39eed
severity: 3
line: 605
column: 8
content: _callOptionalReturn(token,abi.encodeWithSelector(token.approve.selector,spender,newAllowance))

ruleId: SOLIDITY_UNCHECKED_CALL
patternId: f39eed
severity: 3
line: 610
column: 8
content: _callOptionalReturn(token,abi.encodeWithSelector(token.approve.selector,spender,newAllowance))

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 119
column: 8
content: assembly{r:=mload(add(signature,0x20))s:=mload(add(signature,0x40))v:=byte(0,mload(add(signature,0x60)))}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 426
column: 4
content: functionsendValue(addresspayable

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 426
column: 39
content: recipient,

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 426
column: 50
content: uint256amount)internal{

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 427
column: 8
content: require

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 427
column: 15
content: (address<missing ';'>

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 427
column: 23
content: (this).balance>=

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 427
column: 41
content: amount,"Address: insufficient balance");

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 430
column: 8
content: (bool<missing ')'>success,)=

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 430
column: 27
content: recipient.call{value:

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 430
column: 50
content: amount

SOLIDITY_VISIBILITY :10
SOLIDITY_SAFEMATH :2
SOLIDITY_REVERT_REQUIRE :2
SOLIDITY_LOCKED_MONEY :1
SOLIDITY_EXTRA_GAS_IN_LOOPS :5
SOLIDITY_ADDRESS_HARDCODED :1
SOLIDITY_GAS_LIMIT_IN_LOOPS :5
SOLIDITY_USING_INLINE_ASSEMBLY :1
SOLIDITY_UNCHECKED_CALL :5
SOLIDITY_SHOULD_RETURN_STRUCT :7
SOLIDITY_SHOULD_NOT_BE_VIEW :1
SOLIDITY_SHOULD_NOT_BE_PURE :1
