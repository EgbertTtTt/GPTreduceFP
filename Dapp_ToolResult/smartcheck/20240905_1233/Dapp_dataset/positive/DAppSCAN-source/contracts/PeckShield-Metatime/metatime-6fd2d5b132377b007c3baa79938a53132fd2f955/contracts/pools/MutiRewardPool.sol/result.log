/sb/MutiRewardPool.sol
line 1:16 extraneous input '=' expecting {'~', '^', '>=', '>', '<', '<=', DecimalNumber, StringLiteral}
line 16:0 extraneous input 'abstract' expecting {<EOF>, 'pragma', 'import', 'contract', 'library', 'interface'}
line 17:65 extraneous input 'payable' expecting {',', ')'}
line 39:0 extraneous input 'abstract' expecting {<EOF>, 'pragma', 'import', 'contract', 'library', 'interface'}
line 424:31 mismatched input 'payable' expecting {',', ')'}
line 424:48 no viable alternative at input 'recipient,'
line 424:48 mismatched input ',' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 424:64 mismatched input ')' expecting {';', '='}
line 425:15 mismatched input '(' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 425:23 mismatched input '(' expecting ')'
line 425:29 extraneous input '.' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 425:38 mismatched input '>=' expecting {';', '='}
line 425:47 mismatched input ',' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 428:14 missing ')' at 'success'
line 428:21 mismatched input ',' expecting {';', '='}
line 428:41 extraneous input '{' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 428:48 mismatched input ':' expecting {';', '='}
line 428:57 mismatched input '}' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 428:58 extraneous input '(' expecting {<EOF>, 'pragma', 'import', 'contract', 'library', 'interface'}
line 625:49 no viable alternative at input '(bool))'
line 625:48 no viable alternative at input 'bool)'
line 625:50 mismatched input ',' expecting ';'
line 625:96 extraneous input ')' expecting ';'
line 947:63 extraneous input 'payable' expecting {',', ')'}
line 947:85 mismatched input ',' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 947:110 extraneous input ')' expecting {';', '='}
jar:file:/usr/local/lib/node_modules/@smartdec/smartcheck/jdeploy-bundle/smartcheck-2.0-jar-with-dependencies.jar!/solidity-rules.xmlruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: a91b18
severity: 1
line: 77
column: 8
content: _owner=address(0)

ruleId: SOLIDITY_ERC20_APPROVE
patternId: af782c
severity: 2
line: 1734
column: 4
content: functionapprove(address,uint256)publicoverridereturns(bool){revert("can not allow approve");}

ruleId: SOLIDITY_ERC20_FUNCTIONS_ALWAYS_RETURN_FALSE
patternId: b180ca
severity: 2
line: 1726
column: 4
content: functiontransfer(address,uint256)publicoverridereturns(bool){revert("can not allow transfer");}

ruleId: SOLIDITY_ERC20_FUNCTIONS_ALWAYS_RETURN_FALSE
patternId: b180ca
severity: 2
line: 1734
column: 4
content: functionapprove(address,uint256)publicoverridereturns(bool){revert("can not allow approve");}

ruleId: SOLIDITY_ERC20_FUNCTIONS_ALWAYS_RETURN_FALSE
patternId: b180ca
severity: 2
line: 1738
column: 4
content: functiontransferFrom(address,address,uint256)publicoverridereturns(bool){revert("can not allow transfer");}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 1653
column: 8
content: for(uint256i=0;i<poolInfo.length;i++){views[i]=getPoolView(i);}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 1706
column: 8
content: for(uinti=0;i<poolInfo.length;++i){totalDeposit=totalDeposit.add(poolInfo[i].totalDeposit.mul(poolInfo[i].allocPoint));}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 47acc2
severity: 1
line: 938
column: 4
content: functionapprove(addresstoken)publiconlyOwnerreturns(uint256){IERC20(token).approve(msg.sender,uint256(-1));}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 47acc2
severity: 1
line: 1726
column: 4
content: functiontransfer(address,uint256)publicoverridereturns(bool){revert("can not allow transfer");}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 47acc2
severity: 1
line: 1734
column: 4
content: functionapprove(address,uint256)publicoverridereturns(bool){revert("can not allow approve");}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 47acc2
severity: 1
line: 1738
column: 4
content: functiontransferFrom(address,address,uint256)publicoverridereturns(bool){revert("can not allow transfer");}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 1316
column: 8
content: for(uint256pid=0;pid<length;++pid){updatePool(pid);}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 1509
column: 8
content: for(uint256pid=0;pid<length;++pid){updatePool(pid);PoolInfostoragepool=poolInfo[pid];if(pool.allocPoint==0){continue;}if(pool.totalDeposit==0){continue;}uint256tokenReward=realAmount.mul(1e12).mul(pool.allocPoint).div(totalAllocPoint);if(isToken0){pool.token0AccRewardsPerShare=pool.token0AccRewardsPerShare.add(tokenReward.div(pool.totalDeposit));pool.token0AccDonateAmount=pool.token0AccDonateAmount.add(tokenReward);}else{pool.token1AccRewardsPerShare=pool.token1AccRewardsPerShare.add(tokenReward.div(pool.totalDeposit));pool.token1AccDonateAmount=pool.token1AccDonateAmount.add(tokenReward);}emitDonate(msgSender(),pid,address(token),tokenReward.div(1e12),tokenReward.div(1e12));}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 1653
column: 8
content: for(uint256i=0;i<poolInfo.length;i++){views[i]=getPoolView(i);}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 1706
column: 8
content: for(uinti=0;i<poolInfo.length;++i){totalDeposit=totalDeposit.add(poolInfo[i].totalDeposit.mul(poolInfo[i].allocPoint));}

ruleId: SOLIDITY_LOCKED_MONEY
patternId: 30281d
severity: 3
line: 943
column: 0
content: contractBasicMetaTransaction{usingSafeMathforuint256;eventMetaTransactionExecuted(addressuserAddress,addresspayable<missing ';'>relayerAddress,bytesfunctionSignature);mapping(address=>uint256)privatenonces;functiongetChainID()publicpurereturns(uint256){uint256id;assembly{id:=chainid()}returnid;}functionexecuteMetaTransaction(addressuserAddress,bytesmemoryfunctionSignature,bytes32sigR,bytes32sigS,uint8sigV)publicpayablereturns(bytesmemory){require(verify(userAddress,nonces[userAddress],getChainID(),functionSignature,sigR,sigS,sigV),"Signer and signature do not match");nonces[userAddress]=nonces[userAddress].add(1);(boolsuccess,bytesmemoryreturnData)=address(this).call(abi.encodePacked(functionSignature,userAddress));require(success,"Function call not successful");emitMetaTransactionExecuted(userAddress,msg.sender,functionSignature);returnreturnData;}functiongetNonce(addressuser)externalviewreturns(uint256nonce){nonce=nonces[user];}functionprefixed(bytes32hash)internalpurereturns(bytes32){returnkeccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32",hash));}functionverify(addressowner,uint256nonce,uint256chainID,bytesmemoryfunctionSignature,bytes32sigR,bytes32sigS,uint8sigV)publicviewreturns(bool){bytes32hash=prefixed(keccak256(abi.encodePacked(nonce,this,chainID,functionSignature)));addresssigner=ecrecover(hash,sigV,sigR,sigS);require(signer!=address(0),"Invalid signature");return(owner==signer);}functionmsgSender()internalviewreturns(addresssender){if(msg.sender==address(this)){bytesmemoryarray=msg.data;uint256index=msg.data.length;assembly{sender:=and(mload(add(array,index)),0xffffffffffffffffffffffffffffffffffffffff)}}else{returnmsg.sender;}}}

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 40
column: 12
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 948
column: 32
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 1022
column: 29
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 1116
column: 34
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 1119
column: 12
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 1122
column: 12
content: private

ruleId: SOLIDITY_SAFEMATH
patternId: 837cac
severity: 1
line: 572
column: 4
content: usingSafeMathforuint256;

ruleId: SOLIDITY_SAFEMATH
patternId: 837cac
severity: 1
line: 945
column: 4
content: usingSafeMathforuint256;

ruleId: SOLIDITY_SAFEMATH
patternId: 837cac
severity: 1
line: 1016
column: 4
content: usingSafeMathforuint256;

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 950
column: 4
content: functiongetChainID()publicpurereturns(uint256){uint256id;assembly{id:=chainid()}returnid;}

ruleId: SOLIDITY_SHOULD_NOT_BE_VIEW
patternId: 189abf
severity: 1
line: 397
column: 4
content: functionisContract(addressaccount)internalviewreturns(bool){uint256size;assembly{size:=extcodesize(account)}returnsize>0;}

ruleId: SOLIDITY_SHOULD_NOT_BE_VIEW
patternId: 189abf
severity: 1
line: 1001
column: 4
content: functionmsgSender()internalviewreturns(addresssender){if(msg.sender==address(this)){bytesmemoryarray=msg.data;uint256index=msg.data.length;assembly{sender:=and(mload(add(array,index)),0xffffffffffffffffffffffffffffffffffffffff)}}else{returnmsg.sender;}}

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 83hf3l
severity: 1
line: 184
column: 64
content: (bool,uint256)

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 83hf3l
severity: 1
line: 195
column: 64
content: (bool,uint256)

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 83hf3l
severity: 1
line: 205
column: 64
content: (bool,uint256)

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 83hf3l
severity: 1
line: 220
column: 64
content: (bool,uint256)

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 83hf3l
severity: 1
line: 230
column: 64
content: (bool,uint256)

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 83hf3l
severity: 1
line: 1578
column: 12
content: (addressdepositToken_,addressrewardToken0_,addressrewardToken1_,uint256token0RewardPerBlock_,uint256token1RewardPerBlock_,uint256token0AdditionalRewardPerBlock_,uint256token1AdditionalRewardPerBlock_,uint256token0AdditionalRewardEndBlock_,uint256token1AdditionalRewardEndBlock_,uint256totalAllocPoint_,uint256startBlock_,uint256bonusEndBlock_)

ruleId: SOLIDITY_UNCHECKED_CALL
patternId: f39eed
severity: 3
line: 576
column: 8
content: _callOptionalReturn(token,abi.encodeWithSelector(token.transfer.selector,to,value))

ruleId: SOLIDITY_UNCHECKED_CALL
patternId: f39eed
severity: 3
line: 580
column: 8
content: _callOptionalReturn(token,abi.encodeWithSelector(token.transferFrom.selector,from,to,value))

ruleId: SOLIDITY_UNCHECKED_CALL
patternId: f39eed
severity: 3
line: 598
column: 8
content: _callOptionalReturn(token,abi.encodeWithSelector(token.approve.selector,spender,value))

ruleId: SOLIDITY_UNCHECKED_CALL
patternId: f39eed
severity: 3
line: 603
column: 8
content: _callOptionalReturn(token,abi.encodeWithSelector(token.approve.selector,spender,newAllowance))

ruleId: SOLIDITY_UNCHECKED_CALL
patternId: f39eed
severity: 3
line: 608
column: 8
content: _callOptionalReturn(token,abi.encodeWithSelector(token.approve.selector,spender,newAllowance))

ruleId: SOLIDITY_UNCHECKED_CALL
patternId: f39eed
severity: 3
line: 976
column: 64
content: call(abi.encodePacked(functionSignature,userAddress))

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 952
column: 8
content: assembly{id:=chainid()}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 1005
column: 12
content: assembly{sender:=and(mload(add(array,index)),0xffffffffffffffffffffffffffffffffffffffff)}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 424
column: 4
content: functionsendValue(addresspayable

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 424
column: 39
content: recipient,

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 424
column: 50
content: uint256amount)internal{

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 425
column: 8
content: require

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 425
column: 15
content: (address<missing ';'>

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 425
column: 23
content: (this).balance>=

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 425
column: 41
content: amount,"Address: insufficient balance");

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 428
column: 8
content: (bool<missing ')'>success,)=

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 428
column: 27
content: recipient.call{value:

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 428
column: 50
content: amount

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 947
column: 71
content: relayerAddress,

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 947
column: 87
content: bytesfunctionSignature);

SOLIDITY_VISIBILITY :12
SOLIDITY_ERC20_FUNCTIONS_ALWAYS_RETURN_FALSE :3
SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN :4
SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA :6
SOLIDITY_EXTRA_GAS_IN_LOOPS :2
SOLIDITY_ADDRESS_HARDCODED :1
SOLIDITY_GAS_LIMIT_IN_LOOPS :4
SOLIDITY_UNCHECKED_CALL :6
SOLIDITY_SHOULD_RETURN_STRUCT :6
SOLIDITY_SHOULD_NOT_BE_PURE :1
SOLIDITY_ERC20_APPROVE :1
SOLIDITY_SAFEMATH :3
SOLIDITY_LOCKED_MONEY :1
SOLIDITY_USING_INLINE_ASSEMBLY :2
SOLIDITY_SHOULD_NOT_BE_VIEW :2
