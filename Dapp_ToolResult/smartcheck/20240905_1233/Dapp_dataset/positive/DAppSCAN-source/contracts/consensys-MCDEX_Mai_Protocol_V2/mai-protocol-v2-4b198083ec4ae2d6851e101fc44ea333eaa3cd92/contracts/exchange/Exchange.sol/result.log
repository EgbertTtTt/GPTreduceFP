/sb/Exchange.sol
line 662:33 mismatched input 'payable' expecting {',', ')'}
line 662:44 no viable alternative at input 'guy,'
line 662:44 mismatched input ',' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 662:60 mismatched input ')' expecting {';', '='}
line 776:33 mismatched input 'payable' expecting {',', ')'}
line 776:44 no viable alternative at input 'guy,'
line 776:44 mismatched input ',' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 776:60 mismatched input ')' expecting {';', '='}
jar:file:/usr/local/lib/node_modules/@smartdec/smartcheck/jdeploy-bundle/smartcheck-2.0-jar-with-dependencies.jar!/solidity-rules.xmlruleId: SOLIDITY_DIV_MUL
patternId: 09hhh1
severity: 2
line: 224
column: 15
content: (sub(add(x,m),1)/m)*m

ruleId: SOLIDITY_DIV_MUL
patternId: 09hhh1
severity: 2
line: 305
column: 15
content: (sub(add(x,m),1)/m)*m

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 825
column: 8
content: for(uint256i=0;i<makerOrderParams.length;i++){require(takerOrderParam.trader!=makerOrderParams[i].trader,"self trade");require(takerOrderParam.isInversed()==makerOrderParams[i].isInversed(),"invalid inversed pair");require(takerOrderParam.isSell()!=makerOrderParams[i].isSell(),"invalid side");require(!makerOrderParams[i].isMarketOrder(),"market order cannot be maker");validatePrice(takerOrderParam,makerOrderParams[i]);bytes32makerOrderHash=validateOrderParam(perpetual,makerOrderParams[i]);uint256makerFilledAmount=filled[makerOrderHash];require(amounts[i]<=takerOrderParam.amount.sub(takerFilledAmount),"taker overfilled");require(amounts[i]<=makerOrderParams[i].amount.sub(makerFilledAmount),"maker overfilled");require(amounts[i].mod(tradingLotSize)==0,"invalid trading lot size");uint256opened=fillOrder(perpetual,takerOrderParam,makerOrderParams[i],amounts[i]);takerOpened=takerOpened.add(opened);filled[makerOrderHash]=makerFilledAmount.add(amounts[i]);takerFilledAmount=takerFilledAmount.add(amounts[i]);}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 825
column: 8
content: for(uint256i=0;i<makerOrderParams.length;i++){require(takerOrderParam.trader!=makerOrderParams[i].trader,"self trade");require(takerOrderParam.isInversed()==makerOrderParams[i].isInversed(),"invalid inversed pair");require(takerOrderParam.isSell()!=makerOrderParams[i].isSell(),"invalid side");require(!makerOrderParams[i].isMarketOrder(),"market order cannot be maker");validatePrice(takerOrderParam,makerOrderParams[i]);bytes32makerOrderHash=validateOrderParam(perpetual,makerOrderParams[i]);uint256makerFilledAmount=filled[makerOrderHash];require(amounts[i]<=takerOrderParam.amount.sub(takerFilledAmount),"taker overfilled");require(amounts[i]<=makerOrderParams[i].amount.sub(makerFilledAmount),"maker overfilled");require(amounts[i].mod(tradingLotSize)==0,"invalid trading lot size");uint256opened=fillOrder(perpetual,takerOrderParam,makerOrderParams[i],amounts[i]);takerOpened=takerOpened.add(opened);filled[makerOrderHash]=makerFilledAmount.add(amounts[i]);takerFilledAmount=takerFilledAmount.add(amounts[i]);}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: 17f23a
severity: 1
line: 161
column: 15
content: x<=fixed_1/10

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: 17f23a
severity: 1
line: 165
column: 15
content: x>=10*fixed_1

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: 17f23a
severity: 1
line: 169
column: 15
content: x<fixed_1

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: 17f23a
severity: 1
line: 173
column: 15
content: x>fixed_e

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: 17f23a
severity: 1
line: 205
column: 15
content: true

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 1
column: 16
content: ^

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 6
column: 11
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 7
column: 11
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 229
column: 12
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 230
column: 12
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 321
column: 12
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 323
column: 12
content: private

ruleId: SOLIDITY_REVERT_REQUIRE
patternId: c56b12
severity: 1
line: 375
column: 15
content: if(method==uint8(SignatureMethod.EIP712)){recovered=ecrecover(hash,v,signature.r,signature.s);}else{revert("invalid sign method");}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 462
column: 4
content: functionhashOrder(Ordermemoryorder)internalpurereturns(bytes32result){bytes32orderType=EIP712_ORDER_TYPE;assembly{letstart:=sub(order,32)lettmp:=mload(start)mstore(start,orderType)result:=keccak256(start,224)mstore(start,tmp)}returnresult;}

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 83hf3l
severity: 1
line: 778
column: 69
content: (uint256,uint256)

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 83hf3l
severity: 1
line: 780
column: 87
content: (uint256,uint256)

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 465
column: 8
content: assembly{letstart:=sub(order,32)lettmp:=mload(start)mstore(start,orderType)result:=keccak256(start,224)mstore(start,tmp)}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 662
column: 4
content: functionwithdrawFor(addresspayable

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 776
column: 4
content: functionwithdrawFor(addresspayable

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 662
column: 41
content: guy,

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 662
column: 46
content: uint256amount)external;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 776
column: 41
content: guy,

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 776
column: 46
content: uint256amount)external;

SOLIDITY_VISIBILITY :6
SOLIDITY_PRAGMAS_VERSION :1
SOLIDITY_REVERT_REQUIRE :1
SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA :6
SOLIDITY_EXTRA_GAS_IN_LOOPS :1
SOLIDITY_GAS_LIMIT_IN_LOOPS :6
SOLIDITY_USING_INLINE_ASSEMBLY :1
SOLIDITY_DIV_MUL :2
SOLIDITY_SHOULD_RETURN_STRUCT :2
SOLIDITY_SHOULD_NOT_BE_PURE :1
