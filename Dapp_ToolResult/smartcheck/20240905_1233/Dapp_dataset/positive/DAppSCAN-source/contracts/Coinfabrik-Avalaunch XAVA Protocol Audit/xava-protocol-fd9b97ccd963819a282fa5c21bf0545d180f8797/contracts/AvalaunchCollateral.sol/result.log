/sb/AvalaunchCollateral.sol
line 53:31 mismatched input 'payable' expecting {',', ')'}
line 53:48 no viable alternative at input 'recipient,'
line 53:48 mismatched input ',' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 53:64 mismatched input ')' expecting {';', '='}
line 54:15 mismatched input '(' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 54:23 mismatched input '(' expecting ')'
line 54:29 extraneous input '.' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 54:38 mismatched input '>=' expecting {';', '='}
line 54:47 mismatched input ',' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 57:14 missing ')' at 'success'
line 57:21 mismatched input ',' expecting {';', '='}
line 57:41 extraneous input '{' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 57:48 mismatched input ':' expecting {';', '='}
line 57:57 mismatched input '}' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 57:58 extraneous input '(' expecting {<EOF>, 'pragma', 'import', 'contract', 'library', 'interface'}
line 712:34 no viable alternative at input '.call{'
line 712:34 missing ';' at '{'
line 768:23 extraneous input 'permitSignature' expecting {',', ')'}
line 798:51 missing ';' at '{'
line 825:23 extraneous input 'permitSignature' expecting {',', ')'}
line 848:54 missing ';' at '{'
jar:file:/usr/local/lib/node_modules/@smartdec/smartcheck/jdeploy-bundle/smartcheck-2.0-jar-with-dependencies.jar!/solidity-rules.xmlruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: c67a09
severity: 1
line: 586
column: 41
content: 0x0

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: c67a09
severity: 1
line: 691
column: 38
content: 0x0

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: c67a09
severity: 1
line: 692
column: 34
content: 0x0

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: c67a09
severity: 1
line: 858
column: 38
content: 0x0

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 573
column: 8
content: for(uinti=0;i<_admins.length;i++){admins.push(_admins[i]);isAdmin[_admins[i]]=true;}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: k4o1l4
severity: 1
line: 606
column: 8
content: while(admins[i]!=_adminAddress){if(i==admins.length){revert("Passed admin address does not exist");}i++;}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 573
column: 8
content: for(uinti=0;i<_admins.length;i++){admins.push(_admins[i]);isAdmin[_admins[i]]=true;}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: 17f23a
severity: 1
line: 606
column: 14
content: admins[i]!=_adminAddress

ruleId: SOLIDITY_LOCKED_MONEY
patternId: 30281d
severity: 3
line: 635
column: 0
content: contractAvalaunchCollateralisInitializable{usingSafeMathforuint256;Adminpublicadmin;uint256publictotalFeesCollected;addresspublicmoderator;mapping(address=>bool)publicisSaleApprovedByModerator;mapping(bytes=>bool)publicisSignatureUsed;mapping(address=>mapping(address=>bool))publicsaleAutoBuyers;mapping(address=>uint256)publicuserBalance;stringpublicconstantAUTOBUY_TYPE="AutoBuy(string confirmationMessage,address saleAddress)";bytes32publicconstantAUTOBUY_TYPEHASH=keccak256(abi.encodePacked(AUTOBUY_TYPE));bytes32publicconstantAUTOBUY_MESSAGEHASH=keccak256("Turn AutoBUY ON.");stringpublicconstantBOOST_TYPE="Boost(string confirmationMessage,address saleAddress)";bytes32publicconstantBOOST_TYPEHASH=keccak256(abi.encodePacked(BOOST_TYPE));bytes32publicconstantBOOST_MESSAGEHASH=keccak256("Boost participation.");stringpublicconstantEIP712_DOMAIN="EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)";bytes32publicconstantEIP712_DOMAIN_TYPEHASH=keccak256(abi.encodePacked(EIP712_DOMAIN));bytes32publicDOMAIN_SEPARATOR;eventDepositedCollateral(addressindexedwallet,uint256amountDeposited,uint256timestamp);eventWithdrawnCollateral(addressindexedwallet,uint256amountWithdrawn,uint256timestamp);eventFeeTaken(addressindexedsale,uint256participationAmount,uint256feeAmount,stringaction);eventApprovedSale(addressindexedsale);modifieronlyAdmin{require(admin.isAdmin(msg.sender),"Only admin.");_;}modifieronlyModerator{require(msg.sender==moderator,"Only moderator.");_;}functioninitialize(address_moderator,address_admin,uint256chainId)externalinitializer{require(_moderator!=address(0x0),"Moderator can not be 0x0.");require(_admin!=address(0x0),"Admin can not be 0x0.");moderator=_moderator;admin=Admin(_admin);DOMAIN_SEPARATOR=keccak256(abi.encode(EIP712_DOMAIN_TYPEHASH,keccak256("AvalaunchApp"),keccak256("1"),chainId,address(this)));}functionsafeTransferAVAX(addressto,uint256value)internal{(boolsuccess,)=to.call<missing ';'>{value:value}(newbytes(0));require(success);}functiondepositCollateral()externalpayable{userBalance[msg.sender]=userBalance[msg.sender].add(msg.value);emitDepositedCollateral(msg.sender,msg.value,block.timestamp);}functionwithdrawCollateral(uint256_amount)external{require(userBalance[msg.sender]>=_amount,"Not enough funds.");userBalance[msg.sender]=userBalance[msg.sender].sub(_amount);safeTransferAVAX(msg.sender,_amount);emitWithdrawnCollateral(msg.sender,_amount,block.timestamp);}functionautoParticipate(addresssaleAddress,uint256amountAVAX,uint256amount,uint256amountXavaToBurn,uint256roundId,addressuser,uint256participationFeeAVAX,bytescalldatapermitSignature)externalonlyAdmin{require(isSaleApprovedByModerator[saleAddress],"Sale contract not approved by moderator.");require(!isSignatureUsed[permitSignature],"Signature already used.");isSignatureUsed[permitSignature]=true;require(!saleAutoBuyers[saleAddress][user],"User autoBuy already active.");saleAutoBuyers[saleAddress][user]=true;require(verifyAutoBuySignature(user,saleAddress,permitSignature),"AutoBuy signature invalid.");require(amountAVAX.add(participationFeeAVAX)<=userBalance[user],"Not enough collateral.");userBalance[user]=userBalance[user].sub(amountAVAX.add(participationFeeAVAX));totalFeesCollected=totalFeesCollected.add(participationFeeAVAX);safeTransferAVAX(moderator,participationFeeAVAX);emitFeeTaken(saleAddress,amountAVAX,participationFeeAVAX,"autoParticipate");IAvalaunchSale(saleAddress).autoParticipate<missing ';'>{value:amountAVAX}(user,amount,amountXavaToBurn,roundId);}functionboostParticipation(addresssaleAddress,uint256amountAVAX,uint256amount,uint256amountXavaToBurn,uint256roundId,addressuser,uint256boostFeeAVAX,bytescalldatapermitSignature)externalonlyAdmin{require(isSaleApprovedByModerator[saleAddress],"Sale contract not approved by moderator.");require(amountAVAX.add(boostFeeAVAX)<=userBalance[user],"Not enough collateral.");userBalance[user]=userBalance[user].sub(amountAVAX.add(boostFeeAVAX));require(!isSignatureUsed[permitSignature],"Signature already used.");isSignatureUsed[permitSignature]=true;require(verifyBoostSignature(user,saleAddress,permitSignature),"Boost signature invalid.");safeTransferAVAX(moderator,boostFeeAVAX);emitFeeTaken(saleAddress,amountAVAX,boostFeeAVAX,"boostParticipation");IAvalaunchSale(saleAddress).boostParticipation<missing ';'>{value:amountAVAX}(user,amount,amountXavaToBurn,roundId);}functionsetModerator(address_moderator)onlyModeratorexternal{require(_moderator!=address(0x0),"Moderator can not be 0x0");moderator=_moderator;}functionapproveSale(addresssaleAddress)onlyModeratorexternal{isSaleApprovedByModerator[saleAddress]=true;emitApprovedSale(saleAddress);}functionverifyAutoBuySignature(addressuser,addresssaleContract,bytesmemorypermitSignature)publicviewreturns(bool){bytes32hash=keccak256(abi.encodePacked("\x19\x01",DOMAIN_SEPARATOR,keccak256(abi.encode(AUTOBUY_TYPEHASH,AUTOBUY_MESSAGEHASH,saleContract))));returnuser==ECDSA.recover(hash,permitSignature);}functionverifyBoostSignature(addressuser,addresssaleContract,bytesmemorypermitSignature)publicviewreturns(bool){bytes32hash=keccak256(abi.encodePacked("\x19\x01",DOMAIN_SEPARATOR,keccak256(abi.encode(BOOST_TYPEHASH,BOOST_MESSAGEHASH,saleContract))));returnuser==ECDSA.recover(hash,permitSignature);}functiongetTVL()externalviewreturns(uint256){returnaddress(this).balance;}}

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 1
column: 16
content: ^

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 209
column: 9
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 214
column: 9
content: private

ruleId: SOLIDITY_REVERT_REQUIRE
patternId: c56b12
severity: 1
line: 264
column: 8
content: if(signature.length!=65){revert("ECDSA: invalid signature length");}

ruleId: SOLIDITY_REVERT_REQUIRE
patternId: c56b12
severity: 1
line: 607
column: 12
content: if(i==admins.length){revert("Passed admin address does not exist");}

ruleId: SOLIDITY_SAFEMATH
patternId: 837cac
severity: 1
line: 637
column: 4
content: usingSafeMathforuint256;

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 262
column: 4
content: functionrecover(bytes32hash,bytesmemorysignature)internalpurereturns(address){if(signature.length!=65){revert("ECDSA: invalid signature length");}bytes32r;bytes32s;uint8v;assembly{r:=mload(add(signature,0x20))s:=mload(add(signature,0x40))v:=byte(0,mload(add(signature,0x60)))}returnrecover(hash,v,r,s);}

ruleId: SOLIDITY_SHOULD_NOT_BE_VIEW
patternId: 189abf
severity: 1
line: 26
column: 4
content: functionisContract(addressaccount)internalviewreturns(bool){uint256size;assembly{size:=extcodesize(account)}returnsize>0;}

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 83hf3l
severity: 1
line: 343
column: 64
content: (bool,uint256)

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 83hf3l
severity: 1
line: 354
column: 64
content: (bool,uint256)

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 83hf3l
severity: 1
line: 364
column: 64
content: (bool,uint256)

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 83hf3l
severity: 1
line: 379
column: 64
content: (bool,uint256)

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 83hf3l
severity: 1
line: 389
column: 64
content: (bool,uint256)

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 276
column: 8
content: assembly{r:=mload(add(signature,0x20))s:=mload(add(signature,0x40))v:=byte(0,mload(add(signature,0x60)))}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 53
column: 4
content: functionsendValue(addresspayable

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 53
column: 39
content: recipient,

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 53
column: 50
content: uint256amount)internal{

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 54
column: 8
content: require

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 54
column: 15
content: (address<missing ';'>

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 54
column: 23
content: (this).balance>=

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 54
column: 41
content: amount,"Address: insufficient balance");

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 57
column: 8
content: (bool<missing ')'>success,)=

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 57
column: 27
content: recipient.call{value:

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 57
column: 50
content: amount

SOLIDITY_VISIBILITY :10
SOLIDITY_PRAGMAS_VERSION :1
SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA :2
SOLIDITY_EXTRA_GAS_IN_LOOPS :2
SOLIDITY_ADDRESS_HARDCODED :4
SOLIDITY_GAS_LIMIT_IN_LOOPS :2
SOLIDITY_SHOULD_RETURN_STRUCT :5
SOLIDITY_SHOULD_NOT_BE_PURE :1
SOLIDITY_SAFEMATH :1
SOLIDITY_REVERT_REQUIRE :2
SOLIDITY_LOCKED_MONEY :1
SOLIDITY_USING_INLINE_ASSEMBLY :1
SOLIDITY_SHOULD_NOT_BE_VIEW :1
