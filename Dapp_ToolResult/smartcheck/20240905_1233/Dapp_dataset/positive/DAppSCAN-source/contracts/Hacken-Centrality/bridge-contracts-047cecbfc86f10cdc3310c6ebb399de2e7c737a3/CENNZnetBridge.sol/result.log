/sb/CENNZnetBridge.sol
line 15:0 extraneous input 'abstract' expecting {<EOF>, 'pragma', 'import', 'contract', 'library', 'interface'}
line 16:65 extraneous input 'payable' expecting {',', ')'}
line 38:0 extraneous input 'abstract' expecting {<EOF>, 'pragma', 'import', 'contract', 'library', 'interface'}
line 91:0 extraneous input 'struct' expecting {<EOF>, 'pragma', 'import', 'contract', 'library', 'interface'}
line 200:39 no viable alternative at input '.call{'
line 200:39 missing ';' at '{'
jar:file:/usr/local/lib/node_modules/@smartdec/smartcheck/jdeploy-bundle/smartcheck-2.0-jar-with-dependencies.jar!/solidity-rules.xmlruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: a91b18
severity: 1
line: 76
column: 8
content: _owner=address(0)

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 159
column: 8
content: for(uinti;i<_validators.length;i++){if(proof.r[i]!=ommited){require(_validators[i]==ecrecover(digest,proof.v[i],proof.r[i],proof.s[i]),"signature invalid");witnessCount+=1;if(witnessCount>=acceptanceTreshold){break;}}}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 159
column: 8
content: for(uinti;i<_validators.length;i++){if(proof.r[i]!=ommited){require(_validators[i]==ecrecover(digest,proof.v[i],proof.r[i],proof.s[i]),"signature invalid");witnessCount+=1;if(witnessCount>=acceptanceTreshold){break;}}}

ruleId: SOLIDITY_LOCKED_MONEY
patternId: 30281d
severity: 3
line: 107
column: 0
content: contractCENNZnetBridgeisOwnable{mapping(uint=>address[])publicvalidators;uint32publicactiveValidatorSetId;mapping(uint=>bool)publiceventIds;uintpublicverificationFee=1e15;uintpublicthresholdPercent=61;uintpublicproofTTL=3;boolpublicactive=true;eventSetValidators(address[],uintreward,uint32validatorSetId);functionverifyMessage(bytesmemorymessage,CENNZnetEventProofmemoryproof)payableexternal{require(active,"bridge inactive");uint256eventId=proof.eventId;require(!eventIds[eventId],"eventId replayed");require(msg.value>=verificationFee||msg.sender==address(this),"must supply verification fee");uint32validatorSetId=proof.validatorSetId;require(validatorSetId<=activeValidatorSetId,"future validator set");require(activeValidatorSetId-validatorSetId<=proofTTL,"expired proof");address[]memory_validators=validators[validatorSetId];require(_validators.length>0,"invalid validator set");bytes32digest=keccak256(message);uintacceptanceTreshold=(_validators.length*thresholdPercent/100);uintwitnessCount;bytes32ommited;for(uinti;i<_validators.length;i++){if(proof.r[i]!=ommited){require(_validators[i]==ecrecover(digest,proof.v[i],proof.r[i],proof.s[i]),"signature invalid");witnessCount+=1;if(witnessCount>=acceptanceTreshold){break;}}}require(witnessCount>=acceptanceTreshold,"not enough signatures");eventIds[eventId]=true;}functionsetValidators(address[]memorynewValidators,uint32newValidatorSetId,CENNZnetEventProofmemoryproof)externalpayable{require(newValidators.length>0,"empty validator set");require(newValidatorSetId>activeValidatorSetId,"validator set id replayed");bytesmemorymessage=abi.encode(newValidators,newValidatorSetId,proof.validatorSetId,proof.eventId);this.verifyMessage(message,proof);validators[newValidatorSetId]=newValidators;activeValidatorSetId=newValidatorSetId;uintreward=address(this).balance;(boolsent,)=msg.sender.call<missing ';'>{value:reward}("");require(sent,"Failed to send Ether");emitSetValidators(newValidators,reward,newValidatorSetId);}functionforceActiveValidatorSet(address[]memory_validators,uint32validatorSetId)externalonlyOwner{require(_validators.length>0,"empty validator set");require(validatorSetId>=activeValidatorSetId,"set is historic");validators[validatorSetId]=_validators;activeValidatorSetId=validatorSetId;}functionforceHistoricValidatorSet(address[]memory_validators,uint32validatorSetId)externalonlyOwner{require(_validators.length>0,"empty validator set");require(validatorSetId+proofTTL>activeValidatorSetId,"set is inactive");validators[validatorSetId]=_validators;}functionsetProofTTL(uintnewTTL)externalonlyOwner{proofTTL=newTTL;}functionsetVerificationFee(uintnewFee)externalonlyOwner{verificationFee=newFee;}functionsetThreshold(uintnewThresholdPercent)externalonlyOwner{thresholdPercent=newThresholdPercent;}functionsetActive(boolactive_)externalonlyOwner{active=active_;}}

ruleId: SOLIDITY_OVERPOWERED_ROLE
patternId: j83hf7
severity: 2
line: 225
column: 4
content: functionsetProofTTL(uintnewTTL)externalonlyOwner{proofTTL=newTTL;}

ruleId: SOLIDITY_OVERPOWERED_ROLE
patternId: j83hf7
severity: 2
line: 230
column: 4
content: functionsetVerificationFee(uintnewFee)externalonlyOwner{verificationFee=newFee;}

ruleId: SOLIDITY_OVERPOWERED_ROLE
patternId: j83hf7
severity: 2
line: 235
column: 4
content: functionsetThreshold(uintnewThresholdPercent)externalonlyOwner{thresholdPercent=newThresholdPercent;}

ruleId: SOLIDITY_OVERPOWERED_ROLE
patternId: j83hf7
severity: 2
line: 240
column: 4
content: functionsetActive(boolactive_)externalonlyOwner{active=active_;}

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 1
column: 16
content: ^

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 39
column: 12
content: private

SOLIDITY_OVERPOWERED_ROLE :4
SOLIDITY_PRAGMAS_VERSION :1
SOLIDITY_LOCKED_MONEY :1
SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA :1
SOLIDITY_EXTRA_GAS_IN_LOOPS :1
SOLIDITY_ADDRESS_HARDCODED :1
SOLIDITY_GAS_LIMIT_IN_LOOPS :1
