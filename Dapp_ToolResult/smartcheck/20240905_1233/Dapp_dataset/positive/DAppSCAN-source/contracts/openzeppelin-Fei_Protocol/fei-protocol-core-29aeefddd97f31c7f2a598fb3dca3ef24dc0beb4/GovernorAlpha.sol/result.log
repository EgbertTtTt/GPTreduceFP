/sb/GovernorAlpha.sol
line 202:39 missing ';' at '{'
line 332:74 extraneous input 'signature' expecting {',', ')'}
line 332:83 mismatched input ',' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 332:100 mismatched input 'data' expecting {';', '='}
line 332:104 mismatched input ',' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 332:114 mismatched input ')' expecting {';', '='}
line 332:142 mismatched input ';' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 333:75 extraneous input 'signature' expecting {',', ')'}
line 333:84 mismatched input ',' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 333:101 mismatched input 'data' expecting {';', '='}
line 333:105 mismatched input ',' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 333:115 mismatched input ')' expecting {';', '='}
line 334:76 extraneous input 'signature' expecting {',', ')'}
line 334:85 mismatched input ',' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 334:102 mismatched input 'data' expecting {';', '='}
line 334:106 mismatched input ',' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 334:116 mismatched input ')' expecting {';', '='}
line 334:150 extraneous input 'memory' expecting ')'
line 334:157 mismatched input ';' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
jar:file:/usr/local/lib/node_modules/@smartdec/smartcheck/jdeploy-bundle/smartcheck-2.0-jar-with-dependencies.jar!/solidity-rules.xmlruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: a91b18
severity: 1
line: 294
column: 8
content: guardian=address(0)

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 185
column: 8
content: for(uinti=0;i<proposal.targets.length;i++){_queueOrRevert(proposal.targets[i],proposal.values[i],proposal.signatures[i],proposal.calldatas[i],eta);}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 201
column: 8
content: for(uinti=0;i<proposal.targets.length;i++){timelock.executeTransaction<missing ';'>{value:proposal.values[i]}(proposal.targets[i],proposal.values[i],proposal.signatures[i],proposal.calldatas[i],proposal.eta);}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 215
column: 8
content: for(uinti=0;i<proposal.targets.length;i++){timelock.cancelTransaction(proposal.targets[i],proposal.values[i],proposal.signatures[i],proposal.calldatas[i],proposal.eta);}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 185
column: 8
content: for(uinti=0;i<proposal.targets.length;i++){_queueOrRevert(proposal.targets[i],proposal.values[i],proposal.signatures[i],proposal.calldatas[i],eta);}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 201
column: 8
content: for(uinti=0;i<proposal.targets.length;i++){timelock.executeTransaction<missing ';'>{value:proposal.values[i]}(proposal.targets[i],proposal.values[i],proposal.signatures[i],proposal.calldatas[i],proposal.eta);}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 215
column: 8
content: for(uinti=0;i<proposal.targets.length;i++){timelock.cancelTransaction(proposal.targets[i],proposal.values[i],proposal.signatures[i],proposal.calldatas[i],proposal.eta);}

ruleId: SOLIDITY_LOCKED_MONEY
patternId: 30281d
severity: 3
line: 7
column: 0
content: contractGovernorAlpha{stringpublicconstantname="Compound Governor Alpha";functionquorumVotes()publicpurereturns(uint){return1000000e18;}functionproposalThreshold()publicpurereturns(uint){return100000e18;}functionproposalMaxOperations()publicpurereturns(uint){return10;}functionvotingDelay()publicpurereturns(uint){return1;}functionvotingPeriod()publicpurereturns(uint){return17280;}TimelockInterfacepublictimelock;CompInterfacepublictribe;addresspublicguardian;uintpublicproposalCount;structProposal{uintid;addressproposer;uinteta;address[]targets;uint[]values;string[]signatures;bytes[]calldatas;uintstartBlock;uintendBlock;uintforVotes;uintagainstVotes;boolcanceled;boolexecuted;mapping(address=>Receipt)receipts;}structReceipt{boolhasVoted;boolsupport;uint96votes;}enumProposalState{Pending,Active,Canceled,Defeated,Succeeded,Queued,Expired,Executed}mapping(uint=>Proposal)publicproposals;mapping(address=>uint)publiclatestProposalIds;bytes32publicconstantDOMAIN_TYPEHASH=keccak256("EIP712Domain(string name,uint256 chainId,address verifyingContract)");bytes32publicconstantBALLOT_TYPEHASH=keccak256("Ballot(uint256 proposalId,bool support)");eventProposalCreated(uintid,addressproposer,address[]targets,uint[]values,string[]signatures,bytes[]calldatas,uintstartBlock,uintendBlock,stringdescription);eventVoteCast(addressvoter,uintproposalId,boolsupport,uintvotes);eventProposalCanceled(uintid);eventProposalQueued(uintid,uinteta);eventProposalExecuted(uintid);constructor(addresstimelock_,addresstribe_,addressguardian_)public{timelock=TimelockInterface(timelock_);tribe=CompInterface(tribe_);guardian=guardian_;}functionpropose(address[]memorytargets,uint[]memoryvalues,string[]memorysignatures,bytes[]memorycalldatas,stringmemorydescription)publicreturns(uint){require(tribe.getPriorVotes(msg.sender,sub256(block.number,1))>proposalThreshold(),"GovernorAlpha::propose: proposer votes below proposal threshold");require(targets.length==values.length&&targets.length==signatures.length&&targets.length==calldatas.length,"GovernorAlpha::propose: proposal function information arity mismatch");require(targets.length!=0,"GovernorAlpha::propose: must provide actions");require(targets.length<=proposalMaxOperations(),"GovernorAlpha::propose: too many actions");uintlatestProposalId=latestProposalIds[msg.sender];if(latestProposalId!=0){ProposalStateproposersLatestProposalState=state(latestProposalId);require(proposersLatestProposalState!=ProposalState.Active,"GovernorAlpha::propose: one live proposal per proposer, found an already active proposal");require(proposersLatestProposalState!=ProposalState.Pending,"GovernorAlpha::propose: one live proposal per proposer, found an already pending proposal");}uintstartBlock=add256(block.number,votingDelay());uintendBlock=add256(startBlock,votingPeriod());proposalCount++;ProposalmemorynewProposal=Proposal({id:proposalCount,proposer:msg.sender,eta:0,targets:targets,values:values,signatures:signatures,calldatas:calldatas,startBlock:startBlock,endBlock:endBlock,forVotes:0,againstVotes:0,canceled:false,executed:false});proposals[newProposal.id]=newProposal;latestProposalIds[newProposal.proposer]=newProposal.id;emitProposalCreated(newProposal.id,msg.sender,targets,values,signatures,calldatas,startBlock,endBlock,description);returnnewProposal.id;}functionqueue(uintproposalId)public{require(state(proposalId)==ProposalState.Succeeded,"GovernorAlpha::queue: proposal can only be queued if it is succeeded");Proposalstorageproposal=proposals[proposalId];uinteta=add256(block.timestamp,timelock.delay());for(uinti=0;i<proposal.targets.length;i++){_queueOrRevert(proposal.targets[i],proposal.values[i],proposal.signatures[i],proposal.calldatas[i],eta);}proposal.eta=eta;emitProposalQueued(proposalId,eta);}function_queueOrRevert(addresstarget,uintvalue,stringmemorysignature,bytesmemorydata,uinteta)internal{require(!timelock.queuedTransactions(keccak256(abi.encode(target,value,signature,data,eta))),"GovernorAlpha::_queueOrRevert: proposal action already queued at eta");timelock.queueTransaction(target,value,signature,data,eta);}functionexecute(uintproposalId)publicpayable{require(state(proposalId)==ProposalState.Queued,"GovernorAlpha::execute: proposal can only be executed if it is queued");Proposalstorageproposal=proposals[proposalId];proposal.executed=true;for(uinti=0;i<proposal.targets.length;i++){timelock.executeTransaction<missing ';'>{value:proposal.values[i]}(proposal.targets[i],proposal.values[i],proposal.signatures[i],proposal.calldatas[i],proposal.eta);}emitProposalExecuted(proposalId);}functioncancel(uintproposalId)public{ProposalStatestate=state(proposalId);require(state!=ProposalState.Executed,"GovernorAlpha::cancel: cannot cancel executed proposal");Proposalstorageproposal=proposals[proposalId];require(msg.sender==guardian||tribe.getPriorVotes(proposal.proposer,sub256(block.number,1))<proposalThreshold(),"GovernorAlpha::cancel: proposer above threshold");proposal.canceled=true;for(uinti=0;i<proposal.targets.length;i++){timelock.cancelTransaction(proposal.targets[i],proposal.values[i],proposal.signatures[i],proposal.calldatas[i],proposal.eta);}emitProposalCanceled(proposalId);}functiongetActions(uintproposalId)publicviewreturns(address[]memorytargets,uint[]memoryvalues,string[]memorysignatures,bytes[]memorycalldatas){Proposalstoragep=proposals[proposalId];return(p.targets,p.values,p.signatures,p.calldatas);}functiongetReceipt(uintproposalId,addressvoter)publicviewreturns(Receiptmemory){returnproposals[proposalId].receipts[voter];}functionstate(uintproposalId)publicviewreturns(ProposalState){require(proposalCount>=proposalId&&proposalId>0,"GovernorAlpha::state: invalid proposal id");Proposalstorageproposal=proposals[proposalId];if(proposal.canceled){returnProposalState.Canceled;}elseif(block.number<=proposal.startBlock){returnProposalState.Pending;}elseif(block.number<=proposal.endBlock){returnProposalState.Active;}elseif(proposal.forVotes<=proposal.againstVotes||proposal.forVotes<quorumVotes()){returnProposalState.Defeated;}elseif(proposal.eta==0){returnProposalState.Succeeded;}elseif(proposal.executed){returnProposalState.Executed;}elseif(block.timestamp>=add256(proposal.eta,timelock.GRACE_PERIOD())){returnProposalState.Expired;}else{returnProposalState.Queued;}}functioncastVote(uintproposalId,boolsupport)public{return_castVote(msg.sender,proposalId,support);}functioncastVoteBySig(uintproposalId,boolsupport,uint8v,bytes32r,bytes32s)public{bytes32domainSeparator=keccak256(abi.encode(DOMAIN_TYPEHASH,keccak256(bytes(name)),getChainId(),address(this)));bytes32structHash=keccak256(abi.encode(BALLOT_TYPEHASH,proposalId,support));bytes32digest=keccak256(abi.encodePacked("\x19\x01",domainSeparator,structHash));addresssignatory=ecrecover(digest,v,r,s);require(signatory!=address(0),"GovernorAlpha::castVoteBySig: invalid signature");return_castVote(signatory,proposalId,support);}function_castVote(addressvoter,uintproposalId,boolsupport)internal{require(state(proposalId)==ProposalState.Active,"GovernorAlpha::_castVote: voting is closed");Proposalstorageproposal=proposals[proposalId];Receiptstoragereceipt=proposal.receipts[voter];require(receipt.hasVoted==false,"GovernorAlpha::_castVote: voter already voted");uint96votes=tribe.getPriorVotes(voter,proposal.startBlock);if(support){proposal.forVotes=add256(proposal.forVotes,votes);}else{proposal.againstVotes=add256(proposal.againstVotes,votes);}receipt.hasVoted=true;receipt.support=support;receipt.votes=votes;emitVoteCast(voter,proposalId,support,votes);}function__acceptAdmin()public{require(msg.sender==guardian,"GovernorAlpha::__acceptAdmin: sender must be gov guardian");timelock.acceptAdmin();}function__abdicate()public{require(msg.sender==guardian,"GovernorAlpha::__abdicate: sender must be gov guardian");guardian=address(0);}function__queueSetTimelockPendingAdmin(addressnewPendingAdmin,uinteta)public{require(msg.sender==guardian,"GovernorAlpha::__queueSetTimelockPendingAdmin: sender must be gov guardian");timelock.queueTransaction(address(timelock),0,"setPendingAdmin(address)",abi.encode(newPendingAdmin),eta);}function__executeSetTimelockPendingAdmin(addressnewPendingAdmin,uinteta)public{require(msg.sender==guardian,"GovernorAlpha::__executeSetTimelockPendingAdmin: sender must be gov guardian");timelock.executeTransaction(address(timelock),0,"setPendingAdmin(address)",abi.encode(newPendingAdmin),eta);}functionadd256(uint256a,uint256b)internalpurereturns(uint){uintc=a+b;require(c>=a,"addition overflow");returnc;}functionsub256(uint256a,uint256b)internalpurereturns(uint){require(b<=a,"subtraction underflow");returna-b;}functiongetChainId()internalpurereturns(uint){uintchainId;assembly{chainId:=chainid()}returnchainId;}}

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 1
column: 16
content: ^

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 318
column: 4
content: functiongetChainId()internalpurereturns(uint){uintchainId;assembly{chainId:=chainid()}returnchainId;}

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 83hf3l
severity: 1
line: 222
column: 61
content: (address[]memorytargets,uint[]memoryvalues,string[]memorysignatures,bytes[]memorycalldatas)

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 321
column: 8
content: assembly{chainId:=chainid()}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 332
column: 4
content: functionqueueTransaction(addresstarget,uintvalue,stringcalldata<missing ')'>

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 333
column: 4
content: functioncancelTransaction(addresstarget,uintvalue,stringcalldata<missing ')'>

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 334
column: 4
content: functionexecuteTransaction(addresstarget,uintvalue,stringcalldata<missing ')'>

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 332
column: 74
content: signature,

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 332
column: 85
content: bytescalldata

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 332
column: 100
content: data,

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 332
column: 106
content: uinteta)externalreturns

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 332
column: 133
content: (bytes32);

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 333
column: 75
content: signature,

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 333
column: 86
content: bytescalldata

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 333
column: 101
content: data,

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 333
column: 107
content: uinteta)external;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 334
column: 76
content: signature,

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 334
column: 87
content: bytescalldata

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 334
column: 102
content: data,

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 334
column: 108
content: uinteta)externalpayablereturns

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 334
column: 143
content: (bytesmemory);

SOLIDITY_VISIBILITY :17
SOLIDITY_PRAGMAS_VERSION :1
SOLIDITY_LOCKED_MONEY :1
SOLIDITY_EXTRA_GAS_IN_LOOPS :3
SOLIDITY_ADDRESS_HARDCODED :1
SOLIDITY_GAS_LIMIT_IN_LOOPS :3
SOLIDITY_USING_INLINE_ASSEMBLY :1
SOLIDITY_SHOULD_RETURN_STRUCT :1
SOLIDITY_SHOULD_NOT_BE_PURE :1
