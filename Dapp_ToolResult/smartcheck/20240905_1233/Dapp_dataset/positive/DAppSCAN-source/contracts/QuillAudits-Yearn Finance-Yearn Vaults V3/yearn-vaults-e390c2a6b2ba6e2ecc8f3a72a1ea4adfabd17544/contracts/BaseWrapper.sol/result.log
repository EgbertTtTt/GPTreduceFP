/sb/BaseWrapper.sol
line 340:31 mismatched input 'payable' expecting {',', ')'}
line 340:48 no viable alternative at input 'recipient,'
line 340:48 mismatched input ',' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 340:64 mismatched input ')' expecting {';', '='}
line 341:15 mismatched input '(' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 341:23 mismatched input '(' expecting ')'
line 341:29 extraneous input '.' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 341:38 mismatched input '>=' expecting {';', '='}
line 341:47 mismatched input ',' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 344:14 missing ')' at 'success'
line 344:21 mismatched input ',' expecting {';', '='}
line 344:41 extraneous input '{' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 344:48 mismatched input ':' expecting {';', '='}
line 344:57 mismatched input '}' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 344:58 extraneous input '(' expecting {<EOF>, 'pragma', 'import', 'contract', 'library', 'interface'}
line 532:49 no viable alternative at input '(bool))'
line 532:48 no viable alternative at input 'bool)'
line 532:50 mismatched input ',' expecting ';'
line 532:96 extraneous input ')' expecting ';'
line 586:23 extraneous input 'signature' expecting {',', ')'}
line 692:0 extraneous input 'abstract' expecting {<EOF>, 'pragma', 'import', 'contract', 'library', 'interface'}
line 705:54 no viable alternative at input 'uint256)'
line 708:54 no viable alternative at input 'uint256)'
line 709:55 no viable alternative at input 'uint256)'
line 710:54 no viable alternative at input 'uint256)'
line 712:53 no viable alternative at input 'uint256)'
jar:file:/usr/local/lib/node_modules/@smartdec/smartcheck/jdeploy-bundle/smartcheck-2.0-jar-with-dependencies.jar!/solidity-rules.xmlruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 761
column: 8
content: for(uint256id=0;id<vaults.length;id++){balance=balance.add(vaults[id].balanceOf(account).mul(vaults[id].pricePerShare()).div(10**uint256(vaults[id].decimals())));}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 769
column: 8
content: for(uint256id=0;id<vaults.length;id++){assets=assets.add(vaults[id].totalAssets());}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 823
column: 8
content: for(uint256id=0;id<vaults.length;id++){if(!withdrawFromBest&&vaults[id]==_bestVault){continue;}uint256availableShares=vaults[id].balanceOf(sender);if(sender!=address(this)){availableShares=Math.min(availableShares,vaults[id].allowance(sender,address(this)));}availableShares=Math.min(availableShares,vaults[id].maxAvailableShares());if(availableShares>0){if(sender!=address(this))vaults[id].transferFrom(sender,address(this),availableShares);if(amount!=WITHDRAW_EVERYTHING){uint256estimatedShares=amount.sub(withdrawn).mul(10**uint256(vaults[id].decimals())).div(vaults[id].pricePerShare());uint256shares=Math.min(estimatedShares,availableShares);withdrawn=withdrawn.add(vaults[id].withdraw(shares));}else{withdrawn=withdrawn.add(vaults[id].withdraw());}if(amount<=withdrawn)break;}}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 741
column: 8
content: for(uint256vault_id=0;vault_id<cache_length;vault_id++){vaults[vault_id]=_cachedVaults[vault_id];}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 761
column: 8
content: for(uint256id=0;id<vaults.length;id++){balance=balance.add(vaults[id].balanceOf(account).mul(vaults[id].pricePerShare()).div(10**uint256(vaults[id].decimals())));}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 769
column: 8
content: for(uint256id=0;id<vaults.length;id++){assets=assets.add(vaults[id].totalAssets());}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 823
column: 8
content: for(uint256id=0;id<vaults.length;id++){if(!withdrawFromBest&&vaults[id]==_bestVault){continue;}uint256availableShares=vaults[id].balanceOf(sender);if(sender!=address(this)){availableShares=Math.min(availableShares,vaults[id].allowance(sender,address(this)));}availableShares=Math.min(availableShares,vaults[id].maxAvailableShares());if(availableShares>0){if(sender!=address(this))vaults[id].transferFrom(sender,address(this),availableShares);if(amount!=WITHDRAW_EVERYTHING){uint256estimatedShares=amount.sub(withdrawn).mul(10**uint256(vaults[id].decimals())).div(vaults[id].pricePerShare());uint256shares=Math.min(estimatedShares,availableShares);withdrawn=withdrawn.add(vaults[id].withdraw(shares));}else{withdrawn=withdrawn.add(vaults[id].withdraw());}if(amount<=withdrawn)break;}}

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 1
column: 16
content: ^

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 700
column: 15
content: private

ruleId: SOLIDITY_SAFEMATH
patternId: 837cac
severity: 1
line: 479
column: 4
content: usingSafeMathforuint256;

ruleId: SOLIDITY_SAFEMATH
patternId: 837cac
severity: 1
line: 694
column: 4
content: usingSafeMathforuint256;

ruleId: SOLIDITY_SHOULD_NOT_BE_VIEW
patternId: 189abf
severity: 1
line: 313
column: 4
content: functionisContract(addressaccount)internalviewreturns(bool){uint256size;assembly{size:=extcodesize(account)}returnsize>0;}

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 83hf3l
severity: 1
line: 100
column: 64
content: (bool,uint256)

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 83hf3l
severity: 1
line: 111
column: 64
content: (bool,uint256)

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 83hf3l
severity: 1
line: 121
column: 64
content: (bool,uint256)

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 83hf3l
severity: 1
line: 136
column: 64
content: (bool,uint256)

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 83hf3l
severity: 1
line: 146
column: 64
content: (bool,uint256)

ruleId: SOLIDITY_UNCHECKED_CALL
patternId: f39eed
severity: 3
line: 483
column: 8
content: _callOptionalReturn(token,abi.encodeWithSelector(token.transfer.selector,to,value))

ruleId: SOLIDITY_UNCHECKED_CALL
patternId: f39eed
severity: 3
line: 487
column: 8
content: _callOptionalReturn(token,abi.encodeWithSelector(token.transferFrom.selector,from,to,value))

ruleId: SOLIDITY_UNCHECKED_CALL
patternId: f39eed
severity: 3
line: 505
column: 8
content: _callOptionalReturn(token,abi.encodeWithSelector(token.approve.selector,spender,value))

ruleId: SOLIDITY_UNCHECKED_CALL
patternId: f39eed
severity: 3
line: 510
column: 8
content: _callOptionalReturn(token,abi.encodeWithSelector(token.approve.selector,spender,newAllowance))

ruleId: SOLIDITY_UNCHECKED_CALL
patternId: f39eed
severity: 3
line: 515
column: 8
content: _callOptionalReturn(token,abi.encodeWithSelector(token.approve.selector,spender,newAllowance))

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 340
column: 4
content: functionsendValue(addresspayable

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 340
column: 39
content: recipient,

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 340
column: 50
content: uint256amount)internal{

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 341
column: 8
content: require

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 341
column: 15
content: (address<missing ';'>

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 341
column: 23
content: (this).balance>=

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 341
column: 41
content: amount,"Address: insufficient balance");

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 344
column: 8
content: (bool<missing ')'>success,)=

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 344
column: 27
content: recipient.call{value:

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 344
column: 50
content: amount

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 705
column: 4
content: uint256constantUNLIMITED_APPROVAL=type(uint256).max;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 708
column: 4
content: uint256constantDEPOSIT_EVERYTHING=type(uint256).max;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 709
column: 4
content: uint256constantWITHDRAW_EVERYTHING=type(uint256).max;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 710
column: 4
content: uint256constantMIGRATE_EVERYTHING=type(uint256).max;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 712
column: 4
content: uint256constantUNCAPPED_DEPOSITS=type(uint256).max;

SOLIDITY_VISIBILITY :15
SOLIDITY_SAFEMATH :2
SOLIDITY_PRAGMAS_VERSION :1
SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA :1
SOLIDITY_EXTRA_GAS_IN_LOOPS :3
SOLIDITY_GAS_LIMIT_IN_LOOPS :4
SOLIDITY_UNCHECKED_CALL :5
SOLIDITY_SHOULD_RETURN_STRUCT :5
SOLIDITY_SHOULD_NOT_BE_VIEW :1
