/sb/DistributorGovernance.sol
line 57:0 extraneous input 'abstract' expecting {<EOF>, 'pragma', 'import', 'contract', 'library', 'interface'}
line 165:0 extraneous input 'abstract' expecting {<EOF>, 'pragma', 'import', 'contract', 'library', 'interface'}
line 212:0 extraneous input 'abstract' expecting {<EOF>, 'pragma', 'import', 'contract', 'library', 'interface'}
line 697:0 extraneous input 'abstract' expecting {<EOF>, 'pragma', 'import', 'contract', 'library', 'interface'}
line 857:40 mismatched input '.' expecting ')'
line 857:45 extraneous input ')' expecting {'solidity', 'experimental', 'from', '{', '}', '(', 'for', 'function', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'length', 'balance', 'emit', 'if', 'assembly', '_', 'continue', 'break', 'return', 'revert', 'address', 'byte', 'let', '=:', 'switch', DecimalNumber, Identifier, HexNumber, HexLiteral, StringLiteral}
line 877:29 mismatched input '.' expecting ')'
line 877:34 extraneous input ',' expecting {'solidity', 'experimental', 'from', '{', '}', '(', 'for', 'function', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'length', 'balance', 'emit', 'if', 'assembly', '_', 'continue', 'break', 'return', 'revert', 'address', 'byte', 'let', '=:', 'switch', DecimalNumber, Identifier, HexNumber, HexLiteral, StringLiteral}
line 901:16 extraneous input ')' expecting {'solidity', 'experimental', 'from', '{', '}', '(', 'for', 'function', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'length', 'balance', 'emit', 'if', 'assembly', '_', 'continue', 'break', 'return', 'revert', 'address', 'byte', 'let', '=:', 'switch', DecimalNumber, Identifier, HexNumber, HexLiteral, StringLiteral}
line 907:37 extraneous input '.' expecting {',', ')'}
line 911:32 mismatched input '.' expecting ')'
line 911:37 extraneous input ',' expecting {'solidity', 'experimental', 'from', '{', '}', '(', 'for', 'function', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'length', 'balance', 'emit', 'if', 'assembly', '_', 'continue', 'break', 'return', 'revert', 'address', 'byte', 'let', '=:', 'switch', DecimalNumber, Identifier, HexNumber, HexLiteral, StringLiteral}
line 911:64 extraneous input ')' expecting {'solidity', 'experimental', 'from', '{', '}', '(', 'for', 'function', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'length', 'balance', 'emit', 'if', 'assembly', '_', 'continue', 'break', 'return', 'revert', 'address', 'byte', 'let', '=:', 'switch', DecimalNumber, Identifier, HexNumber, HexLiteral, StringLiteral}
line 954:37 extraneous input '.' expecting {',', ')'}
line 959:32 mismatched input '.' expecting ')'
line 959:37 extraneous input ',' expecting {'solidity', 'experimental', 'from', '{', '}', '(', 'for', 'function', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'length', 'balance', 'emit', 'if', 'assembly', '_', 'continue', 'break', 'return', 'revert', 'address', 'byte', 'let', '=:', 'switch', DecimalNumber, Identifier, HexNumber, HexLiteral, StringLiteral}
line 959:64 extraneous input ')' expecting {'solidity', 'experimental', 'from', '{', '}', '(', 'for', 'function', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'length', 'balance', 'emit', 'if', 'assembly', '_', 'continue', 'break', 'return', 'revert', 'address', 'byte', 'let', '=:', 'switch', DecimalNumber, Identifier, HexNumber, HexLiteral, StringLiteral}
line 1212:40 mismatched input '.' expecting ')'
line 1212:45 extraneous input ')' expecting {'solidity', 'experimental', 'from', '{', '}', '(', 'for', 'function', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'length', 'balance', 'emit', 'if', 'assembly', '_', 'continue', 'break', 'return', 'revert', 'address', 'byte', 'let', '=:', 'switch', DecimalNumber, Identifier, HexNumber, HexLiteral, StringLiteral}
line 1242:45 extraneous input '.' expecting {',', ')'}
line 1287:49 extraneous input 'rewardCollector' expecting {';', '='}
line 1290:46 extraneous input 'blockProducer' expecting {';', '='}
jar:file:/usr/local/lib/node_modules/@smartdec/smartcheck/jdeploy-bundle/smartcheck-2.0-jar-with-dependencies.jar!/solidity-rules.xmlruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 122
column: 45
content: 0xf

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 220
column: 49
content: 0x00

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 1331
column: 8
content: for(uinti;i<_blockProducers.length;i++){blockProducer[_blockProducers[i]]=true;emitBlockProducerAdded(_blockProducers[i]);rewardCollector[_blockProducers[i]]=_collectors[i];emitBlockProducerRewardCollectorChanged(_blockProducers[i],_collectors[i]);}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 1357
column: 8
content: for(uinti;i<producers.length;i++){require(blockProducer[producers[i]]==false,"already block producer");blockProducer[producers[i]]=true;emitBlockProducerAdded(producers[i]);}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 1381
column: 8
content: for(uinti;i<producers.length;i++){require(blockProducer[producers[i]]==true,"not block producer");blockProducer[producers[i]]=false;emitBlockProducerRemoved(producers[i]);}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 1408
column: 8
content: for(uinti;i<producers.length;i++){rewardCollector[producers[i]]=collectors[i];emitBlockProducerRewardCollectorChanged(producers[i],collectors[i]);}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 1331
column: 8
content: for(uinti;i<_blockProducers.length;i++){blockProducer[_blockProducers[i]]=true;emitBlockProducerAdded(_blockProducers[i]);rewardCollector[_blockProducers[i]]=_collectors[i];emitBlockProducerRewardCollectorChanged(_blockProducers[i],_collectors[i]);}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 1357
column: 8
content: for(uinti;i<producers.length;i++){require(blockProducer[producers[i]]==false,"already block producer");blockProducer[producers[i]]=true;emitBlockProducerAdded(producers[i]);}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 1381
column: 8
content: for(uinti;i<producers.length;i++){require(blockProducer[producers[i]]==true,"not block producer");blockProducer[producers[i]]=false;emitBlockProducerRemoved(producers[i]);}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 1408
column: 8
content: for(uinti;i<producers.length;i++){rewardCollector[producers[i]]=collectors[i];emitBlockProducerRewardCollectorChanged(producers[i],collectors[i]);}

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 1
column: 16
content: ^

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 71
column: 12
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 218
column: 33
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 700
column: 49
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 1293
column: 10
content: private

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 774
column: 4
content: functionconcat(bytesmemory_preBytes,bytesmemory_postBytes)internalpurereturns(bytesmemory){bytesmemorytempBytes;assembly{tempBytes:=mload(0x40)letlength:=mload(_preBytes)mstore(tempBytes,length)letmc:=add(tempBytes,0x20)letend:=add(mc,length)for{letcc:=add(_preBytes,0x20)}lt(mc,end){mc:=add(mc,0x20)cc:=add(cc,0x20)}{mstore(mc,mload(cc))}length:=mload(_postBytes)mstore(tempBytes,add(length,mload(tempBytes)))mc:=endend:=add(mc,length)for{letcc:=add(_postBytes,0x20)}lt(mc,end){mc:=add(mc,0x20)cc:=add(cc,0x20)}{mstore(mc,mload(cc))}mstore(0x40,and(add(add(end,iszero(add(length,mload(_preBytes)))),31),not(31)))}returntempBytes;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 989
column: 4
content: functionslice(bytesmemory_bytes,uint256_start,uint256_length)internalpurereturns(bytesmemory){require(_length+31>=_length,"slice_overflow");require(_bytes.length>=_start+_length,"slice_outOfBounds");bytesmemorytempBytes;assembly{switchiszero(_length)case0{tempBytes:=mload(0x40)letlengthmod:=and(_length,31)letmc:=add(add(tempBytes,lengthmod),mul(0x20,iszero(lengthmod)))letend:=add(mc,_length)for{letcc:=add(add(add(_bytes,lengthmod),mul(0x20,iszero(lengthmod))),_start)}lt(mc,end){mc:=add(mc,0x20)cc:=add(cc,0x20)}{mstore(mc,mload(cc))}mstore(tempBytes,_length)mstore(0x40,and(add(mc,31),not(31)))}default{tempBytes:=mload(0x40)mstore(tempBytes,0)mstore(0x40,add(tempBytes,0x20))}}returntempBytes;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 1058
column: 4
content: functiontoAddress(bytesmemory_bytes,uint256_start)internalpurereturns(address){require(_bytes.length>=_start+20,"toAddress_outOfBounds");addresstempAddress;assembly{tempAddress:=div(mload(add(add(_bytes,0x20),_start)),0x1000000000000000000000000)}returntempAddress;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 1069
column: 4
content: functiontoUint8(bytesmemory_bytes,uint256_start)internalpurereturns(uint8){require(_bytes.length>=_start+1,"toUint8_outOfBounds");uint8tempUint;assembly{tempUint:=mload(add(add(_bytes,0x1),_start))}returntempUint;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 1080
column: 4
content: functiontoUint16(bytesmemory_bytes,uint256_start)internalpurereturns(uint16){require(_bytes.length>=_start+2,"toUint16_outOfBounds");uint16tempUint;assembly{tempUint:=mload(add(add(_bytes,0x2),_start))}returntempUint;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 1091
column: 4
content: functiontoUint32(bytesmemory_bytes,uint256_start)internalpurereturns(uint32){require(_bytes.length>=_start+4,"toUint32_outOfBounds");uint32tempUint;assembly{tempUint:=mload(add(add(_bytes,0x4),_start))}returntempUint;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 1102
column: 4
content: functiontoUint64(bytesmemory_bytes,uint256_start)internalpurereturns(uint64){require(_bytes.length>=_start+8,"toUint64_outOfBounds");uint64tempUint;assembly{tempUint:=mload(add(add(_bytes,0x8),_start))}returntempUint;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 1113
column: 4
content: functiontoUint96(bytesmemory_bytes,uint256_start)internalpurereturns(uint96){require(_bytes.length>=_start+12,"toUint96_outOfBounds");uint96tempUint;assembly{tempUint:=mload(add(add(_bytes,0xc),_start))}returntempUint;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 1124
column: 4
content: functiontoUint128(bytesmemory_bytes,uint256_start)internalpurereturns(uint128){require(_bytes.length>=_start+16,"toUint128_outOfBounds");uint128tempUint;assembly{tempUint:=mload(add(add(_bytes,0x10),_start))}returntempUint;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 1135
column: 4
content: functiontoUint256(bytesmemory_bytes,uint256_start)internalpurereturns(uint256){require(_bytes.length>=_start+32,"toUint256_outOfBounds");uint256tempUint;assembly{tempUint:=mload(add(add(_bytes,0x20),_start))}returntempUint;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 1146
column: 4
content: functiontoBytes32(bytesmemory_bytes,uint256_start)internalpurereturns(bytes32){require(_bytes.length>=_start+32,"toBytes32_outOfBounds");bytes32tempBytes32;assembly{tempBytes32:=mload(add(add(_bytes,0x20),_start))}returntempBytes32;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 1157
column: 4
content: functionequal(bytesmemory_preBytes,bytesmemory_postBytes)internalpurereturns(bool){boolsuccess=true;assembly{letlength:=mload(_preBytes)switcheq(length,mload(_postBytes))case1{letcb:=1letmc:=add(_preBytes,0x20)letend:=add(mc,length)for{letcc:=add(_postBytes,0x20)}eq(add(lt(mc,end),cb),2){mc:=add(mc,0x20)cc:=add(cc,0x20)}{ifiszero(eq(mload(mc),mload(cc))){success:=0cb:=0}}}default{success:=0}}returnsuccess;}

ruleId: SOLIDITY_SHOULD_NOT_BE_VIEW
patternId: 189abf
severity: 1
line: 1200
column: 4
content: functionequalStorage(bytesstorage_preBytes,bytesmemory_postBytes)internalviewreturns(bool){boolsuccess=true;assembly{letfslot:=sload(_preBytes.slot)letslength:=div(and(fslot,sub(mul(0x100,iszero(and(fslot,1))),1)),2)letmlength:=mload(_postBytes)switcheq(slength,mlength)case1{ifiszero(iszero(slength)){switchlt(slength,32)case1{fslot:=mul(div(fslot,0x100),0x100)ifiszero(eq(fslot,mload(add(_postBytes,0x20)))){success:=0}}default{letcb:=1mstore(0x0,_preBytes.slot)letsc:=keccak256(0x0,0x20)letmc:=add(_postBytes,0x20)letend:=add(mc,mlength)for{}eq(add(lt(mc,end),cb),2){sc:=add(sc,1)mc:=add(mc,0x20)}{ifiszero(eq(sload(sc),mload(mc))){success:=0cb:=0}}}}}default{success:=0}}returnsuccess;}

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 62
column: 55
content: bytescalldata

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 784
column: 8
content: assembly{tempBytes:=mload(0x40)letlength:=mload(_preBytes)mstore(tempBytes,length)letmc:=add(tempBytes,0x20)letend:=add(mc,length)for{letcc:=add(_preBytes,0x20)}lt(mc,end){mc:=add(mc,0x20)cc:=add(cc,0x20)}{mstore(mc,mload(cc))}length:=mload(_postBytes)mstore(tempBytes,add(length,mload(tempBytes)))mc:=endend:=add(mc,length)for{letcc:=add(_postBytes,0x20)}lt(mc,end){mc:=add(mc,0x20)cc:=add(cc,0x20)}{mstore(mc,mload(cc))}mstore(0x40,and(add(add(end,iszero(add(length,mload(_preBytes)))),31),not(31)))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 853
column: 8
content: assembly{letfslot:=sload(_preBytes.slot)letslength:=div(and(fslot,sub(mul(0x100,iszero(and(fslot,1))),1)),2)letmlength:=mload(_postBytes)letnewlength:=add(slength,mlength)switchadd(lt(slength,32),lt(newlength,32))case2{sstore(_preBytes.slot,add(fslot,add(mul(div(mload(add(_postBytes,0x20)),exp(0x100,sub(32,mlength))),exp(0x100,sub(32,newlength))),mul(mlength,2))))}case1{mstore(0x0,_preBytes.slot)letsc:=add(keccak256(0x0,0x20),div(slength,32))sstore(_preBytes.slot,add(mul(newlength,2),1))letsubmod:=sub(32,slength)letmc:=add(_postBytes,submod)letend:=add(_postBytes,mlength)letmask:=sub(exp(0x100,submod),1)sstore(sc,add(and(fslot,0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00),and(mload(mc),mask)))for{mc:=add(mc,0x20)sc:=add(sc,1)}lt(mc,end){sc:=add(sc,1)mc:=add(mc,0x20)}{sstore(sc,mload(mc))}mask:=exp(0x100,sub(mc,end))sstore(sc,mul(div(mload(mc),mask),mask))}default{mstore(0x0,_preBytes.slot)letsc:=add(keccak256(0x0,0x20),div(slength,32))sstore(_preBytes.slot,add(mul(newlength,2),1))letslengthmod:=mod(slength,32)letmlengthmod:=mod(mlength,32)letsubmod:=sub(32,slengthmod)letmc:=add(_postBytes,submod)letend:=add(_postBytes,mlength)letmask:=sub(exp(0x100,submod),1)sstore(sc,add(sload(sc),and(mload(mc),mask)))for{sc:=add(sc,1)mc:=add(mc,0x20)}lt(mc,end){sc:=add(sc,1)mc:=add(mc,0x20)}{sstore(sc,mload(mc))}mask:=exp(0x100,sub(mc,end))sstore(sc,mul(div(mload(mc),mask),mask))}}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 1003
column: 8
content: assembly{switchiszero(_length)case0{tempBytes:=mload(0x40)letlengthmod:=and(_length,31)letmc:=add(add(tempBytes,lengthmod),mul(0x20,iszero(lengthmod)))letend:=add(mc,_length)for{letcc:=add(add(add(_bytes,lengthmod),mul(0x20,iszero(lengthmod))),_start)}lt(mc,end){mc:=add(mc,0x20)cc:=add(cc,0x20)}{mstore(mc,mload(cc))}mstore(tempBytes,_length)mstore(0x40,and(add(mc,31),not(31)))}default{tempBytes:=mload(0x40)mstore(tempBytes,0)mstore(0x40,add(tempBytes,0x20))}}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 1062
column: 8
content: assembly{tempAddress:=div(mload(add(add(_bytes,0x20),_start)),0x1000000000000000000000000)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 1073
column: 8
content: assembly{tempUint:=mload(add(add(_bytes,0x1),_start))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 1084
column: 8
content: assembly{tempUint:=mload(add(add(_bytes,0x2),_start))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 1095
column: 8
content: assembly{tempUint:=mload(add(add(_bytes,0x4),_start))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 1106
column: 8
content: assembly{tempUint:=mload(add(add(_bytes,0x8),_start))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 1117
column: 8
content: assembly{tempUint:=mload(add(add(_bytes,0xc),_start))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 1128
column: 8
content: assembly{tempUint:=mload(add(add(_bytes,0x10),_start))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 1139
column: 8
content: assembly{tempUint:=mload(add(add(_bytes,0x20),_start))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 1150
column: 8
content: assembly{tempBytes32:=mload(add(add(_bytes,0x20),_start))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 1160
column: 8
content: assembly{letlength:=mload(_preBytes)switcheq(length,mload(_postBytes))case1{letcb:=1letmc:=add(_preBytes,0x20)letend:=add(mc,length)for{letcc:=add(_postBytes,0x20)}eq(add(lt(mc,end),cb),2){mc:=add(mc,0x20)cc:=add(cc,0x20)}{ifiszero(eq(mload(mc),mload(cc))){success:=0cb:=0}}}default{success:=0}}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 1210
column: 8
content: assembly{letfslot:=sload(_preBytes.slot)letslength:=div(and(fslot,sub(mul(0x100,iszero(and(fslot,1))),1)),2)letmlength:=mload(_postBytes)switcheq(slength,mlength)case1{ifiszero(iszero(slength)){switchlt(slength,32)case1{fslot:=mul(div(fslot,0x100),0x100)ifiszero(eq(fslot,mload(add(_postBytes,0x20)))){success:=0}}default{letcb:=1mstore(0x0,_preBytes.slot)letsc:=keccak256(0x0,0x20)letmc:=add(_postBytes,0x20)letend:=add(mc,mlength)for{}eq(add(lt(mc,end),cb),2){sc:=add(sc,1)mc:=add(mc,0x20)}{ifiszero(eq(sload(sc),mload(mc))){success:=0cb:=0}}}}}default{success:=0}}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 1322
column: 4
content: constructor(address_admin,address[]memory_blockProducers,address[]memory_collectors){require(_blockProducers.length==_collectors.length,"length mismatch");_setupRole(GOV_ROLE,_admin);_setupRole(DELEGATOR_ROLE,_admin);_setupRole(DEFAULT_ADMIN_ROLE,_admin);for(uinti;i<_blockProducers.length;i++){blockProducer[_blockProducers[i]]=true;emitBlockProducerAdded(_blockProducers[i]);rewardCollector[_blockProducers[i]]=_collectors[i];emitBlockProducerRewardCollectorChanged(_blockProducers[i],_collectors[i]);}}

SOLIDITY_VISIBILITY :1
SOLIDITY_PRAGMAS_VERSION :1
SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA :4
SOLIDITY_EXTRA_GAS_IN_LOOPS :4
SOLIDITY_ADDRESS_HARDCODED :2
SOLIDITY_UPGRADE_TO_050 :1
SOLIDITY_GAS_LIMIT_IN_LOOPS :4
SOLIDITY_USING_INLINE_ASSEMBLY :14
SOLIDITY_SHOULD_NOT_BE_VIEW :1
SOLIDITY_SHOULD_NOT_BE_PURE :12
