WARNING:root:You are using solc version 0.4.26, The latest supported version is 0.4.19
INFO:CryticCompile:Compilation warnings/errors on /sb/GTKT_GoldTickets.sol:
/sb/GTKT_GoldTickets.sol:12:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function owned() {
    ^ (Relevant source part starts here and spans across multiple lines).
/sb/GTKT_GoldTickets.sol:17:34: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (msg.sender != owner) throw; // functions with onlyOwner will throw and exception if not the contract owner
                                 ^---^
/sb/GTKT_GoldTickets.sol:60:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function StandardMintableToken(
    ^ (Relevant source part starts here and spans across multiple lines).
/sb/GTKT_GoldTickets.sol:78:55: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows
                                                      ^---^
/sb/GTKT_GoldTickets.sol:79:40: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (frozenAccount[msg.sender]) throw;                // Check if sender frozen
                                       ^---^
/sb/GTKT_GoldTickets.sol:80:33: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (frozenAccount[_to]) throw;                       // Check if recipient frozen                 
                                ^---^
/sb/GTKT_GoldTickets.sol:107:35: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (frozenAccount[_from]) throw;                        // Check if sender frozen       
                                  ^---^
/sb/GTKT_GoldTickets.sol:108:33: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (frozenAccount[_to]) throw;                          // Check if recipient frozen                 
                                ^---^
/sb/GTKT_GoldTickets.sol:110:55: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (balanceOf[_to] + _value < balanceOf[_to]) throw;    // Check for overflows
                                                      ^---^
/sb/GTKT_GoldTickets.sol:111:52: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (_value > allowance[_from][msg.sender]) throw;       // Check allowance
                                                   ^---^
/sb/GTKT_GoldTickets.sol:130:40: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (frozenAccount[msg.sender]) throw;                 // Check if sender frozen       
                                       ^---^
/sb/GTKT_GoldTickets.sol:140:40: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (frozenAccount[msg.sender]) throw;                // Check if sender frozen       
                                       ^---^
/sb/GTKT_GoldTickets.sol:141:35: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (frozenAccount[_from]) throw;                     // Check if recipient frozen 
                                  ^---^
/sb/GTKT_GoldTickets.sol:144:52: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (_value > allowance[_from][msg.sender]) throw;    // Check allowance
                                                   ^---^
/sb/GTKT_GoldTickets.sol:155:67: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (balanceOf[target] + mintedAmount < balanceOf[target]) throw; // Check for overflows
                                                                  ^---^
/sb/GTKT_GoldTickets.sol:83:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place
        ^-------------------------------^
/sb/GTKT_GoldTickets.sol:91:9: Warning: Invoking events without "emit" prefix is deprecated.
        Approval(msg.sender, _spender, _value);              // Notify of new Approval
        ^------------------------------------^
/sb/GTKT_GoldTickets.sol:115:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(_from, _to, _value);                           // Perform the transfer
        ^--------------------------^
/sb/GTKT_GoldTickets.sol:123:9: Warning: Invoking events without "emit" prefix is deprecated.
        FrozenFunds(target, freeze);                          // notify event
        ^-------------------------^
/sb/GTKT_GoldTickets.sol:135:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(msg.sender,0, _value);	                      // Burn _value tokens
        ^----------------------------^
/sb/GTKT_GoldTickets.sol:148:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(_from, 0, _value);                          // Burn tokens by Transfer to incinerator
        ^------------------------^
/sb/GTKT_GoldTickets.sol:158:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(0, target, mintedAmount);
        ^-------------------------------^
/sb/GTKT_GoldTickets.sol:12:5: Warning: No visibility specified. Defaulting to "public". 
    function owned() {
    ^ (Relevant source part starts here and spans across multiple lines).
/sb/GTKT_GoldTickets.sol:21:5: Warning: No visibility specified. Defaulting to "public". 
    function transferOwnership(address newOwner) onlyOwner { // transfer contract owner to new owner
    ^ (Relevant source part starts here and spans across multiple lines).
/sb/GTKT_GoldTickets.sol:26:27: Warning: No visibility specified. Defaulting to "public". 
contract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }
                          ^----------------------------------------------------------------------------------------^
/sb/GTKT_GoldTickets.sol:60:5: Warning: No visibility specified. Defaulting to "public". 
    function StandardMintableToken(
    ^ (Relevant source part starts here and spans across multiple lines).
/sb/GTKT_GoldTickets.sol:75:5: Warning: No visibility specified. Defaulting to "public". 
    function transfer(address _to, uint256 _value) returns (bool success){
    ^ (Relevant source part starts here and spans across multiple lines).
/sb/GTKT_GoldTickets.sol:88:5: Warning: No visibility specified. Defaulting to "public". 
    function approve(address _spender, uint256 _value)
    ^ (Relevant source part starts here and spans across multiple lines).
/sb/GTKT_GoldTickets.sol:96:5: Warning: No visibility specified. Defaulting to "public". 
    function approveAndCall(address _spender, uint256 _value, bytes _extraData)
    ^ (Relevant source part starts here and spans across multiple lines).
/sb/GTKT_GoldTickets.sol:106:5: Warning: No visibility specified. Defaulting to "public". 
    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
    ^ (Relevant source part starts here and spans across multiple lines).
/sb/GTKT_GoldTickets.sol:121:5: Warning: No visibility specified. Defaulting to "public". 
    function freezeAccount(address target, bool freeze ) onlyOwner {    
    ^ (Relevant source part starts here and spans across multiple lines).
/sb/GTKT_GoldTickets.sol:129:5: Warning: No visibility specified. Defaulting to "public". 
    function burn(uint256 _value) returns (bool success) {
    ^ (Relevant source part starts here and spans across multiple lines).
/sb/GTKT_GoldTickets.sol:139:5: Warning: No visibility specified. Defaulting to "public". 
    function burnFrom(address _from, uint256 _value) onlyOwner returns (bool success) {
    ^ (Relevant source part starts here and spans across multiple lines).
/sb/GTKT_GoldTickets.sol:154:5: Warning: No visibility specified. Defaulting to "public". 
    function mintToken(address target, uint256 mintedAmount) onlyOwner {
    ^ (Relevant source part starts here and spans across multiple lines).

INFO:root:contract /sb/GTKT_GoldTickets.sol:StandardMintableToken:
INFO:symExec:	============ Results ===========
INFO:symExec:	  EVM Code Coverage: 			 73.1%
INFO:symExec:	  Integer Underflow: 			 True
INFO:symExec:	  Integer Overflow: 			 True
INFO:symExec:	  Parity Multisig Bug 2: 		 False
INFO:symExec:	  Callstack Depth Attack Vulnerability:  False
INFO:symExec:	  Transaction-Ordering Dependence (TOD): False
INFO:symExec:	  Timestamp Dependency: 		 False
INFO:symExec:	  Re-Entrancy Vulnerability: 		 False
INFO:symExec:/sb/GTKT_GoldTickets.sol:38:5: Warning: Integer Underflow.
    string public name
/sb/GTKT_GoldTickets.sol:134:9: Warning: Integer Underflow.
        totalSupply -= _value
Integer Underflow occurs if:
    _value = 115792089237316195423570985008687907853269984665640564039457584007913129639935
    totalSupply = 115792089237316195423570985008687907853269984665640564039457584007913129639934
    balanceOf[msg.sender] = 115792089237316195423570985008687907853269984665640564039457584007913129639935
    frozenAccount[msg.sender] = 0
/sb/GTKT_GoldTickets.sol:37:5: Warning: Integer Underflow.
    string public standard = 'Token 0.1'
/sb/GTKT_GoldTickets.sol:146:9: Warning: Integer Underflow.
        totalSupply -= _value
Integer Underflow occurs if:
    _value = 115792089237316195423570985008687907853269984665640564039457584007913129639935
    totalSupply = 115792089237316195423570985008687907853269984665640564039457584007913129639934
    allowance[_from][msg.sender] = 115792089237316195423570985008687907853269984665640564039457584007913129639935
    balanceOf[_from] = 115792089237316195423570985008687907853269984665640564039457584007913129639935
    frozenAccount[_from] = 0
    frozenAccount[msg.sender] = 0
    owner = 0
/sb/GTKT_GoldTickets.sol:39:5: Warning: Integer Underflow.
    string public symbol
INFO:symExec:/sb/GTKT_GoldTickets.sol:96:5: Warning: Integer Overflow.
    function approveAndCall(address _spender, uint256 _value, bytes _extraData)
    ^
Spanning multiple lines.
Integer Overflow occurs if:
    _extraData = 115792089237316195423570985008687907853269984665640564039457584007913129639935
INFO:symExec:	====== Analysis Completed ======
INFO:root:contract /sb/GTKT_GoldTickets.sol:owned:
INFO:symExec:	============ Results ===========
INFO:symExec:	  EVM Code Coverage: 			 99.4%
INFO:symExec:	  Integer Underflow: 			 False
INFO:symExec:	  Integer Overflow: 			 False
INFO:symExec:	  Parity Multisig Bug 2: 		 False
INFO:symExec:	  Callstack Depth Attack Vulnerability:  False
INFO:symExec:	  Transaction-Ordering Dependence (TOD): False
INFO:symExec:	  Timestamp Dependency: 		 False
INFO:symExec:	  Re-Entrancy Vulnerability: 		 False
INFO:symExec:	====== Analysis Completed ======
