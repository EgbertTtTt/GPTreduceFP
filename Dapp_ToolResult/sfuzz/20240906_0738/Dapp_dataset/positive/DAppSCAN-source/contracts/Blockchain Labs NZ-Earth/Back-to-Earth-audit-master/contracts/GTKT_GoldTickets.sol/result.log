Extract contract StandardMintableToken from /sb/GTKT_GoldTickets.sol
Extract contract owned from /sb/GTKT_GoldTickets.sol
Extracted 2 contract(s) from /sb/GTKT_GoldTickets.sol
[0;32m> Created "fuzzMe"[0m
[0;32m> To fuzz contracts:[0m
  chmod +x fuzzMe
  ./fuzzMe
contracts/StandardMintableToken.sol:12:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function owned() {
    ^ (Relevant source part starts here and spans across multiple lines).
contracts/StandardMintableToken.sol:17:34: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (msg.sender != owner) throw; // functions with onlyOwner will throw and exception if not the contract owner
                                 ^---^
contracts/StandardMintableToken.sol:60:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function StandardMintableToken(
    ^ (Relevant source part starts here and spans across multiple lines).
contracts/StandardMintableToken.sol:78:55: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows
                                                      ^---^
contracts/StandardMintableToken.sol:79:40: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (frozenAccount[msg.sender]) throw;                // Check if sender frozen
                                       ^---^
contracts/StandardMintableToken.sol:80:33: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (frozenAccount[_to]) throw;                       // Check if recipient frozen                 
                                ^---^
contracts/StandardMintableToken.sol:107:35: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (frozenAccount[_from]) throw;                        // Check if sender frozen       
                                  ^---^
contracts/StandardMintableToken.sol:108:33: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (frozenAccount[_to]) throw;                          // Check if recipient frozen                 
                                ^---^
contracts/StandardMintableToken.sol:110:55: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (balanceOf[_to] + _value < balanceOf[_to]) throw;    // Check for overflows
                                                      ^---^
contracts/StandardMintableToken.sol:111:52: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (_value > allowance[_from][msg.sender]) throw;       // Check allowance
                                                   ^---^
contracts/StandardMintableToken.sol:130:40: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (frozenAccount[msg.sender]) throw;                 // Check if sender frozen       
                                       ^---^
contracts/StandardMintableToken.sol:140:40: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (frozenAccount[msg.sender]) throw;                // Check if sender frozen       
                                       ^---^
contracts/StandardMintableToken.sol:141:35: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (frozenAccount[_from]) throw;                     // Check if recipient frozen 
                                  ^---^
contracts/StandardMintableToken.sol:144:52: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (_value > allowance[_from][msg.sender]) throw;    // Check allowance
                                                   ^---^
contracts/StandardMintableToken.sol:155:67: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (balanceOf[target] + mintedAmount < balanceOf[target]) throw; // Check for overflows
                                                                  ^---^
contracts/StandardMintableToken.sol:83:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place
        ^-------------------------------^
contracts/StandardMintableToken.sol:91:9: Warning: Invoking events without "emit" prefix is deprecated.
        Approval(msg.sender, _spender, _value);              // Notify of new Approval
        ^------------------------------------^
contracts/StandardMintableToken.sol:115:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(_from, _to, _value);                           // Perform the transfer
        ^--------------------------^
contracts/StandardMintableToken.sol:123:9: Warning: Invoking events without "emit" prefix is deprecated.
        FrozenFunds(target, freeze);                          // notify event
        ^-------------------------^
contracts/StandardMintableToken.sol:135:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(msg.sender,0, _value);	                      // Burn _value tokens
        ^----------------------------^
contracts/StandardMintableToken.sol:148:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(_from, 0, _value);                          // Burn tokens by Transfer to incinerator
        ^------------------------^
contracts/StandardMintableToken.sol:158:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(0, target, mintedAmount);
        ^-------------------------------^
contracts/StandardMintableToken.sol:12:5: Warning: No visibility specified. Defaulting to "public". 
    function owned() {
    ^ (Relevant source part starts here and spans across multiple lines).
contracts/StandardMintableToken.sol:21:5: Warning: No visibility specified. Defaulting to "public". 
    function transferOwnership(address newOwner) onlyOwner { // transfer contract owner to new owner
    ^ (Relevant source part starts here and spans across multiple lines).
contracts/StandardMintableToken.sol:26:27: Warning: No visibility specified. Defaulting to "public". 
contract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }
                          ^----------------------------------------------------------------------------------------^
contracts/StandardMintableToken.sol:60:5: Warning: No visibility specified. Defaulting to "public". 
    function StandardMintableToken(
    ^ (Relevant source part starts here and spans across multiple lines).
contracts/StandardMintableToken.sol:75:5: Warning: No visibility specified. Defaulting to "public". 
    function transfer(address _to, uint256 _value) returns (bool success){
    ^ (Relevant source part starts here and spans across multiple lines).
contracts/StandardMintableToken.sol:88:5: Warning: No visibility specified. Defaulting to "public". 
    function approve(address _spender, uint256 _value)
    ^ (Relevant source part starts here and spans across multiple lines).
contracts/StandardMintableToken.sol:96:5: Warning: No visibility specified. Defaulting to "public". 
    function approveAndCall(address _spender, uint256 _value, bytes _extraData)
    ^ (Relevant source part starts here and spans across multiple lines).
contracts/StandardMintableToken.sol:106:5: Warning: No visibility specified. Defaulting to "public". 
    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
    ^ (Relevant source part starts here and spans across multiple lines).
contracts/StandardMintableToken.sol:121:5: Warning: No visibility specified. Defaulting to "public". 
    function freezeAccount(address target, bool freeze ) onlyOwner {    
    ^ (Relevant source part starts here and spans across multiple lines).
contracts/StandardMintableToken.sol:129:5: Warning: No visibility specified. Defaulting to "public". 
    function burn(uint256 _value) returns (bool success) {
    ^ (Relevant source part starts here and spans across multiple lines).
contracts/StandardMintableToken.sol:139:5: Warning: No visibility specified. Defaulting to "public". 
    function burnFrom(address _from, uint256 _value) onlyOwner returns (bool success) {
    ^ (Relevant source part starts here and spans across multiple lines).
contracts/StandardMintableToken.sol:154:5: Warning: No visibility specified. Defaulting to "public". 
    function mintToken(address target, uint256 mintedAmount) onlyOwner {
    ^ (Relevant source part starts here and spans across multiple lines).
contracts/owned.sol:12:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function owned() {
    ^ (Relevant source part starts here and spans across multiple lines).
contracts/owned.sol:17:34: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (msg.sender != owner) throw; // functions with onlyOwner will throw and exception if not the contract owner
                                 ^---^
contracts/owned.sol:60:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function StandardMintableToken(
    ^ (Relevant source part starts here and spans across multiple lines).
contracts/owned.sol:78:55: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows
                                                      ^---^
contracts/owned.sol:79:40: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (frozenAccount[msg.sender]) throw;                // Check if sender frozen
                                       ^---^
contracts/owned.sol:80:33: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (frozenAccount[_to]) throw;                       // Check if recipient frozen                 
                                ^---^
contracts/owned.sol:107:35: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (frozenAccount[_from]) throw;                        // Check if sender frozen       
                                  ^---^
contracts/owned.sol:108:33: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (frozenAccount[_to]) throw;                          // Check if recipient frozen                 
                                ^---^
contracts/owned.sol:110:55: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (balanceOf[_to] + _value < balanceOf[_to]) throw;    // Check for overflows
                                                      ^---^
contracts/owned.sol:111:52: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (_value > allowance[_from][msg.sender]) throw;       // Check allowance
                                                   ^---^
contracts/owned.sol:130:40: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (frozenAccount[msg.sender]) throw;                 // Check if sender frozen       
                                       ^---^
contracts/owned.sol:140:40: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (frozenAccount[msg.sender]) throw;                // Check if sender frozen       
                                       ^---^
contracts/owned.sol:141:35: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (frozenAccount[_from]) throw;                     // Check if recipient frozen 
                                  ^---^
contracts/owned.sol:144:52: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (_value > allowance[_from][msg.sender]) throw;    // Check allowance
                                                   ^---^
contracts/owned.sol:155:67: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (balanceOf[target] + mintedAmount < balanceOf[target]) throw; // Check for overflows
                                                                  ^---^
contracts/owned.sol:83:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place
        ^-------------------------------^
contracts/owned.sol:91:9: Warning: Invoking events without "emit" prefix is deprecated.
        Approval(msg.sender, _spender, _value);              // Notify of new Approval
        ^------------------------------------^
contracts/owned.sol:115:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(_from, _to, _value);                           // Perform the transfer
        ^--------------------------^
contracts/owned.sol:123:9: Warning: Invoking events without "emit" prefix is deprecated.
        FrozenFunds(target, freeze);                          // notify event
        ^-------------------------^
contracts/owned.sol:135:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(msg.sender,0, _value);	                      // Burn _value tokens
        ^----------------------------^
contracts/owned.sol:148:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(_from, 0, _value);                          // Burn tokens by Transfer to incinerator
        ^------------------------^
contracts/owned.sol:158:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(0, target, mintedAmount);
        ^-------------------------------^
contracts/owned.sol:12:5: Warning: No visibility specified. Defaulting to "public". 
    function owned() {
    ^ (Relevant source part starts here and spans across multiple lines).
contracts/owned.sol:21:5: Warning: No visibility specified. Defaulting to "public". 
    function transferOwnership(address newOwner) onlyOwner { // transfer contract owner to new owner
    ^ (Relevant source part starts here and spans across multiple lines).
contracts/owned.sol:26:27: Warning: No visibility specified. Defaulting to "public". 
contract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }
                          ^----------------------------------------------------------------------------------------^
contracts/owned.sol:60:5: Warning: No visibility specified. Defaulting to "public". 
    function StandardMintableToken(
    ^ (Relevant source part starts here and spans across multiple lines).
contracts/owned.sol:75:5: Warning: No visibility specified. Defaulting to "public". 
    function transfer(address _to, uint256 _value) returns (bool success){
    ^ (Relevant source part starts here and spans across multiple lines).
contracts/owned.sol:88:5: Warning: No visibility specified. Defaulting to "public". 
    function approve(address _spender, uint256 _value)
    ^ (Relevant source part starts here and spans across multiple lines).
contracts/owned.sol:96:5: Warning: No visibility specified. Defaulting to "public". 
    function approveAndCall(address _spender, uint256 _value, bytes _extraData)
    ^ (Relevant source part starts here and spans across multiple lines).
contracts/owned.sol:106:5: Warning: No visibility specified. Defaulting to "public". 
    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
    ^ (Relevant source part starts here and spans across multiple lines).
contracts/owned.sol:121:5: Warning: No visibility specified. Defaulting to "public". 
    function freezeAccount(address target, bool freeze ) onlyOwner {    
    ^ (Relevant source part starts here and spans across multiple lines).
contracts/owned.sol:129:5: Warning: No visibility specified. Defaulting to "public". 
    function burn(uint256 _value) returns (bool success) {
    ^ (Relevant source part starts here and spans across multiple lines).
contracts/owned.sol:139:5: Warning: No visibility specified. Defaulting to "public". 
    function burnFrom(address _from, uint256 _value) onlyOwner returns (bool success) {
    ^ (Relevant source part starts here and spans across multiple lines).
contracts/owned.sol:154:5: Warning: No visibility specified. Defaulting to "public". 
    function mintToken(address target, uint256 mintedAmount) onlyOwner {
    ^ (Relevant source part starts here and spans across multiple lines).
assets/ReentrancyAttacker.sol:8:7: Warning: Return value of low-level calls not used.
      msg.sender.call(bytes4(255));
      ^--------------------------^
assets/ReentrancyAttacker.sol:5:3: Warning: No visibility specified. Defaulting to "public". 
  function() payable {
  ^ (Relevant source part starts here and spans across multiple lines).
assets/NormalAttacker.sol:5:3: Warning: No visibility specified. Defaulting to "public". 
  function() payable {
  ^ (Relevant source part starts here and spans across multiple lines).
>> Fuzz StandardMintableToken
** Write stats: 0.042684
** Write stats: 5.00329
** Write stats: 10.0017
** Write stats: 15.0014
** Write stats: 20.3048
** Write stats: 25.0027
** Write stats: 30.1248
** Write stats: 35.0061
** Write stats: 40.0122
** Write stats: 45.0272
** Write stats: 50.0141
** Write stats: 55.0044
** Write stats: 60.02
** Write stats: 65.782
** Write stats: 70.0035
** Write stats: 75.0094
** Write stats: 80.0053
** Write stats: 85.0045
** Write stats: 90.0021
** Write stats: 95.0099
** Write stats: 100.006
** Write stats: 105.005
** Write stats: 135.015
** Write stats: 140.024
** Write stats: 145.001
** Write stats: 150.007
** Write stats: 160.012
** Write stats: 165.012
** Write stats: 170.012
** Write stats: 175.932
** Write stats: 180.02
** Write stats: 190.024
** Write stats: 195.014
** Write stats: 200.016
** Write stats: 205.002
** Write stats: 210.012
** Write stats: 215.011
** Write stats: 220.018
** Write stats: 225.002
** Write stats: 230.001
** Write stats: 240.028
** Write stats: 245.001
** Write stats: 250.005
** Write stats: 255.072
** Write stats: 260.004
** Write stats: 265.018
** Write stats: 270.004
** Write stats: 280.023
** Write stats: 285.024
** Write stats: 290.527
** Write stats: 295.013
** Write stats: 305.045
** Write stats: 310.018
** Write stats: 315.016
** Write stats: 320.023
** Write stats: 325.027
** Write stats: 330.018
** Write stats: 335.003
** Write stats: 340.037
** Write stats: 345.012
** Write stats: 350.036
** Write stats: 355.025
** Write stats: 360.007
** Write stats: 365.011
** Write stats: 370.003
** Write stats: 375.017
** Write stats: 380.013
** Write stats: 385.011
** Write stats: 390.034
** Write stats: 395.025
** Write stats: 400.035
** Write stats: 405.064
** Write stats: 410.027
** Write stats: 415.001
** Write stats: 420.006
** Write stats: 425.035
** Write stats: 430.027
** Write stats: 435.024
** Write stats: 440.004
** Write stats: 445.01
** Write stats: 450.011
** Write stats: 455.015
** Write stats: 460.035
** Write stats: 465.003
** Write stats: 470.029
** Write stats: 475.471
** Write stats: 480.025
** Write stats: 485.008
** Write stats: 490.003
** Write stats: 495.027
** Write stats: 500.014
** Write stats: 505.005
** Write stats: 510.031
** Write stats: 515.029
** Write stats: 520.022
** Write stats: 525.005
** Write stats: 530.94
** Write stats: 535
** Write stats: 540.026
** Write stats: 545.009
** Write stats: 550.005
** Write stats: 555.034
** Write stats: 560.058
** Write stats: 565.028
** Write stats: 575.001
** Write stats: 580.004
** Write stats: 585.019
** Write stats: 590.035
** Write stats: 595.022
** Write stats: 600.021
** Write stats: 605.026
** Write stats: 610.048
** Write stats: 615.001
** Write stats: 620.001
** Write stats: 625.005
** Write stats: 630.013
** Write stats: 635.027
** Write stats: 640.024
** Write stats: 645.015
** Write stats: 650.017
** Write stats: 655.002
** Write stats: 660.026
** Write stats: 665.031
** Write stats: 670.005
** Write stats: 675.014
** Write stats: 680.024
** Write stats: 690.006
** Write stats: 695.031
** Write stats: 700.027
** Write stats: 705.006
** Write stats: 710.019
** Write stats: 715.026
** Write stats: 720.018
** Write stats: 725.006
** Write stats: 730.001
** Write stats: 735.029
** Write stats: 740.005
** Write stats: 745.015
** Write stats: 750.025
** Write stats: 755.024
** Write stats: 760.023
** Write stats: 765.028
** Write stats: 770.013
** Write stats: 775.023
** Write stats: 780.005
** Write stats: 785.044
** Write stats: 790.005
** Write stats: 795.002
** Write stats: 800.031
** Write stats: 805.021
** Write stats: 810.121
** Write stats: 815.005
** Write stats: 825.016
** Write stats: 830.053
** Write stats: 835.067
** Write stats: 840.06
** Write stats: 845.052
** Write stats: 850.006
** Write stats: 855.011
** Write stats: 860.033
** Write stats: 865.022
** Write stats: 875.017
** Write stats: 880.013
** Write stats: 885.019
** Write stats: 890.013
** Write stats: 895.02
** Write stats: 898.572
>> Fuzz owned
** Write stats: 0.003047
** Write stats: 5.00018
** Write stats: 10.0001
** Write stats: 15.0002
** Write stats: 20.0004
** Write stats: 25.0001
** Write stats: 30.0004
** Write stats: 35.0001
** Write stats: 40.0001
** Write stats: 45.0001
** Write stats: 50.0002
** Write stats: 55.0001
** Write stats: 60.0009
** Write stats: 65.0001
** Write stats: 70.0002
** Write stats: 75.0057
** Write stats: 80.0226
** Write stats: 85.0209
** Write stats: 90.0002
** Write stats: 95.0168
** Write stats: 100
** Write stats: 105.001
** Write stats: 110
** Write stats: 115.088
** Write stats: 120.001
** Write stats: 125.129
** Write stats: 130.012
** Write stats: 135
** Write stats: 140
** Write stats: 145
** Write stats: 150
** Write stats: 155.026
** Write stats: 160.004
** Write stats: 165
** Write stats: 170.017
** Write stats: 175
** Write stats: 180
** Write stats: 185.003
** Write stats: 190
** Write stats: 195
** Write stats: 200
** Write stats: 205.016
** Write stats: 210
** Write stats: 215
** Write stats: 220.025
** Write stats: 225
** Write stats: 235.012
** Write stats: 240
** Write stats: 245.027
** Write stats: 250
** Write stats: 255
** Write stats: 260
** Write stats: 265.023
** Write stats: 270.009
** Write stats: 275
** Write stats: 280.029
** Write stats: 285.001
** Write stats: 290.044
** Write stats: 295
** Write stats: 300
** Write stats: 305
** Write stats: 310.002
./fuzzMe: line 7:    24 Killed                  ./fuzzer --file contracts/owned.sol.json --name owned --assets assets/ --duration 898 --mode 1 --reporter 1 --log 0 --attacker ReentrancyAttacker
