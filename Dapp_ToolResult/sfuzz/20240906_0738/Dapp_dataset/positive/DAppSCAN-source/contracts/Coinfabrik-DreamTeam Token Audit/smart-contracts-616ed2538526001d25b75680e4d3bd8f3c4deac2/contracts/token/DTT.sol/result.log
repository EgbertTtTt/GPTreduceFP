Extract contract DTT from /sb/DTT.sol
Extracted 1 contract(s) from /sb/DTT.sol
[0;32m> Created "fuzzMe"[0m
[0;32m> To fuzz contracts:[0m
  chmod +x fuzzMe
  ./fuzzMe
contracts/DTT.sol:35:45: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
    bytes32 public sigDestinationTransfer = keccak256(
                                            ^ (Relevant source part starts here and spans across multiple lines).
contracts/DTT.sol:44:49: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
    bytes32 public sigDestinationTransferFrom = keccak256(
                                                ^ (Relevant source part starts here and spans across multiple lines).
contracts/DTT.sol:54:44: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
    bytes32 public sigDestinationApprove = keccak256(
                                           ^ (Relevant source part starts here and spans across multiple lines).
contracts/DTT.sol:63:51: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
    bytes32 public sigDestinationApproveAndCall = keccak256( // `approveAndCallViaSignature`
                                                  ^ (Relevant source part starts here and spans across multiple lines).
contracts/DTT.sol:136:21: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
                    keccak256(
                    ^ (Relevant source part starts here and spans across multiple lines).
contracts/DTT.sol:151:37: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
                signer == ecrecover(keccak256(ethSignedMessagePrefix, "32", data), v, r, s) // Geth-adopted
                                    ^-------------------------------------------^
contracts/DTT.sol:153:37: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
                signer == ecrecover(keccak256(ethSignedMessagePrefix, "\x20", data), v, r, s) // Trezor-adopted
                                    ^---------------------------------------------^
contracts/DTT.sol:157:37: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
                signer == ecrecover(keccak256(ethSignedMessagePrefix, "64", hexToString(data)), v, r, s) // Geth
                                    ^--------------------------------------------------------^
contracts/DTT.sol:159:37: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
                signer == ecrecover(keccak256(ethSignedMessagePrefix, "\x40", hexToString(data)), v, r, s) // Trezor
                                    ^----------------------------------------------------------^
contracts/DTT.sol:216:13: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
            keccak256(address(this), from, to, value, fee, deadline, sigId),
            ^-------------------------------------------------------------^
contracts/DTT.sol:262:13: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
            keccak256(address(this), from, spender, value, fee, deadline, sigId),
            ^------------------------------------------------------------------^
contracts/DTT.sol:304:13: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
            keccak256(address(this), signer, from, to, value, fee, deadline, sigId),
            ^---------------------------------------------------------------------^
contracts/DTT.sol:352:13: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
            keccak256(address(this), from, spender, value, extraData, fee, deadline, sigId),
            ^-----------------------------------------------------------------------------^
assets/ReentrancyAttacker.sol:8:7: Warning: Return value of low-level calls not used.
      msg.sender.call(bytes4(255));
      ^--------------------------^
assets/ReentrancyAttacker.sol:5:3: Warning: No visibility specified. Defaulting to "public". 
  function() payable {
  ^ (Relevant source part starts here and spans across multiple lines).
assets/NormalAttacker.sol:5:3: Warning: No visibility specified. Defaulting to "public". 
  function() payable {
  ^ (Relevant source part starts here and spans across multiple lines).
>> Fuzz DTT
** Write stats: 0.143267
** Write stats: 5.02297
** Write stats: 33.943
