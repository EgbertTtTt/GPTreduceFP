METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 59 Code Findings │
└──────────────────┘
                 
    /sb/Pool.sol 
       solidity.performance.non-payable-constructor      
          Consider making costructor payable to save gas.
                                                         
          357┆ constructor (string memory name_, string memory symbol_) public {
          358┆     _name = name_;
          359┆     _symbol = symbol_;
          360┆     _decimals = 18;
          361┆ }
            ⋮┆----------------------------------------
         1864┆ constructor(address dai_, address yDai_, string memory name_,    
  string memory symbol_)                                                        
         1865┆     public
         1866┆     ERC20(name_, symbol_)
         1867┆     Delegable()
         1868┆ {
         1869┆     dai = IERC20(dai_);
         1870┆     yDai = IYDai(yDai_);
         1871┆ 
         1872┆     maturity = toUint128(yDai.maturity());
         1873┆ }
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
          182┆ require(c >= a, "SafeMath: addition overflow");
            ⋮┆----------------------------------------
          197┆ require(b <= a, "SafeMath: subtraction overflow");
            ⋮┆----------------------------------------
          214┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          231┆ require(b > 0, "SafeMath: division by zero");
            ⋮┆----------------------------------------
          248┆ require(b > 0, "SafeMath: modulo by zero");
            ⋮┆----------------------------------------
          511┆ require(sender != address(0), "ERC20: transfer from the zero     
  address");                                                                    
            ⋮┆----------------------------------------
          512┆ require(recipient != address(0), "ERC20: transfer to the zero    
  address");                                                                    
            ⋮┆----------------------------------------
          531┆ require(account != address(0), "ERC20: mint to the zero          
  address");                                                                    
            ⋮┆----------------------------------------
          552┆ require(account != address(0), "ERC20: burn from the zero        
  address");                                                                    
            ⋮┆----------------------------------------
          575┆ require(owner != address(0), "ERC20: approve from the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          576┆ require(spender != address(0), "ERC20: approve to the zero       
  address");                                                                    
            ⋮┆----------------------------------------
         1336┆ require (a > 0, "YieldMath: Too far from maturity");
            ⋮┆----------------------------------------
         1340┆ require (xdx < 0x100000000000000000000000000000000, "YieldMath:  
  Too much Dai in");                                                            
            ⋮┆----------------------------------------
         1346┆ require (sum < 0x100000000000000000000000000000000, "YieldMath:  
  Insufficient yDAI reserves");                                                 
            ⋮┆----------------------------------------
         1349┆ require (result < 0x100000000000000000000000000000000,           
  "YieldMath: Rounding induced error");                                         
            ⋮┆----------------------------------------
         1374┆ require (a > 0, "YieldMath: Too far from maturity");
            ⋮┆----------------------------------------
         1378┆ require (ydy < 0x100000000000000000000000000000000, "YieldMath:  
  Too much yDai in");                                                           
            ⋮┆----------------------------------------
         1384┆ require (sum < 0x100000000000000000000000000000000, "YieldMath:  
  Insufficient Dai reserves");                                                  
            ⋮┆----------------------------------------
         1389┆ require (result < 0x100000000000000000000000000000000,           
  "YieldMath: Rounding induced error");                                         
            ⋮┆----------------------------------------
         1414┆ require (a > 0, "YieldMath: Too far from maturity");
            ⋮┆----------------------------------------
         1418┆ require (xdx < 0x100000000000000000000000000000000, "YieldMath:  
  Too much Dai out");                                                           
            ⋮┆----------------------------------------
         1424┆ require (sum < 0x100000000000000000000000000000000, "YieldMath:  
  Resulting yDai reserves too high");                                           
            ⋮┆----------------------------------------
         1427┆ require (result < 0x100000000000000000000000000000000,           
  "YieldMath: Rounding induced error");                                         
            ⋮┆----------------------------------------
         1451┆ require (a > 0, "YieldMath: Too far from maturity");
            ⋮┆----------------------------------------
         1455┆ require (ydy < 0x100000000000000000000000000000000, "YieldMath:  
  Too much yDai out");                                                          
            ⋮┆----------------------------------------
         1461┆ require (sum < 0x100000000000000000000000000000000, "YieldMath:  
  Resulting Dai reserves too high");                                            
            ⋮┆----------------------------------------
         1466┆ require (result < 0x100000000000000000000000000000000,           
  "YieldMath: Rounding induced error");                                         
            ⋮┆----------------------------------------
         1877┆ require(
         1878┆     now < maturity,
         1879┆     "Pool: Too late"
         1880┆ );
            ⋮┆----------------------------------------
         1889┆ require(c >= a, "Pool: Dai reserves too high");
            ⋮┆----------------------------------------
         1896┆ require(b <= a, "Pool: yDai reserves too low");
            ⋮┆----------------------------------------
         1904┆ require(
         1905┆     x <= 340282366920938463463374607431768211455,
         1906┆     "Pool: Cast overflow"
         1907┆ );
            ⋮┆----------------------------------------
         1913┆ require(
         1914┆     x <=                                                         
  57896044618658097711785492504343953926634992332820282019728792003956564819967,
         1915┆     "Pool: Cast overflow"
         1916┆ );
            ⋮┆----------------------------------------
         1928┆ require(
         1929┆     totalSupply() == 0,
         1930┆     "Pool: Already initialized"
         1931┆ );
            ⋮┆----------------------------------------
         2024┆ require(
         2025┆     sub(yDaiReserves, yDaiOut) >= add(daiReserves, daiIn),
         2026┆     "Pool: yDai reserves too low"
         2027┆ );
            ⋮┆----------------------------------------
         2149┆ require(
         2150┆     sub(yDaiReserves, yDaiOut) >= add(daiReserves, daiIn),
         2151┆     "Pool: yDai reserves too low"
         2152┆ );
            ⋮┆----------------------------------------
       solidity.performance.use-multiple-require                                
          Using multiple require statements is cheaper than using && multiple   
  check combinations.                                                           
          There are more advantages, such as easier to read code and better     
  coverage reports.                                                             
                                                                                
          641┆ require (x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);
            ⋮┆----------------------------------------
          689┆ require (result >= MIN_64x64 && result <= MAX_64x64);
            ⋮┆----------------------------------------
          713┆ require (result >= MIN_64x64 && result <= MAX_64x64);
            ⋮┆----------------------------------------
          726┆ require (result >= MIN_64x64 && result <= MAX_64x64);
            ⋮┆----------------------------------------
          739┆ require (result >= MIN_64x64 && result <= MAX_64x64);
            ⋮┆----------------------------------------
          753┆ require (y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
  &&                                                                            
          754┆   y <= 0x1000000000000000000000000000000000000000000000000);
            ⋮┆----------------------------------------
          814┆ require (result >= MIN_64x64 && result <= MAX_64x64);
            ⋮┆----------------------------------------
          895┆ require (result >= MIN_64x64 && result <= MAX_64x64);
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
          214┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          511┆ require(sender != address(0), "ERC20: transfer from the zero     
  address");                                                                    
            ⋮┆----------------------------------------
          512┆ require(recipient != address(0), "ERC20: transfer to the zero    
  address");                                                                    
            ⋮┆----------------------------------------
          552┆ require(account != address(0), "ERC20: burn from the zero        
  address");                                                                    
            ⋮┆----------------------------------------
          575┆ require(owner != address(0), "ERC20: approve from the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          576┆ require(spender != address(0), "ERC20: approve to the zero       
  address");                                                                    
            ⋮┆----------------------------------------
         1346┆ require (sum < 0x100000000000000000000000000000000, "YieldMath:  
  Insufficient yDAI reserves");                                                 
            ⋮┆----------------------------------------
         1349┆ require (result < 0x100000000000000000000000000000000,           
  "YieldMath: Rounding induced error");                                         
            ⋮┆----------------------------------------
         1384┆ require (sum < 0x100000000000000000000000000000000, "YieldMath:  
  Insufficient Dai reserves");                                                  
            ⋮┆----------------------------------------
         1389┆ require (result < 0x100000000000000000000000000000000,           
  "YieldMath: Rounding induced error");                                         
            ⋮┆----------------------------------------
         1424┆ require (sum < 0x100000000000000000000000000000000, "YieldMath:  
  Resulting yDai reserves too high");                                           
            ⋮┆----------------------------------------
         1427┆ require (result < 0x100000000000000000000000000000000,           
  "YieldMath: Rounding induced error");                                         
            ⋮┆----------------------------------------
         1461┆ require (sum < 0x100000000000000000000000000000000, "YieldMath:  
  Resulting Dai reserves too high");                                            
            ⋮┆----------------------------------------
         1466┆ require (result < 0x100000000000000000000000000000000,           
  "YieldMath: Rounding induced error");                                         

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 59 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
