METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 28 Code Findings │
└──────────────────┘
                       
    /sb/Controller.sol 
       solidity.best-practice.use-ownable2step                                  
          By demanding that the receiver of the owner permissions actively      
  accept via a contract call                                                    
          of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the 
  contract ownership                                                            
          from accidentally being transferred  to an address that cannot handle 
  it.                                                                           
                                                                                
          542┆ contract Orchestrated is Ownable {
            ⋮┆----------------------------------------
       solidity.performance.array-length-outside-loop                           
          Caching the array length outside a loop saves reading it on each      
  iteration, as long as the                                                     
          array's length is not changed during the loop.                        
                                                                                
          760┆ for (uint256 i = 0; i < _seriesIterator.length; i += 1) {
            ⋮┆----------------------------------------
          990┆ for (uint256 i = 0; i < _seriesIterator.length; i += 1) {
            ⋮┆----------------------------------------
       solidity.performance.non-payable-constructor      
          Consider making costructor payable to save gas.
                                                         
          547┆ constructor () public Ownable() {}
            ⋮┆----------------------------------------
          598┆ constructor (
          599┆     address vat_,
          600┆     address pot_,
          601┆     address treasury_
          602┆ ) public {
          603┆     _vat = IVat(vat_);
          604┆     _pot = IPot(pot_);
          605┆     _treasury = ITreasury(treasury_);
          606┆ }
            ⋮┆----------------------------------------
       solidity.performance.state-variable-read-in-a-loop                       
          Replace state variable reads and writes within loops with local       
  variable reads and writes.                                                    
                                                                                
          761┆ if (debtYDai[collateral][_seriesIterator[i]][user] > 0) {
            ⋮┆----------------------------------------
          993┆ delete debtYDai[collateral][maturity][user];
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
          115┆ require(c >= a, "SafeMath: addition overflow");
            ⋮┆----------------------------------------
          130┆ require(b <= a, "SafeMath: subtraction overflow");
            ⋮┆----------------------------------------
          147┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          164┆ require(b > 0, "SafeMath: division by zero");
            ⋮┆----------------------------------------
          181┆ require(b > 0, "SafeMath: modulo by zero");
            ⋮┆----------------------------------------
          508┆ require(owner() == _msgSender(), "Ownable: caller is not the     
  owner");                                                                      
            ⋮┆----------------------------------------
          529┆ require(newOwner != address(0), "Ownable: new owner is the zero  
  address");                                                                    
            ⋮┆----------------------------------------
          610┆ require(live == true, "Controller: Not available during unwind");
            ⋮┆----------------------------------------
          616┆ require(
          617┆     collateral == WETH || collateral == CHAI,
          618┆     "Controller: Unrecognized collateral"
          619┆ );
            ⋮┆----------------------------------------
          625┆ require(
          626┆     containsSeries(maturity),
          627┆     "Controller: Unrecognized series"
          628┆ );
            ⋮┆----------------------------------------
          634┆ require(
          635┆     x <=                                                         
  57896044618658097711785492504343953926634992332820282019728792003956564819967,
          636┆     "Controller: Cast overflow"
          637┆ );
            ⋮┆----------------------------------------
          643┆ require(
          644┆     _treasury.live() == false,
          645┆     "Controller: Treasury is live"
          646┆ );
            ⋮┆----------------------------------------
          682┆ require(
          683┆     !containsSeries(maturity),
          684┆     "Controller: Series already added"
          685┆ );
            ⋮┆----------------------------------------
          820┆ require(
          821┆     aboveDustOrZero(collateral, to),
          822┆     "Controller: Below dust"
          823┆ );
            ⋮┆----------------------------------------
          848┆ require(
          849┆     isCollateralized(collateral, from),
          850┆     "Controller: Too much debt"
          851┆ );
            ⋮┆----------------------------------------
          854┆ require(
          855┆     aboveDustOrZero(collateral, to),
          856┆     "Controller: Below dust"
          857┆ );
            ⋮┆----------------------------------------
          890┆ require(
          891┆     isCollateralized(collateral, from),
          892┆     "Controller: Too much debt"
          893┆ );
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
          147┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          529┆ require(newOwner != address(0), "Ownable: new owner is the zero  
  address");                                                                    
            ⋮┆----------------------------------------
          610┆ require(live == true, "Controller: Not available during unwind");
            ⋮┆----------------------------------------
          616┆ require(
          617┆     collateral == WETH || collateral == CHAI,
          618┆     "Controller: Unrecognized collateral"
          619┆ );

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 28 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
