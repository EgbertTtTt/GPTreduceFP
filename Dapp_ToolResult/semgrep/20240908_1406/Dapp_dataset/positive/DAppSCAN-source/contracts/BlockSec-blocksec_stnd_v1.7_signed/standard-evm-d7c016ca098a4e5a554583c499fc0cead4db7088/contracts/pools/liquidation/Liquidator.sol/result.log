METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 33 Code Findings │
└──────────────────┘
                       
    /sb/Liquidator.sol 
       solidity.best-practice.use-abi-encodecall-instead-of-encodewithselector  
          To guarantee arguments type safety it is recommended to use           
  `abi.encodeCall` instead of                                                   
          `abi.encodeWithSelector`.                                             
                                                                                
          730┆ (bool success, bytes memory data) =                              
  token.call(abi.encodeWithSelector(0x095ea7b3, to, value));                    
            ⋮┆----------------------------------------
          736┆ (bool success, bytes memory data) =                              
  token.call(abi.encodeWithSelector(0xa9059cbb, to, value));                    
            ⋮┆----------------------------------------
          742┆ (bool success, bytes memory data) =                              
  token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));              
            ⋮┆----------------------------------------
       solidity.performance.non-payable-constructor      
          Consider making costructor payable to save gas.
                                                         
          757┆ constructor() {
          758┆   _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());
          759┆ }
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
          131┆ require(set._values.length > index, "EnumerableSet: index out of 
  bounds");                                                                     
            ⋮┆----------------------------------------
          348┆ require(address(this).balance >= amount, "Address: insufficient  
  balance");                                                                    
            ⋮┆----------------------------------------
          352┆ require(success, "Address: unable to send value, recipient may   
  have reverted");                                                              
            ⋮┆----------------------------------------
          409┆ require(address(this).balance >= value, "Address: insufficient   
  balance for call");                                                           
            ⋮┆----------------------------------------
          410┆ require(isContract(target), "Address: call to non-contract");
            ⋮┆----------------------------------------
          434┆ require(isContract(target), "Address: static call to             
  non-contract");                                                               
            ⋮┆----------------------------------------
          458┆ require(isContract(target), "Address: delegate call to           
  non-contract");                                                               
            ⋮┆----------------------------------------
          633┆ require(hasRole(_roles[role].adminRole, _msgSender()),           
  "AccessControl: sender must be an admin to grant");                           
            ⋮┆----------------------------------------
          648┆ require(hasRole(_roles[role].adminRole, _msgSender()),           
  "AccessControl: sender must be an admin to revoke");                          
            ⋮┆----------------------------------------
          668┆ require(account == _msgSender(), "AccessControl: can only        
  renounce roles for self");                                                    
            ⋮┆----------------------------------------
          731┆ require(success && (data.length == 0 || abi.decode(data,         
  (bool))), "AF");                                                              
            ⋮┆----------------------------------------
          737┆ require(success && (data.length == 0 || abi.decode(data,         
  (bool))), "TF");                                                              
            ⋮┆----------------------------------------
          743┆ require(success && (data.length == 0 || abi.decode(data,         
  (bool))), "TFF");                                                             
            ⋮┆----------------------------------------
          748┆ require(success, "ETF");
            ⋮┆----------------------------------------
          762┆ require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), "IA"); //     
  Invalid Access                                                                
            ⋮┆----------------------------------------
          768┆ require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), "IA"); //     
  Invalid Access                                                                
            ⋮┆----------------------------------------
          774┆ require(pair != address(0), "Vault: Liquidating pair not         
  supported");                                                                  
            ⋮┆----------------------------------------
       solidity.performance.use-multiple-require                                
          Using multiple require statements is cheaper than using && multiple   
  check combinations.                                                           
          There are more advantages, such as easier to read code and better     
  coverage reports.                                                             
                                                                                
          731┆ require(success && (data.length == 0 || abi.decode(data,         
  (bool))), "AF");                                                              
            ⋮┆----------------------------------------
          737┆ require(success && (data.length == 0 || abi.decode(data,         
  (bool))), "TF");                                                              
            ⋮┆----------------------------------------
          743┆ require(success && (data.length == 0 || abi.decode(data,         
  (bool))), "TFF");                                                             
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
          131┆ require(set._values.length > index, "EnumerableSet: index out of 
  bounds");                                                                     
            ⋮┆----------------------------------------
          352┆ require(success, "Address: unable to send value, recipient may   
  have reverted");                                                              
            ⋮┆----------------------------------------
          409┆ require(address(this).balance >= value, "Address: insufficient   
  balance for call");                                                           
            ⋮┆----------------------------------------
          434┆ require(isContract(target), "Address: static call to             
  non-contract");                                                               
            ⋮┆----------------------------------------
          458┆ require(isContract(target), "Address: delegate call to           
  non-contract");                                                               
            ⋮┆----------------------------------------
          633┆ require(hasRole(_roles[role].adminRole, _msgSender()),           
  "AccessControl: sender must be an admin to grant");                           
            ⋮┆----------------------------------------
          648┆ require(hasRole(_roles[role].adminRole, _msgSender()),           
  "AccessControl: sender must be an admin to revoke");                          
            ⋮┆----------------------------------------
          668┆ require(account == _msgSender(), "AccessControl: can only        
  renounce roles for self");                                                    
            ⋮┆----------------------------------------
          774┆ require(pair != address(0), "Vault: Liquidating pair not         
  supported");                                                                  

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 33 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
