METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 32 Code Findings │
└──────────────────┘
                         
    /sb/ZeroxWrapper.sol 
       solidity.best-practice.use-abi-encodecall-instead-of-encodewithselector  
          To guarantee arguments type safety it is recommended to use           
  `abi.encodeCall` instead of                                                   
          `abi.encodeWithSelector`.                                             
                                                                                
          186┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.transfer.selector, to, value));                  
            ⋮┆----------------------------------------
          195┆ _callOptionalReturn(
          196┆     token,
          197┆     abi.encodeWithSelector(token.transferFrom.selector, from, to,
  value)                                                                        
          198┆ );
            ⋮┆----------------------------------------
          210┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.approve.selector, spender, 0));                  
            ⋮┆----------------------------------------
          211┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.approve.selector, spender, value));              
            ⋮┆----------------------------------------
          220┆ _callOptionalReturn(
          221┆     token,
          222┆     abi.encodeWithSelector(token.approve.selector, spender,      
  newAllowance)                                                                 
          223┆ );
            ⋮┆----------------------------------------
          235┆ _callOptionalReturn(
          236┆     token,
          237┆     abi.encodeWithSelector(token.approve.selector, spender,      
  newAllowance)                                                                 
          238┆ );
            ⋮┆----------------------------------------
       solidity.performance.non-payable-constructor      
          Consider making costructor payable to save gas.
                                                         
          358┆ constructor() {
          359┆     owner = msg.sender;
          360┆     admin = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9;
          361┆ }
            ⋮┆----------------------------------------
          522┆ constructor() {
          523┆     owner = msg.sender;
          524┆ }
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
           43┆ require(address(this).balance >= amount, "Address: insufficient  
  balance");                                                                    
            ⋮┆----------------------------------------
           47┆ require(success, "Address: unable to send value, recipient may   
  have reverted");                                                              
            ⋮┆----------------------------------------
           77┆ require(address(this).balance >= value, "Address: insufficient   
  balance for call");                                                           
            ⋮┆----------------------------------------
           87┆ require(isContract(target), "Address: call to non-contract");
            ⋮┆----------------------------------------
          113┆ require(c >= a, "SafeMath: addition overflow");
            ⋮┆----------------------------------------
          142┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          249┆ require(abi.decode(returndata, (bool)), "SafeERC20: ERC20        
  operation did not succeed");                                                  
            ⋮┆----------------------------------------
          256┆ require((z = x + y) >= x, "");
            ⋮┆----------------------------------------
          260┆ require((z = x - y) <= x, "");
            ⋮┆----------------------------------------
          264┆ require(y == 0 || (z = x * y) / y == x, "");
            ⋮┆----------------------------------------
          366┆ require(admin == msg.sender, "msg.sender not admin");
            ⋮┆----------------------------------------
          373┆ require(admin == msg.sender, "msg.sender not admin");
            ⋮┆----------------------------------------
          386┆ require(adminVault.owner() == msg.sender, "msg.sender not        
  owner");                                                                      
            ⋮┆----------------------------------------
          391┆ require(adminVault.admin() == msg.sender, "msg.sender not        
  admin");                                                                      
            ⋮┆----------------------------------------
          535┆ require(msg.sender == owner, "Only owner");
            ⋮┆----------------------------------------
          536┆ require(_fee >= MAX_SERVICE_FEE || _fee == 0, "Wrong fee value");
            ⋮┆----------------------------------------
          542┆ require(msg.sender == owner, "Only owner");
            ⋮┆----------------------------------------
          569┆ require(bs.length >= start + 32, "slicing out of range");
            ⋮┆----------------------------------------
       solidity.performance.use-nested-if                                       
          Using nested is cheaper than using && multiple check combinations.    
  There are more                                                                
          advantages, such as easier to read code and better coverage reports.  
                                                                                
          461┆ if (_from != address(0) && _from != address(this) && _token !=   
  ETH_ADDR && _amount != 0) {                                                   
          462┆     IERC20(_token).safeTransferFrom(_from, address(this),        
  _amount);                                                                     
          463┆ }
            ⋮┆----------------------------------------
          477┆ if (_to != address(0) && _to != address(this) && _amount != 0) {
          478┆     if (_token != ETH_ADDR) {
          479┆         IERC20(_token).safeTransfer(_to, _amount);
          480┆     } else {
          481┆         payable(_to).transfer(_amount);
          482┆     }
          483┆ }
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
           47┆ require(success, "Address: unable to send value, recipient may   
  have reverted");                                                              
            ⋮┆----------------------------------------
           77┆ require(address(this).balance >= value, "Address: insufficient   
  balance for call");                                                           
            ⋮┆----------------------------------------
          142┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          249┆ require(abi.decode(returndata, (bool)), "SafeERC20: ERC20        
  operation did not succeed");                                                  

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 32 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
