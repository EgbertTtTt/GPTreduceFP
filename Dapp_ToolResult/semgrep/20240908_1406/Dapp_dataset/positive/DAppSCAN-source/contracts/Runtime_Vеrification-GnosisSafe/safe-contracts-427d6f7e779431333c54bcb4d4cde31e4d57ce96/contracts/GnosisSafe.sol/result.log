METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 75 Code Findings │
└──────────────────┘
                       
    /sb/GnosisSafe.sol 
       solidity.performance.array-length-outside-loop                           
          Caching the array length outside a loop saves reading it on each      
  iteration, as long as the                                                     
          array's length is not changed during the loop.                        
                                                                                
          255┆ for (uint256 i = 0; i < _owners.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.state-variable-read-in-a-loop                       
          Replace state variable reads and writes within loops with local       
  variable reads and writes.                                                    
                                                                                
          186┆ currentModule = modules[currentModule];
            ⋮┆----------------------------------------
          196┆ currentModule = modules[currentModule];
            ⋮┆----------------------------------------
          260┆ require(owners[owner] == address(0), "Duplicate owner address    
  provided");                                                                   
            ⋮┆----------------------------------------
          261┆ owners[currentOwner] = owner;
            ⋮┆----------------------------------------
          385┆ currentOwner = owners[currentOwner];
            ⋮┆----------------------------------------
          736┆ if (msg.sender != currentOwner &&                                
  approvedHashes[currentOwner][dataHash] == 0) {                                
            ⋮┆----------------------------------------
          741┆ approvedHashes[currentOwner][dataHash] = 0;
            ⋮┆----------------------------------------
       solidity.performance.unnecessary-checked-arithmetic-in-loop              
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
                                                                                
          255┆ for (uint256 i = 0; i < _owners.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
            8┆ require(msg.sender == address(this), "Method can only be called  
  from this contract");                                                         
            ⋮┆----------------------------------------
           27┆ require(_masterCopy != address(0), "Invalid master copy address  
  provided");                                                                   
            ⋮┆----------------------------------------
          121┆ require(modules[SENTINEL_MODULES] == address(0), "Modules have   
  already been initialized");                                                   
            ⋮┆----------------------------------------
          125┆ require(executeDelegateCall(to, data, gasleft()), "Could not     
  finish initialization");                                                      
            ⋮┆----------------------------------------
          136┆ require(address(module) != address(0) && address(module) !=      
  SENTINEL_MODULES, "Invalid module address provided");                         
            ⋮┆----------------------------------------
          138┆ require(modules[address(module)] == address(0), "Module has      
  already been added");                                                         
            ⋮┆----------------------------------------
          153┆ require(address(module) != address(0) && address(module) !=      
  SENTINEL_MODULES, "Invalid module address provided");                         
            ⋮┆----------------------------------------
          154┆ require(modules[address(prevModule)] == address(module), "Invalid
  prevModule, module pair provided");                                           
            ⋮┆----------------------------------------
          170┆ require(modules[msg.sender] != address(0), "Method can only be   
  called from an enabled module");                                              
            ⋮┆----------------------------------------
          211┆ require(msg.sender == address(manager), "Method can only be      
  called from manager");                                                        
            ⋮┆----------------------------------------
          220┆ require(address(manager) == address(0), "Manager has already been
  set");                                                                        
            ⋮┆----------------------------------------
          248┆ require(threshold == 0, "Owners have already been setup");
            ⋮┆----------------------------------------
          250┆ require(_threshold <= _owners.length, "Threshold cannot exceed   
  owner count");                                                                
            ⋮┆----------------------------------------
          252┆ require(_threshold >= 1, "Threshold needs to be greater than 0");
            ⋮┆----------------------------------------
          258┆ require(owner != address(0) && owner != SENTINEL_OWNERS, "Invalid
  owner address provided");                                                     
            ⋮┆----------------------------------------
          260┆ require(owners[owner] == address(0), "Duplicate owner address    
  provided");                                                                   
            ⋮┆----------------------------------------
          279┆ require(owner != address(0) && owner != SENTINEL_OWNERS, "Invalid
  owner address provided");                                                     
            ⋮┆----------------------------------------
          281┆ require(owners[owner] == address(0), "Address is already an      
  owner");                                                                      
            ⋮┆----------------------------------------
          303┆ require(ownerCount - 1 >= _threshold, "New owner count needs to  
  be larger than new threshold");                                               
            ⋮┆----------------------------------------
          305┆ require(owner != address(0) && owner != SENTINEL_OWNERS, "Invalid
  owner address provided");                                                     
            ⋮┆----------------------------------------
          306┆ require(owners[prevOwner] == owner, "Invalid prevOwner, owner    
  pair provided");                                                              
            ⋮┆----------------------------------------
          327┆ require(newOwner != address(0) && newOwner != SENTINEL_OWNERS,   
  "Invalid owner address provided");                                            
            ⋮┆----------------------------------------
          329┆ require(owners[newOwner] == address(0), "Address is already an   
  owner");                                                                      
            ⋮┆----------------------------------------
          331┆ require(oldOwner != address(0) && oldOwner != SENTINEL_OWNERS,   
  "Invalid owner address provided");                                            
            ⋮┆----------------------------------------
          332┆ require(owners[prevOwner] == oldOwner, "Invalid prevOwner, owner 
  pair provided");                                                              
            ⋮┆----------------------------------------
          348┆ require(_threshold <= ownerCount, "Threshold cannot exceed owner 
  count");                                                                      
            ⋮┆----------------------------------------
          350┆ require(_threshold >= 1, "Threshold needs to be greater than 0");
            ⋮┆----------------------------------------
          616┆ require(domainSeparator == 0, "Domain Separator already set!");
            ⋮┆----------------------------------------
          655┆ require(checkSignatures(keccak256(txHashData), txHashData,       
  signatures, true), "Invalid signatures provided");                            
            ⋮┆----------------------------------------
          659┆ require(gasleft() >= safeTxGas, "Not enough gas to execute safe  
  transaction");                                                                
            ⋮┆----------------------------------------
          686┆ require(receiver.send(amount), "Could not pay gas costs with     
  ether");                                                                      
            ⋮┆----------------------------------------
          688┆ require(transferToken(gasToken, receiver, amount), "Could not pay
  gas costs with token");                                                       
            ⋮┆----------------------------------------
          787┆ require(owners[msg.sender] != address(0), "Only owners can       
  approve a hash");                                                             
            ⋮┆----------------------------------------
       solidity.performance.use-multiple-require                                
          Using multiple require statements is cheaper than using && multiple   
  check combinations.                                                           
          There are more advantages, such as easier to read code and better     
  coverage reports.                                                             
                                                                                
          136┆ require(address(module) != address(0) && address(module) !=      
  SENTINEL_MODULES, "Invalid module address provided");                         
            ⋮┆----------------------------------------
          153┆ require(address(module) != address(0) && address(module) !=      
  SENTINEL_MODULES, "Invalid module address provided");                         
            ⋮┆----------------------------------------
          258┆ require(owner != address(0) && owner != SENTINEL_OWNERS, "Invalid
  owner address provided");                                                     
            ⋮┆----------------------------------------
          279┆ require(owner != address(0) && owner != SENTINEL_OWNERS, "Invalid
  owner address provided");                                                     
            ⋮┆----------------------------------------
          305┆ require(owner != address(0) && owner != SENTINEL_OWNERS, "Invalid
  owner address provided");                                                     
            ⋮┆----------------------------------------
          327┆ require(newOwner != address(0) && newOwner != SENTINEL_OWNERS,   
  "Invalid owner address provided");                                            
            ⋮┆----------------------------------------
          331┆ require(oldOwner != address(0) && oldOwner != SENTINEL_OWNERS,   
  "Invalid owner address provided");                                            
            ⋮┆----------------------------------------
       solidity.performance.use-nested-if                                       
          Using nested is cheaper than using && multiple check combinations.    
  There are more                                                                
          advantages, such as easier to read code and better coverage reports.  
                                                                                
          736┆ if (msg.sender != currentOwner &&                                
  approvedHashes[currentOwner][dataHash] == 0) {                                
          737┆     return false;
          738┆ }
            ⋮┆----------------------------------------
          740┆ if (consumeHash && msg.sender != currentOwner) {
          741┆     approvedHashes[currentOwner][dataHash] = 0;
          742┆ }
            ⋮┆----------------------------------------
       solidity.performance.use-prefix-decrement-not-postfix                    
          Consider using the prefix decrement expression whenever the return    
  value is not needed. The                                                      
          prefix decrement expression is cheaper in terms of gas.               
                                                                                
          310┆ ownerCount--;
            ⋮┆----------------------------------------
       solidity.performance.use-prefix-increment-not-postfix                    
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
                                                                                
          187┆ moduleCount ++;
            ⋮┆----------------------------------------
          197┆ moduleCount ++;
            ⋮┆----------------------------------------
          255┆ for (uint256 i = 0; i < _owners.length; i++) {
            ⋮┆----------------------------------------
          285┆ ownerCount++;
            ⋮┆----------------------------------------
          386┆ index ++;
            ⋮┆----------------------------------------
          658┆ nonce++;
            ⋮┆----------------------------------------
          716┆ for (i = 0; i < threshold; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
            8┆ require(msg.sender == address(this), "Method can only be called  
  from this contract");                                                         
            ⋮┆----------------------------------------
           27┆ require(_masterCopy != address(0), "Invalid master copy address  
  provided");                                                                   
            ⋮┆----------------------------------------
          121┆ require(modules[SENTINEL_MODULES] == address(0), "Modules have   
  already been initialized");                                                   
            ⋮┆----------------------------------------
          154┆ require(modules[address(prevModule)] == address(module), "Invalid
  prevModule, module pair provided");                                           
            ⋮┆----------------------------------------
          170┆ require(modules[msg.sender] != address(0), "Method can only be   
  called from an enabled module");                                              
            ⋮┆----------------------------------------
          211┆ require(msg.sender == address(manager), "Method can only be      
  called from manager");                                                        
            ⋮┆----------------------------------------
          250┆ require(_threshold <= _owners.length, "Threshold cannot exceed   
  owner count");                                                                
            ⋮┆----------------------------------------
          252┆ require(_threshold >= 1, "Threshold needs to be greater than 0");
            ⋮┆----------------------------------------
          303┆ require(ownerCount - 1 >= _threshold, "New owner count needs to  
  be larger than new threshold");                                               
            ⋮┆----------------------------------------
          306┆ require(owners[prevOwner] == owner, "Invalid prevOwner, owner    
  pair provided");                                                              
            ⋮┆----------------------------------------
          332┆ require(owners[prevOwner] == oldOwner, "Invalid prevOwner, owner 
  pair provided");                                                              
            ⋮┆----------------------------------------
          348┆ require(_threshold <= ownerCount, "Threshold cannot exceed owner 
  count");                                                                      
            ⋮┆----------------------------------------
          350┆ require(_threshold >= 1, "Threshold needs to be greater than 0");
            ⋮┆----------------------------------------
          659┆ require(gasleft() >= safeTxGas, "Not enough gas to execute safe  
  transaction");                                                                
            ⋮┆----------------------------------------
          686┆ require(receiver.send(amount), "Could not pay gas costs with     
  ether");                                                                      
            ⋮┆----------------------------------------
          688┆ require(transferToken(gasToken, receiver, amount), "Could not pay
  gas costs with token");                                                       

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘
Some files were skipped or only partially analyzed.
  Partially scanned: 1 files only partially analyzed due to parsing or internal Semgrep errors

Ran 48 rules on 1 file: 75 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
