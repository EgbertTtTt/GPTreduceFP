METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 75 Code Findings │
└──────────────────┘
                                     
    /sb/strategy-curve-scrv-v3_1.sol 
       solidity.best-practice.use-abi-encodecall-instead-of-encodewithselector  
          To guarantee arguments type safety it is recommended to use           
  `abi.encodeCall` instead of                                                   
          `abi.encodeWithSelector`.                                             
                                                                                
          711┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.transfer.selector, to, value));                  
            ⋮┆----------------------------------------
          715┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.transferFrom.selector, from, to, value));        
            ⋮┆----------------------------------------
          733┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.approve.selector, spender, value));              
            ⋮┆----------------------------------------
          738┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.approve.selector, spender, newAllowance));       
            ⋮┆----------------------------------------
          743┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.approve.selector, spender, newAllowance));       
            ⋮┆----------------------------------------
       solidity.performance.init-variables-with-default-value                   
          Uninitialized variables are assigned with the types default value.    
  Explicitly initializing a                                                     
          variable with its default value costs unnecessary gas.                
                                                                                
         1762┆ uint256 public keepCRV = 0;
            ⋮┆----------------------------------------
       solidity.performance.non-payable-constructor      
          Consider making costructor payable to save gas.
                                                         
          445┆ constructor (string memory name, string memory symbol) public {
          446┆     _name = name;
          447┆     _symbol = symbol;
          448┆     _decimals = 18;
          449┆ }
            ⋮┆----------------------------------------
          946┆ constructor(address _governance) public {
          947┆     governance = _governance;
          948┆ }
            ⋮┆----------------------------------------
         1033┆ constructor(address _governance, address _crvLocker) public {
         1034┆     governance = _governance;
         1035┆     crvLocker = CRVLocker(_crvLocker);
         1036┆ }
            ⋮┆----------------------------------------
         1831┆ constructor(
         1832┆     address _governance,
         1833┆     address _strategist,
         1834┆     address _controller,
         1835┆     address _timelock
         1836┆ )
         1837┆     public
         1838┆     StrategyCurveBase(
         1839┆         susdv2_pool,
         1840┆         susdv2_gauge,
             [hid 7 additional lines, adjust with --max-lines-per-finding] 
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
           31┆ require(c >= a, "SafeMath: addition overflow");
            ⋮┆----------------------------------------
           86┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          308┆ require(address(this).balance >= amount, "Address: insufficient  
  balance");                                                                    
            ⋮┆----------------------------------------
          312┆ require(success, "Address: unable to send value, recipient may   
  have reverted");                                                              
            ⋮┆----------------------------------------
          369┆ require(address(this).balance >= value, "Address: insufficient   
  balance for call");                                                           
            ⋮┆----------------------------------------
          374┆ require(isContract(target), "Address: call to non-contract");
            ⋮┆----------------------------------------
          598┆ require(sender != address(0), "ERC20: transfer from the zero     
  address");                                                                    
            ⋮┆----------------------------------------
          599┆ require(recipient != address(0), "ERC20: transfer to the zero    
  address");                                                                    
            ⋮┆----------------------------------------
          618┆ require(account != address(0), "ERC20: mint to the zero          
  address");                                                                    
            ⋮┆----------------------------------------
          639┆ require(account != address(0), "ERC20: burn from the zero        
  address");                                                                    
            ⋮┆----------------------------------------
          662┆ require(owner != address(0), "ERC20: approve from the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          663┆ require(spender != address(0), "ERC20: approve to the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          730┆ require((value == 0) || (token.allowance(address(this), spender) 
  == 0),                                                                        
          731┆     "SafeERC20: approve from non-zero to non-zero allowance"
          732┆ );
            ⋮┆----------------------------------------
          760┆ require(abi.decode(returndata, (bool)), "SafeERC20: ERC20        
  operation did not succeed");                                                  
            ⋮┆----------------------------------------
          955┆ require(msg.sender == governance, "!governance");
            ⋮┆----------------------------------------
          960┆ require(msg.sender == governance, "!governance");
            ⋮┆----------------------------------------
          965┆ require(voters[msg.sender], "!voter");
            ⋮┆----------------------------------------
          971┆ require(voters[msg.sender] || msg.sender == governance,          
  "!authorized");                                                               
            ⋮┆----------------------------------------
          978┆ require(voters[msg.sender] || msg.sender == governance,          
  "!authorized");                                                               
            ⋮┆----------------------------------------
          985┆ require(voters[msg.sender] || msg.sender == governance,          
  "!authorized");                                                               
            ⋮┆----------------------------------------
          990┆ require(voters[msg.sender] || msg.sender == governance,          
  "!authorized");                                                               
            ⋮┆----------------------------------------
          995┆ require(msg.sender == governance, "!governance");
            ⋮┆----------------------------------------
         1004┆ require(voters[msg.sender] || msg.sender == governance,          
  "!governance");                                                               
            ⋮┆----------------------------------------
         1007┆ require(success, "!execute-success");
            ⋮┆----------------------------------------
         1039┆ require(msg.sender == governance, "!governance");
            ⋮┆----------------------------------------
         1044┆ require(msg.sender == governance, "!governance");
            ⋮┆----------------------------------------
         1049┆ require(msg.sender == governance, "!governance");
            ⋮┆----------------------------------------
         1058┆ require(strategies[msg.sender], "!strategy");
            ⋮┆----------------------------------------
         1071┆ require(strategies[msg.sender], "!strategy");
            ⋮┆----------------------------------------
         1080┆ require(strategies[msg.sender], "!strategy");
            ⋮┆----------------------------------------
         1109┆ require(strategies[msg.sender], "!strategy");
            ⋮┆----------------------------------------
         1140┆ require(strategies[msg.sender], "!strategy");
            ⋮┆----------------------------------------
         1161┆ require(strategies[msg.sender], "!strategy");
            ⋮┆----------------------------------------
         1579┆ require(msg.sender == timelock, "!timelock");
            ⋮┆----------------------------------------
         1584┆ require(msg.sender == timelock, "!timelock");
            ⋮┆----------------------------------------
         1589┆ require(msg.sender == timelock, "!timelock");
            ⋮┆----------------------------------------
         1594┆ require(msg.sender == governance, "!governance");
            ⋮┆----------------------------------------
         1599┆ require(msg.sender == governance, "!governance");
            ⋮┆----------------------------------------
         1604┆ require(msg.sender == timelock, "!timelock");
            ⋮┆----------------------------------------
         1609┆ require(msg.sender == timelock, "!timelock");
            ⋮┆----------------------------------------
         1618┆ require(msg.sender == controller, "!controller");
            ⋮┆----------------------------------------
         1619┆ require(want != address(_asset), "want");
            ⋮┆----------------------------------------
         1626┆ require(msg.sender == controller, "!controller");
            ⋮┆----------------------------------------
         1643┆ require(_jar != address(0), "!jar"); // additional protection so 
  we don't burn the funds                                                       
            ⋮┆----------------------------------------
         1650┆ require(msg.sender == controller, "!controller");
            ⋮┆----------------------------------------
         1656┆ require(_jar != address(0), "!jar"); // additional protection so 
  we don't burn the funds                                                       
            ⋮┆----------------------------------------
         1675┆ require(msg.sender == timelock, "!timelock");
            ⋮┆----------------------------------------
         1676┆ require(_target != address(0), "!target");
            ⋮┆----------------------------------------
         1796┆ require(msg.sender == governance, "!governance");
            ⋮┆----------------------------------------
       solidity.performance.use-nested-if                                       
          Using nested is cheaper than using && multiple check combinations.    
  There are more                                                                
          advantages, such as easier to read code and better coverage reports.  
                                                                                
         1864┆ if (
         1865┆     balances[0] < balances[1] &&
         1866┆     balances[0] < balances[2] &&
         1867┆     balances[0] < balances[3]
         1868┆ ) {
         1869┆     return (dai, 0);
         1870┆ }
            ⋮┆----------------------------------------
         1873┆ if (
         1874┆     balances[1] < balances[0] &&
         1875┆     balances[1] < balances[2] &&
         1876┆     balances[1] < balances[3]
         1877┆ ) {
         1878┆     return (usdc, 1);
         1879┆ }
            ⋮┆----------------------------------------
         1882┆ if (
         1883┆     balances[2] < balances[0] &&
         1884┆     balances[2] < balances[1] &&
         1885┆     balances[2] < balances[3]
         1886┆ ) {
         1887┆     return (usdt, 2);
         1888┆ }
            ⋮┆----------------------------------------
         1891┆ if (
         1892┆     balances[3] < balances[0] &&
         1893┆     balances[3] < balances[1] &&
         1894┆     balances[3] < balances[2]
         1895┆ ) {
         1896┆     return (susd, 3);
         1897┆ }
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
           86┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          312┆ require(success, "Address: unable to send value, recipient may   
  have reverted");                                                              
            ⋮┆----------------------------------------
          369┆ require(address(this).balance >= value, "Address: insufficient   
  balance for call");                                                           
            ⋮┆----------------------------------------
          598┆ require(sender != address(0), "ERC20: transfer from the zero     
  address");                                                                    
            ⋮┆----------------------------------------
          599┆ require(recipient != address(0), "ERC20: transfer to the zero    
  address");                                                                    
            ⋮┆----------------------------------------
          639┆ require(account != address(0), "ERC20: burn from the zero        
  address");                                                                    
            ⋮┆----------------------------------------
          662┆ require(owner != address(0), "ERC20: approve from the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          663┆ require(spender != address(0), "ERC20: approve to the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          730┆ require((value == 0) || (token.allowance(address(this), spender) 
  == 0),                                                                        
          731┆     "SafeERC20: approve from non-zero to non-zero allowance"
          732┆ );
            ⋮┆----------------------------------------
          760┆ require(abi.decode(returndata, (bool)), "SafeERC20: ERC20        
  operation did not succeed");                                                  
            ⋮┆----------------------------------------
       solidity.security.arbitrary-low-level-call                               
          An attacker may perform call() to an arbitrary address with controlled
  calldata                                                                      
                                                                                
         1006┆ (bool success, bytes memory result) = to.call{value:             
  value}(data);                                                                 
            ⋮┆----------------------------------------
       solidity.security.no-slippage-check          
          No slippage check in a Uniswap v2/v3 trade
                                                    
         1731┆ UniswapRouterV2(univ2Router2).swapExactTokensForTokens(
         1732┆     _amount,
         1733┆     0,
         1734┆     path,
         1735┆     address(this),
         1736┆     now.add(60)
         1737┆ );

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 75 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
