METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                     
                     
┌───────────────────┐
│ 111 Code Findings │
└───────────────────┘
                                                                         
    /sb/LatticeStakingPool0x74299A718b2c44483a27325d7725F0B2646DE3B1.sol 
       solidity.best-practice.use-abi-encodecall-instead-of-encodewithselector  
          To guarantee arguments type safety it is recommended to use           
  `abi.encodeCall` instead of                                                   
          `abi.encodeWithSelector`.                                             
                                                                                
         1011┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.transfer.selector, to, value));                  
            ⋮┆----------------------------------------
         1029┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.transferFrom.selector, from, to, value));        
            ⋮┆----------------------------------------
         1073┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.approve.selector, spender, value));              
            ⋮┆----------------------------------------
         1091┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.approve.selector, spender, newAllowance));       
            ⋮┆----------------------------------------
         1115┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.approve.selector, spender, newAllowance));       
            ⋮┆----------------------------------------
       solidity.performance.array-length-outside-loop                           
          Caching the array length outside a loop saves reading it on each      
  iteration, as long as the                                                     
          array's length is not changed during the loop.                        
                                                                                
         1726┆ for (uint i=0; i < _newAddressesToWhitelist.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.non-payable-constructor      
          Consider making costructor payable to save gas.
                                                         
         1450┆ constructor(IERC20 _stakingToken) {
         1451┆ 
         1452┆     require(
         1453┆ 
         1454┆         address(_stakingToken) != address(0),
         1455┆ 
         1456┆         "constructor: _stakingToken must not be zero address"
         1457┆ 
         1458┆     );
         1459┆ 
             [hid 7 additional lines, adjust with --max-lines-per-finding] 
       solidity.performance.state-variable-read-in-a-loop                       
          Replace state variable reads and writes within loops with local       
  variable reads and writes.                                                    
                                                                                
         1728┆                                                                  
  if(!projectIdToWhitelistedAddress[_projectId][_newAddressesToWhitelist[i]]){  
            ⋮┆----------------------------------------
         1730┆                                                                  
  projectIdToWhitelistedAddress[_projectId][_newAddressesToWhitelist[i]] = true;
            ⋮┆----------------------------------------
         1732┆                                                                  
  projectIdToWhitelistedArray[_projectId].push(_newAddressesToWhitelist[i]);    
            ⋮┆----------------------------------------
         1870┆ _userInfo.userAddress =                                          
  stakingPoolInfo[_projectId][_poolId].usersStaked[i];                          
            ⋮┆----------------------------------------
       solidity.performance.unnecessary-checked-arithmetic-in-loop              
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
                                                                                
         1726┆ for (uint i=0; i < _newAddressesToWhitelist.length; i++) {
            ⋮┆----------------------------------------
         1866┆ for(uint256 i=_startIndex; i < _endIndex; i++){
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
          541┆ require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
            ⋮┆----------------------------------------
          665┆ require(address(this).balance >= amount, "Address: insufficient  
  balance");                                                                    
            ⋮┆----------------------------------------
          671┆ require(success, "Address: unable to send value, recipient may   
  have reverted");                                                              
            ⋮┆----------------------------------------
          811┆ require(address(this).balance >= value, "Address: insufficient   
  balance for call");                                                           
            ⋮┆----------------------------------------
          813┆ require(isContract(target), "Address: call to non-contract");
            ⋮┆----------------------------------------
          867┆ require(isContract(target), "Address: static call to             
  non-contract");                                                               
            ⋮┆----------------------------------------
          921┆ require(isContract(target), "Address: delegate call to           
  non-contract");                                                               
            ⋮┆----------------------------------------
         1065┆ require(
         1066┆ 
         1067┆     (value == 0) || (token.allowance(address(this), spender) ==  
  0),                                                                           
         1068┆ 
         1069┆     "SafeERC20: approve from non-zero to non-zero allowance"
         1070┆ 
         1071┆ );
            ⋮┆----------------------------------------
         1111┆ require(oldAllowance >= value, "SafeERC20: decreased allowance   
  below zero");                                                                 
            ⋮┆----------------------------------------
         1151┆ require(abi.decode(returndata, (bool)), "SafeERC20: ERC20        
  operation did not succeed");                                                  
            ⋮┆----------------------------------------
         1452┆ require(
         1453┆ 
         1454┆     address(_stakingToken) != address(0),
         1455┆ 
         1456┆     "constructor: _stakingToken must not be zero address"
         1457┆ 
         1458┆ );
            ⋮┆----------------------------------------
         1472┆ require(msg.sender == owner, "addNewProject: Caller is not the   
  owner");                                                                      
            ⋮┆----------------------------------------
         1474┆ require(bytes(_name).length > 0 , "addNewProject: Project name   
  cannot be empty string.");                                                    
            ⋮┆----------------------------------------
         1476┆ require(
         1477┆ 
         1478┆     _startBlock >= block.number,
         1479┆ 
         1480┆     "addNewProject: startBlock is less than the current block    
  number."                                                                      
         1481┆ 
         1482┆ );
            ⋮┆----------------------------------------
         1484┆ require(
         1485┆ 
         1486┆     _startBlock < _endBlock,
         1487┆ 
         1488┆     "addNewProject: startBlock is greater than or equal to the   
  endBlock."                                                                    
         1489┆ 
         1490┆ );
            ⋮┆----------------------------------------
         1492┆ require(!isProjectNameTaken[_name], "addNewProject: project name 
  already taken.");                                                             
            ⋮┆----------------------------------------
         1528┆ require(msg.sender == owner, "addStakingPool: Caller is not the  
  owner.");                                                                     
            ⋮┆----------------------------------------
         1530┆ require(_projectId < projects.length, "addStakingPool: Invalid   
  project ID.");                                                                
            ⋮┆----------------------------------------
         1558┆ require(msg.sender == owner, "disableProject: Caller is not the  
  owner");                                                                      
            ⋮┆----------------------------------------
         1560┆ require(_projectId < projects.length, "disableProject: Invalid   
  project ID.");                                                                
            ⋮┆----------------------------------------
         1576┆ require(
         1577┆ 
         1578┆     projectIdToWhitelistedAddress[_projectId][msg.sender],
         1579┆ 
         1580┆     "deposit: Address is not whitelisted for this project."
         1581┆ 
         1582┆ );
            ⋮┆----------------------------------------
         1584┆ require(_amount > 0, "deposit: Amount not specified.");
            ⋮┆----------------------------------------
         1586┆ require(_projectId < projects.length, "deposit: Invalid project  
  ID.");                                                                        
            ⋮┆----------------------------------------
         1588┆ require(_poolId < projects[_projectId].numberOfPools, "deposit:  
  Invalid pool ID.");                                                           
            ⋮┆----------------------------------------
         1590┆ require(
         1591┆ 
         1592┆     block.number <= projects[_projectId].endBlock,
         1593┆ 
         1594┆     "deposit: Staking no longer permitted for this project."
         1595┆ 
         1596┆ );
            ⋮┆----------------------------------------
         1598┆ require(
         1599┆ 
         1600┆     block.number >= projects[_projectId].startBlock,
         1601┆ 
         1602┆     "deposit: Staking is not yet permitted for this project."
         1603┆ 
         1604┆ );
            ⋮┆----------------------------------------
         1612┆ require(
         1613┆ 
         1614┆     _userStakedAmount.add(_amount) <=                            
  stakingPoolInfo[_projectId][_poolId].maxStakingAmountPerUser,                 
         1615┆ 
         1616┆     "deposit: Cannot exceed max staking amount per user."
         1617┆ 
         1618┆ );
            ⋮┆----------------------------------------
         1662┆ require(
         1663┆ 
         1664┆     projectIdToWhitelistedAddress[_projectId][msg.sender],
         1665┆ 
         1666┆     "withdraw: Address is not whitelisted for this project."
         1667┆ 
         1668┆ );
            ⋮┆----------------------------------------
         1670┆ require(_projectId < projects.length, "withdraw: Invalid project 
  ID.");                                                                        
            ⋮┆----------------------------------------
         1672┆ require(_poolId < projects[_projectId].numberOfPools, "withdraw: 
  Invalid pool ID.");                                                           
            ⋮┆----------------------------------------
         1674┆ require(block.number > projects[_projectId].endBlock, "withdraw: 
  Not yet permitted.");                                                         
            ⋮┆----------------------------------------
         1676┆ require(
         1677┆ 
         1678┆     !didUserWithdrawFunds[_projectId][_poolId][msg.sender],
         1679┆ 
         1680┆     "withdraw: User has already withdrawn funds for this pool."
         1681┆ 
         1682┆ );
            ⋮┆----------------------------------------
         1688┆ require(_userStakedAmount > 0, "withdraw: No stake to            
  withdraw.");                                                                  
            ⋮┆----------------------------------------
         1712┆ require(msg.sender == owner, "whitelistAddresses: Caller is not  
  the owner");                                                                  
            ⋮┆----------------------------------------
         1714┆ require(_projectId < projects.length, "whitelistAddresses:       
  Invalid project ID.");                                                        
            ⋮┆----------------------------------------
         1716┆ require(
         1717┆ 
         1718┆     _newAddressesToWhitelist.length > 0,
         1719┆ 
         1720┆     "whitelistAddresses: Addresses array is empty."
         1721┆ 
         1722┆ );
            ⋮┆----------------------------------------
         1748┆ require(msg.sender == owner, "getWhitelistedAddressesForProject: 
  Caller is not the owner");                                                    
            ⋮┆----------------------------------------
         1766┆ require(_projectId < projects.length, "isAddressWhitelisted:     
  Invalid project ID.");                                                        
            ⋮┆----------------------------------------
         1788┆ require(msg.sender == owner,                                     
  "getTotalStakingInfoForProjectPerPool: Caller is not the owner.");            
            ⋮┆----------------------------------------
         1790┆ require(
         1791┆ 
         1792┆     _projectId < projects.length,
         1793┆ 
         1794┆     "getTotalStakingInfoForProjectPerPool: Invalid project ID."
         1795┆ 
         1796┆ );
            ⋮┆----------------------------------------
         1798┆ require(
         1799┆ 
         1800┆     _poolId < projects[_projectId].numberOfPools,
         1801┆ 
         1802┆     "getTotalStakingInfoForProjectPerPool: Invalid pool ID."
         1803┆ 
         1804┆ );
            ⋮┆----------------------------------------
         1808┆ require(
         1809┆ 
         1810┆     _usersStakedInPool > 0,
         1811┆ 
         1812┆     "getTotalStakingInfoForProjectPerPool: Nobody staked in this 
  pool."                                                                        
         1813┆ 
         1814┆ );
            ⋮┆----------------------------------------
         1816┆ require(
         1817┆ 
         1818┆     _pageSize > 0,
         1819┆ 
         1820┆     "getTotalStakingInfoForProjectPerPool: Invalid page size."
         1821┆ 
         1822┆ );
            ⋮┆----------------------------------------
         1824┆ require(
         1825┆ 
         1826┆     _pageNumber > 0,
         1827┆ 
         1828┆     "getTotalStakingInfoForProjectPerPool: Invalid page number."
         1829┆ 
         1830┆ );
            ⋮┆----------------------------------------
         1838┆ require(
         1839┆ 
         1840┆     _startIndex < _usersStakedInPool,
         1841┆ 
         1842┆     "getTotalStakingInfoForProjectPerPool: Specified parameters  
  exceed number of users in the pool."                                          
         1843┆ 
         1844┆ );
            ⋮┆----------------------------------------
                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘
         1910┆ require(_projectId < projects.length, "numberOfPools: Invalid    
  project ID.");                                                                
            ⋮┆----------------------------------------
         1920┆ require(
         1921┆ 
         1922┆     _projectId < projects.length,
         1923┆ 
         1924┆     "getTotalAmountStakedInProject: Invalid project ID."
         1925┆ 
         1926┆ );
            ⋮┆----------------------------------------
         1944┆ require(_projectId < projects.length,                            
  "getTotalAmountStakedInPool: Invalid project ID.");                           
            ⋮┆----------------------------------------
         1946┆ require(
         1947┆ 
         1948┆     _poolId < projects[_projectId].numberOfPools,
         1949┆ 
         1950┆     "getTotalAmountStakedInPool: Invalid pool ID."
         1951┆ 
         1952┆ );
            ⋮┆----------------------------------------
         1972┆ require(_projectId < projects.length,                            
  "getAmountStakedByUserInPool: Invalid project ID.");                          
            ⋮┆----------------------------------------
         1974┆ require(
         1975┆ 
         1976┆     _poolId < projects[_projectId].numberOfPools,
         1977┆ 

Ran 48 rules on 1 file: 111 findings.
         1978┆     "getAmountStakedByUserInPool: Invalid pool ID."
         1979┆ 
         1980┆ );
            ⋮┆----------------------------------------
         2000┆ require(
         2001┆ 
         2002┆     _projectId < projects.length,
         2003┆ 
         2004┆     "getPercentageAmountStakedByUserInPool: Invalid project ID."
         2005┆ 
         2006┆ );
            ⋮┆----------------------------------------
         2008┆ require(
         2009┆ 
         2010┆     _poolId < projects[_projectId].numberOfPools,
         2011┆ 
         2012┆     "getPercentageAmountStakedByUserInPool: Invalid pool ID."
         2013┆ 
         2014┆ );
            ⋮┆----------------------------------------
       solidity.performance.use-prefix-increment-not-postfix                    
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
                                                                                
         1726┆ for (uint i=0; i < _newAddressesToWhitelist.length; i++) {
            ⋮┆----------------------------------------
         1866┆ for(uint256 i=_startIndex; i < _endIndex; i++){
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
          671┆ require(success, "Address: unable to send value, recipient may   
  have reverted");                                                              
            ⋮┆----------------------------------------
          811┆ require(address(this).balance >= value, "Address: insufficient   
  balance for call");                                                           
            ⋮┆----------------------------------------
          867┆ require(isContract(target), "Address: static call to             
  non-contract");                                                               
            ⋮┆----------------------------------------
          921┆ require(isContract(target), "Address: delegate call to           
  non-contract");                                                               
            ⋮┆----------------------------------------
         1065┆ require(
         1066┆ 
         1067┆     (value == 0) || (token.allowance(address(this), spender) ==  
  0),                                                                           
         1068┆ 
         1069┆     "SafeERC20: approve from non-zero to non-zero allowance"
         1070┆ 
         1071┆ );
            ⋮┆----------------------------------------
         1111┆ require(oldAllowance >= value, "SafeERC20: decreased allowance   
  below zero");                                                                 
            ⋮┆----------------------------------------
         1151┆ require(abi.decode(returndata, (bool)), "SafeERC20: ERC20        
  operation did not succeed");                                                  
            ⋮┆----------------------------------------
         1452┆ require(
         1453┆ 
         1454┆     address(_stakingToken) != address(0),
         1455┆ 
         1456┆     "constructor: _stakingToken must not be zero address"
         1457┆ 
         1458┆ );
            ⋮┆----------------------------------------
         1472┆ require(msg.sender == owner, "addNewProject: Caller is not the   
  owner");                                                                      
            ⋮┆----------------------------------------
         1474┆ require(bytes(_name).length > 0 , "addNewProject: Project name   
  cannot be empty string.");                                                    
            ⋮┆----------------------------------------
         1476┆ require(
         1477┆ 
         1478┆     _startBlock >= block.number,
         1479┆ 
         1480┆     "addNewProject: startBlock is less than the current block    
  number."                                                                      
         1481┆ 
         1482┆ );
            ⋮┆----------------------------------------
         1484┆ require(
         1485┆ 
         1486┆     _startBlock < _endBlock,
         1487┆ 
         1488┆     "addNewProject: startBlock is greater than or equal to the   
  endBlock."                                                                    
         1489┆ 
         1490┆ );
            ⋮┆----------------------------------------
         1492┆ require(!isProjectNameTaken[_name], "addNewProject: project name 
  already taken.");                                                             
            ⋮┆----------------------------------------
         1528┆ require(msg.sender == owner, "addStakingPool: Caller is not the  
  owner.");                                                                     
            ⋮┆----------------------------------------
         1530┆ require(_projectId < projects.length, "addStakingPool: Invalid   
  project ID.");                                                                
            ⋮┆----------------------------------------
         1558┆ require(msg.sender == owner, "disableProject: Caller is not the  
  owner");                                                                      
            ⋮┆----------------------------------------
         1560┆ require(_projectId < projects.length, "disableProject: Invalid   
  project ID.");                                                                
            ⋮┆----------------------------------------
         1576┆ require(
         1577┆ 
         1578┆     projectIdToWhitelistedAddress[_projectId][msg.sender],
         1579┆ 
         1580┆     "deposit: Address is not whitelisted for this project."
         1581┆ 
         1582┆ );
            ⋮┆----------------------------------------
         1590┆ require(
         1591┆ 
         1592┆     block.number <= projects[_projectId].endBlock,
         1593┆ 
         1594┆     "deposit: Staking no longer permitted for this project."
         1595┆ 
         1596┆ );
            ⋮┆----------------------------------------
         1598┆ require(
         1599┆ 
         1600┆     block.number >= projects[_projectId].startBlock,
         1601┆ 
         1602┆     "deposit: Staking is not yet permitted for this project."
         1603┆ 
         1604┆ );
            ⋮┆----------------------------------------
         1612┆ require(
         1613┆ 
         1614┆     _userStakedAmount.add(_amount) <=                            
  stakingPoolInfo[_projectId][_poolId].maxStakingAmountPerUser,                 
         1615┆ 
         1616┆     "deposit: Cannot exceed max staking amount per user."
         1617┆ 
         1618┆ );
            ⋮┆----------------------------------------
         1662┆ require(
         1663┆ 
         1664┆     projectIdToWhitelistedAddress[_projectId][msg.sender],
         1665┆ 
         1666┆     "withdraw: Address is not whitelisted for this project."
         1667┆ 
         1668┆ );
            ⋮┆----------------------------------------
         1676┆ require(
         1677┆ 
         1678┆     !didUserWithdrawFunds[_projectId][_poolId][msg.sender],
         1679┆ 
         1680┆     "withdraw: User has already withdrawn funds for this pool."
         1681┆ 
         1682┆ );
            ⋮┆----------------------------------------
         1712┆ require(msg.sender == owner, "whitelistAddresses: Caller is not  
  the owner");                                                                  
            ⋮┆----------------------------------------
         1714┆ require(_projectId < projects.length, "whitelistAddresses:       
  Invalid project ID.");                                                        
            ⋮┆----------------------------------------
         1716┆ require(
         1717┆ 
         1718┆     _newAddressesToWhitelist.length > 0,
         1719┆ 
         1720┆     "whitelistAddresses: Addresses array is empty."
         1721┆ 
         1722┆ );
            ⋮┆----------------------------------------
         1748┆ require(msg.sender == owner, "getWhitelistedAddressesForProject: 
  Caller is not the owner");                                                    
            ⋮┆----------------------------------------
         1766┆ require(_projectId < projects.length, "isAddressWhitelisted:     
  Invalid project ID.");                                                        
            ⋮┆----------------------------------------
         1788┆ require(msg.sender == owner,                                     
  "getTotalStakingInfoForProjectPerPool: Caller is not the owner.");            
            ⋮┆----------------------------------------
         1790┆ require(
         1791┆ 
         1792┆     _projectId < projects.length,
         1793┆ 
         1794┆     "getTotalStakingInfoForProjectPerPool: Invalid project ID."
         1795┆ 
         1796┆ );
            ⋮┆----------------------------------------
         1798┆ require(
         1799┆ 
         1800┆     _poolId < projects[_projectId].numberOfPools,
         1801┆ 
         1802┆     "getTotalStakingInfoForProjectPerPool: Invalid pool ID."
         1803┆ 
         1804┆ );
            ⋮┆----------------------------------------
         1808┆ require(
         1809┆ 
         1810┆     _usersStakedInPool > 0,
         1811┆ 
         1812┆     "getTotalStakingInfoForProjectPerPool: Nobody staked in this 
  pool."                                                                        
         1813┆ 
         1814┆ );
            ⋮┆----------------------------------------
         1816┆ require(
         1817┆ 
         1818┆     _pageSize > 0,
         1819┆ 
         1820┆     "getTotalStakingInfoForProjectPerPool: Invalid page size."
         1821┆ 
         1822┆ );
            ⋮┆----------------------------------------
         1824┆ require(
         1825┆ 
         1826┆     _pageNumber > 0,
         1827┆ 
         1828┆     "getTotalStakingInfoForProjectPerPool: Invalid page number."
         1829┆ 
         1830┆ );
            ⋮┆----------------------------------------
         1838┆ require(
         1839┆ 
         1840┆     _startIndex < _usersStakedInPool,
         1841┆ 
         1842┆     "getTotalStakingInfoForProjectPerPool: Specified parameters  
  exceed number of users in the pool."                                          
         1843┆ 
         1844┆ );
            ⋮┆----------------------------------------
         1910┆ require(_projectId < projects.length, "numberOfPools: Invalid    
  project ID.");                                                                
            ⋮┆----------------------------------------
         1920┆ require(
         1921┆ 
         1922┆     _projectId < projects.length,
         1923┆ 
         1924┆     "getTotalAmountStakedInProject: Invalid project ID."
         1925┆ 
         1926┆ );
            ⋮┆----------------------------------------
         1944┆ require(_projectId < projects.length,                            
  "getTotalAmountStakedInPool: Invalid project ID.");                           
            ⋮┆----------------------------------------
         1946┆ require(
         1947┆ 
         1948┆     _poolId < projects[_projectId].numberOfPools,
         1949┆ 
         1950┆     "getTotalAmountStakedInPool: Invalid pool ID."
         1951┆ 
         1952┆ );
            ⋮┆----------------------------------------
         1972┆ require(_projectId < projects.length,                            
  "getAmountStakedByUserInPool: Invalid project ID.");                          
            ⋮┆----------------------------------------
         1974┆ require(
         1975┆ 
         1976┆     _poolId < projects[_projectId].numberOfPools,
         1977┆ 
         1978┆     "getAmountStakedByUserInPool: Invalid pool ID."
         1979┆ 
         1980┆ );
            ⋮┆----------------------------------------
         2000┆ require(
         2001┆ 
         2002┆     _projectId < projects.length,
         2003┆ 
         2004┆     "getPercentageAmountStakedByUserInPool: Invalid project ID."
         2005┆ 
         2006┆ );
            ⋮┆----------------------------------------
         2008┆ require(
         2009┆ 
         2010┆     _poolId < projects[_projectId].numberOfPools,
         2011┆ 
         2012┆     "getPercentageAmountStakedByUserInPool: Invalid pool ID."
         2013┆ 
         2014┆ );


A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
