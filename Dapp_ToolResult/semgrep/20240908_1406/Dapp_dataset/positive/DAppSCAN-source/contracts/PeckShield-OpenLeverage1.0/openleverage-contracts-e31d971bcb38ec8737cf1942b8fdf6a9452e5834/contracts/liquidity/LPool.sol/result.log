METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 83 Code Findings │
└──────────────────┘
                  
    /sb/LPool.sol 
       solidity.best-practice.use-abi-encodecall-instead-of-encodewithselector  
          To guarantee arguments type safety it is recommended to use           
  `abi.encodeCall` instead of                                                   
          `abi.encodeWithSelector`.                                             
                                                                                
         1204┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.transfer.selector, to, value));                  
            ⋮┆----------------------------------------
         1208┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.transferFrom.selector, from, to, value));        
            ⋮┆----------------------------------------
         1226┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.approve.selector, spender, value));              
            ⋮┆----------------------------------------
         1231┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.approve.selector, spender, newAllowance));       
            ⋮┆----------------------------------------
         1236┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.approve.selector, spender, newAllowance));       
            ⋮┆----------------------------------------
       solidity.performance.non-payable-constructor      
          Consider making costructor payable to save gas.
                                                         
         1492┆ constructor() {
         1493┆ 
         1494┆ }
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
          325┆ require(c >= a, "SafeMath: addition overflow");
            ⋮┆----------------------------------------
          340┆ require(b <= a, "SafeMath: subtraction overflow");
            ⋮┆----------------------------------------
          357┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          374┆ require(b > 0, "SafeMath: division by zero");
            ⋮┆----------------------------------------
          391┆ require(b > 0, "SafeMath: modulo by zero");
            ⋮┆----------------------------------------
          898┆ require(msg.sender == admin, "caller must be admin");
            ⋮┆----------------------------------------
          902┆ require(msg.sender == admin || msg.sender == developer, "caller  
  must be admin or developer");                                                 
            ⋮┆----------------------------------------
          916┆ require(msg.sender == pendingAdmin, "only pendingAdmin can accept
  admin");                                                                      
            ⋮┆----------------------------------------
         1053┆ require(address(this).balance >= amount, "Address: insufficient  
  balance");                                                                    
            ⋮┆----------------------------------------
         1057┆ require(success, "Address: unable to send value, recipient may   
  have reverted");                                                              
            ⋮┆----------------------------------------
         1114┆ require(address(this).balance >= value, "Address: insufficient   
  balance for call");                                                           
            ⋮┆----------------------------------------
         1115┆ require(isContract(target), "Address: call to non-contract");
            ⋮┆----------------------------------------
         1139┆ require(isContract(target), "Address: static call to             
  non-contract");                                                               
            ⋮┆----------------------------------------
         1163┆ require(isContract(target), "Address: delegate call to           
  non-contract");                                                               
            ⋮┆----------------------------------------
         1223┆ require((value == 0) || (token.allowance(address(this), spender) 
  == 0),                                                                        
         1224┆     "SafeERC20: approve from non-zero to non-zero allowance"
         1225┆ );
            ⋮┆----------------------------------------
         1253┆ require(abi.decode(returndata, (bool)), "SafeERC20: ERC20        
  operation did not succeed");                                                  
            ⋮┆----------------------------------------
         1304┆ require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
            ⋮┆----------------------------------------
         1515┆ require(underlying_ != address(0), "underlying_ address cannot be
  0");                                                                          
            ⋮┆----------------------------------------
         1516┆ require(controller_ != address(0), "controller_ address cannot be
  0");                                                                          
            ⋮┆----------------------------------------
         1517┆ require(msg.sender == admin, "Only allow to be called by admin");
            ⋮┆----------------------------------------
         1518┆ require(accrualBlockNumber == 0 && borrowIndex == 0, "inited     
  once");                                                                       
            ⋮┆----------------------------------------
         1522┆ require(initialExchangeRateMantissa > 0, "Initial Exchange Rate  
  Mantissa should be greater zero");                                            
            ⋮┆----------------------------------------
         1562┆ require(dst != address(0), "dst address cannot be 0");
            ⋮┆----------------------------------------
         1564┆ require(src != dst, "src = dst");
            ⋮┆----------------------------------------
         1583┆ require(mathErr == MathError.NO_ERROR, 'not allowed');
            ⋮┆----------------------------------------
         1586┆ require(mathErr == MathError.NO_ERROR, 'not enough');
            ⋮┆----------------------------------------
         1589┆ require(mathErr == MathError.NO_ERROR, 'too much');
            ⋮┆----------------------------------------
         1667┆ require(mErr == MathError.NO_ERROR, "calc failed");
            ⋮┆----------------------------------------
         1685┆ require(isWethPool, "not eth pool");
            ⋮┆----------------------------------------
         1766┆ require(balanceAfter >= balanceBefore, "transfer overflow");
            ⋮┆----------------------------------------
         1913┆ require(borrowRateMantissa <= borrowRateMaxMantissa, "borrower   
  rate higher");                                                                
            ⋮┆----------------------------------------
         1917┆ require(mathErr == MathError.NO_ERROR, "calc block delta erro");
            ⋮┆----------------------------------------
         1924┆ require(mathErr == MathError.NO_ERROR, 'calc interest factor     
  error');                                                                      
            ⋮┆----------------------------------------
         1927┆ require(mathErr == MathError.NO_ERROR, 'calc interest acc        
  error');                                                                      
            ⋮┆----------------------------------------
         1930┆ require(mathErr == MathError.NO_ERROR, 'calc total borrows       
  error');                                                                      
            ⋮┆----------------------------------------
         1941┆ require(err0 == MathError.NO_ERROR, "calc borrow index fail");
            ⋮┆----------------------------------------
         1943┆ require(err1 == MathError.NO_ERROR, "calc fail");
            ⋮┆----------------------------------------
         2012┆ require(err == MathError.NO_ERROR, "calc fail");
            ⋮┆----------------------------------------
         2105┆ require(borrowRateMantissa <= borrowRateMaxMantissa, "borrower   
  rate higher");                                                                
            ⋮┆----------------------------------------
         2109┆ require(mathErr == MathError.NO_ERROR, "calc block delta erro");
            ⋮┆----------------------------------------
         2127┆ require(mathErr == MathError.NO_ERROR, 'calc interest factor     
  error');                                                                      
            ⋮┆----------------------------------------
         2130┆ require(mathErr == MathError.NO_ERROR, 'calc interest acc        
  error');                                                                      
            ⋮┆----------------------------------------
         2133┆ require(mathErr == MathError.NO_ERROR, 'calc total borrows       
  error');                                                                      
            ⋮┆----------------------------------------
         2136┆ require(mathErr == MathError.NO_ERROR, 'calc total reserves      
  error');                                                                      
            ⋮┆----------------------------------------
         2139┆ require(mathErr == MathError.NO_ERROR, 'calc borrows index       
  error');                                                                      
            ⋮┆----------------------------------------
         2172┆ require(vars.mathErr == MathError.NO_ERROR, 'calc exchangerate   
  error');                                                                      
            ⋮┆----------------------------------------
         2190┆ require(vars.mathErr == MathError.NO_ERROR, "calc mint token     
  error");                                                                      
            ⋮┆----------------------------------------
         2200┆ require(vars.mathErr == MathError.NO_ERROR, "calc supply new     
  failed");                                                                     
            ⋮┆----------------------------------------
         2203┆ require(vars.mathErr == MathError.NO_ERROR, "calc tokens new     
  ailed");                                                                      
            ⋮┆----------------------------------------
         2236┆ require(redeemTokensIn == 0 || redeemAmountIn == 0, "one be      
  zero");                                                                       
            ⋮┆----------------------------------------
         2242┆ require(vars.mathErr == MathError.NO_ERROR, 'calc exchangerate   
  error');                                                                      
            ⋮┆----------------------------------------
         2254┆ require(vars.mathErr == MathError.NO_ERROR, 'calc redeem amount  
  error');                                                                      
            ⋮┆----------------------------------------
         2263┆ require(vars.mathErr == MathError.NO_ERROR, 'calc redeem tokens  
  error');                                                                      
            ⋮┆----------------------------------------
         2276┆ require(vars.mathErr == MathError.NO_ERROR, 'calc supply new     
  error');                                                                      
            ⋮┆----------------------------------------
         2279┆ require(vars.mathErr == MathError.NO_ERROR, 'calc token new      
  error');                                                                      
            ⋮┆----------------------------------------
         2280┆ require(getCashPrior() >= vars.redeemAmount, 'cash < redeem');
            ⋮┆----------------------------------------
         2317┆ require(getCashPrior() >= borrowAmount, 'cash<borrow');
            ⋮┆----------------------------------------
         2327┆ require(vars.mathErr == MathError.NO_ERROR, 'calc acc borrows    
  error');                                                                      
            ⋮┆----------------------------------------
         2330┆ require(vars.mathErr == MathError.NO_ERROR, 'calc acc borrows    
  error');                                                                      
            ⋮┆----------------------------------------
         2333┆ require(vars.mathErr == MathError.NO_ERROR, 'calc total borrows  
  error');                                                                      
            ⋮┆----------------------------------------
         2381┆ require(vars.mathErr == MathError.NO_ERROR, 'calc acc borrow     
  error');                                                                      
            ⋮┆----------------------------------------
         2409┆ require(vars.mathErr == MathError.NO_ERROR, "calc acc borrows    
  error");                                                                      
            ⋮┆----------------------------------------
         2487┆ require(accrualBlockNumber == getBlockNumber(), 'not same        
  block');                                                                      
            ⋮┆----------------------------------------
       solidity.performance.use-multiple-require                                
          Using multiple require statements is cheaper than using && multiple   
  check combinations.                                                           
          There are more advantages, such as easier to read code and better     
  coverage reports.                                                             
                                                                                
         1518┆ require(accrualBlockNumber == 0 && borrowIndex == 0, "inited     
  once");                                                                       
            ⋮┆----------------------------------------
       solidity.performance.use-nested-if                                       
          Using nested is cheaper than using && multiple check combinations.    
  There are more                                                                
          advantages, such as easier to read code and better coverage reports.  
                                                                                
         1759┆ if (isWethPool && convertWeth) {
         1760┆     IWETH(underlying).deposit{value : msg.value}();
         1761┆ } else {
         1762┆     IERC20(underlying).transferFrom(from, address(this), amount);
         1763┆ }
            ⋮┆----------------------------------------
         1780┆ if (isWethPool && convertWeth) {
         1781┆     IWETH(underlying).withdraw(amount);
         1782┆     to.transfer(amount);
         1783┆ } else {
         1784┆     IERC20(underlying).safeTransfer(to, amount);
         1785┆ }
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
          357┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          902┆ require(msg.sender == admin || msg.sender == developer, "caller  
  must be admin or developer");                                                 
            ⋮┆----------------------------------------
          916┆ require(msg.sender == pendingAdmin, "only pendingAdmin can accept
  admin");                                                                      
            ⋮┆----------------------------------------
         1057┆ require(success, "Address: unable to send value, recipient may   
  have reverted");                                                              
            ⋮┆----------------------------------------
         1114┆ require(address(this).balance >= value, "Address: insufficient   
  balance for call");                                                           
            ⋮┆----------------------------------------
         1139┆ require(isContract(target), "Address: static call to             
  non-contract");                                                               
            ⋮┆----------------------------------------
         1163┆ require(isContract(target), "Address: delegate call to           
  non-contract");                                                               
            ⋮┆----------------------------------------
         1223┆ require((value == 0) || (token.allowance(address(this), spender) 
  == 0),                                                                        
         1224┆     "SafeERC20: approve from non-zero to non-zero allowance"
         1225┆ );
            ⋮┆----------------------------------------
         1253┆ require(abi.decode(returndata, (bool)), "SafeERC20: ERC20        
  operation did not succeed");                                                  
            ⋮┆----------------------------------------
         1522┆ require(initialExchangeRateMantissa > 0, "Initial Exchange Rate  
  Mantissa should be greater zero");                                            
            ⋮┆----------------------------------------
       solidity.security.compound-borrowfresh-reentrancy                        
          Function borrowFresh() in Compound performs state update after        
  doTransferOut()                                                               
                                                                                
         2341┆ doTransferOut(payee, borrowAmount, false);

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 83 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
