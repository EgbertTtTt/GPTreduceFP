METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 56 Code Findings │
└──────────────────┘
                                 
    /sb/CryptoHeroesUniverse.sol 
       solidity.best-practice.use-abi-encodecall-instead-of-encodewithselector  
          To guarantee arguments type safety it is recommended to use           
  `abi.encodeCall` instead of                                                   
          `abi.encodeWithSelector`.                                             
                                                                                
          490┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.transfer.selector, to, value));                  
            ⋮┆----------------------------------------
          494┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.transferFrom.selector, from, to, value));        
            ⋮┆----------------------------------------
          512┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.approve.selector, spender, value));              
            ⋮┆----------------------------------------
          517┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.approve.selector, spender, newAllowance));       
            ⋮┆----------------------------------------
          522┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.approve.selector, spender, newAllowance));       
            ⋮┆----------------------------------------
       solidity.best-practice.use-ownable2step                                  
          By demanding that the receiver of the owner permissions actively      
  accept via a contract call                                                    
          of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the 
  contract ownership                                                            
          from accidentally being transferred  to an address that cannot handle 
  it.                                                                           
                                                                                
         1375┆ contract CryptoHeroes is ERC20("CryptoHeroes", "Heroes"), Ownable
  {                                                                             
            ⋮┆----------------------------------------
         1389┆ contract CryptoHeroesUniverse is Ownable {
            ⋮┆----------------------------------------
       solidity.performance.init-variables-with-default-value                   
          Uninitialized variables are assigned with the types default value.    
  Explicitly initializing a                                                     
          variable with its default value costs unnecessary gas.                
                                                                                
         1439┆ uint256 public totalAllocPoint = 0;
            ⋮┆----------------------------------------
       solidity.performance.non-payable-constructor      
          Consider making costructor payable to save gas.
                                                         
         1114┆ constructor (string memory name_, string memory symbol_) public {
         1115┆     _name = name_;
         1116┆     _symbol = symbol_;
         1117┆     _decimals = 18;
         1118┆ }
            ⋮┆----------------------------------------
         1445┆ constructor(
         1446┆   CryptoHeroes _cheroes,
         1447┆   address _devaddr,
         1448┆   uint256 _cheroesPerBlock
         1449┆ ) public {
         1450┆   cheroes = _cheroes;
         1451┆   devaddr = _devaddr;
         1452┆   cheroesPerBlock = _cheroesPerBlock;
         1453┆ }
            ⋮┆----------------------------------------
       solidity.performance.unnecessary-checked-arithmetic-in-loop              
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
                                                                                
         1511┆ for (uint256 pid = 0; pid < length; ++pid) {
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
          161┆ require(c >= a, "SafeMath: addition overflow");
            ⋮┆----------------------------------------
          176┆ require(b <= a, "SafeMath: subtraction overflow");
            ⋮┆----------------------------------------
          193┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          210┆ require(b > 0, "SafeMath: division by zero");
            ⋮┆----------------------------------------
          227┆ require(b > 0, "SafeMath: modulo by zero");
            ⋮┆----------------------------------------
          339┆ require(address(this).balance >= amount, "Address: insufficient  
  balance");                                                                    
            ⋮┆----------------------------------------
          343┆ require(success, "Address: unable to send value, recipient may   
  have reverted");                                                              
            ⋮┆----------------------------------------
          400┆ require(address(this).balance >= value, "Address: insufficient   
  balance for call");                                                           
            ⋮┆----------------------------------------
          401┆ require(isContract(target), "Address: call to non-contract");
            ⋮┆----------------------------------------
          425┆ require(isContract(target), "Address: static call to             
  non-contract");                                                               
            ⋮┆----------------------------------------
          449┆ require(isContract(target), "Address: delegate call to           
  non-contract");                                                               
            ⋮┆----------------------------------------
          509┆ require((value == 0) || (token.allowance(address(this), spender) 
  == 0),                                                                        
          510┆     "SafeERC20: approve from non-zero to non-zero allowance"
          511┆ );
            ⋮┆----------------------------------------
          539┆ require(abi.decode(returndata, (bool)), "SafeERC20: ERC20        
  operation did not succeed");                                                  
            ⋮┆----------------------------------------
          670┆ require(set._values.length > index, "EnumerableSet: index out of 
  bounds");                                                                     
            ⋮┆----------------------------------------
         1041┆ require(owner() == _msgSender(), "Ownable: caller is not the     
  owner");                                                                      
            ⋮┆----------------------------------------
         1062┆ require(newOwner != address(0), "Ownable: new owner is the zero  
  address");                                                                    
            ⋮┆----------------------------------------
         1268┆ require(sender != address(0), "ERC20: transfer from the zero     
  address");                                                                    
            ⋮┆----------------------------------------
         1269┆ require(recipient != address(0), "ERC20: transfer to the zero    
  address");                                                                    
            ⋮┆----------------------------------------
         1288┆ require(account != address(0), "ERC20: mint to the zero          
  address");                                                                    
            ⋮┆----------------------------------------
         1309┆ require(account != address(0), "ERC20: burn from the zero        
  address");                                                                    
            ⋮┆----------------------------------------
         1332┆ require(owner != address(0), "ERC20: approve from the zero       
  address");                                                                    
            ⋮┆----------------------------------------
         1333┆ require(spender != address(0), "ERC20: approve to the zero       
  address");                                                                    
            ⋮┆----------------------------------------
         1462┆ require(lpTokenIsExist[_lpToken] == false,"This lpToken already  
  added");                                                                      
            ⋮┆----------------------------------------
         1518┆ require(msg.sender == devaddr, "dev: wut?");
            ⋮┆----------------------------------------
         1553┆                                                                  
  require(pool.acceptedNFT.balanceOf(address(msg.sender))>0,"requires NTF       
  token!");                                                                     
            ⋮┆----------------------------------------
         1579┆ require(user.amount >= _amount, "withdraw: not good");
            ⋮┆----------------------------------------
         1583┆                                                                  
  require(pool.acceptedNFT.balanceOf(address(msg.sender))>0,"requires NTF       
  token!");                                                                     
            ⋮┆----------------------------------------
         1616┆ require(address(migrator) != address(0), "migrate: no migrator");
            ⋮┆----------------------------------------
         1622┆ require(bal == newLpToken.balanceOf(address(this)), "migrate:    
  bad");                                                                        
            ⋮┆----------------------------------------
         1627┆ require(_cheroesPerBlock > 0, "!CheroesPerBlock-0");
            ⋮┆----------------------------------------
       solidity.performance.use-nested-if                                       
          Using nested is cheaper than using && multiple check combinations.    
  There are more                                                                
          advantages, such as easier to read code and better coverage reports.  
                                                                                
         1500┆ if (block.number > pool.lastRewardBlock && lpSupply != 0) {
         1501┆   uint256 multiplier = getMultiplier(pool.lastRewardBlock,       
  block.number);                                                                
         1502┆   uint256 cheroesReward =                                        
  multiplier.mul(cheroesPerBlock).mul(pool.allocPoint).div(totalAllocPoint);    
         1503┆   accCheroesPerShare =                                           
  accCheroesPerShare.add(cheroesReward.mul(1e12).div(lpSupply));                
         1504┆ }
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
          193┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          343┆ require(success, "Address: unable to send value, recipient may   
  have reverted");                                                              
            ⋮┆----------------------------------------
          400┆ require(address(this).balance >= value, "Address: insufficient   
  balance for call");                                                           
            ⋮┆----------------------------------------
          425┆ require(isContract(target), "Address: static call to             
  non-contract");                                                               
            ⋮┆----------------------------------------
          449┆ require(isContract(target), "Address: delegate call to           
  non-contract");                                                               
            ⋮┆----------------------------------------
          509┆ require((value == 0) || (token.allowance(address(this), spender) 
  == 0),                                                                        
          510┆     "SafeERC20: approve from non-zero to non-zero allowance"
          511┆ );
            ⋮┆----------------------------------------
          539┆ require(abi.decode(returndata, (bool)), "SafeERC20: ERC20        
  operation did not succeed");                                                  
            ⋮┆----------------------------------------
          670┆ require(set._values.length > index, "EnumerableSet: index out of 
  bounds");                                                                     
            ⋮┆----------------------------------------
         1062┆ require(newOwner != address(0), "Ownable: new owner is the zero  
  address");                                                                    
            ⋮┆----------------------------------------
         1268┆ require(sender != address(0), "ERC20: transfer from the zero     
  address");                                                                    
            ⋮┆----------------------------------------
         1269┆ require(recipient != address(0), "ERC20: transfer to the zero    
  address");                                                                    
            ⋮┆----------------------------------------
         1309┆ require(account != address(0), "ERC20: burn from the zero        
  address");                                                                    
            ⋮┆----------------------------------------
         1332┆ require(owner != address(0), "ERC20: approve from the zero       
  address");                                                                    
            ⋮┆----------------------------------------
         1333┆ require(spender != address(0), "ERC20: approve to the zero       
  address");                                                                    

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 56 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
