METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 22 Code Findings │
└──────────────────┘
                          
    /sb/ApprovalChain.sol 
       solidity.performance.unnecessary-checked-arithmetic-in-loop              
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
                                                                                
          407┆ for (uint256 i = 0; i < n_entries; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
           18┆ require(_isGovernor(msg.sender), "ONLY_GOVERNANCE");
            ⋮┆----------------------------------------
           65┆ require(success, "ETH_TRANSFER_FAILED");
            ⋮┆----------------------------------------
           74┆ require(isContract(tokenAddress), "BAD_TOKEN_ADDRESS");
            ⋮┆----------------------------------------
           80┆ require(abi.decode(returndata, (bool)),                          
  "TOKEN_OPERATION_FAILED");                                                    
            ⋮┆----------------------------------------
           89┆ require(isContract(contractAddress), "ADDRESS_NOT_CONTRACT");
            ⋮┆----------------------------------------
           93┆ require(success, "FAILED_TO_IDENTIFY_CONTRACT");
            ⋮┆----------------------------------------
           95┆ require(
           96┆     keccak256(abi.encodePacked(realContractId)) ==               
  expectedIdHash,                                                               
           97┆     "UNEXPECTED_CONTRACT_IDENTIFIER"
           98┆ );
            ⋮┆----------------------------------------
          345┆ require(!isFrozen(), "STATE_IS_FROZEN");
            ⋮┆----------------------------------------
          355┆ require(isFrozen(), "STATE_NOT_FROZEN");
            ⋮┆----------------------------------------
          383┆ require(entry.isContract(), "ADDRESS_NOT_CONTRACT");
            ⋮┆----------------------------------------
          386┆ require(hash_real == hash_identifier,                            
  "UNEXPECTED_CONTRACT_IDENTIFIER");                                            
            ⋮┆----------------------------------------
          387┆ require(list.length < maxLength, "CHAIN_AT_MAX_CAPACITY");
            ⋮┆----------------------------------------
          388┆ require(findEntry(list, entry) == ENTRY_NOT_FOUND,               
  "ENTRY_ALREADY_EXISTS");                                                      
            ⋮┆----------------------------------------
          392┆ require(
          393┆     list.length == 0 ||                                          
  IQueryableFactRegistry(entry).hasRegisteredFact(),                            
          394┆     "ENTRY_NOT_ENABLED"
          395┆ );
            ⋮┆----------------------------------------
          424┆ require(idx != ENTRY_NOT_FOUND, "ENTRY_DOES_NOT_EXIST");
            ⋮┆----------------------------------------
          434┆ require(block.timestamp + removalDelay > block.timestamp,        
  "INVALID_REMOVAL_DELAY");                                                     
            ⋮┆----------------------------------------
          435┆ require(chain.unlockedForRemovalTime[entry] == 0,                
  "ALREADY_ANNOUNCED");                                                         
            ⋮┆----------------------------------------
          452┆ require(unlockedForRemovalTime > 0, "REMOVAL_NOT_ANNOUNCED");
            ⋮┆----------------------------------------
          453┆ require(block.timestamp >= unlockedForRemovalTime,               
  "REMOVAL_NOT_ENABLED_YET");                                                   
            ⋮┆----------------------------------------
          458┆ require(n_entries > 1, "LAST_ENTRY_MAY_NOT_BE_REMOVED");
            ⋮┆----------------------------------------
       solidity.performance.use-prefix-increment-not-postfix                    
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
                                                                                
          407┆ for (uint256 i = 0; i < n_entries; i++) {

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 22 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
