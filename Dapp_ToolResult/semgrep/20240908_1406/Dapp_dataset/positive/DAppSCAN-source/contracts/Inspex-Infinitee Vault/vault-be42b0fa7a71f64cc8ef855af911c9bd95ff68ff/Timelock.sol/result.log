METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 37 Code Findings │
└──────────────────┘
                     
    /sb/Timelock.sol 
       solidity.performance.non-payable-constructor      
          Consider making costructor payable to save gas.
                                                         
          253┆ constructor(address admin_, uint delay_) public {
          254┆   require(delay_ >= MINIMUM_DELAY, "Timelock::constructor: Delay 
  must exceed minimum delay.");                                                 
          255┆   require(delay_ <= MAXIMUM_DELAY, "Timelock::constructor: Delay 
  must not exceed maximum delay.");                                             
          256┆ 
          257┆   admin = admin_;
          258┆   delay = delay_;
          259┆   admin_initialized = false;
          260┆ }
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
           88┆ require(c >= a, "SafeMath: addition overflow");
            ⋮┆----------------------------------------
          103┆ require(b <= a, "SafeMath: subtraction overflow");
            ⋮┆----------------------------------------
          120┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          137┆ require(b > 0, "SafeMath: division by zero");
            ⋮┆----------------------------------------
          154┆ require(b > 0, "SafeMath: modulo by zero");
            ⋮┆----------------------------------------
          254┆ require(delay_ >= MINIMUM_DELAY, "Timelock::constructor: Delay   
  must exceed minimum delay.");                                                 
            ⋮┆----------------------------------------
          255┆ require(delay_ <= MAXIMUM_DELAY, "Timelock::constructor: Delay   
  must not exceed maximum delay.");                                             
            ⋮┆----------------------------------------
          266┆ require(msg.sender == address(this), "Timelock::setDelay: Call   
  must come from Timelock.");                                                   
            ⋮┆----------------------------------------
          267┆ require(delay_ >= MINIMUM_DELAY, "Timelock::setDelay: Delay must 
  exceed minimum delay.");                                                      
            ⋮┆----------------------------------------
          268┆ require(delay_ <= MAXIMUM_DELAY, "Timelock::setDelay: Delay must 
  not exceed maximum delay.");                                                  
            ⋮┆----------------------------------------
          275┆ require(msg.sender == pendingAdmin, "Timelock::acceptAdmin: Call 
  must come from pendingAdmin.");                                               
            ⋮┆----------------------------------------
          285┆ require(msg.sender == address(this), "Timelock::setPendingAdmin: 
  Call must come from Timelock.");                                              
            ⋮┆----------------------------------------
          287┆ require(msg.sender == admin, "Timelock::setPendingAdmin: First   
  call must come from admin.");                                                 
            ⋮┆----------------------------------------
          296┆ require(msg.sender == admin, "Timelock::queueTransaction: Call   
  must come from admin.");                                                      
            ⋮┆----------------------------------------
          297┆ require(eta >= getBlockTimestamp().add(delay),                   
  "Timelock::queueTransaction: Estimated execution block must satisfy delay."); 
            ⋮┆----------------------------------------
          307┆ require(msg.sender == admin, "Timelock::cancelTransaction: Call  
  must come from admin.");                                                      
            ⋮┆----------------------------------------
          333┆ require(msg.sender == admin, "Timelock::executeTransaction: Call 
  must come from admin.");                                                      
            ⋮┆----------------------------------------
          336┆ require(queuedTransactions[txHash],                              
  "Timelock::executeTransaction: Transaction hasn't been queued.");             
            ⋮┆----------------------------------------
          337┆ require(getBlockTimestamp() >= eta,                              
  "Timelock::executeTransaction: Transaction hasn't surpassed time lock.");     
            ⋮┆----------------------------------------
          338┆ require(getBlockTimestamp() <= eta.add(GRACE_PERIOD),            
  "Timelock::executeTransaction: Transaction is stale.");                       
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
          120┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          254┆ require(delay_ >= MINIMUM_DELAY, "Timelock::constructor: Delay   
  must exceed minimum delay.");                                                 
            ⋮┆----------------------------------------
          255┆ require(delay_ <= MAXIMUM_DELAY, "Timelock::constructor: Delay   
  must not exceed maximum delay.");                                             
            ⋮┆----------------------------------------
          266┆ require(msg.sender == address(this), "Timelock::setDelay: Call   
  must come from Timelock.");                                                   
            ⋮┆----------------------------------------
          267┆ require(delay_ >= MINIMUM_DELAY, "Timelock::setDelay: Delay must 
  exceed minimum delay.");                                                      
            ⋮┆----------------------------------------
          268┆ require(delay_ <= MAXIMUM_DELAY, "Timelock::setDelay: Delay must 
  not exceed maximum delay.");                                                  
            ⋮┆----------------------------------------
          275┆ require(msg.sender == pendingAdmin, "Timelock::acceptAdmin: Call 
  must come from pendingAdmin.");                                               
            ⋮┆----------------------------------------
          285┆ require(msg.sender == address(this), "Timelock::setPendingAdmin: 
  Call must come from Timelock.");                                              
            ⋮┆----------------------------------------
          287┆ require(msg.sender == admin, "Timelock::setPendingAdmin: First   
  call must come from admin.");                                                 
            ⋮┆----------------------------------------
          296┆ require(msg.sender == admin, "Timelock::queueTransaction: Call   
  must come from admin.");                                                      
            ⋮┆----------------------------------------
          297┆ require(eta >= getBlockTimestamp().add(delay),                   
  "Timelock::queueTransaction: Estimated execution block must satisfy delay."); 
            ⋮┆----------------------------------------
          307┆ require(msg.sender == admin, "Timelock::cancelTransaction: Call  
  must come from admin.");                                                      
            ⋮┆----------------------------------------
          333┆ require(msg.sender == admin, "Timelock::executeTransaction: Call 
  must come from admin.");                                                      
            ⋮┆----------------------------------------
          336┆ require(queuedTransactions[txHash],                              
  "Timelock::executeTransaction: Transaction hasn't been queued.");             
            ⋮┆----------------------------------------
          337┆ require(getBlockTimestamp() >= eta,                              
  "Timelock::executeTransaction: Transaction hasn't surpassed time lock.");     
            ⋮┆----------------------------------------
          338┆ require(getBlockTimestamp() <= eta.add(GRACE_PERIOD),            
  "Timelock::executeTransaction: Transaction is stale.");                       

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 37 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
