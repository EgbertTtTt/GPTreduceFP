METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 32 Code Findings │
└──────────────────┘
                          
    /sb/ElementBridge.sol 
       solidity.performance.array-length-outside-loop                           
          Caching the array length outside a loop saves reading it on each      
  iteration, as long as the                                                     
          array's length is not changed during the loop.                        
                                                                                
         1520┆ while (expiryIndex < expiriesForAsset.length &&                  
  expiriesForAsset[expiryIndex] != trancheExpiry) {                             
            ⋮┆----------------------------------------
         1919┆ while (nonces.length > 0 && gasleft() >= minGasForLoop) {
            ⋮┆----------------------------------------
         1920┆ uint256 nextNonce = nonces[nonces.length - 1];
            ⋮┆----------------------------------------
       solidity.performance.non-payable-constructor      
          Consider making costructor payable to save gas.
                                                         
          334┆ constructor (string memory name_, string memory symbol_) public {
          335┆     _name = name_;
          336┆     _symbol = symbol_;
          337┆     _decimals = 18;
          338┆ }
            ⋮┆----------------------------------------
         1361┆ constructor(
         1362┆     address _rollupProcessor,
         1363┆     address _trancheFactory,
         1364┆     bytes32 _trancheBytecodeHash,
         1365┆     address _balancerVaultAddress,
         1366┆     address _elementDeploymentValidatorAddress
         1367┆ ) {
         1368┆     rollupProcessor = _rollupProcessor;
         1369┆     trancheFactory = _trancheFactory;
         1370┆     trancheBytecodeHash = _trancheBytecodeHash;
             [hid 4 additional lines, adjust with --max-lines-per-finding] 
       solidity.performance.state-variable-read-in-a-loop                       
          Replace state variable reads and writes within loops with local       
  variable reads and writes.                                                    
                                                                                
         1927┆ Interaction storage interaction = interactions[nextNonce];
            ⋮┆----------------------------------------
       solidity.performance.unnecessary-checked-arithmetic-in-loop              
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
                                                                                
          956┆ for (uint32 i = 0; i < initialSize; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
          183┆ require(c >= a, "SafeMath: addition overflow");
            ⋮┆----------------------------------------
          198┆ require(b <= a, "SafeMath: subtraction overflow");
            ⋮┆----------------------------------------
          215┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          232┆ require(b > 0, "SafeMath: division by zero");
            ⋮┆----------------------------------------
          249┆ require(b > 0, "SafeMath: modulo by zero");
            ⋮┆----------------------------------------
          488┆ require(sender != address(0), "ERC20: transfer from the zero     
  address");                                                                    
            ⋮┆----------------------------------------
          489┆ require(recipient != address(0), "ERC20: transfer to the zero    
  address");                                                                    
            ⋮┆----------------------------------------
          508┆ require(account != address(0), "ERC20: mint to the zero          
  address");                                                                    
            ⋮┆----------------------------------------
          529┆ require(account != address(0), "ERC20: burn from the zero        
  address");                                                                    
            ⋮┆----------------------------------------
          552┆ require(owner != address(0), "ERC20: approve from the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          553┆ require(spender != address(0), "ERC20: approve to the zero       
  address");                                                                    
            ⋮┆----------------------------------------
       solidity.performance.use-nested-if                                       
          Using nested is cheaper than using && multiple check combinations.    
  There are more                                                                
          advantages, such as easier to read code and better coverage reports.  
                                                                                
         1071┆ if (leftChildIndex < self.heapSize && self.heap[leftChildIndex] <
  smallestValue) {                                                              
         1072┆     swapIndex = leftChildIndex;
         1073┆     smallestValue = self.heap[leftChildIndex];
         1074┆ }
            ⋮┆----------------------------------------
         1076┆ if (rightChildIndex < self.heapSize && self.heap[rightChildIndex]
  < smallestValue) {                                                            
         1077┆     swapIndex = rightChildIndex;
         1078┆ }
            ⋮┆----------------------------------------
         1848┆ if (nonces.length == 1 && nonces[0] == MAX_INT) {
         1849┆     nonces[0] = nonce;
         1850┆ } else {
         1851┆     nonces.push(nonce);
         1852┆ }
            ⋮┆----------------------------------------
         1946┆ if (nonces.length == 0 && gasleft() >= (gasFloor +               
  MIN_GAS_FOR_EXPIRY_REMOVAL)) {                                                
         1947┆     // if we are here then we have run out of nonces for this    
  expiry so pop from the heap                                                   
         1948┆     heap.remove(nextExpiry);
         1949┆ }
            ⋮┆----------------------------------------
       solidity.performance.use-prefix-increment-not-postfix                    
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
                                                                                
          956┆ for (uint32 i = 0; i < initialSize; i++) {
            ⋮┆----------------------------------------
         1683┆ trancheAccount.numDeposits++;
            ⋮┆----------------------------------------
         1810┆ trancheAccount.numFinalised++;
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
          215┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          488┆ require(sender != address(0), "ERC20: transfer from the zero     
  address");                                                                    
            ⋮┆----------------------------------------
          489┆ require(recipient != address(0), "ERC20: transfer to the zero    
  address");                                                                    
            ⋮┆----------------------------------------
          529┆ require(account != address(0), "ERC20: burn from the zero        
  address");                                                                    
            ⋮┆----------------------------------------
          552┆ require(owner != address(0), "ERC20: approve from the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          553┆ require(spender != address(0), "ERC20: approve to the zero       
  address");                                                                    
            ⋮┆----------------------------------------
       solidity.security.basic-arithmetic-underflow
          Possible arithmetic underflow            
                                                   
         1802┆ int256 numRemainingInteractionsForTranche =                      
  int256(uint256(trancheAccount.numDeposits)) -                                 
  int256(uint256(trancheAccount.numFinalised));                                 

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 32 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
