METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 24 Code Findings │
└──────────────────┘
                        
    /sb/CitrusToken.sol 
       solidity.performance.array-length-outside-loop                           
          Caching the array length outside a loop saves reading it on each      
  iteration, as long as the                                                     
          array's length is not changed during the loop.                        
                                                                                
          128┆ for(uint i = 0; i < lockedAccount.locked.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.inefficient-state-variable-increment             
          <x> += <y> costs more gas than <x> = <x> + <y> for state variables.
                                                                             
           77┆ totalSupply += amount;
            ⋮┆----------------------------------------
       solidity.performance.non-payable-constructor      
          Consider making costructor payable to save gas.
                                                         
          161┆ constructor() {
          162┆     symbol = "CTS";
          163┆     name = "Citrus";
          164┆     decimals = 18;
          165┆     totalSupply = 383000000 * 10**18;
          166┆ 
          167┆     owner = msg.sender;
          168┆     balances[owner] = totalSupply;
          169┆ }
            ⋮┆----------------------------------------
       solidity.performance.state-variable-read-in-a-loop                       
          Replace state variable reads and writes within loops with local       
  variable reads and writes.                                                    
                                                                                
          150┆ lockedAmounts[i] = lock[user].locked[i].amount;
            ⋮┆----------------------------------------
          151┆ lockTimes[i] = lock[user].locked[i].time;
            ⋮┆----------------------------------------
          152┆ lockedAt[i] = lock[user].locked[i].lockedAt;
            ⋮┆----------------------------------------
          153┆ totalLockTime[i] = lock[user].locked[i].time +                   
  lock[user].locked[i].lockedAt;                                                
            ⋮┆----------------------------------------
          153┆ totalLockTime[i] = lock[user].locked[i].time +                   
  lock[user].locked[i].lockedAt;                                                
            ⋮┆----------------------------------------
       solidity.performance.unnecessary-checked-arithmetic-in-loop              
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
                                                                                
          128┆ for(uint i = 0; i < lockedAccount.locked.length; i++) {
            ⋮┆----------------------------------------
          149┆ for(uint i = 0; i < lockedLength; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
           73┆ require(account != address(0), "BEP20: mint to the zero          
  address");                                                                    
            ⋮┆----------------------------------------
           84┆ require(account != address(0), "BEP20: burn from the zero        
  address");                                                                    
            ⋮┆----------------------------------------
           89┆ require(accountBalance >= amount, "BEP20: burn amount exceeds    
  balance");                                                                    
            ⋮┆----------------------------------------
          116┆ require(amount > 0, "TimeLock: Amount cannot be zero");
            ⋮┆----------------------------------------
          130┆ require(block.timestamp >= (loc.time + loc.lockedAt), "TimeLock: 
  Release time not reached");                                                   
            ⋮┆----------------------------------------
          172┆ require(msg.sender == owner, 'only admin');
            ⋮┆----------------------------------------
          177┆ require(msg.sender == owner, 'only admin');
            ⋮┆----------------------------------------
       solidity.performance.use-multiple-require                                
          Using multiple require statements is cheaper than using && multiple   
  check combinations.                                                           
          There are more advantages, such as easier to read code and better     
  coverage reports.                                                             
                                                                                
           46┆ require                                                          
  (balances[msg.sender]>=_amount&&_amount>0&&balances[_to]+_amount>balances[_to]
  );                                                                            
            ⋮┆----------------------------------------
           54┆ require                                                          
  (balances[_from]>=_amount&&allowed[_from][msg.sender]>=_amount&&_amount>0&&bal
  ances[_to]+_amount>balances[_to]);                                            
            ⋮┆----------------------------------------
       solidity.performance.use-prefix-increment-not-postfix                    
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
                                                                                
          128┆ for(uint i = 0; i < lockedAccount.locked.length; i++) {
            ⋮┆----------------------------------------
          149┆ for(uint i = 0; i < lockedLength; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
           84┆ require(account != address(0), "BEP20: burn from the zero        
  address");                                                                    
            ⋮┆----------------------------------------
           89┆ require(accountBalance >= amount, "BEP20: burn amount exceeds    
  balance");                                                                    
            ⋮┆----------------------------------------
          130┆ require(block.timestamp >= (loc.time + loc.lockedAt), "TimeLock: 
  Release time not reached");                                                   

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 24 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
