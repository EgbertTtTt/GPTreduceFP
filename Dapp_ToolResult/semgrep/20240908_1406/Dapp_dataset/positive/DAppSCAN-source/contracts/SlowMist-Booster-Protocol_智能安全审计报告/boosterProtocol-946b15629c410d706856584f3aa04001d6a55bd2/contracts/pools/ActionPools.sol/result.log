METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 78 Code Findings │
└──────────────────┘
                        
    /sb/ActionPools.sol 
       solidity.best-practice.use-abi-encodecall-instead-of-encodewithselector  
          To guarantee arguments type safety it is recommended to use           
  `abi.encodeCall` instead of                                                   
          `abi.encodeWithSelector`.                                             
                                                                                
          490┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.transfer.selector, to, value));                  
            ⋮┆----------------------------------------
          494┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.transferFrom.selector, from, to, value));        
            ⋮┆----------------------------------------
          512┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.approve.selector, spender, value));              
            ⋮┆----------------------------------------
          517┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.approve.selector, spender, newAllowance));       
            ⋮┆----------------------------------------
          522┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.approve.selector, spender, newAllowance));       
            ⋮┆----------------------------------------
       solidity.best-practice.use-ownable2step                                  
          By demanding that the receiver of the owner permissions actively      
  accept via a contract call                                                    
          of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the 
  contract ownership                                                            
          from accidentally being transferred  to an address that cannot handle 
  it.                                                                           
                                                                                
          989┆ contract BOOToken is ERC20Capped, Ownable {
            ⋮┆----------------------------------------
         1016┆ contract ActionPools is Ownable, IActionPools {
            ⋮┆----------------------------------------
       solidity.performance.array-length-outside-loop                           
          Caching the array length outside a loop saves reading it on each      
  iteration, as long as the                                                     
          array's length is not changed during the loop.                        
                                                                                
         1219┆ for(uint256 u = 0; u < poolIndex[msg.sender][_callId].length; u  
  ++) {                                                                         
            ⋮┆----------------------------------------
         1229┆ for(uint256 u = 0; u < poolIndex[msg.sender][_callId].length; u  
  ++) {                                                                         
            ⋮┆----------------------------------------
         1239┆ for(uint256 u = 0; u < poolIndex[msg.sender][_callId].length; u  
  ++) {                                                                         
            ⋮┆----------------------------------------
         1257┆ for(uint256 u = 0; u < poolIndex[msg.sender][_callId].length; u  
  ++) {                                                                         
            ⋮┆----------------------------------------
       solidity.performance.non-payable-constructor      
          Consider making costructor payable to save gas.
                                                         
          696┆ constructor (string memory name_, string memory symbol_) public {
          697┆     _name = name_;
          698┆     _symbol = symbol_;
          699┆     _decimals = 18;
          700┆ }
            ⋮┆----------------------------------------
          990┆ constructor (
          991┆         uint256 _totalSupply
          992┆     ) public ERC20Capped(_totalSupply) ERC20('Booster-Token',    
  'BOO') {                                                                      
          993┆ }
            ⋮┆----------------------------------------
         1062┆ constructor (address _booToken, address _boodev) public {
         1063┆     booToken = BOOToken(_booToken);
         1064┆     require(booToken.totalSupply() >= 0, 'booToken');
         1065┆     boodev = _boodev;
         1066┆ }
            ⋮┆----------------------------------------
       solidity.performance.state-variable-read-in-a-loop                       
          Replace state variable reads and writes within loops with local       
  variable reads and writes.                                                    
                                                                                
         1219┆ for(uint256 u = 0; u < poolIndex[msg.sender][_callId].length; u  
  ++) {                                                                         
            ⋮┆----------------------------------------
         1220┆ uint256 pid = poolIndex[msg.sender][_callId][u];
            ⋮┆----------------------------------------
         1229┆ for(uint256 u = 0; u < poolIndex[msg.sender][_callId].length; u  
  ++) {                                                                         
            ⋮┆----------------------------------------
         1230┆ uint256 pid = poolIndex[msg.sender][_callId][u];
            ⋮┆----------------------------------------
         1239┆ for(uint256 u = 0; u < poolIndex[msg.sender][_callId].length; u  
  ++) {                                                                         
            ⋮┆----------------------------------------
         1240┆ uint256 pid = poolIndex[msg.sender][_callId][u];
            ⋮┆----------------------------------------
         1241┆ if( !poolInfo[pid].autoClaim ) {
            ⋮┆----------------------------------------
         1257┆ for(uint256 u = 0; u < poolIndex[msg.sender][_callId].length; u  
  ++) {                                                                         
            ⋮┆----------------------------------------
         1258┆ uint256 pid = poolIndex[msg.sender][_callId][u];
            ⋮┆----------------------------------------
         1259┆ if( !poolInfo[pid].autoUpdate ) {
            ⋮┆----------------------------------------
       solidity.performance.unnecessary-checked-arithmetic-in-loop              
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
                                                                                
         1184┆ for (uint256 pid = 0; pid < length; ++pid) {
            ⋮┆----------------------------------------
         1219┆ for(uint256 u = 0; u < poolIndex[msg.sender][_callId].length; u  
  ++) {                                                                         
            ⋮┆----------------------------------------
         1229┆ for(uint256 u = 0; u < poolIndex[msg.sender][_callId].length; u  
  ++) {                                                                         
            ⋮┆----------------------------------------
         1239┆ for(uint256 u = 0; u < poolIndex[msg.sender][_callId].length; u  
  ++) {                                                                         
            ⋮┆----------------------------------------
         1257┆ for(uint256 u = 0; u < poolIndex[msg.sender][_callId].length; u  
  ++) {                                                                         
            ⋮┆----------------------------------------
         1315┆ for (uint256 pid = 0; pid < length; ++pid) {
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
          161┆ require(c >= a, "SafeMath: addition overflow");
            ⋮┆----------------------------------------
          176┆ require(b <= a, "SafeMath: subtraction overflow");
            ⋮┆----------------------------------------
          193┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          210┆ require(b > 0, "SafeMath: division by zero");
            ⋮┆----------------------------------------
          227┆ require(b > 0, "SafeMath: modulo by zero");
            ⋮┆----------------------------------------
          339┆ require(address(this).balance >= amount, "Address: insufficient  
  balance");                                                                    
            ⋮┆----------------------------------------
          343┆ require(success, "Address: unable to send value, recipient may   
  have reverted");                                                              
            ⋮┆----------------------------------------
          400┆ require(address(this).balance >= value, "Address: insufficient   
  balance for call");                                                           
            ⋮┆----------------------------------------
          401┆ require(isContract(target), "Address: call to non-contract");
            ⋮┆----------------------------------------
          425┆ require(isContract(target), "Address: static call to             
  non-contract");                                                               
            ⋮┆----------------------------------------
          449┆ require(isContract(target), "Address: delegate call to           
  non-contract");                                                               
            ⋮┆----------------------------------------
          509┆ require((value == 0) || (token.allowance(address(this), spender) 
  == 0),                                                                        
          510┆     "SafeERC20: approve from non-zero to non-zero allowance"
          511┆ );
            ⋮┆----------------------------------------
          539┆ require(abi.decode(returndata, (bool)), "SafeERC20: ERC20        
  operation did not succeed");                                                  
            ⋮┆----------------------------------------
          602┆ require(owner() == _msgSender(), "Ownable: caller is not the     
  owner");                                                                      
            ⋮┆----------------------------------------
          623┆ require(newOwner != address(0), "Ownable: new owner is the zero  
  address");                                                                    
            ⋮┆----------------------------------------
          850┆ require(sender != address(0), "ERC20: transfer from the zero     
  address");                                                                    
            ⋮┆----------------------------------------
          851┆ require(recipient != address(0), "ERC20: transfer to the zero    
  address");                                                                    
            ⋮┆----------------------------------------
          870┆ require(account != address(0), "ERC20: mint to the zero          
  address");                                                                    
            ⋮┆----------------------------------------
          891┆ require(account != address(0), "ERC20: burn from the zero        
  address");                                                                    
            ⋮┆----------------------------------------
          914┆ require(owner != address(0), "ERC20: approve from the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          915┆ require(spender != address(0), "ERC20: approve to the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          962┆ require(cap_ > 0, "ERC20Capped: cap is 0");
            ⋮┆----------------------------------------
          984┆ require(totalSupply().add(amount) <= cap(), "ERC20Capped: cap    
  exceeded");                                                                   
            ⋮┆----------------------------------------
         1002┆ require(mintWhitelist[msg.sender], 'not allow');
            ⋮┆----------------------------------------
         1064┆ require(booToken.totalSupply() >= 0, 'booToken');
            ⋮┆----------------------------------------
         1095┆ require(lpToken != address(0) && totalAmount >= 0, 'pool not     
  right');                                                                      
            ⋮┆----------------------------------------
         1126┆ require(_rate <= 1e9, 'max is 1e9');
            ⋮┆----------------------------------------
         1131┆ require(msg.sender == boodev, 'prev dev only');
            ⋮┆----------------------------------------
         1137┆ require(_from <= _to, 'getBlocksReward error');
            ⋮┆----------------------------------------
       solidity.performance.use-multiple-require                                
          Using multiple require statements is cheaper than using && multiple   
  check combinations.                                                           
          There are more advantages, such as easier to read code and better     
  coverage reports.                                                             
                                                                                
         1095┆ require(lpToken != address(0) && totalAmount >= 0, 'pool not     
  right');                                                                      
            ⋮┆----------------------------------------
       solidity.performance.use-nested-if                                       
          Using nested is cheaper than using && multiple check combinations.    
  There are more                                                                
          advantages, such as easier to read code and better coverage reports.  
                                                                                
         1174┆ if (block.number > pool.lastRewardBlock && _totalAmount != 0) {
         1175┆     uint256 poolReward = getBlocksReward(_pid,                   
  pool.lastRewardBlock, block.number);                                          
         1176┆     accRewardPerShare =                                          
  accRewardPerShare.add(poolReward.mul(1e18).div(_totalAmount));                
         1177┆ }
            ⋮┆----------------------------------------
       solidity.performance.use-prefix-increment-not-postfix                    
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
                                                                                
         1219┆ for(uint256 u = 0; u < poolIndex[msg.sender][_callId].length; u  
  ++) {                                                                         
            ⋮┆----------------------------------------
         1229┆ for(uint256 u = 0; u < poolIndex[msg.sender][_callId].length; u  
  ++) {                                                                         
            ⋮┆----------------------------------------
         1239┆ for(uint256 u = 0; u < poolIndex[msg.sender][_callId].length; u  
  ++) {                                                                         
            ⋮┆----------------------------------------
         1257┆ for(uint256 u = 0; u < poolIndex[msg.sender][_callId].length; u  
  ++) {                                                                         
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
          193┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          343┆ require(success, "Address: unable to send value, recipient may   
  have reverted");                                                              
            ⋮┆----------------------------------------
          400┆ require(address(this).balance >= value, "Address: insufficient   
  balance for call");                                                           
            ⋮┆----------------------------------------
          425┆ require(isContract(target), "Address: static call to             
  non-contract");                                                               
            ⋮┆----------------------------------------
          449┆ require(isContract(target), "Address: delegate call to           
  non-contract");                                                               
            ⋮┆----------------------------------------
          509┆ require((value == 0) || (token.allowance(address(this), spender) 
  == 0),                                                                        
          510┆     "SafeERC20: approve from non-zero to non-zero allowance"
          511┆ );
            ⋮┆----------------------------------------
          539┆ require(abi.decode(returndata, (bool)), "SafeERC20: ERC20        
  operation did not succeed");                                                  
            ⋮┆----------------------------------------
          623┆ require(newOwner != address(0), "Ownable: new owner is the zero  
  address");                                                                    
                
            ⋮┆----------------------------------------
          850┆ require(sender != address(0), "ERC20: transfer from the zero     
  address");                                                                    
            ⋮┆----------------------------------------
          851┆ require(recipient != address(0), "ERC20: transfer to the zero    
  address");                                                                    
            ⋮┆----------------------------------------
          891┆ require(account != address(0), "ERC20: burn from the zero        
  address");                                                                    
            ⋮┆----------------------------------------
          914┆ require(owner != address(0), "ERC20: approve from the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          915┆ require(spender != address(0), "ERC20: approve to the zero       
  address");                                                                    

                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 78 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
