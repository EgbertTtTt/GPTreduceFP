METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 42 Code Findings │
└──────────────────┘
                  
    /sb/Umbra.sol 
       solidity.best-practice.use-abi-encodecall-instead-of-encodewithselector  
          To guarantee arguments type safety it is recommended to use           
  `abi.encodeCall` instead of                                                   
          `abi.encodeWithSelector`.                                             
                                                                                
          575┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.transfer.selector, to, value));                  
            ⋮┆----------------------------------------
          579┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.transferFrom.selector, from, to, value));        
            ⋮┆----------------------------------------
          597┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.approve.selector, spender, value));              
            ⋮┆----------------------------------------
          602┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.approve.selector, spender, newAllowance));       
            ⋮┆----------------------------------------
          607┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.approve.selector, spender, newAllowance));       
            ⋮┆----------------------------------------
       solidity.best-practice.use-ownable2step                                  
          By demanding that the receiver of the owner permissions actively      
  accept via a contract call                                                    
          of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the 
  contract ownership                                                            
          from accidentally being transferred  to an address that cannot handle 
  it.                                                                           
                                                                                
          652┆ contract Umbra is Ownable {
            ⋮┆----------------------------------------
       solidity.performance.non-payable-constructor      
          Consider making costructor payable to save gas.
                                                         
          702┆ constructor(
          703┆   uint256 _toll,
          704┆   address _tollCollector,
          705┆   address payable _tollReceiver
          706┆ ) {
          707┆   toll = _toll;
          708┆   tollCollector = _tollCollector;
          709┆   tollReceiver = _tollReceiver;
          710┆ 
          711┆   uint256 _chainId;
             [hid 7 additional lines, adjust with --max-lines-per-finding] 
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
           63┆ require(owner() == _msgSender(), "Ownable: caller is not the     
  owner");                                                                      
            ⋮┆----------------------------------------
           84┆ require(newOwner != address(0), "Ownable: new owner is the zero  
  address");                                                                    
            ⋮┆----------------------------------------
          246┆ require(c >= a, "SafeMath: addition overflow");
            ⋮┆----------------------------------------
          261┆ require(b <= a, "SafeMath: subtraction overflow");
            ⋮┆----------------------------------------
          278┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          295┆ require(b > 0, "SafeMath: division by zero");
            ⋮┆----------------------------------------
          312┆ require(b > 0, "SafeMath: modulo by zero");
            ⋮┆----------------------------------------
          424┆ require(address(this).balance >= amount, "Address: insufficient  
  balance");                                                                    
            ⋮┆----------------------------------------
          428┆ require(success, "Address: unable to send value, recipient may   
  have reverted");                                                              
            ⋮┆----------------------------------------
          485┆ require(address(this).balance >= value, "Address: insufficient   
  balance for call");                                                           
            ⋮┆----------------------------------------
          486┆ require(isContract(target), "Address: call to non-contract");
            ⋮┆----------------------------------------
          510┆ require(isContract(target), "Address: static call to             
  non-contract");                                                               
            ⋮┆----------------------------------------
          534┆ require(isContract(target), "Address: delegate call to           
  non-contract");                                                               
            ⋮┆----------------------------------------
          594┆ require((value == 0) || (token.allowance(address(this), spender) 
  == 0),                                                                        
          595┆     "SafeERC20: approve from non-zero to non-zero allowance"
          596┆ );
            ⋮┆----------------------------------------
          624┆ require(abi.decode(returndata, (bool)), "SafeERC20: ERC20        
  operation did not succeed");                                                  
            ⋮┆----------------------------------------
          748┆ require(msg.sender == tollCollector, "Umbra: Not toll            
  collector");                                                                  
            ⋮┆----------------------------------------
          769┆ require(_tollCommitment == toll, "Umbra: Invalid or outdated toll
  commitment");                                                                 
            ⋮┆----------------------------------------
          772┆ require(msg.value > toll, "Umbra: Must pay more than the toll");
            ⋮┆----------------------------------------
          795┆ require(msg.value == toll, "Umbra: Must pay the exact toll");
            ⋮┆----------------------------------------
          796┆ require(tokenPayments[_receiver][_tokenAddr] == 0, "Umbra: Cannot
  send more tokens to stealth address");                                        
            ⋮┆----------------------------------------
          920┆ require(_amount > _sponsorFee, "Umbra: No balance to withdraw or 
  fee exceeds balance");                                                        
            ⋮┆----------------------------------------
          972┆ require(_recoveredAddress != address(0) && _recoveredAddress ==  
  _stealthAddr, "Umbra: Invalid Signature");                                    
            ⋮┆----------------------------------------
       solidity.performance.use-multiple-require                                
          Using multiple require statements is cheaper than using && multiple   
  check combinations.                                                           
          There are more advantages, such as easier to read code and better     
  coverage reports.                                                             
                                                                                
          972┆ require(_recoveredAddress != address(0) && _recoveredAddress ==  
  _stealthAddr, "Umbra: Invalid Signature");                                    
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
           84┆ require(newOwner != address(0), "Ownable: new owner is the zero  
  address");                                                                    
            ⋮┆----------------------------------------
          278┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          428┆ require(success, "Address: unable to send value, recipient may   
  have reverted");                                                              
            ⋮┆----------------------------------------
          485┆ require(address(this).balance >= value, "Address: insufficient   
  balance for call");                                                           
            ⋮┆----------------------------------------
          510┆ require(isContract(target), "Address: static call to             
  non-contract");                                                               
            ⋮┆----------------------------------------
          534┆ require(isContract(target), "Address: delegate call to           
  non-contract");                                                               
            ⋮┆----------------------------------------
          594┆ require((value == 0) || (token.allowance(address(this), spender) 
  == 0),                                                                        
          595┆     "SafeERC20: approve from non-zero to non-zero allowance"
          596┆ );
            ⋮┆----------------------------------------
          624┆ require(abi.decode(returndata, (bool)), "SafeERC20: ERC20        
  operation did not succeed");                                                  
            ⋮┆----------------------------------------
          769┆ require(_tollCommitment == toll, "Umbra: Invalid or outdated toll
  commitment");                                                                 
            ⋮┆----------------------------------------
          772┆ require(msg.value > toll, "Umbra: Must pay more than the toll");
            ⋮┆----------------------------------------
          796┆ require(tokenPayments[_receiver][_tokenAddr] == 0, "Umbra: Cannot
  send more tokens to stealth address");                                        
            ⋮┆----------------------------------------
          920┆ require(_amount > _sponsorFee, "Umbra: No balance to withdraw or 
  fee exceeds balance");                                                        

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 42 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
