METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 95 Code Findings │
└──────────────────┘
                         
    /sb/DictatorDOGE.sol 
       solidity.best-practice.use-ownable2step                                  
          By demanding that the receiver of the owner permissions actively      
  accept via a contract call                                                    
          of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the 
  contract ownership                                                            
          from accidentally being transferred  to an address that cannot handle 
  it.                                                                           
                                                                                
          410┆ contract DictatorDOGE is Context, IERC20, Ownable {
            ⋮┆----------------------------------------
       solidity.performance.array-length-outside-loop                           
          Caching the array length outside a loop saves reading it on each      
  iteration, as long as the                                                     
          array's length is not changed during the loop.                        
                                                                                
          645┆ for (uint256 i = 0; i < _excluded.length; i++) {
            ⋮┆----------------------------------------
          647┆ _excluded[i] = _excluded[_excluded.length - 1];
            ⋮┆----------------------------------------
          712┆ for (uint i = 0; i < _sellHistories.length; i ++) {
            ⋮┆----------------------------------------
          949┆ for (uint256 i = 0; i < _excluded.length; i++) {
            ⋮┆----------------------------------------
         1021┆ for (uint256 j = 0; j < _sellHistories.length; j ++) {
            ⋮┆----------------------------------------
       solidity.performance.init-variables-with-default-value                   
          Uninitialized variables are assigned with the types default value.    
  Explicitly initializing a                                                     
          variable with its default value costs unnecessary gas.                
                                                                                
          486┆ bool public swapAndLiquifyEnabled = false;
            ⋮┆----------------------------------------
       solidity.performance.non-payable-constructor      
          Consider making costructor payable to save gas.
                                                         
          157┆ constructor () {
          158┆     address msgSender = _msgSender();
          159┆     _owner = msgSender;
          160┆     emit OwnershipTransferred(address(0), msgSender);
          161┆ }
            ⋮┆----------------------------------------
          517┆ constructor () {
          518┆ 
          519┆     _rOwned[_msgSender()] = _rTotal;
          520┆ 
          521┆ 
          522┆     // Pancake Router Mainnet v2
          523┆     IUniswapV2Router02 _uniswapV2Router =                        
  IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);               
          524┆ 
          525┆     uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())
          526┆         .createPair(address(this), _uniswapV2Router.WETH());
             [hid 11 additional lines, adjust with --max-lines-per-finding] 
       solidity.performance.state-variable-read-in-a-loop                       
          Replace state variable reads and writes within loops with local       
  variable reads and writes.                                                    
                                                                                
          645┆ for (uint256 i = 0; i < _excluded.length; i++) {
            ⋮┆----------------------------------------
          646┆ if (_excluded[i] == account) {
            ⋮┆----------------------------------------
          647┆ _excluded[i] = _excluded[_excluded.length - 1];
            ⋮┆----------------------------------------
          647┆ _excluded[i] = _excluded[_excluded.length - 1];
            ⋮┆----------------------------------------
          647┆ _excluded[i] = _excluded[_excluded.length - 1];
            ⋮┆----------------------------------------
          648┆ _tOwned[account] = 0;
            ⋮┆----------------------------------------
          649┆ _isExcluded[account] = false;
            ⋮┆----------------------------------------
          650┆ _excluded.pop();
            ⋮┆----------------------------------------
          712┆ for (uint i = 0; i < _sellHistories.length; i ++) {
            ⋮┆----------------------------------------
          714┆ if (_sellHistories[i].time >= startTime) {
            ⋮┆----------------------------------------
          715┆ sumBnbAmount = sumBnbAmount.add(_sellHistories[i].bnbAmount);
            ⋮┆----------------------------------------
          949┆ for (uint256 i = 0; i < _excluded.length; i++) {
            ⋮┆----------------------------------------
          950┆ if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] >   
  tSupply) return (_rTotal, _tTotal);                                           
            ⋮┆----------------------------------------
          950┆ if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] >   
  tSupply) return (_rTotal, _tTotal);                                           
            ⋮┆----------------------------------------
          950┆ if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] >   
  tSupply) return (_rTotal, _tTotal);                                           
            ⋮┆----------------------------------------
          950┆ if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] >   
  tSupply) return (_rTotal, _tTotal);                                           
            ⋮┆----------------------------------------
          950┆ if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] >   
  tSupply) return (_rTotal, _tTotal);                                           
            ⋮┆----------------------------------------
          950┆ if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] >   
  tSupply) return (_rTotal, _tTotal);                                           
            ⋮┆----------------------------------------
          951┆ rSupply = rSupply.sub(_rOwned[_excluded[i]]);
            ⋮┆----------------------------------------
          951┆ rSupply = rSupply.sub(_rOwned[_excluded[i]]);
            ⋮┆----------------------------------------
          952┆ tSupply = tSupply.sub(_tOwned[_excluded[i]]);
            ⋮┆----------------------------------------
          952┆ tSupply = tSupply.sub(_tOwned[_excluded[i]]);
            ⋮┆----------------------------------------
         1021┆ for (uint256 j = 0; j < _sellHistories.length; j ++) {
            ⋮┆----------------------------------------
         1023┆ if (_sellHistories[j].time >= maxStartTimeForHistories) {
            ⋮┆----------------------------------------
         1025┆ _sellHistories[i].time = _sellHistories[j].time;
            ⋮┆----------------------------------------
         1025┆ _sellHistories[i].time = _sellHistories[j].time;
            ⋮┆----------------------------------------
         1026┆ _sellHistories[i].bnbAmount = _sellHistories[j].bnbAmount;
            ⋮┆----------------------------------------
         1026┆ _sellHistories[i].bnbAmount = _sellHistories[j].bnbAmount;
            ⋮┆----------------------------------------
         1036┆ _sellHistories.pop();
            ⋮┆----------------------------------------
       solidity.performance.unnecessary-checked-arithmetic-in-loop              
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
                                                                                
          645┆ for (uint256 i = 0; i < _excluded.length; i++) {
            ⋮┆----------------------------------------
          712┆ for (uint i = 0; i < _sellHistories.length; i ++) {
            ⋮┆----------------------------------------
          949┆ for (uint256 i = 0; i < _excluded.length; i++) {
            ⋮┆----------------------------------------
         1021┆ for (uint256 j = 0; j < _sellHistories.length; j ++) {
            ⋮┆----------------------------------------
         1034┆ for (uint256 j = 0; j < removedCnt; j ++) {
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
           41┆ require(c >= a, "SafeMath: addition overflow");
            ⋮┆----------------------------------------
           63┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          105┆ require(address(this).balance >= amount, "Address: insufficient  
  balance");                                                                    
            ⋮┆----------------------------------------
          109┆ require(success, "Address: unable to send value, recipient may   
  have reverted");                                                              
            ⋮┆----------------------------------------
          126┆ require(address(this).balance >= value, "Address: insufficient   
  balance for call");                                                           
            ⋮┆----------------------------------------
          131┆ require(isContract(target), "Address: call to non-contract");
            ⋮┆----------------------------------------
          168┆ require(_owner == _msgSender(), "Ownable: caller is not the      
  owner");                                                                      
            ⋮┆----------------------------------------
          178┆ require(newOwner != address(0), "Ownable: new owner is the zero  
  address");                                                                    
            ⋮┆----------------------------------------
          199┆ require(_previousOwner == msg.sender, "You don't have permission 
  to unlock");                                                                  
            ⋮┆----------------------------------------
          200┆ require(block.timestamp > _lockTime , "Contract is locked until 7
  days");                                                                       
            ⋮┆----------------------------------------
          608┆ require(!_isExcluded[sender], "Excluded addresses cannot call    
  this function");                                                              
            ⋮┆----------------------------------------
          617┆ require(tAmount <= _tTotal, "Amount must be less than supply");
            ⋮┆----------------------------------------
          628┆ require(rAmount <= _rTotal, "Amount must be less than total      
  reflections");                                                                
            ⋮┆----------------------------------------
          635┆ require(!_isExcluded[account], "Account is already excluded");
            ⋮┆----------------------------------------
          644┆ require(_isExcluded[account], "Account is not excluded");
            ⋮┆----------------------------------------
          661┆ require(owner != address(0), "ERC20: approve from the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          662┆ require(spender != address(0), "ERC20: approve to the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          673┆ require(from != address(0), "ERC20: transfer from the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          674┆ require(to != address(0), "ERC20: transfer to the zero address");
            ⋮┆----------------------------------------
          675┆ require(amount > 0, "Transfer amount must be greater than zero");
            ⋮┆----------------------------------------
          677┆ require(amount <= _maxTxAmount, "Transfer amount exceeds the     
  maxTxAmount.");                                                               
            ⋮┆----------------------------------------
         1058┆ require(newPercent <= 100, "The value must not be larger than    
  100.");                                                                       
            ⋮┆----------------------------------------
       solidity.performance.use-nested-if                                       
          Using nested is cheaper than using && multiple check combinations.    
  There are more                                                                
          advantages, such as easier to read code and better coverage reports.  
                                                                                
          676┆ if(from != owner() && to != owner()) {
          677┆     require(amount <= _maxTxAmount, "Transfer amount exceeds the 
  maxTxAmount.");                                                               
          678┆ }
            ⋮┆----------------------------------------
          683┆ if (to == uniswapV2Pair && balanceOf(uniswapV2Pair) > 0) {
          684┆     SellHistories memory sellHistory;
          685┆     sellHistory.time = block.timestamp;
          686┆     sellHistory.bnbAmount = _getSellBnBAmount(amount);
          687┆ 
          688┆     _sellHistories.push(sellHistory);
          689┆ }
            ⋮┆----------------------------------------
          692┆ if (!inSwapAndLiquify && swapAndLiquifyEnabled &&                
  balanceOf(uniswapV2Pair) > 0) {                                               
          693┆     if (to == uniswapV2Pair) {
          694┆         if (overMinimumTokenBalance && _startTimeForSwap +       
  _intervalMinutesForSwap <= block.timestamp) {                                 
          695┆             _startTimeForSwap = block.timestamp;
          696┆             contractTokenBalance = minimumTokensBeforeSwap;
          697┆             swapTokens(contractTokenBalance);
          698┆         }
          699┆ 
          700┆         if (buyBackEnabled) {
          701┆ 
             [hid 36 additional lines, adjust with --max-lines-per-finding] 
          694┆ if (overMinimumTokenBalance && _startTimeForSwap +               
  _intervalMinutesForSwap <= block.timestamp) {                                 
          695┆     _startTimeForSwap = block.timestamp;
          696┆     contractTokenBalance = minimumTokensBeforeSwap;
          697┆     swapTokens(contractTokenBalance);
          698┆ }
            ⋮┆----------------------------------------
          720┆ if (cnt > 0 && _buyBackDivisor > 0) {
          721┆     _bBSLimitMax = sumBnbAmount.div(cnt).div(_buyBackDivisor);
          722┆ }
            ⋮┆----------------------------------------
          861┆ if (_isExcluded[sender] && !_isExcluded[recipient]) {
          862┆     _transferFromExcluded(sender, recipient, amount);
          863┆ } else if (!_isExcluded[sender] && _isExcluded[recipient]) {
          864┆     _transferToExcluded(sender, recipient, amount);
          865┆ } else if (_isExcluded[sender] && _isExcluded[recipient]) {
          866┆     _transferBothExcluded(sender, recipient, amount);
          867┆ } else {
          868┆     _transferStandard(sender, recipient, amount);
          869┆ }
            ⋮┆----------------------------------------
          863┆ } else if (!_isExcluded[sender] && _isExcluded[recipient]) {
          864┆     _transferToExcluded(sender, recipient, amount);
          865┆ } else if (_isExcluded[sender] && _isExcluded[recipient]) {
          866┆     _transferBothExcluded(sender, recipient, amount);
          867┆ } else {
          868┆     _transferStandard(sender, recipient, amount);
          869┆ }
            ⋮┆----------------------------------------
          865┆ } else if (_isExcluded[sender] && _isExcluded[recipient]) {
          866┆     _transferBothExcluded(sender, recipient, amount);
          867┆ } else {
          868┆     _transferStandard(sender, recipient, amount);
          869┆ }
            ⋮┆----------------------------------------
          979┆ if(_taxFee == 0 && _liquidityFee == 0) return;
            ⋮┆----------------------------------------
       solidity.performance.use-prefix-increment-not-postfix                    
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
                                                                                
          645┆ for (uint256 i = 0; i < _excluded.length; i++) {
            ⋮┆----------------------------------------
          712┆ for (uint i = 0; i < _sellHistories.length; i ++) {
            ⋮┆----------------------------------------
          949┆ for (uint256 i = 0; i < _excluded.length; i++) {
            ⋮┆----------------------------------------
         1021┆ for (uint256 j = 0; j < _sellHistories.length; j ++) {
            ⋮┆----------------------------------------
         1034┆ for (uint256 j = 0; j < removedCnt; j ++) {
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
           63┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          109┆ require(success, "Address: unable to send value, recipient may   
  have reverted");                                                              
            ⋮┆----------------------------------------
          126┆ require(address(this).balance >= value, "Address: insufficient   
  balance for call");                                                           
            ⋮┆----------------------------------------
          178┆ require(newOwner != address(0), "Ownable: new owner is the zero  
  address");                                                                    
            ⋮┆----------------------------------------
          199┆ require(_previousOwner == msg.sender, "You don't have permission 
  to unlock");                                                                  
            ⋮┆----------------------------------------
          608┆ require(!_isExcluded[sender], "Excluded addresses cannot call    
  this function");                                                              
            ⋮┆----------------------------------------
          628┆ require(rAmount <= _rTotal, "Amount must be less than total      
  reflections");                                                                
            ⋮┆----------------------------------------
          661┆ require(owner != address(0), "ERC20: approve from the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          662┆ require(spender != address(0), "ERC20: approve to the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          673┆ require(from != address(0), "ERC20: transfer from the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          674┆ require(to != address(0), "ERC20: transfer to the zero address");
            ⋮┆----------------------------------------
          675┆ require(amount > 0, "Transfer amount must be greater than zero");
            ⋮┆----------------------------------------
          677┆ require(amount <= _maxTxAmount, "Transfer amount exceeds the     
  maxTxAmount.");                                                               
            ⋮┆----------------------------------------
         1058┆ require(newPercent <= 100, "The value must not be larger than    
  100.");                                                                       
            ⋮┆----------------------------------------
       solidity.security.no-slippage-check          
          No slippage check in a Uniswap v2/v3 trade
                                                    
          814┆                                                                  
  uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(           
          815┆     tokenAmount,
          816┆     0, // Accept any amount of ETH
          817┆     path,
          818┆     address(this), // The contract
          819┆     block.timestamp
          820┆ );
            ⋮┆----------------------------------------
          832┆                                                                  
  uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value:     
  amount}(                                                                      
          833┆     0, // Accept any amount of Tokens
          834┆     path,
          835┆     deadAddress, // Burn address
          836┆     block.timestamp.add(300)
          837┆ );

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 95 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
