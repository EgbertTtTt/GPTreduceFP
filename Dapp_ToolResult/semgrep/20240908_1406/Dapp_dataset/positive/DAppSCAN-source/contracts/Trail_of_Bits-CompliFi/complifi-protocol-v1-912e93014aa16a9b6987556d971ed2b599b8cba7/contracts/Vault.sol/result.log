METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 42 Code Findings │
└──────────────────┘
                  
    /sb/Vault.sol 
       solidity.best-practice.use-ownable2step                                  
          By demanding that the receiver of the owner permissions actively      
  accept via a contract call                                                    
          of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the 
  contract ownership                                                            
          from accidentally being transferred  to an address that cannot handle 
  it.                                                                           
                                                                                
          732┆ contract Vault is Ownable, Pausable, IPausableVault,             
  ReentrancyGuard {                                                             
            ⋮┆----------------------------------------
       solidity.performance.non-payable-constructor      
          Consider making costructor payable to save gas.
                                                         
          814┆ constructor(
          815┆     uint256 _liveTime,
          816┆     uint256 _protocolFee,
          817┆     address _feeWallet,
          818┆     address _derivativeSpecification,
          819┆     address _collateralToken,
          820┆     address[] memory _oracles,
          821┆     address[] memory _oracleIterators,
          822┆     address _collateralSplit,
          823┆     address _tokenBuilder,
             [hid 48 additional lines, adjust with --max-lines-per-finding] 
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
           87┆ require(c >= a, "SafeMath: addition overflow");
            ⋮┆----------------------------------------
          102┆ require(b <= a, "SafeMath: subtraction overflow");
            ⋮┆----------------------------------------
          119┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          136┆ require(b > 0, "SafeMath: division by zero");
            ⋮┆----------------------------------------
          153┆ require(b > 0, "SafeMath: modulo by zero");
            ⋮┆----------------------------------------
          336┆ require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
            ⋮┆----------------------------------------
          407┆ require(owner() == _msgSender(), "Ownable: caller is not the     
  owner");                                                                      
            ⋮┆----------------------------------------
          428┆ require(newOwner != address(0), "Ownable: new owner is the zero  
  address");                                                                    
            ⋮┆----------------------------------------
          478┆ require(!paused(), "Pausable: paused");
            ⋮┆----------------------------------------
          490┆ require(paused(), "Pausable: not paused");
            ⋮┆----------------------------------------
          828┆ require(_liveTime > 0, "Live zero");
            ⋮┆----------------------------------------
          829┆ require(_liveTime <= block.timestamp, "Live in future");
            ⋮┆----------------------------------------
          834┆ require(_feeWallet != address(0), "Fee wallet");
            ⋮┆----------------------------------------
          837┆ require(_derivativeSpecification != address(0), "Derivative");
            ⋮┆----------------------------------------
          842┆ require(_collateralToken != address(0), "Collateral token");
            ⋮┆----------------------------------------
          845┆ require(_oracles.length > 0, "Oracles");
            ⋮┆----------------------------------------
          846┆ require(_oracles[0] != address(0), "First oracle is absent");
            ⋮┆----------------------------------------
          849┆ require(_oracleIterators.length > 0, "OracleIterators");
            ⋮┆----------------------------------------
          850┆ require(
          851┆     _oracleIterators[0] != address(0),
          852┆     "First oracle iterator is absent"
          853┆ );
            ⋮┆----------------------------------------
          856┆ require(_collateralSplit != address(0), "Collateral split");
            ⋮┆----------------------------------------
          859┆ require(_tokenBuilder != address(0), "Token builder");
            ⋮┆----------------------------------------
          862┆ require(_feeLogger != address(0), "Fee logger");
            ⋮┆----------------------------------------
          868┆ require(block.timestamp < settleTime, "Settled time");
            ⋮┆----------------------------------------
          885┆ require(state == State.Created, "Incorrect state.");
            ⋮┆----------------------------------------
          914┆ require(state == State.Live, "Incorrect state");
            ⋮┆----------------------------------------
          915┆ require(
          916┆     block.timestamp >= (settleTime + settlementDelay),
          917┆     "Incorrect time"
          918┆ );
            ⋮┆----------------------------------------
          963┆ require(state == State.Live, "Live is over");
            ⋮┆----------------------------------------
          965┆ require(_collateralAmount > 0, "Zero amount");
            ⋮┆----------------------------------------
          994┆ require(_tokenAmount > 0, "Zero amount");
            ⋮┆----------------------------------------
          995┆ require(
          996┆     _tokenAmount <= primaryToken.balanceOf(msg.sender),
          997┆     "Insufficient primary amount"
          998┆ );
            ⋮┆----------------------------------------
          999┆ require(
         1000┆     _tokenAmount <= complementToken.balanceOf(msg.sender),
         1001┆     "Insufficient complement amount"
         1002┆ );
            ⋮┆----------------------------------------
         1030┆ require(
         1031┆     _primaryTokenAmount > 0 || _complementTokenAmount > 0,
         1032┆     "Both tokens zero amount"
         1033┆ );
            ⋮┆----------------------------------------
         1034┆ require(
         1035┆     _primaryTokenAmount <= primaryToken.balanceOf(msg.sender),
         1036┆     "Insufficient primary amount"
         1037┆ );
            ⋮┆----------------------------------------
         1038┆ require(
         1039┆     _complementTokenAmount <=                                    
  complementToken.balanceOf(msg.sender),                                        
         1040┆     "Insufficient complement amount"
         1041┆ );
            ⋮┆----------------------------------------
         1215┆ require(success, "TOKEN_TRANSFER_IN_FAILED");
            ⋮┆----------------------------------------
         1219┆ require(balanceAfter >= balanceBefore,                           
  "TOKEN_TRANSFER_IN_OVERFLOW");                                                
            ⋮┆----------------------------------------
         1252┆ require(success, "TOKEN_TRANSFER_OUT_FAILED");
            ⋮┆----------------------------------------
       solidity.performance.use-nested-if                                       
          Using nested is cheaper than using && multiple check combinations.    
  There are more                                                                
          advantages, such as easier to read code and better coverage reports.  
                                                                                
         1043┆ if (
         1044┆     block.timestamp >= (settleTime + settlementDelay) &&
         1045┆     state == State.Live
         1046┆ ) {
         1047┆     settle(_underlyingEndRoundHints);
         1048┆ }
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
          119┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          428┆ require(newOwner != address(0), "Ownable: new owner is the zero  
  address");                                                                    

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 42 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
