METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 25 Code Findings │
└──────────────────┘
                         
    /sb/VaultFactory.sol 
       solidity.performance.array-length-outside-loop                           
          Caching the array length outside a loop saves reading it on each      
  iteration, as long as the                                                     
          array's length is not changed during the loop.                        
                                                                                
          427┆ for (uint256 i = 0; i < oracleSymbols.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.state-variable-read-in-a-loop                       
          Replace state variable reads and writes within loops with local       
  variable reads and writes.                                                    
                                                                                
          428┆ address oracle = oracleRegistry.get(oracleSymbols[i]);
            ⋮┆----------------------------------------
          433┆ oracleIteratorRegistry.get(oracleIteratorSymbols[i]);
            ⋮┆----------------------------------------
       solidity.performance.unnecessary-checked-arithmetic-in-loop              
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
                                                                                
          427┆ for (uint256 i = 0; i < oracleSymbols.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
           31┆ require(
           32┆     initializing || isConstructor() || !initialized,
           33┆     "Contract instance has already been initialized"
           34┆ );
            ⋮┆----------------------------------------
          146┆ require(_owner == _msgSender(), "Ownable: caller is not the      
  owner");                                                                      
            ⋮┆----------------------------------------
          167┆ require(
          168┆     newOwner != address(0),
          169┆     "Ownable: new owner is the zero address"
          170┆ );
            ⋮┆----------------------------------------
          350┆ require(_feeWallet != address(0), "Fee wallet");
            ⋮┆----------------------------------------
          365┆ require(
          366┆     address(derivativeSpecification) != address(0),
          367┆     "Specification is absent"
          368┆ );
            ⋮┆----------------------------------------
          385┆ require(_liveTime > 0, "Zero live time");
            ⋮┆----------------------------------------
          420┆ require(
          421┆     oracleSymbols.length == oracleIteratorSymbols.length,
          422┆     "Oracles and iterators length"
          423┆ );
            ⋮┆----------------------------------------
          429┆ require(address(oracle) != address(0), "Oracle is absent");
            ⋮┆----------------------------------------
          434┆ require(
          435┆     address(oracleIterator) != address(0),
          436┆     "OracleIterator is absent"
          437┆ );
            ⋮┆----------------------------------------
          451┆ require(_tokenBuilder != address(0), "Token builder");
            ⋮┆----------------------------------------
          456┆ require(_feeLogger != address(0), "Fee logger");
            ⋮┆----------------------------------------
          461┆ require(_vaultBuilder != address(0), "Vault builder");
            ⋮┆----------------------------------------
          472┆ require(
          473┆     _derivativeSpecificationRegistry != address(0),
          474┆     "Derivative specification registry"
          475┆ );
            ⋮┆----------------------------------------
          482┆ require(_oracleRegistry != address(0), "Oracle registry");
            ⋮┆----------------------------------------
          490┆ require(
          491┆     _oracleIteratorRegistry != address(0),
          492┆     "Oracle iterator registry"
          493┆ );
            ⋮┆----------------------------------------
          501┆ require(
          502┆     _collateralTokenRegistry != address(0),
          503┆     "Collateral token registry"
          504┆ );
            ⋮┆----------------------------------------
          512┆ require(
          513┆     _collateralSplitRegistry != address(0),
          514┆     "Collateral split registry"
          515┆ );
            ⋮┆----------------------------------------
       solidity.performance.use-prefix-increment-not-postfix                    
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
                                                                                
          427┆ for (uint256 i = 0; i < oracleSymbols.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
           31┆ require(
           32┆     initializing || isConstructor() || !initialized,
           33┆     "Contract instance has already been initialized"
           34┆ );
            ⋮┆----------------------------------------
          167┆ require(
          168┆     newOwner != address(0),
          169┆     "Ownable: new owner is the zero address"
          170┆ );
            ⋮┆----------------------------------------
          472┆ require(
          473┆     _derivativeSpecificationRegistry != address(0),
          474┆     "Derivative specification registry"
          475┆ );

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 25 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
