METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 55 Code Findings │
└──────────────────┘
                          
    /sb/GovernorAlpha.sol 
       solidity.performance.array-length-outside-loop                           
          Caching the array length outside a loop saves reading it on each      
  iteration, as long as the                                                     
          array's length is not changed during the loop.                        
                                                                                
          185┆ for (uint i = 0; i < proposal.targets.length; i++) {
            ⋮┆----------------------------------------
          201┆ for (uint i = 0; i < proposal.targets.length; i++) {
            ⋮┆----------------------------------------
          215┆ for (uint i = 0; i < proposal.targets.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.non-payable-constructor      
          Consider making costructor payable to save gas.
                                                         
          134┆ constructor(address timelock_, address tribe_, address guardian_)
  public {                                                                      
          135┆     timelock = TimelockInterface(timelock_);
          136┆     tribe = CompInterface(tribe_);
          137┆     guardian = guardian_;
          138┆ }
            ⋮┆----------------------------------------
       solidity.performance.state-variable-read-in-a-loop                       
          Replace state variable reads and writes within loops with local       
  variable reads and writes.                                                    
                                                                                
          202┆ timelock.executeTransaction{value :                              
  proposal.values[i]}(proposal.targets[i], proposal.values[i],                  
  proposal.signatures[i], proposal.calldatas[i], proposal.eta);                 
            ⋮┆----------------------------------------
          216┆ timelock.cancelTransaction(proposal.targets[i],                  
  proposal.values[i], proposal.signatures[i], proposal.calldatas[i],            
  proposal.eta);                                                                
            ⋮┆----------------------------------------
       solidity.performance.unnecessary-checked-arithmetic-in-loop              
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
                                                                                
          185┆ for (uint i = 0; i < proposal.targets.length; i++) {
            ⋮┆----------------------------------------
          201┆ for (uint i = 0; i < proposal.targets.length; i++) {
            ⋮┆----------------------------------------
          215┆ for (uint i = 0; i < proposal.targets.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
          141┆ require(tribe.getPriorVotes(msg.sender, sub256(block.number, 1)) 
  > proposalThreshold(), "GovernorAlpha::propose: proposer votes below proposal 
  threshold");                                                                  
            ⋮┆----------------------------------------
          142┆ require(targets.length == values.length && targets.length ==     
  signatures.length && targets.length == calldatas.length,                      
  "GovernorAlpha::propose: proposal function ... [0m                            
            [shortened a long line from output, adjust with                     
  --max-chars-per-line]                                                         
            ⋮┆----------------------------------------
          143┆ require(targets.length != 0, "GovernorAlpha::propose: must       
  provide actions");                                                            
            ⋮┆----------------------------------------
          144┆ require(targets.length <= proposalMaxOperations(),               
  "GovernorAlpha::propose: too many actions");                                  
            ⋮┆----------------------------------------
          149┆ require(proposersLatestProposalState != ProposalState.Active,    
  "GovernorAlpha::propose: one live proposal per proposer, found an already     
  active proposal");                                                            
            ⋮┆----------------------------------------
          150┆ require(proposersLatestProposalState != ProposalState.Pending,   
  "GovernorAlpha::propose: one live proposal per proposer, found an already     
  pending proposal");                                                           
            ⋮┆----------------------------------------
          181┆ require(state(proposalId) == ProposalState.Succeeded,            
  "GovernorAlpha::queue: proposal can only be queued if it is succeeded");      
            ⋮┆----------------------------------------
          193┆ require(!timelock.queuedTransactions(keccak256(abi.encode(target,
  value, signature, data, eta))), "GovernorAlpha::_queueOrRevert: proposal      
  action already queued ... [0m                                                 
            [shortened a long line from output, adjust with                     
  --max-chars-per-line]                                                         
            ⋮┆----------------------------------------
          198┆ require(state(proposalId) == ProposalState.Queued,               
  "GovernorAlpha::execute: proposal can only be executed if it is queued");     
            ⋮┆----------------------------------------
          209┆ require(state != ProposalState.Executed, "GovernorAlpha::cancel: 
  cannot cancel executed proposal");                                            
            ⋮┆----------------------------------------
          212┆ require(msg.sender == guardian ||                                
  tribe.getPriorVotes(proposal.proposer, sub256(block.number, 1)) <             
  proposalThreshold(), "GovernorAlpha::cancel: proposer above  ... [0m          
            [shortened a long line from output, adjust with                     
  --max-chars-per-line]                                                         
            ⋮┆----------------------------------------
          232┆ require(proposalCount >= proposalId && proposalId > 0,           
  "GovernorAlpha::state: invalid proposal id");                                 
            ⋮┆----------------------------------------
          263┆ require(signatory != address(0), "GovernorAlpha::castVoteBySig:  
  invalid signature");                                                          
            ⋮┆----------------------------------------
          268┆ require(state(proposalId) == ProposalState.Active,               
  "GovernorAlpha::_castVote: voting is closed");                                
            ⋮┆----------------------------------------
          271┆ require(receipt.hasVoted == false, "GovernorAlpha::_castVote:    
  voter already voted");                                                        
            ⋮┆----------------------------------------
          288┆ require(msg.sender == guardian, "GovernorAlpha::__acceptAdmin:   
  sender must be gov guardian");                                                
            ⋮┆----------------------------------------
          293┆ require(msg.sender == guardian, "GovernorAlpha::__abdicate:      
  sender must be gov guardian");                                                
            ⋮┆----------------------------------------
          298┆ require(msg.sender == guardian,                                  
  "GovernorAlpha::__queueSetTimelockPendingAdmin: sender must be gov guardian");
            ⋮┆----------------------------------------
          303┆ require(msg.sender == guardian,                                  
  "GovernorAlpha::__executeSetTimelockPendingAdmin: sender must be gov          
  guardian");                                                                   
            ⋮┆----------------------------------------
          309┆ require(c >= a, "addition overflow");
            ⋮┆----------------------------------------
          314┆ require(b <= a, "subtraction underflow");
            ⋮┆----------------------------------------
       solidity.performance.use-multiple-require                                
          Using multiple require statements is cheaper than using && multiple   
  check combinations.                                                           
          There are more advantages, such as easier to read code and better     
  coverage reports.                                                             
                                                                                
          142┆ require(targets.length == values.length && targets.length ==     
  signatures.length && targets.length == calldatas.length,                      
  "GovernorAlpha::propose: proposal function ... [0m                            
            [shortened a long line from output, adjust with                     
  --max-chars-per-line]                                                         
            ⋮┆----------------------------------------
          232┆ require(proposalCount >= proposalId && proposalId > 0,           
  "GovernorAlpha::state: invalid proposal id");                                 
            ⋮┆----------------------------------------
       solidity.performance.use-prefix-increment-not-postfix                    
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
                                                                                
          156┆ proposalCount++;
            ⋮┆----------------------------------------
          185┆ for (uint i = 0; i < proposal.targets.length; i++) {
            ⋮┆----------------------------------------
          201┆ for (uint i = 0; i < proposal.targets.length; i++) {
            ⋮┆----------------------------------------
          215┆ for (uint i = 0; i < proposal.targets.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
          141┆ require(tribe.getPriorVotes(msg.sender, sub256(block.number, 1)) 
  > proposalThreshold(), "GovernorAlpha::propose: proposer votes below proposal 
  threshold");                                                                  
            ⋮┆----------------------------------------
          142┆ require(targets.length == values.length && targets.length ==     
  signatures.length && targets.length == calldatas.length,                      
  "GovernorAlpha::propose: proposal function ... [0m                            
            [shortened a long line from output, adjust with                     
  --max-chars-per-line]                                                         
            ⋮┆----------------------------------------
          143┆ require(targets.length != 0, "GovernorAlpha::propose: must       
  provide actions");                                                            
            ⋮┆----------------------------------------
          144┆ require(targets.length <= proposalMaxOperations(),               
  "GovernorAlpha::propose: too many actions");                                  
            ⋮┆----------------------------------------
          149┆ require(proposersLatestProposalState != ProposalState.Active,    
  "GovernorAlpha::propose: one live proposal per proposer, found an already     
  active proposal");                                                            
            ⋮┆----------------------------------------
          150┆ require(proposersLatestProposalState != ProposalState.Pending,   
  "GovernorAlpha::propose: one live proposal per proposer, found an already     
  pending proposal");                                                           
            ⋮┆----------------------------------------
          181┆ require(state(proposalId) == ProposalState.Succeeded,            
  "GovernorAlpha::queue: proposal can only be queued if it is succeeded");      
            ⋮┆----------------------------------------
          193┆ require(!timelock.queuedTransactions(keccak256(abi.encode(target,
  value, signature, data, eta))), "GovernorAlpha::_queueOrRevert: proposal      
  action already queued ... [0m                                                 
            [shortened a long line from output, adjust with                     
  --max-chars-per-line]                                                         
            ⋮┆----------------------------------------
          198┆ require(state(proposalId) == ProposalState.Queued,               
  "GovernorAlpha::execute: proposal can only be executed if it is queued");     
            ⋮┆----------------------------------------
          209┆ require(state != ProposalState.Executed, "GovernorAlpha::cancel: 
  cannot cancel executed proposal");                                            
            ⋮┆----------------------------------------
          212┆ require(msg.sender == guardian ||                                
  tribe.getPriorVotes(proposal.proposer, sub256(block.number, 1)) <             
  proposalThreshold(), "GovernorAlpha::cancel: proposer above  ... [0m          
            [shortened a long line from output, adjust with                     
  --max-chars-per-line]                                                         
            ⋮┆----------------------------------------
          232┆ require(proposalCount >= proposalId && proposalId > 0,           
  "GovernorAlpha::state: invalid proposal id");                                 
            ⋮┆----------------------------------------
          263┆ require(signatory != address(0), "GovernorAlpha::castVoteBySig:  
  invalid signature");                                                          
            ⋮┆----------------------------------------
          268┆ require(state(proposalId) == ProposalState.Active,               
  "GovernorAlpha::_castVote: voting is closed");                                
            ⋮┆----------------------------------------
          271┆ require(receipt.hasVoted == false, "GovernorAlpha::_castVote:    
  voter already voted");                                                        
            ⋮┆----------------------------------------
          288┆ require(msg.sender == guardian, "GovernorAlpha::__acceptAdmin:   
  sender must be gov guardian");                                                
            ⋮┆----------------------------------------
          293┆ require(msg.sender == guardian, "GovernorAlpha::__abdicate:      
  sender must be gov guardian");                                                
            ⋮┆----------------------------------------
          298┆ require(msg.sender == guardian,                                  
  "GovernorAlpha::__queueSetTimelockPendingAdmin: sender must be gov guardian");
            ⋮┆----------------------------------------
          303┆ require(msg.sender == guardian,                                  
  "GovernorAlpha::__executeSetTimelockPendingAdmin: sender must be gov          
  guardian");                                                                   

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 55 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
