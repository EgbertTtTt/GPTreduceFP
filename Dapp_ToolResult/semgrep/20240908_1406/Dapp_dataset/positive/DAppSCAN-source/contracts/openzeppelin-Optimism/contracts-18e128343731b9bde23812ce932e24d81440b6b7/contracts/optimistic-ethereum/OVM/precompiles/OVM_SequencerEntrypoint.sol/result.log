METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 49 Code Findings │
└──────────────────┘
                                    
    /sb/OVM_SequencerEntrypoint.sol 
       solidity.performance.array-length-outside-loop                           
          Caching the array length outside a loop saves reading it on each      
  iteration, as long as the                                                     
          array's length is not changed during the loop.                        
                                                                                
           95┆ while (offset < _in.length) {
            ⋮┆----------------------------------------
          105┆ length: _in.length - offset,
            ⋮┆----------------------------------------
          820┆ for (uint256 i = 0; i < _bytes.length; i++) {
            ⋮┆----------------------------------------
          837┆ for (uint256 i = 0; i < ret.length; i++) {
            ⋮┆----------------------------------------
         1061┆ for (uint256 j = 0; j < res.length; j++) {
            ⋮┆----------------------------------------
         1124┆ for (; i < _list.length; i++) {
            ⋮┆----------------------------------------
         1125┆ len += _list[i].length;
            ⋮┆----------------------------------------
         1132┆ for(i = 0; i < _list.length; i++) {
            ⋮┆----------------------------------------
         1138┆ _memcpy(flattenedPtr, listPtr, item.length);
            ⋮┆----------------------------------------
         1139┆ flattenedPtr += _list[i].length;
            ⋮┆----------------------------------------
       solidity.performance.unnecessary-checked-arithmetic-in-loop              
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
                                                                                
          598┆ for (uint256 i = 0; i < _length / 32; i++) {
            ⋮┆----------------------------------------
          820┆ for (uint256 i = 0; i < _bytes.length; i++) {
            ⋮┆----------------------------------------
          837┆ for (uint256 i = 0; i < ret.length; i++) {
            ⋮┆----------------------------------------
         1061┆ for (uint256 j = 0; j < res.length; j++) {
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
           82┆ require(
           83┆     itemType == RLPItemType.LIST_ITEM,
           84┆     "Invalid RLP list value."
           85┆ );
            ⋮┆----------------------------------------
           96┆ require(
           97┆     itemCount < MAX_LIST_LENGTH,
           98┆     "Provided RLP list exceeds max list length."
           99┆ );
            ⋮┆----------------------------------------
          165┆ require(
          166┆     itemType == RLPItemType.DATA_ITEM,
          167┆     "Invalid RLP bytes value."
          168┆ );
            ⋮┆----------------------------------------
          242┆ require(
          243┆     _in.length <= 33,
          244┆     "Invalid RLP bytes32 value."
          245┆ );
            ⋮┆----------------------------------------
          253┆ require(
          254┆     itemType == RLPItemType.DATA_ITEM,
          255┆     "Invalid RLP bytes32 value."
          256┆ );
            ⋮┆----------------------------------------
          341┆ require(
          342┆     _in.length == 1,
          343┆     "Invalid RLP boolean value."
          344┆ );
            ⋮┆----------------------------------------
          392┆ require(
          393┆     _in.length == 21,
          394┆     "Invalid RLP address value."
          395┆ );
            ⋮┆----------------------------------------
          433┆ require(
          434┆     _in.length <= 9,
          435┆     "Invalid RLP uint64 value."
          436┆ );
            ⋮┆----------------------------------------
          481┆ require(
          482┆     _in.length > 0,
          483┆     "RLP item cannot be null."
          484┆ );
            ⋮┆----------------------------------------
          501┆ require(
          502┆     _in.length > strLen,
          503┆     "Invalid RLP short string."
          504┆ );
            ⋮┆----------------------------------------
          511┆ require(
          512┆     _in.length > lenOfStrLen,
          513┆     "Invalid RLP long string length."
          514┆ );
            ⋮┆----------------------------------------
          525┆ require(
          526┆     _in.length > lenOfStrLen + strLen,
          527┆     "Invalid RLP long string."
          528┆ );
            ⋮┆----------------------------------------
          535┆ require(
          536┆     _in.length > listLen,
          537┆     "Invalid RLP short list."
          538┆ );
            ⋮┆----------------------------------------
          545┆ require(
          546┆     _in.length > lenOfListLen,
          547┆     "Invalid RLP long list length."
          548┆ );
            ⋮┆----------------------------------------
          559┆ require(
          560┆     _in.length > lenOfListLen + listLen,
          561┆     "Invalid RLP long list."
          562┆ );
            ⋮┆----------------------------------------
          655┆ require(_length + 31 >= _length, "slice_overflow");
            ⋮┆----------------------------------------
          656┆ require(_start + _length >= _start, "slice_overflow");
            ⋮┆----------------------------------------
          657┆ require(_bytes.length >= _start + _length, "slice_outOfBounds");
            ⋮┆----------------------------------------
          776┆ require(_start + 3 >= _start, "toUint24_overflow");
            ⋮┆----------------------------------------
          777┆ require(_bytes.length >= _start + 3 , "toUint24_outOfBounds");
            ⋮┆----------------------------------------
          788┆ require(_start + 1 >= _start, "toUint8_overflow");
            ⋮┆----------------------------------------
          789┆ require(_bytes.length >= _start + 1 , "toUint8_outOfBounds");
            ⋮┆----------------------------------------
          800┆ require(_start + 20 >= _start, "toAddress_overflow");
            ⋮┆----------------------------------------
          801┆ require(_bytes.length >= _start + 20, "toAddress_outOfBounds");
            ⋮┆----------------------------------------
       solidity.performance.use-nested-if                                       
          Using nested is cheaper than using && multiple check combinations.    
  There are more                                                                
          advantages, such as easier to read code and better coverage reports.  
                                                                                
          878┆ if (_in.length == 1 && uint8(_in[0]) < 128) {
          879┆     encoded = _in;
          880┆ } else {
          881┆     encoded = abi.encodePacked(_writeLength(_in.length, 128),    
  _in);                                                                         
          882┆ }
            ⋮┆----------------------------------------
       solidity.performance.use-prefix-increment-not-postfix                    
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
                                                                                
          598┆ for (uint256 i = 0; i < _length / 32; i++) {
            ⋮┆----------------------------------------
          820┆ for (uint256 i = 0; i < _bytes.length; i++) {
            ⋮┆----------------------------------------
          837┆ for (uint256 i = 0; i < ret.length; i++) {
            ⋮┆----------------------------------------
         1022┆ lenLen++;
            ⋮┆----------------------------------------
         1028┆ for(i = 1; i <= lenLen; i++) {
            ⋮┆----------------------------------------
         1054┆ for (; i < 32; i++) {
            ⋮┆----------------------------------------
         1061┆ for (uint256 j = 0; j < res.length; j++) {
            ⋮┆----------------------------------------
         1124┆ for (; i < _list.length; i++) {
            ⋮┆----------------------------------------
         1132┆ for(i = 0; i < _list.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
           96┆ require(
           97┆     itemCount < MAX_LIST_LENGTH,
           98┆     "Provided RLP list exceeds max list length."
           99┆ );

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 49 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
