METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 28 Code Findings │
└──────────────────┘
                         
    /sb/ShibaLibrary.sol 
       solidity.performance.array-length-outside-loop                           
          Caching the array length outside a loop saves reading it on each      
  iteration, as long as the                                                     
          array's length is not changed during the loop.                        
                                                                                
          303┆ for (uint i; i < path.length - 1; i++) {
            ⋮┆----------------------------------------
          314┆ for (uint i = path.length - 1; i > 0; i--) {
            ⋮┆----------------------------------------
       solidity.performance.unnecessary-checked-arithmetic-in-loop              
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
                                                                                
          303┆ for (uint i; i < path.length - 1; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
           82┆ require(c >= a, 'SafeMath: addition overflow');
            ⋮┆----------------------------------------
          141┆ require(c / a == b, 'SafeMath: multiplication overflow');
            ⋮┆----------------------------------------
          247┆ require(tokenA != tokenB, 'ShibaLibrary: IDENTICAL_ADDRESSES');
            ⋮┆----------------------------------------
          249┆ require(token0 != address(0), 'ShibaLibrary: ZERO_ADDRESS');
            ⋮┆----------------------------------------
          274┆ require(amountA > 0, 'ShibaLibrary: INSUFFICIENT_AMOUNT');
            ⋮┆----------------------------------------
          275┆ require(reserveA > 0 && reserveB > 0, 'ShibaLibrary:             
  INSUFFICIENT_LIQUIDITY');                                                     
            ⋮┆----------------------------------------
          281┆ require(amountIn > 0, 'ShibaLibrary: INSUFFICIENT_INPUT_AMOUNT');
            ⋮┆----------------------------------------
          282┆ require(reserveIn > 0 && reserveOut > 0, 'ShibaLibrary:          
  INSUFFICIENT_LIQUIDITY');                                                     
            ⋮┆----------------------------------------
          291┆ require(amountOut > 0, 'ShibaLibrary:                            
  INSUFFICIENT_OUTPUT_AMOUNT');                                                 
            ⋮┆----------------------------------------
          292┆ require(reserveIn > 0 && reserveOut > 0, 'ShibaLibrary:          
  INSUFFICIENT_LIQUIDITY');                                                     
            ⋮┆----------------------------------------
          300┆ require(path.length >= 2, 'ShibaLibrary: INVALID_PATH');
            ⋮┆----------------------------------------
          311┆ require(path.length >= 2, 'ShibaLibrary: INVALID_PATH');
            ⋮┆----------------------------------------
       solidity.performance.use-multiple-require                                
          Using multiple require statements is cheaper than using && multiple   
  check combinations.                                                           
          There are more advantages, such as easier to read code and better     
  coverage reports.                                                             
                                                                                
          275┆ require(reserveA > 0 && reserveB > 0, 'ShibaLibrary:             
  INSUFFICIENT_LIQUIDITY');                                                     
            ⋮┆----------------------------------------
          282┆ require(reserveIn > 0 && reserveOut > 0, 'ShibaLibrary:          
  INSUFFICIENT_LIQUIDITY');                                                     
            ⋮┆----------------------------------------
          292┆ require(reserveIn > 0 && reserveOut > 0, 'ShibaLibrary:          
  INSUFFICIENT_LIQUIDITY');                                                     
            ⋮┆----------------------------------------
       solidity.performance.use-prefix-decrement-not-postfix                    
          Consider using the prefix decrement expression whenever the return    
  value is not needed. The                                                      
          prefix decrement expression is cheaper in terms of gas.               
                                                                                
          314┆ for (uint i = path.length - 1; i > 0; i--) {
            ⋮┆----------------------------------------
       solidity.performance.use-prefix-increment-not-postfix                    
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
                                                                                
          303┆ for (uint i; i < path.length - 1; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
          141┆ require(c / a == b, 'SafeMath: multiplication overflow');
            ⋮┆----------------------------------------
          247┆ require(tokenA != tokenB, 'ShibaLibrary: IDENTICAL_ADDRESSES');
            ⋮┆----------------------------------------
          274┆ require(amountA > 0, 'ShibaLibrary: INSUFFICIENT_AMOUNT');
            ⋮┆----------------------------------------
          275┆ require(reserveA > 0 && reserveB > 0, 'ShibaLibrary:             
  INSUFFICIENT_LIQUIDITY');                                                     
            ⋮┆----------------------------------------
          281┆ require(amountIn > 0, 'ShibaLibrary: INSUFFICIENT_INPUT_AMOUNT');
            ⋮┆----------------------------------------
          282┆ require(reserveIn > 0 && reserveOut > 0, 'ShibaLibrary:          
  INSUFFICIENT_LIQUIDITY');                                                     
            ⋮┆----------------------------------------
          291┆ require(amountOut > 0, 'ShibaLibrary:                            
  INSUFFICIENT_OUTPUT_AMOUNT');                                                 
            ⋮┆----------------------------------------
          292┆ require(reserveIn > 0 && reserveOut > 0, 'ShibaLibrary:          
  INSUFFICIENT_LIQUIDITY');                                                     

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 28 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
