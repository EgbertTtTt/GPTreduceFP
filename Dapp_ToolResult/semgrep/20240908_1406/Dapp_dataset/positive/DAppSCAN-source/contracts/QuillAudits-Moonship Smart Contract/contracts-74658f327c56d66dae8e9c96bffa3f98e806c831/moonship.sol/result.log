METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 84 Code Findings │
└──────────────────┘
                     
    /sb/moonship.sol 
       solidity.best-practice.use-ownable2step                                  
          By demanding that the receiver of the owner permissions actively      
  accept via a contract call                                                    
          of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the 
  contract ownership                                                            
          from accidentally being transferred  to an address that cannot handle 
  it.                                                                           
                                                                                
          887┆ contract MoonShip is Context, IBEP20, Ownable, ReentrancyGuard {
            ⋮┆----------------------------------------
       solidity.performance.array-length-outside-loop                           
          Caching the array length outside a loop saves reading it on each      
  iteration, as long as the                                                     
          array's length is not changed during the loop.                        
                                                                                
         1056┆ for (uint256 i = 0; i < _excluded.length; i++) {
            ⋮┆----------------------------------------
         1058┆ _excluded[i] = _excluded[_excluded.length - 1];
            ⋮┆----------------------------------------
         1136┆ for (uint256 i = 0; i < _excluded.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.init-variables-with-default-value                   
          Uninitialized variables are assigned with the types default value.    
  Explicitly initializing a                                                     
          variable with its default value costs unnecessary gas.                
                                                                                
          913┆ bool inSwapAndLiquify = false;
            ⋮┆----------------------------------------
         1279┆ bool public swapAndLiquifyEnabled = false; // should be true
            ⋮┆----------------------------------------
         1280┆ uint256 public disruptiveTransferEnabledFrom = 0;
            ⋮┆----------------------------------------
         1281┆ uint256 public disableEasyRewardFrom = 0;
            ⋮┆----------------------------------------
       solidity.performance.non-payable-constructor      
          Consider making costructor payable to save gas.
                                                         
          413┆ constructor () internal {
          414┆     address msgSender = _msgSender();
          415┆     _owner = msgSender;
          416┆     emit OwnershipTransferred(address(0), msgSender);
          417┆ }
            ⋮┆----------------------------------------
          934┆ constructor (
          935┆     address payable routerAddress
          936┆ ) public {
          937┆     _rOwned[_msgSender()] = _rTotal;
          938┆ 
          939┆     InutRouter02 _nutRouter = InutRouter02(routerAddress);
          940┆     // Create a pancake pair for this new token
          941┆     nutPair = IPancakeFactory(_nutRouter.factory())
          942┆     .createPair(address(this), _nutRouter.WETH());
          943┆ 
             [hid 15 additional lines, adjust with --max-lines-per-finding] 
       solidity.performance.state-variable-read-in-a-loop                       
          Replace state variable reads and writes within loops with local       
  variable reads and writes.                                                    
                                                                                
         1056┆ for (uint256 i = 0; i < _excluded.length; i++) {
            ⋮┆----------------------------------------
         1057┆ if (_excluded[i] == account) {
            ⋮┆----------------------------------------
         1058┆ _excluded[i] = _excluded[_excluded.length - 1];
            ⋮┆----------------------------------------
         1058┆ _excluded[i] = _excluded[_excluded.length - 1];
            ⋮┆----------------------------------------
         1058┆ _excluded[i] = _excluded[_excluded.length - 1];
            ⋮┆----------------------------------------
         1059┆ _tOwned[account] = 0;
            ⋮┆----------------------------------------
         1060┆ _isExcluded[account] = false;
            ⋮┆----------------------------------------
         1061┆ _excluded.pop();
            ⋮┆----------------------------------------
         1136┆ for (uint256 i = 0; i < _excluded.length; i++) {
            ⋮┆----------------------------------------
         1137┆ if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] >   
  tSupply) return (_rTotal, _tTotal);                                           
            ⋮┆----------------------------------------
         1137┆ if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] >   
  tSupply) return (_rTotal, _tTotal);                                           
            ⋮┆----------------------------------------
         1137┆ if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] >   
  tSupply) return (_rTotal, _tTotal);                                           
            ⋮┆----------------------------------------
         1137┆ if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] >   
  tSupply) return (_rTotal, _tTotal);                                           
            ⋮┆----------------------------------------
         1137┆ if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] >   
  tSupply) return (_rTotal, _tTotal);                                           
            ⋮┆----------------------------------------
         1137┆ if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] >   
  tSupply) return (_rTotal, _tTotal);                                           
            ⋮┆----------------------------------------
         1138┆ rSupply = rSupply.sub(_rOwned[_excluded[i]]);
            ⋮┆----------------------------------------
         1138┆ rSupply = rSupply.sub(_rOwned[_excluded[i]]);
            ⋮┆----------------------------------------
         1139┆ tSupply = tSupply.sub(_tOwned[_excluded[i]]);
            ⋮┆----------------------------------------
         1139┆ tSupply = tSupply.sub(_tOwned[_excluded[i]]);
            ⋮┆----------------------------------------
       solidity.performance.unnecessary-checked-arithmetic-in-loop              
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
                                                                                
         1056┆ for (uint256 i = 0; i < _excluded.length; i++) {
            ⋮┆----------------------------------------
         1136┆ for (uint256 i = 0; i < _excluded.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
          112┆ require(c >= a, "SafeMath: addition overflow");
            ⋮┆----------------------------------------
          167┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          302┆ require(address(this).balance >= amount, "Address: insufficient  
  balance");                                                                    
            ⋮┆----------------------------------------
          306┆ require(success, "Address: unable to send value, recipient may   
  have reverted");                                                              
            ⋮┆----------------------------------------
          363┆ require(address(this).balance >= value, "Address: insufficient   
  balance for call");                                                           
            ⋮┆----------------------------------------
          368┆ require(isContract(target), "Address: call to non-contract");
            ⋮┆----------------------------------------
          430┆ require(_owner == _msgSender(), "Ownable: caller is not the      
  owner");                                                                      
            ⋮┆----------------------------------------
          451┆ require(newOwner != address(0), "Ownable: new owner is the zero  
  address");                                                                    
            ⋮┆----------------------------------------
          470┆ require(_previousOwner == msg.sender, "You don't have permission 
  to unlock");                                                                  
            ⋮┆----------------------------------------
          471┆ require(now > _lockTime , "Contract is locked until 7 days");
            ⋮┆----------------------------------------
          868┆ require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
            ⋮┆----------------------------------------
          881┆ require(tx.origin == msg.sender, "sorry humans only");
            ⋮┆----------------------------------------
         1021┆ require(!_isExcluded[sender], "Excluded addresses cannot call    
  this function");                                                              
            ⋮┆----------------------------------------
         1029┆ require(tAmount <= _tTotal, "Amount must be less than supply");
            ⋮┆----------------------------------------
         1040┆ require(rAmount <= _rTotal, "Amount must be less than total      
  reflections");                                                                
            ⋮┆----------------------------------------
         1046┆ require(!_isExcluded[account], "Account is already excluded");
            ⋮┆----------------------------------------
         1055┆ require(_isExcluded[account], "Account is already excluded");
            ⋮┆----------------------------------------
         1185┆ require(owner != address(0), "BEP20: approve from the zero       
  address");                                                                    
            ⋮┆----------------------------------------
         1186┆ require(spender != address(0), "BEP20: approve to the zero       
  address");                                                                    
            ⋮┆----------------------------------------
         1198┆ require(from != address(0), "BEP20: transfer from the zero       
  address");                                                                    
            ⋮┆----------------------------------------
         1199┆ require(to != address(0), "BEP20: transfer to the zero address");
            ⋮┆----------------------------------------
         1200┆ require(amount > 0, "Transfer amount must be greater than zero");
            ⋮┆----------------------------------------
         1325┆ require(nextAvailableClaimDate[msg.sender] <= block.timestamp,   
  'Error: next available not reached');                                         
            ⋮┆----------------------------------------
         1326┆ require(balanceOf(msg.sender) >= 0, 'Error: must own MRAT to     
  claim reward');                                                               
            ⋮┆----------------------------------------
         1345┆ require(sent, 'Error: Cannot withdraw reward');
            ⋮┆----------------------------------------
         1371┆ require(amount <= _maxTxAmount, "Transfer amount exceeds the     
  maxTxAmount.");                                                               
            ⋮┆----------------------------------------
       solidity.performance.use-nested-if                                       
          Using nested is cheaper than using && multiple check combinations.    
  There are more                                                                
          advantages, such as easier to read code and better coverage reports.  
                                                                                
         1166┆ if (_taxFee == 0 && _liquidityFee == 0) return;
            ⋮┆----------------------------------------
         1227┆ if (_isExcluded[sender] && !_isExcluded[recipient]) {
         1228┆     _transferFromExcluded(sender, recipient, amount);
         1229┆ } else if (!_isExcluded[sender] && _isExcluded[recipient]) {
         1230┆     _transferToExcluded(sender, recipient, amount);
         1231┆ } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {
         1232┆     _transferStandard(sender, recipient, amount);
         1233┆ } else if (_isExcluded[sender] && _isExcluded[recipient]) {
         1234┆     _transferBothExcluded(sender, recipient, amount);
         1235┆ } else {
         1236┆     _transferStandard(sender, recipient, amount);
             [hid 1 additional lines, adjust with --max-lines-per-finding] 
         1229┆ } else if (!_isExcluded[sender] && _isExcluded[recipient]) {
         1230┆     _transferToExcluded(sender, recipient, amount);
         1231┆ } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {
         1232┆     _transferStandard(sender, recipient, amount);
         1233┆ } else if (_isExcluded[sender] && _isExcluded[recipient]) {
         1234┆     _transferBothExcluded(sender, recipient, amount);
         1235┆ } else {
         1236┆     _transferStandard(sender, recipient, amount);
         1237┆ }
            ⋮┆----------------------------------------
         1231┆ } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {
         1232┆     _transferStandard(sender, recipient, amount);
         1233┆ } else if (_isExcluded[sender] && _isExcluded[recipient]) {
         1234┆     _transferBothExcluded(sender, recipient, amount);
         1235┆ } else {
         1236┆     _transferStandard(sender, recipient, amount);
         1237┆ }
            ⋮┆----------------------------------------
         1233┆ } else if (_isExcluded[sender] && _isExcluded[recipient]) {
         1234┆     _transferBothExcluded(sender, recipient, amount);
         1235┆ } else {
         1236┆     _transferStandard(sender, recipient, amount);
         1237┆ }
            ⋮┆----------------------------------------
         1366┆ if (
         1367┆     _isExcludedFromMaxTx[from] == false && // default will be    
  false                                                                         
         1368┆     _isExcludedFromMaxTx[to] == false // default will be false
         1369┆ ) {
         1370┆     if (value < disruptiveCoverageFee && block.timestamp >=      
  disruptiveTransferEnabledFrom) {                                              
         1371┆         require(amount <= _maxTxAmount, "Transfer amount exceeds 
  the maxTxAmount.");                                                           
         1372┆     }
         1373┆ }
            ⋮┆----------------------------------------
         1370┆ if (value < disruptiveCoverageFee && block.timestamp >=          
  disruptiveTransferEnabledFrom) {                                              
         1371┆     require(amount <= _maxTxAmount, "Transfer amount exceeds the 
  maxTxAmount.");                                                               
         1372┆ }
            ⋮┆----------------------------------------
         1394┆ if (
         1395┆     !inSwapAndLiquify &&
         1396┆ shouldSell &&
         1397┆ from != nutPair &&
         1398┆ swapAndLiquifyEnabled &&
         1399┆ !(from == address(this) && to == address(nutPair)) // swap 1 time
         1400┆ ) {
         1401┆     // only sell for minTokenNumberToSell, decouple from         
  _maxTxAmount                                                                  
         1402┆     contractTokenBalance = minTokenNumberToSell;
         1403┆ 
             [hid 28 additional lines, adjust with --max-lines-per-finding] 
       solidity.performance.use-prefix-increment-not-postfix                    
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
                                                                                
         1056┆ for (uint256 i = 0; i < _excluded.length; i++) {
            ⋮┆----------------------------------------
         1136┆ for (uint256 i = 0; i < _excluded.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
          167┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          306┆ require(success, "Address: unable to send value, recipient may   
  have reverted");                                                              
            ⋮┆----------------------------------------
          363┆ require(address(this).balance >= value, "Address: insufficient   
  balance for call");                                                           
            ⋮┆----------------------------------------
          451┆ require(newOwner != address(0), "Ownable: new owner is the zero  
  address");                                                                    
            ⋮┆----------------------------------------
          470┆ require(_previousOwner == msg.sender, "You don't have permission 
  to unlock");                                                                  
                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘
            ⋮┆----------------------------------------
         1021┆ require(!_isExcluded[sender], "Excluded addresses cannot call    
  this function");                                                              
            ⋮┆----------------------------------------
         1040┆ require(rAmount <= _rTotal, "Amount must be less than total      
  reflections");                                                                
            ⋮┆----------------------------------------
         1185┆ require(owner != address(0), "BEP20: approve from the zero       
  address");                                                                    
            ⋮┆----------------------------------------
         1186┆ require(spender != address(0), "BEP20: approve to the zero       
  address");                                                                    
            ⋮┆----------------------------------------
         1198┆ require(from != address(0), "BEP20: transfer from the zero       
  address");                                                                    
            ⋮┆----------------------------------------
         1199┆ require(to != address(0), "BEP20: transfer to the zero address");
            ⋮┆----------------------------------------
         1200┆ require(amount > 0, "Transfer amount must be greater than zero");
            ⋮┆----------------------------------------

Ran 48 rules on 1 file: 84 findings.
         1325┆ require(nextAvailableClaimDate[msg.sender] <= block.timestamp,   
  'Error: next available not reached');                                         
            ⋮┆----------------------------------------
         1326┆ require(balanceOf(msg.sender) >= 0, 'Error: must own MRAT to     
  claim reward');                                                               
            ⋮┆----------------------------------------
         1371┆ require(amount <= _maxTxAmount, "Transfer amount exceeds the     
  maxTxAmount.");                                                               
            ⋮┆----------------------------------------
       solidity.security.no-slippage-check          
          No slippage check in a Uniswap v2/v3 trade
                                                    
          771┆ nutRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(
          772┆     tokenAmount,
          773┆     0, // accept any amount of BNB
          774┆     path,
          775┆     address(this),
          776┆     block.timestamp
          777┆ );
            ⋮┆----------------------------------------
          793┆                                                                  
  nutRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value:           
  ethAmount}(                                                                   
          794┆     0, // accept any amount of BNB
          795┆     path,
          796┆     address(recipient),
          797┆     block.timestamp + 360
          798┆ );


A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
