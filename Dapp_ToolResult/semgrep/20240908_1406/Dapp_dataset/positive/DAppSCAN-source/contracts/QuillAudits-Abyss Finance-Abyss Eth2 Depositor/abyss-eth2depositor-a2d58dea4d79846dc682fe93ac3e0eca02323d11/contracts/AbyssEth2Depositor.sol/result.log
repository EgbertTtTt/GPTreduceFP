METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 25 Code Findings │
└──────────────────┘
                               
    /sb/AbyssEth2Depositor.sol 
       solidity.best-practice.use-ownable2step                                  
          By demanding that the receiver of the owner permissions actively      
  accept via a contract call                                                    
          of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the 
  contract ownership                                                            
          from accidentally being transferred  to an address that cannot handle 
  it.                                                                           
                                                                                
          430┆ contract AbyssEth2Depositor is Pausable, Ownable {
            ⋮┆----------------------------------------
       solidity.performance.non-payable-constructor      
          Consider making costructor payable to save gas.
                                                         
          452┆ constructor(address depositContractAddress) public {
          453┆     depositContract =                                            
  IDepositContract(address(depositContractAddress));                            
          454┆ }
            ⋮┆----------------------------------------
       solidity.performance.state-variable-read-in-a-loop                       
          Replace state variable reads and writes within loops with local       
  variable reads and writes.                                                    
                                                                                
          492┆ IDepositContract(address(depositContract)).deposit{value:        
  collateral}(                                                                  
            ⋮┆----------------------------------------
       solidity.performance.unnecessary-checked-arithmetic-in-loop              
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
                                                                                
          490┆ for (uint256 i = 0; i < nodesAmount; ++i) {
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
           88┆ require(c >= a, "SafeMath: addition overflow");
            ⋮┆----------------------------------------
          103┆ require(b <= a, "SafeMath: subtraction overflow");
            ⋮┆----------------------------------------
          120┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          137┆ require(b > 0, "SafeMath: division by zero");
            ⋮┆----------------------------------------
          154┆ require(b > 0, "SafeMath: modulo by zero");
            ⋮┆----------------------------------------
          275┆ require(owner() == _msgSender(), "Ownable: caller is not the     
  owner");                                                                      
            ⋮┆----------------------------------------
          296┆ require(newOwner != address(0), "Ownable: new owner is the zero  
  address");                                                                    
            ⋮┆----------------------------------------
          346┆ require(!paused(), "Pausable: paused");
            ⋮┆----------------------------------------
          358┆ require(paused(), "Pausable: not paused");
            ⋮┆----------------------------------------
          460┆ revert("AbyssEth2Depositor: do not send ETH directly here");
            ⋮┆----------------------------------------
          482┆ require(nodesAmount > 0 && nodesAmount <= 100,                   
  "AbyssEth2Depositor: you can deposit only 1 to 100 nodes per transaction");   
            ⋮┆----------------------------------------
          483┆ require(msg.value == SafeMath.mul(collateral, nodesAmount),      
  "AbyssEth2Depositor: the amount of ETH does not match the amount of nodes");  
            ⋮┆----------------------------------------
          484┆ require(
          485┆     withdrawal_credentials.length == nodesAmount &&
          486┆     signatures.length == nodesAmount &&
          487┆     deposit_data_roots.length == nodesAmount,
          488┆     "AbyssEth2Depositor: amount of parameters do no match");
            ⋮┆----------------------------------------
       solidity.performance.use-multiple-require                                
          Using multiple require statements is cheaper than using && multiple   
  check combinations.                                                           
          There are more advantages, such as easier to read code and better     
  coverage reports.                                                             
                                                                                
          482┆ require(nodesAmount > 0 && nodesAmount <= 100,                   
  "AbyssEth2Depositor: you can deposit only 1 to 100 nodes per transaction");   
            ⋮┆----------------------------------------
          484┆ require(
          485┆     withdrawal_credentials.length == nodesAmount &&
          486┆     signatures.length == nodesAmount &&
          487┆     deposit_data_roots.length == nodesAmount,
          488┆     "AbyssEth2Depositor: amount of parameters do no match");
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
          120┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          296┆ require(newOwner != address(0), "Ownable: new owner is the zero  
  address");                                                                    
            ⋮┆----------------------------------------
          460┆ revert("AbyssEth2Depositor: do not send ETH directly here");
            ⋮┆----------------------------------------
          482┆ require(nodesAmount > 0 && nodesAmount <= 100,                   
  "AbyssEth2Depositor: you can deposit only 1 to 100 nodes per transaction");   
            ⋮┆----------------------------------------
          483┆ require(msg.value == SafeMath.mul(collateral, nodesAmount),      
  "AbyssEth2Depositor: the amount of ETH does not match the amount of nodes");  
            ⋮┆----------------------------------------
          484┆ require(
          485┆     withdrawal_credentials.length == nodesAmount &&
          486┆     signatures.length == nodesAmount &&
          487┆     deposit_data_roots.length == nodesAmount,
          488┆     "AbyssEth2Depositor: amount of parameters do no match");

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 25 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
