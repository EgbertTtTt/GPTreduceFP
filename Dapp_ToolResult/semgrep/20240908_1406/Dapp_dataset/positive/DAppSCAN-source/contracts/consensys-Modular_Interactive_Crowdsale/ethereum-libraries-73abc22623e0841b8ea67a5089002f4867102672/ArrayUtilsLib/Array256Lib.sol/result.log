METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 15 Code Findings │
└──────────────────┘
                        
    /sb/Array256Lib.sol 
       solidity.performance.array-length-outside-loop                           
          Caching the array length outside a loop saves reading it on each      
  iteration, as long as the                                                     
          array's length is not changed during the loop.                        
                                                                                
          214┆ for (uint256 i = 0; i < self.length; i++) {
            ⋮┆----------------------------------------
          218┆ for (uint256 j = i; j < self.length - 1; j++){
            ⋮┆----------------------------------------
          222┆ delete self[self.length - 1];
            ⋮┆----------------------------------------
          223┆ self.length--;
            ⋮┆----------------------------------------
       solidity.performance.non-optimal-variables-swap                          
          Consider swapping variables using `(self[swap], self[root]) =         
  (self[root], self[swap])` to                                                  
          save gas                                                              
                                                                                
          169┆ temp = self[swap];
          170┆ self[swap] = self[root];
          171┆ self[root] = temp;
            ⋮┆----------------------------------------
       solidity.performance.non-optimal-variables-swap                          
          Consider swapping variables using `(self[end], self[0]) = (self[0],   
  self[end])` to save gas                                                       
                                                                                
          182┆ temp = self[end];
          183┆ self[end] = self[0];
          184┆ self[0] = temp;
            ⋮┆----------------------------------------
       solidity.performance.non-optimal-variables-swap                          
          Consider swapping variables using `(self[swap], self[root]) =         
  (self[root], self[swap])` to                                                  
          save gas                                                              
                                                                                
          198┆ temp = self[swap];
          199┆ self[swap] = self[root];
          200┆ self[root] = temp;
            ⋮┆----------------------------------------
       solidity.performance.unnecessary-checked-arithmetic-in-loop              
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
                                                                                
          214┆ for (uint256 i = 0; i < self.length; i++) {
            ⋮┆----------------------------------------
          218┆ for (uint256 j = i; j < self.length - 1; j++){
            ⋮┆----------------------------------------
       solidity.performance.use-nested-if                                       
          Using nested is cheaper than using && multiple check combinations.    
  There are more                                                                
          advantages, such as easier to read code and better coverage reports.  
                                                                                
          164┆ if((rChild <= end) && (self[swap]<self[rChild]))
          165┆   swap = rChild;
            ⋮┆----------------------------------------
          193┆ if((rChild <= end) && (self[swap]<self[rChild]))
          194┆   swap = rChild;
            ⋮┆----------------------------------------
       solidity.performance.use-prefix-decrement-not-postfix                    
          Consider using the prefix decrement expression whenever the return    
  value is not needed. The                                                      
          prefix decrement expression is cheaper in terms of gas.               
                                                                                
          223┆ self.length--;
            ⋮┆----------------------------------------
          224┆ i--;
            ⋮┆----------------------------------------
       solidity.performance.use-prefix-increment-not-postfix                    
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
                                                                                
          214┆ for (uint256 i = 0; i < self.length; i++) {
            ⋮┆----------------------------------------
          218┆ for (uint256 j = i; j < self.length - 1; j++){

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 15 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
