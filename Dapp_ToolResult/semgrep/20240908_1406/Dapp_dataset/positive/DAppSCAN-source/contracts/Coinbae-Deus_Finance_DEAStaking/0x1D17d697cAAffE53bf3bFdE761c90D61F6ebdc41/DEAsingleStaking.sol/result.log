METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 13 Code Findings │
└──────────────────┘
                             
    /sb/DEAsingleStaking.sol 
       solidity.best-practice.use-ownable2step                                  
          By demanding that the receiver of the owner permissions actively      
  accept via a contract call                                                    
          of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the 
  contract ownership                                                            
          from accidentally being transferred  to an address that cannot handle 
  it.                                                                           
                                                                                
          262┆ contract Staking is Ownable {
            ⋮┆----------------------------------------
       solidity.performance.init-variables-with-default-value                   
          Uninitialized variables are assigned with the types default value.    
  Explicitly initializing a                                                     
          variable with its default value costs unnecessary gas.                
                                                                                
          273┆ uint256 public rewardTillNowPerToken = 0;
            ⋮┆----------------------------------------
          278┆ uint256 public particleCollector = 0;
            ⋮┆----------------------------------------
       solidity.performance.non-payable-constructor      
          Consider making costructor payable to save gas.
                                                         
          202┆ constructor () internal {
          203┆     address msgSender = _msgSender();
          204┆     _owner = msgSender;
          205┆     emit OwnershipTransferred(address(0), msgSender);
          206┆ }
            ⋮┆----------------------------------------
          295┆ constructor (address _stakedToken, address _rewardToken, uint256 
  _rewardPerBlock, uint256 _daoShare, uint256 _earlyFoundersShare) public {     
          296┆     stakedToken = StakedToken(_stakedToken);
          297┆     rewardToken = RewardToken(_rewardToken);
          298┆     rewardPerBlock = _rewardPerBlock;
          299┆     daoShare = _daoShare;
          300┆     earlyFoundersShare = _earlyFoundersShare;
          301┆     lastUpdatedBlock = block.number;
          302┆     daoWallet = msg.sender;
          303┆     earlyFoundersWallet = msg.sender;
          304┆ }
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
           31┆ require(c >= a, "SafeMath: addition overflow");
            ⋮┆----------------------------------------
           86┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          219┆ require(_owner == _msgSender(), "Ownable: caller is not the      
  owner");                                                                      
            ⋮┆----------------------------------------
          240┆ require(newOwner != address(0), "Ownable: new owner is the zero  
  address");                                                                    
            ⋮┆----------------------------------------
          367┆ require(user.depositAmount >= amount, "withdraw amount exceeds   
  deposited amount");                                                           
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
           86┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          240┆ require(newOwner != address(0), "Ownable: new owner is the zero  
  address");                                                                    
            ⋮┆----------------------------------------
          367┆ require(user.depositAmount >= amount, "withdraw amount exceeds   
  deposited amount");                                                           

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 13 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
