METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 69 Code Findings │
└──────────────────┘
                         
    /sb/FountainBase.sol 
       solidity.best-practice.use-abi-encodecall-instead-of-encodewithselector  
          To guarantee arguments type safety it is recommended to use           
  `abi.encodeCall` instead of                                                   
          `abi.encodeWithSelector`.                                             
                                                                                
          554┆ _callOptionalReturn(
          555┆     token,
          556┆     abi.encodeWithSelector(token.transfer.selector, to, value)
          557┆ );
            ⋮┆----------------------------------------
          566┆ _callOptionalReturn(
          567┆     token,
          568┆     abi.encodeWithSelector(token.transferFrom.selector, from, to,
  value)                                                                        
          569┆ );
            ⋮┆----------------------------------------
          592┆ _callOptionalReturn(
          593┆     token,
          594┆     abi.encodeWithSelector(token.approve.selector, spender,      
  value)                                                                        
          595┆ );
            ⋮┆----------------------------------------
          605┆ _callOptionalReturn(
          606┆     token,
          607┆     abi.encodeWithSelector(
          608┆         token.approve.selector,
          609┆         spender,
          610┆         newAllowance
          611┆     )
          612┆ );
            ⋮┆----------------------------------------
          625┆ _callOptionalReturn(
          626┆     token,
          627┆     abi.encodeWithSelector(
          628┆         token.approve.selector,
          629┆         spender,
          630┆         newAllowance
          631┆     )
          632┆ );
            ⋮┆----------------------------------------
       solidity.performance.array-length-outside-loop                           
          Caching the array length outside a loop saves reading it on each      
  iteration, as long as the                                                     
          array's length is not changed during the loop.                        
                                                                                
         1763┆ for (uint256 i = 0; i < angels.length; i++) {
            ⋮┆----------------------------------------
         1827┆ for (uint256 i = 0; i < angels.length; i++) {
            ⋮┆----------------------------------------
         1847┆ for (uint256 i = 0; i < angels.length; i++) {
            ⋮┆----------------------------------------
         1852┆ for (uint256 i = 0; i < angels.length; i++) {
            ⋮┆----------------------------------------
         1860┆ for (uint256 i = 0; i < angels.length; i++) {
            ⋮┆----------------------------------------
         1932┆ for (uint256 i = 0; i < angels.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.non-payable-constructor      
          Consider making costructor payable to save gas.
                                                         
          957┆ constructor(string memory name_, string memory symbol_) public {
          958┆     _name = name_;
          959┆     _symbol = symbol_;
          960┆     _decimals = 18;
          961┆ }
            ⋮┆----------------------------------------
         1587┆ constructor(string memory name_, string memory symbol_)
         1588┆     public
         1589┆     ERC20(name_, symbol_)
         1590┆     ERC20Permit(name_)
         1591┆ {}
            ⋮┆----------------------------------------
       solidity.performance.unnecessary-checked-arithmetic-in-loop              
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
                                                                                
         1763┆ for (uint256 i = 0; i < angels.length; i++) {
            ⋮┆----------------------------------------
         1791┆ for (uint256 i = 0; i < angels.length; i++) {
            ⋮┆----------------------------------------
         1804┆ for (uint256 i = 0; i < len - 1; i++) {
            ⋮┆----------------------------------------
         1827┆ for (uint256 i = 0; i < angels.length; i++) {
            ⋮┆----------------------------------------
         1847┆ for (uint256 i = 0; i < angels.length; i++) {
            ⋮┆----------------------------------------
         1852┆ for (uint256 i = 0; i < angels.length; i++) {
            ⋮┆----------------------------------------
         1860┆ for (uint256 i = 0; i < angels.length; i++) {
            ⋮┆----------------------------------------
         1932┆ for (uint256 i = 0; i < angels.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
           52┆ require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
            ⋮┆----------------------------------------
          221┆ require(c >= a, "SafeMath: addition overflow");
            ⋮┆----------------------------------------
          236┆ require(b <= a, "SafeMath: subtraction overflow");
            ⋮┆----------------------------------------
          253┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          270┆ require(b > 0, "SafeMath: division by zero");
            ⋮┆----------------------------------------
          287┆ require(b > 0, "SafeMath: modulo by zero");
            ⋮┆----------------------------------------
          399┆ require(address(this).balance >= amount, "Address: insufficient  
  balance");                                                                    
            ⋮┆----------------------------------------
          403┆ require(success, "Address: unable to send value, recipient may   
  have reverted");                                                              
            ⋮┆----------------------------------------
          460┆ require(address(this).balance >= value, "Address: insufficient   
  balance for call");                                                           
            ⋮┆----------------------------------------
          461┆ require(isContract(target), "Address: call to non-contract");
            ⋮┆----------------------------------------
          485┆ require(isContract(target), "Address: static call to             
  non-contract");                                                               
            ⋮┆----------------------------------------
          509┆ require(isContract(target), "Address: delegate call to           
  non-contract");                                                               
            ⋮┆----------------------------------------
          588┆ require(
          589┆     (value == 0) || (token.allowance(address(this), spender) ==  
  0),                                                                           
          590┆     "SafeERC20: approve from non-zero to non-zero allowance"
          591┆ );
            ⋮┆----------------------------------------
          654┆ require(
          655┆     abi.decode(returndata, (bool)),
          656┆     "SafeERC20: ERC20 operation did not succeed"
          657┆ );
            ⋮┆----------------------------------------
         1167┆ require(sender != address(0), "ERC20: transfer from the zero     
  address");                                                                    
            ⋮┆----------------------------------------
         1168┆ require(recipient != address(0), "ERC20: transfer to the zero    
  address");                                                                    
            ⋮┆----------------------------------------
         1190┆ require(account != address(0), "ERC20: mint to the zero          
  address");                                                                    
            ⋮┆----------------------------------------
         1211┆ require(account != address(0), "ERC20: burn from the zero        
  address");                                                                    
            ⋮┆----------------------------------------
         1244┆ require(owner != address(0), "ERC20: approve from the zero       
  address");                                                                    
            ⋮┆----------------------------------------
         1245┆ require(spender != address(0), "ERC20: approve to the zero       
  address");                                                                    
            ⋮┆----------------------------------------
         1307┆ revert("ECDSA: invalid signature length");
            ⋮┆----------------------------------------
         1341┆ require(uint256(s) <=                                            
  0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, "ECDSA:   
  invalid signature 's' value");                                                
            ⋮┆----------------------------------------
         1342┆ require(v == 27 || v == 28, "ECDSA: invalid signature 'v'        
  value");                                                                      
            ⋮┆----------------------------------------
         1346┆ require(signer != address(0), "ECDSA: invalid signature");
            ⋮┆----------------------------------------
         1547┆ require(block.timestamp <= deadline, "ERC20Permit: expired       
  deadline");                                                                   
            ⋮┆----------------------------------------
         1564┆ require(signer == owner, "ERC20Permit: invalid signature");
            ⋮┆----------------------------------------
       solidity.performance.use-prefix-increment-not-postfix                    
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
                                                                                
         1763┆ for (uint256 i = 0; i < angels.length; i++) {
            ⋮┆----------------------------------------
         1791┆ for (uint256 i = 0; i < angels.length; i++) {
            ⋮┆----------------------------------------
         1804┆ for (uint256 i = 0; i < len - 1; i++) {
            ⋮┆----------------------------------------
         1827┆ for (uint256 i = 0; i < angels.length; i++) {
            ⋮┆----------------------------------------
         1847┆ for (uint256 i = 0; i < angels.length; i++) {
            ⋮┆----------------------------------------
         1852┆ for (uint256 i = 0; i < angels.length; i++) {
            ⋮┆----------------------------------------
         1860┆ for (uint256 i = 0; i < angels.length; i++) {
            ⋮┆----------------------------------------
         1932┆ for (uint256 i = 0; i < angels.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
          253┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          403┆ require(success, "Address: unable to send value, recipient may   
  have reverted");                                                              
            ⋮┆----------------------------------------
          460┆ require(address(this).balance >= value, "Address: insufficient   
  balance for call");                                                           
            ⋮┆----------------------------------------
          485┆ require(isContract(target), "Address: static call to             
  non-contract");                                                               
            ⋮┆----------------------------------------
          509┆ require(isContract(target), "Address: delegate call to           
  non-contract");                                                               
            ⋮┆----------------------------------------
          588┆ require(
          589┆     (value == 0) || (token.allowance(address(this), spender) ==  
  0),                                                                           
          590┆     "SafeERC20: approve from non-zero to non-zero allowance"
          591┆ );
            ⋮┆----------------------------------------
          654┆ require(
          655┆     abi.decode(returndata, (bool)),
          656┆     "SafeERC20: ERC20 operation did not succeed"
          657┆ );
            ⋮┆----------------------------------------
         1167┆ require(sender != address(0), "ERC20: transfer from the zero     
  address");                                                                    
            ⋮┆----------------------------------------
         1168┆ require(recipient != address(0), "ERC20: transfer to the zero    
  address");                                                                    
            ⋮┆----------------------------------------
         1211┆ require(account != address(0), "ERC20: burn from the zero        
  address");                                                                    
            ⋮┆----------------------------------------
         1244┆ require(owner != address(0), "ERC20: approve from the zero       
  address");                                                                    
            ⋮┆----------------------------------------
         1245┆ require(spender != address(0), "ERC20: approve to the zero       
  address");                                                                    
            ⋮┆----------------------------------------
         1341┆ require(uint256(s) <=                                            
  0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, "ECDSA:   
  invalid signature 's' value");                                                
            ⋮┆----------------------------------------
         1342┆ require(v == 27 || v == 28, "ECDSA: invalid signature 'v'        
  value");                                                                      

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 69 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
