METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 56 Code Findings │
└──────────────────┘
                        
    /sb/ThorusDummy.sol 
       solidity.best-practice.use-abi-encodecall-instead-of-encodewithselector  
          To guarantee arguments type safety it is recommended to use           
  `abi.encodeCall` instead of                                                   
          `abi.encodeWithSelector`.                                             
                                                                                
          818┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.transfer.selector, to, value));                  
            ⋮┆----------------------------------------
          827┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.transferFrom.selector, from, to, value));        
            ⋮┆----------------------------------------
          849┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.approve.selector, spender, value));              
            ⋮┆----------------------------------------
          858┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.approve.selector, spender, newAllowance));       
            ⋮┆----------------------------------------
          870┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.approve.selector, spender, newAllowance));       
            ⋮┆----------------------------------------
       solidity.best-practice.use-ownable2step                                  
          By demanding that the receiver of the owner permissions actively      
  accept via a contract call                                                    
          of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the 
  contract ownership                                                            
          from accidentally being transferred  to an address that cannot handle 
  it.                                                                           
                                                                                
          548┆ abstract contract Mintable is Context, Ownable {
            ⋮┆----------------------------------------
          904┆ contract ThorusDummy is Ownable, Mintable {
            ⋮┆----------------------------------------
       solidity.performance.inefficient-state-variable-increment             
          <x> += <y> costs more gas than <x> = <x> + <y> for state variables.
                                                                             
          433┆ _totalSupply += amount;
            ⋮┆----------------------------------------
       solidity.performance.non-payable-constructor      
          Consider making costructor payable to save gas.
                                                         
          230┆ constructor(string memory name_, string memory symbol_) {
          231┆     _name = name_;
          232┆     _symbol = symbol_;
          233┆ }
            ⋮┆----------------------------------------
          914┆ constructor(IERC20 _thorus) {
          915┆     require(
          916┆         address(_thorus) != address(0),
          917┆         "zero address in constructor"
          918┆     );
          919┆     thorus = _thorus;
          920┆ }
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
           63┆ require(owner() == _msgSender(), "Ownable: caller is not the     
  owner");                                                                      
            ⋮┆----------------------------------------
           72┆ require(newOwner != address(0), "Ownable: new owner is the zero  
  address");                                                                    
            ⋮┆----------------------------------------
          334┆ require(currentAllowance >= amount, "ERC20: transfer amount      
  exceeds allowance");                                                          
            ⋮┆----------------------------------------
          375┆ require(currentAllowance >= subtractedValue, "ERC20: decreased   
  allowance below zero");                                                       
            ⋮┆----------------------------------------
          402┆ require(sender != address(0), "ERC20: transfer from the zero     
  address");                                                                    
            ⋮┆----------------------------------------
          403┆ require(recipient != address(0), "ERC20: transfer to the zero    
  address");                                                                    
            ⋮┆----------------------------------------
          408┆ require(senderBalance >= amount, "ERC20: transfer amount exceeds 
  balance");                                                                    
            ⋮┆----------------------------------------
          429┆ require(account != address(0), "ERC20: mint to the zero          
  address");                                                                    
            ⋮┆----------------------------------------
          452┆ require(account != address(0), "ERC20: burn from the zero        
  address");                                                                    
            ⋮┆----------------------------------------
          457┆ require(accountBalance >= amount, "ERC20: burn amount exceeds    
  balance");                                                                    
            ⋮┆----------------------------------------
          486┆ require(owner != address(0), "ERC20: approve from the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          487┆ require(spender != address(0), "ERC20: approve to the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          571┆ require(minter() == _msgSender(), "Mintable: caller is not the   
  minter");                                                                     
            ⋮┆----------------------------------------
          580┆ require(newMinter != address(0), "Mintable: new minter is the    
  zero address");                                                               
            ⋮┆----------------------------------------
          644┆ require(address(this).balance >= amount, "Address: insufficient  
  balance");                                                                    
            ⋮┆----------------------------------------
          647┆ require(success, "Address: unable to send value, recipient may   
  have reverted");                                                              
            ⋮┆----------------------------------------
          717┆ require(address(this).balance >= value, "Address: insufficient   
  balance for call");                                                           
            ⋮┆----------------------------------------
          718┆ require(isContract(target), "Address: call to non-contract");
            ⋮┆----------------------------------------
          745┆ require(isContract(target), "Address: static call to             
  non-contract");                                                               
            ⋮┆----------------------------------------
          772┆ require(isContract(target), "Address: delegate call to           
  non-contract");                                                               
            ⋮┆----------------------------------------
          845┆ require(
          846┆     (value == 0) || (token.allowance(address(this), spender) ==  
  0),                                                                           
          847┆     "SafeERC20: approve from non-zero to non-zero allowance"
          848┆ );
            ⋮┆----------------------------------------
          868┆ require(oldAllowance >= value, "SafeERC20: decreased allowance   
  below zero");                                                                 
            ⋮┆----------------------------------------
          888┆ require(abi.decode(returndata, (bool)), "SafeERC20: ERC20        
  operation did not succeed");                                                  
            ⋮┆----------------------------------------
          915┆ require(
          916┆     address(_thorus) != address(0),
          917┆     "zero address in constructor"
          918┆ );
            ⋮┆----------------------------------------
          927┆ require(thorusMasterBalanceOf >= _amount, "not enough tokens     
  minted");                                                                     
            ⋮┆----------------------------------------
          937┆ require(thorus.balanceOf(address(this)) >=                       
  newThorusMasterBalanceOf, "not enough tokens to mint");                       
            ⋮┆----------------------------------------
          945┆ require(balance > thorusMasterBalanceOf, "there is nothing       
  left");                                                                       
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
           72┆ require(newOwner != address(0), "Ownable: new owner is the zero  
  address");                                                                    
            ⋮┆----------------------------------------
          334┆ require(currentAllowance >= amount, "ERC20: transfer amount      
  exceeds allowance");                                                          
            ⋮┆----------------------------------------
          375┆ require(currentAllowance >= subtractedValue, "ERC20: decreased   
  allowance below zero");                                                       
            ⋮┆----------------------------------------
          402┆ require(sender != address(0), "ERC20: transfer from the zero     
  address");                                                                    
            ⋮┆----------------------------------------
          403┆ require(recipient != address(0), "ERC20: transfer to the zero    
  address");                                                                    
            ⋮┆----------------------------------------
          408┆ require(senderBalance >= amount, "ERC20: transfer amount exceeds 
  balance");                                                                    
            ⋮┆----------------------------------------
          452┆ require(account != address(0), "ERC20: burn from the zero        
  address");                                                                    
            ⋮┆----------------------------------------
          457┆ require(accountBalance >= amount, "ERC20: burn amount exceeds    
  balance");                                                                    
            ⋮┆----------------------------------------
          486┆ require(owner != address(0), "ERC20: approve from the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          487┆ require(spender != address(0), "ERC20: approve to the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          571┆ require(minter() == _msgSender(), "Mintable: caller is not the   
  minter");                                                                     
            ⋮┆----------------------------------------
          580┆ require(newMinter != address(0), "Mintable: new minter is the    
  zero address");                                                               
            ⋮┆----------------------------------------
          647┆ require(success, "Address: unable to send value, recipient may   
  have reverted");                                                              
            ⋮┆----------------------------------------
          717┆ require(address(this).balance >= value, "Address: insufficient   
  balance for call");                                                           
            ⋮┆----------------------------------------
          745┆ require(isContract(target), "Address: static call to             
  non-contract");                                                               
            ⋮┆----------------------------------------
          772┆ require(isContract(target), "Address: delegate call to           
  non-contract");                                                               
            ⋮┆----------------------------------------
          845┆ require(
          846┆     (value == 0) || (token.allowance(address(this), spender) ==  
  0),                                                                           
          847┆     "SafeERC20: approve from non-zero to non-zero allowance"
          848┆ );
            ⋮┆----------------------------------------
          868┆ require(oldAllowance >= value, "SafeERC20: decreased allowance   
  below zero");                                                                 
            ⋮┆----------------------------------------
          888┆ require(abi.decode(returndata, (bool)), "SafeERC20: ERC20        
  operation did not succeed");                                                  

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 56 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
