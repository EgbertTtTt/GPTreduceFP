METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 21 Code Findings │
└──────────────────┘
                                 
    /sb/MultiplyProxyActions.sol 
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
           31┆ require(c >= a, 'SafeMath: addition overflow');
            ⋮┆----------------------------------------
           60┆ require(c / a == b, 'SafeMath: multiplication overflow');
            ⋮┆----------------------------------------
          485┆ require(y >= 0, "int256-overflow");
            ⋮┆----------------------------------------
          722┆ require(false, "this code should be unreachable");
            ⋮┆----------------------------------------
          743┆ require(cdpData.skipFL == false, "cannot close to DAI if FL not  
  used");                                                                       
            ⋮┆----------------------------------------
          868┆ require(
          869┆   IERC20(DAI).approve(address(exchange),                         
  exchangeData.fromTokenAmount.add(cdpData.depositDai)),                        
          870┆   "MPA / Could not approve Exchange for DAI"
          871┆ );
            ⋮┆----------------------------------------
          915┆ require(
          916┆   IERC20(exchangeData.fromTokenAddress).approve(
          917┆     address(exchange),
          918┆     exchangeData.fromTokenAmount
          919┆   ),
          920┆   "MPA / Could not approve Exchange for Token"
          921┆ );
            ⋮┆----------------------------------------
          979┆ require(
          980┆                                                                  
  IERC20(exchangeData.fromTokenAddress).approve(address(exchange), ink),        
          981┆   "MPA / Could not approve Exchange for Token"
          982┆ );
            ⋮┆----------------------------------------
          993┆ require(cdpData.requiredDebt <= daiLeft, "cannot repay all       
  debt");                                                                       
            ⋮┆----------------------------------------
         1040┆ require(
         1041┆                                                                  
  IERC20(exchangeData.fromTokenAddress).approve(address(exchange), ink),        
         1042┆   "MPA / Could not approve Exchange for Token"
         1043┆ );
            ⋮┆----------------------------------------
         1089┆ require(
         1090┆   IERC20(exchangeData.fromTokenAddress).approve(
         1091┆     address(exchange),
         1092┆     IERC20(gemAddress).balanceOf(address(this))
         1093┆   ),
         1094┆   "MPA / Could not approve Exchange for Token"
         1095┆ );
            ⋮┆----------------------------------------
         1138┆ require(msg.sender == address(addressRegistry.lender),           
  "mpa-untrusted-lender");                                                      
            ⋮┆----------------------------------------
         1143┆ require(
         1144┆   cdpData.requiredDebt.add(cdpData.depositDai) <=                
  IERC20(DAI).balanceOf(address(this)),                                         
         1145┆   "mpa-receive-requested-amount-mismatch"
         1146┆ );
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
           60┆ require(c / a == b, 'SafeMath: multiplication overflow');
            ⋮┆----------------------------------------
          743┆ require(cdpData.skipFL == false, "cannot close to DAI if FL not  
  used");                                                                       
            ⋮┆----------------------------------------
          868┆ require(
          869┆   IERC20(DAI).approve(address(exchange),                         
  exchangeData.fromTokenAmount.add(cdpData.depositDai)),                        
          870┆   "MPA / Could not approve Exchange for DAI"
          871┆ );
            ⋮┆----------------------------------------
          915┆ require(
          916┆   IERC20(exchangeData.fromTokenAddress).approve(
          917┆     address(exchange),
          918┆     exchangeData.fromTokenAmount
          919┆   ),
          920┆   "MPA / Could not approve Exchange for Token"
          921┆ );
            ⋮┆----------------------------------------
          979┆ require(
          980┆                                                                  
  IERC20(exchangeData.fromTokenAddress).approve(address(exchange), ink),        
          981┆   "MPA / Could not approve Exchange for Token"
          982┆ );
            ⋮┆----------------------------------------
         1040┆ require(
         1041┆                                                                  
  IERC20(exchangeData.fromTokenAddress).approve(address(exchange), ink),        
         1042┆   "MPA / Could not approve Exchange for Token"
         1043┆ );
            ⋮┆----------------------------------------
         1089┆ require(
         1090┆   IERC20(exchangeData.fromTokenAddress).approve(
         1091┆     address(exchange),
         1092┆     IERC20(gemAddress).balanceOf(address(this))
         1093┆   ),
         1094┆   "MPA / Could not approve Exchange for Token"
         1095┆ );
            ⋮┆----------------------------------------
         1143┆ require(
         1144┆   cdpData.requiredDebt.add(cdpData.depositDai) <=                
  IERC20(DAI).balanceOf(address(this)),                                         
         1145┆   "mpa-receive-requested-amount-mismatch"
         1146┆ );

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 21 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
