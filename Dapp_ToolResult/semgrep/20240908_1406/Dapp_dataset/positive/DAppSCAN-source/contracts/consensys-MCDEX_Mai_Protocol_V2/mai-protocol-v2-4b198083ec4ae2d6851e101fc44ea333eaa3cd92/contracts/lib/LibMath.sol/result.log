METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 24 Code Findings │
└──────────────────┘
                    
    /sb/LibMath.sol 
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
           27┆ require(!(a == -1 && b == _INT256_MIN), "wmultiplication         
  overflow");                                                                   
            ⋮┆----------------------------------------
           30┆ require(c / a == b, "wmultiplication overflow");
            ⋮┆----------------------------------------
           39┆ require(b != 0, "wdivision by zero");
            ⋮┆----------------------------------------
           40┆ require(!(b == -1 && a == _INT256_MIN), "wdivision overflow");
            ⋮┆----------------------------------------
           52┆ require((b >= 0 && c <= a) || (b < 0 && c > a), "subtraction     
  overflow");                                                                   
            ⋮┆----------------------------------------
           62┆ require((b >= 0 && c >= a) || (b < 0 && c < a), "addition        
  overflow");                                                                   
            ⋮┆----------------------------------------
           99┆ require(x >= 0, "int overflow");
            ⋮┆----------------------------------------
          128┆ require(y > 0, "roundHalfUp only supports y > 0");
            ⋮┆----------------------------------------
          154┆ require(x > 0, "logE of negative number");
            ⋮┆----------------------------------------
          155┆ require(x <= 10000000000000000000000000000000000000000, "logE    
  only accepts v <= 1e22 * 1e18"); // in order to prevent using safe-math       
            ⋮┆----------------------------------------
          221┆ require(x >= 0, "ceil need x >= 0");
            ⋮┆----------------------------------------
          222┆ require(m > 0, "ceil need m > 0");
            ⋮┆----------------------------------------
          237┆ require(c >= a, "Unaddition overflow");
            ⋮┆----------------------------------------
          243┆ require(b <= a, "Unsubtraction overflow");
            ⋮┆----------------------------------------
          258┆ require(c / a == b, "Unmultiplication overflow");
            ⋮┆----------------------------------------
          265┆ require(b > 0, "Undivision by zero");
            ⋮┆----------------------------------------
          293┆ require(x <= _UINT256_MAX, "uint256 overflow");
            ⋮┆----------------------------------------
          298┆ require(m != 0, "mod by zero");
            ⋮┆----------------------------------------
          303┆ require(m > 0, "ceil need m > 0");
            ⋮┆----------------------------------------
       solidity.performance.use-multiple-require                                
          Using multiple require statements is cheaper than using && multiple   
  check combinations.                                                           
          There are more advantages, such as easier to read code and better     
  coverage reports.                                                             
                                                                                
           27┆ require(!(a == -1 && b == _INT256_MIN), "wmultiplication         
  overflow");                                                                   
            ⋮┆----------------------------------------
           40┆ require(!(b == -1 && a == _INT256_MIN), "wdivision overflow");
            ⋮┆----------------------------------------
           52┆ require((b >= 0 && c <= a) || (b < 0 && c > a), "subtraction     
  overflow");                                                                   
            ⋮┆----------------------------------------
           62┆ require((b >= 0 && c >= a) || (b < 0 && c < a), "addition        
  overflow");                                                                   
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
          155┆ require(x <= 10000000000000000000000000000000000000000, "logE    
  only accepts v <= 1e22 * 1e18"); // in order to prevent using safe-math       

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 24 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
