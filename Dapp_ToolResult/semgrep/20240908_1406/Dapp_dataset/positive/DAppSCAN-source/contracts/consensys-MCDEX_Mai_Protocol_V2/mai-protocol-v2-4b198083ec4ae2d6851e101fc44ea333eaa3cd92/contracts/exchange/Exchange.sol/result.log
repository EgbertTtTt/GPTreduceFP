METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 56 Code Findings │
└──────────────────┘
                     
    /sb/Exchange.sol 
       solidity.performance.array-length-outside-loop                           
          Caching the array length outside a loop saves reading it on each      
  iteration, as long as the                                                     
          array's length is not changed during the loop.                        
                                                                                
          825┆ for (uint256 i = 0; i < makerOrderParams.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.state-variable-read-in-a-loop                       
          Replace state variable reads and writes within loops with local       
  variable reads and writes.                                                    
                                                                                
          834┆ uint256 makerFilledAmount = filled[makerOrderHash];
            ⋮┆----------------------------------------
          843┆ filled[makerOrderHash] = makerFilledAmount.add(amounts[i]);
            ⋮┆----------------------------------------
       solidity.performance.unnecessary-checked-arithmetic-in-loop              
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
                                                                                
          825┆ for (uint256 i = 0; i < makerOrderParams.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
           28┆ require(!(a == -1 && b == _INT256_MIN), "wmultiplication         
  overflow");                                                                   
            ⋮┆----------------------------------------
           31┆ require(c / a == b, "wmultiplication overflow");
            ⋮┆----------------------------------------
           40┆ require(b != 0, "wdivision by zero");
            ⋮┆----------------------------------------
           41┆ require(!(b == -1 && a == _INT256_MIN), "wdivision overflow");
            ⋮┆----------------------------------------
           53┆ require((b >= 0 && c <= a) || (b < 0 && c > a), "subtraction     
  overflow");                                                                   
            ⋮┆----------------------------------------
           63┆ require((b >= 0 && c >= a) || (b < 0 && c < a), "addition        
  overflow");                                                                   
            ⋮┆----------------------------------------
          100┆ require(x >= 0, "int overflow");
            ⋮┆----------------------------------------
          129┆ require(y > 0, "roundHalfUp only supports y > 0");
            ⋮┆----------------------------------------
          155┆ require(x > 0, "logE of negative number");
            ⋮┆----------------------------------------
          156┆ require(x <= 10000000000000000000000000000000000000000, "logE    
  only accepts v <= 1e22 * 1e18"); // in order to prevent using safe-math       
            ⋮┆----------------------------------------
          222┆ require(x >= 0, "ceil need x >= 0");
            ⋮┆----------------------------------------
          223┆ require(m > 0, "ceil need m > 0");
            ⋮┆----------------------------------------
          238┆ require(c >= a, "Unaddition overflow");
            ⋮┆----------------------------------------
          244┆ require(b <= a, "Unsubtraction overflow");
            ⋮┆----------------------------------------
          259┆ require(c / a == b, "Unmultiplication overflow");
            ⋮┆----------------------------------------
          266┆ require(b > 0, "Undivision by zero");
            ⋮┆----------------------------------------
          294┆ require(x <= _UINT256_MAX, "uint256 overflow");
            ⋮┆----------------------------------------
          299┆ require(m != 0, "mod by zero");
            ⋮┆----------------------------------------
          304┆ require(m > 0, "ceil need m > 0");
            ⋮┆----------------------------------------
          378┆ revert("invalid sign method");
            ⋮┆----------------------------------------
          815┆ require(!takerOrderParam.isMakerOnly(), "taker order is maker    
  only");                                                                       
            ⋮┆----------------------------------------
          818┆ require(perpetual.status() == LibTypes.Status.NORMAL, "wrong     
  perpetual status");                                                           
            ⋮┆----------------------------------------
          826┆ require(takerOrderParam.trader != makerOrderParams[i].trader,    
  "self trade");                                                                
            ⋮┆----------------------------------------
          827┆ require(takerOrderParam.isInversed() ==                          
  makerOrderParams[i].isInversed(), "invalid inversed pair");                   
            ⋮┆----------------------------------------
          828┆ require(takerOrderParam.isSell() != makerOrderParams[i].isSell(),
  "invalid side");                                                              
            ⋮┆----------------------------------------
          829┆ require(!makerOrderParams[i].isMarketOrder(), "market order      
  cannot be maker");                                                            
            ⋮┆----------------------------------------
          836┆ require(amounts[i] <=                                            
  takerOrderParam.amount.sub(takerFilledAmount), "taker overfilled");           
            ⋮┆----------------------------------------
          837┆ require(amounts[i] <=                                            
  makerOrderParams[i].amount.sub(makerFilledAmount), "maker overfilled");       
            ⋮┆----------------------------------------
          838┆ require(amounts[i].mod(tradingLotSize) == 0, "invalid trading lot
  size");                                                                       
            ⋮┆----------------------------------------
          849┆ require(perpetual.isIMSafe(takerOrderParam.trader), "taker       
  margin");                                                                     
            ⋮┆----------------------------------------
          851┆ require(perpetual.isSafe(takerOrderParam.trader), "maker         
  unsafe");                                                                     
            ⋮┆----------------------------------------
          853┆ require(perpetual.isSafe(msg.sender), "broker unsafe");
            ⋮┆----------------------------------------
          878┆ require(perpetual.isIMSafe(makerOrderParam.trader), "maker       
  margin");                                                                     
            ⋮┆----------------------------------------
          880┆ require(perpetual.isSafe(makerOrderParam.trader), "maker         
  unsafe");                                                                     
            ⋮┆----------------------------------------
          889┆ require(!takerOrderParam.isMakerOnly(), "taker order is maker    
  only");                                                                       
            ⋮┆----------------------------------------
          894┆ require(amount.mod(perpetual.getGovernance().tradingLotSize) ==  
  0, "invalid trading lot size");                                               
            ⋮┆----------------------------------------
          898┆ require(amount <= takerOrderParam.amount.sub(takerFilledAmount), 
  "taker overfilled");                                                          
            ⋮┆----------------------------------------
          927┆ require(takerOrderParam.isSell() ? takerPrice <= makerPrice :    
  takerPrice >= makerPrice, "price not match");                                 
            ⋮┆----------------------------------------
          936┆ require(broker == msg.sender, "invalid broker");
            ⋮┆----------------------------------------
          937┆ require(orderParam.getOrderVersion() == 2, "unsupported          
  version");                                                                    
            ⋮┆----------------------------------------
          938┆ require(orderParam.getExpiredAt() >= block.timestamp, "order     
  expired");                                                                    
            ⋮┆----------------------------------------
          941┆ require(orderParam.signature.isValidSignature(orderHash,         
  orderParam.trader), "invalid signature");                                     
            ⋮┆----------------------------------------
          942┆ require(filled[orderHash] < orderParam.amount, "fullfilled       
  order");                                                                      
            ⋮┆----------------------------------------
          956┆ require(msg.sender == order.trader || msg.sender == order.broker,
  "invalid caller");                                                            
            ⋮┆----------------------------------------
          981┆ require(available >= hard, "dev margin");
            ⋮┆----------------------------------------
          986┆ require(perpetual.isSafe(devAddress), "dev unsafe");
            ⋮┆----------------------------------------
       solidity.performance.use-multiple-require                                
          Using multiple require statements is cheaper than using && multiple   
  check combinations.                                                           
          There are more advantages, such as easier to read code and better     
  coverage reports.                                                             
                                                                                
           28┆ require(!(a == -1 && b == _INT256_MIN), "wmultiplication         
  overflow");                                                                   
            ⋮┆----------------------------------------
           41┆ require(!(b == -1 && a == _INT256_MIN), "wdivision overflow");
            ⋮┆----------------------------------------
           53┆ require((b >= 0 && c <= a) || (b < 0 && c > a), "subtraction     
  overflow");                                                                   
            ⋮┆----------------------------------------
           63┆ require((b >= 0 && c >= a) || (b < 0 && c < a), "addition        
  overflow");                                                                   
            ⋮┆----------------------------------------
       solidity.performance.use-prefix-increment-not-postfix                    
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
                                                                                
          825┆ for (uint256 i = 0; i < makerOrderParams.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
          156┆ require(x <= 10000000000000000000000000000000000000000, "logE    
  only accepts v <= 1e22 * 1e18"); // in order to prevent using safe-math       

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 56 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
