METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 73 Code Findings │
└──────────────────┘
                     
    /sb/CoinMama.sol 
       solidity.best-practice.use-ownable2step                                  
          By demanding that the receiver of the owner permissions actively      
  accept via a contract call                                                    
          of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the 
  contract ownership                                                            
          from accidentally being transferred  to an address that cannot handle 
  it.                                                                           
                                                                                
          877┆ contract CoinMama is ERC20, Ownable {
            ⋮┆----------------------------------------
         1371┆ contract CoinMamaDividendTracker is DividendPayingToken, Ownable 
  {                                                                             
            ⋮┆----------------------------------------
       solidity.performance.array-length-outside-loop                           
          Caching the array length outside a loop saves reading it on each      
  iteration, as long as the                                                     
          array's length is not changed during the loop.                        
                                                                                
         1539┆ if(_lastProcessedIndex >= tokenHoldersMap.keys.length) {
            ⋮┆----------------------------------------
       solidity.performance.non-payable-constructor      
          Consider making costructor payable to save gas.
                                                         
           27┆ constructor () public {
           28┆     address msgSender = _msgSender();
           29┆     _owner = msgSender;
           30┆     emit OwnershipTransferred(address(0), msgSender);
           31┆ }
            ⋮┆----------------------------------------
          397┆ constructor(string memory name_, string memory symbol_) public {
          398┆     _name = name_;
          399┆     _symbol = symbol_;
          400┆ }
            ⋮┆----------------------------------------
          735┆ constructor(string memory _name, string memory _symbol) public   
  ERC20(_name, _symbol) {                                                       
          736┆ 
          737┆ }
            ⋮┆----------------------------------------
          951┆ constructor() public ERC20("CoinMama", "CoinMama") {
          952┆ 
          953┆    dividendTracker = new                        
  CoinMamaDividendTracker();                                   
          954┆ 
          955┆ 
          956┆    IUniswapV2Router02 _uniswapV2Router =                         
  IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);               
          957┆      // Create a uniswap pair for this new token
          958┆     address _uniswapV2Pair =                                     
  IUniswapV2Factory(_uniswapV2Router.factory())                                 
          959┆         .createPair(address(this), _uniswapV2Router.WETH());
          960┆ 
             [hid 29 additional lines, adjust with --max-lines-per-finding] 
         1391┆ constructor() public                                             
  DividendPayingToken("CoinMama_Dividend_Tracker", "CoinMama_Dividend_Tracker") 
  {                                                                             
         1392┆    claimWait =   
  3600;                         
         1393┆     minimumTokenBalanceForDividends = 300000 * (10**18); //must  
  hold 300k+ tokens                                                             
         1394┆ }
            ⋮┆----------------------------------------
       solidity.performance.state-variable-read-in-a-loop                       
          Replace state variable reads and writes within loops with local       
  variable reads and writes.                                                    
                                                                                
         1035┆ _isExcludedFromFees[accounts[i]] = excluded;
            ⋮┆----------------------------------------
         1539┆ if(_lastProcessedIndex >= tokenHoldersMap.keys.length) {
            ⋮┆----------------------------------------
         1543┆ address account = tokenHoldersMap.keys[_lastProcessedIndex];
            ⋮┆----------------------------------------
         1545┆ if(canAutoClaim(lastClaimTimes[account])) {
            ⋮┆----------------------------------------
       solidity.performance.unnecessary-checked-arithmetic-in-loop              
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
                                                                                
         1034┆ for(uint256 i = 0; i < accounts.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
           44┆ require(_owner == _msgSender(), "Ownable: caller is not the      
  owner");                                                                      
            ⋮┆----------------------------------------
           73┆ require(newOwner != address(0), "Ownable: new owner is the zero  
  address");                                                                    
            ⋮┆----------------------------------------
          558┆ require(sender != address(0), "ERC20: transfer from the zero     
  address");                                                                    
            ⋮┆----------------------------------------
          559┆ require(recipient != address(0), "ERC20: transfer to the zero    
  address");                                                                    
            ⋮┆----------------------------------------
          578┆ require(account != address(0), "ERC20: mint to the zero          
  address");                                                                    
            ⋮┆----------------------------------------
          599┆ require(account != address(0), "ERC20: burn from the zero        
  address");                                                                    
            ⋮┆----------------------------------------
          626┆ require(owner != address(0), "ERC20: approve from the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          627┆ require(spender != address(0), "ERC20: approve to the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          996┆ require(newAddress != address(dividendTracker), "CoinMama: The   
  dividend tracker already has that address");                                  
            ⋮┆----------------------------------------
         1000┆ require(newDividendTracker.owner() == address(this), "CoinMama:  
  The new dividend tracker must be owned by the CoinMama token contract");      
            ⋮┆----------------------------------------
         1014┆ require(newAddress != address(uniswapV2Router), "CoinMama: The   
  router already has that address");                                            
            ⋮┆----------------------------------------
         1020┆ require(_isExcludedFromFees[account] != excluded, "CoinMama:     
  Account is already the value of 'excluded'");                                 
            ⋮┆----------------------------------------
         1027┆ require(_isExcludedFromPunishment[account] != excluded,          
  "CoinMama: Account is already the value of 'excluded'");                      
            ⋮┆----------------------------------------
         1046┆ require(pair != uniswapV2Pair, "CoinMama: The PancakeSwap pair   
  cannot be removed from automatedMarketMakerPairs");                           
            ⋮┆----------------------------------------
         1052┆ require(automatedMarketMakerPairs[pair] != value, "CoinMama:     
  Automated market maker pair is already set to that value");                   
            ⋮┆----------------------------------------
         1064┆ require(newValue >= 200000 && newValue <= 500000, "CoinMama:     
  gasForProcessing must be between 200,000 and 500,000");                       
            ⋮┆----------------------------------------
         1065┆ require(newValue != gasForProcessing, "CoinMama: Cannot update   
  gasForProcessing to same value");                                             
            ⋮┆----------------------------------------
         1155┆ require(from != address(0), "ERC20: transfer from the zero       
  address");                                                                    
            ⋮┆----------------------------------------
         1156┆ require(to != address(0), "ERC20: transfer to the zero address");
            ⋮┆----------------------------------------
         1158┆ require(block.timestamp >= userCanSellTime[from], "You are       
  punished");                                                                   
            ⋮┆----------------------------------------
         1169┆ require(amount <= maxSoldAmount, 'Amount is exceeding            
  maxSoldAmount');                                                              
            ⋮┆----------------------------------------
         1397┆ require(false, "CoinMama_Dividend_Tracker: No transfers          
  allowed");                                                                    
            ⋮┆----------------------------------------
         1401┆ require(false, "CoinMama_Dividend_Tracker: withdrawDividend      
  disabled. Use the 'claim' function on the main CoinMama contract.");          
            ⋮┆----------------------------------------
         1415┆ require(newClaimWait >= 3600 && newClaimWait <= 86400,           
  "CoinMama_Dividend_Tracker: claimWait must be updated to between 1 and 24     
  hours");                                                                      
            ⋮┆----------------------------------------
         1416┆ require(newClaimWait != claimWait, "CoinMama_Dividend_Tracker:   
  Cannot update claimWait to same value");                                      
            ⋮┆----------------------------------------
         1593┆ require(c >= a, "SafeMath: addition overflow");
            ⋮┆----------------------------------------
         1648┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
       solidity.performance.use-multiple-require                                
          Using multiple require statements is cheaper than using && multiple   
  check combinations.                                                           
          There are more advantages, such as easier to read code and better     
  coverage reports.                                                             
                                                                                
         1064┆ require(newValue >= 200000 && newValue <= 500000, "CoinMama:     
  gasForProcessing must be between 200,000 and 500,000");                       
            ⋮┆----------------------------------------
         1415┆ require(newClaimWait >= 3600 && newClaimWait <= 86400,           
  "CoinMama_Dividend_Tracker: claimWait must be updated to between 1 and 24     
  hours");                                                                      
            ⋮┆----------------------------------------
         1755┆ require((b >= 0 && c <= a) || (b < 0 && c > a));
            ⋮┆----------------------------------------
         1764┆ require((b >= 0 && c >= a) || (b < 0 && c < a));
            ⋮┆----------------------------------------
       solidity.performance.use-nested-if                                       
          Using nested is cheaper than using && multiple check combinations.    
  There are more                                                                
          advantages, such as easier to read code and better coverage reports.  
                                                                                
         1198┆ if(
         1199┆     canSwap &&
         1200┆     !swapping &&
         1201┆     !automatedMarketMakerPairs[from] &&
         1202┆     trigger &&
         1203┆     from != owner() &&
         1204┆     to != owner()
         1205┆ ) {
         1206┆     swapping = true;
         1207┆     uint256 timePassed = block.timestamp.sub(lastSwap);
             [hid 14 additional lines, adjust with --max-lines-per-finding] 
       solidity.performance.use-prefix-increment-not-postfix                    
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
                                                                                
         1034┆ for(uint256 i = 0; i < accounts.length; i++) {
            ⋮┆----------------------------------------
         1537┆ _lastProcessedIndex++;
            ⋮┆----------------------------------------
         1547┆ claims++;
            ⋮┆----------------------------------------
         1551┆ iterations++;
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
           73┆ require(newOwner != address(0), "Ownable: new owner is the zero  
  address");                                                                    
            ⋮┆----------------------------------------
          558┆ require(sender != address(0), "ERC20: transfer from the zero     
  address");                                                                    
            ⋮┆----------------------------------------
          559┆ require(recipient != address(0), "ERC20: transfer to the zero    
  address");                                                                    
            ⋮┆----------------------------------------
          599┆ require(account != address(0), "ERC20: burn from the zero        
  address");                                                                    
            ⋮┆----------------------------------------
          626┆ require(owner != address(0), "ERC20: approve from the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          627┆ require(spender != address(0), "ERC20: approve to the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          996┆ require(newAddress != address(dividendTracker), "CoinMama: The   
  dividend tracker already has that address");                                  
            ⋮┆----------------------------------------
         1000┆ require(newDividendTracker.owner() == address(this), "CoinMama:  
  The new dividend tracker must be owned by the CoinMama token contract");      
            ⋮┆----------------------------------------
         1014┆ require(newAddress != address(uniswapV2Router), "CoinMama: The   
  router already has that address");                                            
            ⋮┆----------------------------------------
         1020┆ require(_isExcludedFromFees[account] != excluded, "CoinMama:     
  Account is already the value of 'excluded'");                                 
            ⋮┆----------------------------------------
         1027┆ require(_isExcludedFromPunishment[account] != excluded,          
  "CoinMama: Account is already the value of 'excluded'");                      
            ⋮┆----------------------------------------
         1046┆ require(pair != uniswapV2Pair, "CoinMama: The PancakeSwap pair   
  cannot be removed from automatedMarketMakerPairs");                           
            ⋮┆----------------------------------------
         1052┆ require(automatedMarketMakerPairs[pair] != value, "CoinMama:     
  Automated market maker pair is already set to that value");                   
            ⋮┆----------------------------------------
         1064┆ require(newValue >= 200000 && newValue <= 500000, "CoinMama:     
  gasForProcessing must be between 200,000 and 500,000");                       
            ⋮┆----------------------------------------
         1065┆ require(newValue != gasForProcessing, "CoinMama: Cannot update   
  gasForProcessing to same value");                                             
            ⋮┆----------------------------------------
         1155┆ require(from != address(0), "ERC20: transfer from the zero       
  address");                                                                    
            ⋮┆----------------------------------------
         1156┆ require(to != address(0), "ERC20: transfer to the zero address");
            ⋮┆----------------------------------------
         1169┆ require(amount <= maxSoldAmount, 'Amount is exceeding            
  maxSoldAmount');                                                              
            ⋮┆----------------------------------------
         1397┆ require(false, "CoinMama_Dividend_Tracker: No transfers          
  allowed");                                                                    
            ⋮┆----------------------------------------
         1401┆ require(false, "CoinMama_Dividend_Tracker: withdrawDividend      
  disabled. Use the 'claim' function on the main CoinMama contract.");          
            ⋮┆----------------------------------------
         1415┆ require(newClaimWait >= 3600 && newClaimWait <= 86400,           
  "CoinMama_Dividend_Tracker: claimWait must be updated to between 1 and 24     
  hours");                                                                      
            ⋮┆----------------------------------------
         1416┆ require(newClaimWait != claimWait, "CoinMama_Dividend_Tracker:   
  Cannot update claimWait to same value");                                      
            ⋮┆----------------------------------------
         1648┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
       solidity.security.no-slippage-check          
          No slippage check in a Uniswap v2/v3 trade
                                                    
         1333┆                                                                  
  uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(           
         1334┆     tokenAmount,
         1335┆     0, // accept any amount of ETH
         1336┆     path,
         1337┆     address(this),
         1338┆     block.timestamp
         1339┆ );

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 73 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
