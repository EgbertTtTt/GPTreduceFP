METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 61 Code Findings │
└──────────────────┘
                      
    /sb/vDSGToken.sol 
       solidity.best-practice.use-abi-encodecall-instead-of-encodewithselector  
          To guarantee arguments type safety it is recommended to use           
  `abi.encodeCall` instead of                                                   
          `abi.encodeWithSelector`.                                             
                                                                                
          811┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.transfer.selector, to, value));                  
            ⋮┆----------------------------------------
          815┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.transferFrom.selector, from, to, value));        
            ⋮┆----------------------------------------
          833┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.approve.selector, spender, value));              
            ⋮┆----------------------------------------
          838┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.approve.selector, spender, newAllowance));       
            ⋮┆----------------------------------------
          843┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.approve.selector, spender, newAllowance));       
            ⋮┆----------------------------------------
       solidity.best-practice.use-ownable2step                                  
          By demanding that the receiver of the owner permissions actively      
  accept via a contract call                                                    
          of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the 
  contract ownership                                                            
          from accidentally being transferred  to an address that cannot handle 
  it.                                                                           
                                                                                
          982┆ contract vDSGToken is Ownable {
            ⋮┆----------------------------------------
       solidity.performance.non-payable-constructor      
          Consider making costructor payable to save gas.
                                                         
          358┆ constructor (string memory name_, string memory symbol_) public {
          359┆     _name = name_;
          360┆     _symbol = symbol_;
          361┆     _decimals = 18;
          362┆ }
            ⋮┆----------------------------------------
         1061┆ constructor(
         1062┆     address dsgToken,
         1063┆     address dsgTeam,
         1064┆     address dsgReserve
         1065┆ ) public {
         1066┆     _dsgToken = dsgToken;
         1067┆     _dsgTeam = dsgTeam;
         1068┆     _dsgReserve = dsgReserve;
         1069┆ 
         1070┆     changePerReward(15*10**18);
             [hid 1 additional lines, adjust with --max-lines-per-finding] 
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
          183┆ require(c >= a, "SafeMath: addition overflow");
            ⋮┆----------------------------------------
          198┆ require(b <= a, "SafeMath: subtraction overflow");
            ⋮┆----------------------------------------
          215┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          232┆ require(b > 0, "SafeMath: division by zero");
            ⋮┆----------------------------------------
          249┆ require(b > 0, "SafeMath: modulo by zero");
            ⋮┆----------------------------------------
          512┆ require(sender != address(0), "ERC20: transfer from the zero     
  address");                                                                    
            ⋮┆----------------------------------------
          513┆ require(recipient != address(0), "ERC20: transfer to the zero    
  address");                                                                    
            ⋮┆----------------------------------------
          532┆ require(account != address(0), "ERC20: mint to the zero          
  address");                                                                    
            ⋮┆----------------------------------------
          553┆ require(account != address(0), "ERC20: burn from the zero        
  address");                                                                    
            ⋮┆----------------------------------------
          576┆ require(owner != address(0), "ERC20: approve from the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          577┆ require(spender != address(0), "ERC20: approve to the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          660┆ require(address(this).balance >= amount, "Address: insufficient  
  balance");                                                                    
            ⋮┆----------------------------------------
          664┆ require(success, "Address: unable to send value, recipient may   
  have reverted");                                                              
            ⋮┆----------------------------------------
          721┆ require(address(this).balance >= value, "Address: insufficient   
  balance for call");                                                           
            ⋮┆----------------------------------------
          722┆ require(isContract(target), "Address: call to non-contract");
            ⋮┆----------------------------------------
          746┆ require(isContract(target), "Address: static call to             
  non-contract");                                                               
            ⋮┆----------------------------------------
          770┆ require(isContract(target), "Address: delegate call to           
  non-contract");                                                               
            ⋮┆----------------------------------------
          830┆ require((value == 0) || (token.allowance(address(this), spender) 
  == 0),                                                                        
          831┆     "SafeERC20: approve from non-zero to non-zero allowance"
          832┆ );
            ⋮┆----------------------------------------
          860┆ require(abi.decode(returndata, (bool)), "SafeERC20: ERC20        
  operation did not succeed");                                                  
            ⋮┆----------------------------------------
          902┆ require(owner() == _msgSender(), "Ownable: caller is not the     
  owner");                                                                      
            ⋮┆----------------------------------------
          923┆ require(newOwner != address(0), "Ownable: new owner is the zero  
  address");                                                                    
            ⋮┆----------------------------------------
         1050┆ require(_canTransfer, "vDSGToken: not allowed transfer");
            ⋮┆----------------------------------------
         1055┆ require(availableBalanceOf(account) >= amount, "vDSGToken:       
  available amount not enough");                                                
            ⋮┆----------------------------------------
         1115┆ require(
         1116┆     superiorAddress != address(0) && superiorAddress !=          
  msg.sender,                                                                   
         1117┆     "vDSGToken: Superior INVALID"
         1118┆ );
            ⋮┆----------------------------------------
         1119┆ require(dsgAmount >= 1e18, "vDSGToken: must mint greater than    
  1");                                                                          
            ⋮┆----------------------------------------
         1125┆ require(
         1126┆     superiorAddress == _dsgTeam ||                               
  userInfo[superiorAddress].superior != address(0),                             
         1127┆     "vDSGToken: INVALID_SUPERIOR_ADDRESS"
         1128┆ );
            ⋮┆----------------------------------------
         1238┆ require(vDsgAmount <= _allowed[from][msg.sender],                
  "ALLOWANCE_NOT_ENOUGH");                                                      
            ⋮┆----------------------------------------
         1314┆ require(max > min, "bad num");
            ⋮┆----------------------------------------
         1321┆ require(max < 10**18, "bad max");
            ⋮┆----------------------------------------
         1322┆ require( (max - min)/10**16 > 0, "bad max - min");
            ⋮┆----------------------------------------
         1353┆ require(newAlpha <= uint112(-1) && newTotalDistribution <=       
  uint112(-1), "OVERFLOW");                                                     
            ⋮┆----------------------------------------
         1368┆ require(stakingPower <= uint128(-1), "OVERFLOW");
            ⋮┆----------------------------------------
         1432┆ require(from != address(0), "transfer from the zero address");
            ⋮┆----------------------------------------
         1433┆ require(to != address(0), "transfer to the zero address");
            ⋮┆----------------------------------------
         1434┆ require(from != to, "transfer from same with to");
            ⋮┆----------------------------------------
       solidity.performance.use-multiple-require                                
          Using multiple require statements is cheaper than using && multiple   
  check combinations.                                                           
          There are more advantages, such as easier to read code and better     
  coverage reports.                                                             
                                                                                
         1115┆ require(
         1116┆     superiorAddress != address(0) && superiorAddress !=          
  msg.sender,                                                                   
         1117┆     "vDSGToken: Superior INVALID"
         1118┆ );
            ⋮┆----------------------------------------
         1353┆ require(newAlpha <= uint112(-1) && newTotalDistribution <=       
  uint112(-1), "OVERFLOW");                                                     
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
          215┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          512┆ require(sender != address(0), "ERC20: transfer from the zero     
  address");                                                                    
            ⋮┆----------------------------------------
          513┆ require(recipient != address(0), "ERC20: transfer to the zero    
  address");                                                                    
            ⋮┆----------------------------------------
          553┆ require(account != address(0), "ERC20: burn from the zero        
  address");                                                                    
            ⋮┆----------------------------------------
          576┆ require(owner != address(0), "ERC20: approve from the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          577┆ require(spender != address(0), "ERC20: approve to the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          664┆ require(success, "Address: unable to send value, recipient may   
  have reverted");                                                              
            ⋮┆----------------------------------------
          721┆ require(address(this).balance >= value, "Address: insufficient   
  balance for call");                                                           
            ⋮┆----------------------------------------
          746┆ require(isContract(target), "Address: static call to             
  non-contract");                                                               
            ⋮┆----------------------------------------
          770┆ require(isContract(target), "Address: delegate call to           
  non-contract");                                                               
            ⋮┆----------------------------------------
          830┆ require((value == 0) || (token.allowance(address(this), spender) 
  == 0),                                                                        
          831┆     "SafeERC20: approve from non-zero to non-zero allowance"
          832┆ );
            ⋮┆----------------------------------------
          860┆ require(abi.decode(returndata, (bool)), "SafeERC20: ERC20        
  operation did not succeed");                                                  
            ⋮┆----------------------------------------
          923┆ require(newOwner != address(0), "Ownable: new owner is the zero  
  address");                                                                    
            ⋮┆----------------------------------------
         1055┆ require(availableBalanceOf(account) >= amount, "vDSGToken:       
  available amount not enough");                                                
            ⋮┆----------------------------------------
         1119┆ require(dsgAmount >= 1e18, "vDSGToken: must mint greater than    
  1");                                                                          
            ⋮┆----------------------------------------
         1125┆ require(
         1126┆     superiorAddress == _dsgTeam ||                               
  userInfo[superiorAddress].superior != address(0),                             
         1127┆     "vDSGToken: INVALID_SUPERIOR_ADDRESS"
         1128┆ );

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 61 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
