METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 35 Code Findings │
└──────────────────┘
                       
    /sb/SinglePool.sol 
       solidity.best-practice.use-abi-encodecall-instead-of-encodewithselector  
          To guarantee arguments type safety it is recommended to use           
  `abi.encodeCall` instead of                                                   
          `abi.encodeWithSelector`.                                             
                                                                                
          576┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.transfer.selector, to, value));                  
            ⋮┆----------------------------------------
          580┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.transferFrom.selector, from, to, value));        
            ⋮┆----------------------------------------
          598┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.approve.selector, spender, value));              
            ⋮┆----------------------------------------
          603┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.approve.selector, spender, newAllowance));       
            ⋮┆----------------------------------------
          608┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.approve.selector, spender, newAllowance));       
            ⋮┆----------------------------------------
       solidity.best-practice.use-ownable2step                                  
          By demanding that the receiver of the owner permissions actively      
  accept via a contract call                                                    
          of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the 
  contract ownership                                                            
          from accidentally being transferred  to an address that cannot handle 
  it.                                                                           
                                                                                
          630┆ contract SinglePool is Ownable {
            ⋮┆----------------------------------------
       solidity.performance.init-variables-with-default-value                   
          Uninitialized variables are assigned with the types default value.    
  Explicitly initializing a                                                     
          variable with its default value costs unnecessary gas.                
                                                                                
          666┆ uint256 private totalAllocPoint = 0;
            ⋮┆----------------------------------------
       solidity.performance.non-payable-constructor      
          Consider making costructor payable to save gas.
                                                         
          676┆ constructor(
          677┆     IERC20 _depositToken,
          678┆     IERC20 _rewardToken,
          679┆     uint256 _rewardPerBlock,
          680┆     uint256 _startBlock,
          681┆     uint256 _bonusEndBlock
          682┆ ) public {
          683┆     depositToken = _depositToken;
          684┆     rewardToken = _rewardToken;
          685┆     rewardPerBlock = _rewardPerBlock;
             [hid 15 additional lines, adjust with --max-lines-per-finding] 
       solidity.performance.unnecessary-checked-arithmetic-in-loop              
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
                                                                                
          756┆ for (uint256 pid = 0; pid < length; ++pid) {
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
           64┆ require(owner() == _msgSender(), "Ownable: caller is not the     
  owner");                                                                      
            ⋮┆----------------------------------------
           85┆ require(newOwner != address(0), "Ownable: new owner is the zero  
  address");                                                                    
            ⋮┆----------------------------------------
          247┆ require(c >= a, "SafeMath: addition overflow");
            ⋮┆----------------------------------------
          262┆ require(b <= a, "SafeMath: subtraction overflow");
            ⋮┆----------------------------------------
          279┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          296┆ require(b > 0, "SafeMath: division by zero");
            ⋮┆----------------------------------------
          313┆ require(b > 0, "SafeMath: modulo by zero");
            ⋮┆----------------------------------------
          425┆ require(address(this).balance >= amount, "Address: insufficient  
  balance");                                                                    
            ⋮┆----------------------------------------
          429┆ require(success, "Address: unable to send value, recipient may   
  have reverted");                                                              
            ⋮┆----------------------------------------
          486┆ require(address(this).balance >= value, "Address: insufficient   
  balance for call");                                                           
            ⋮┆----------------------------------------
          487┆ require(isContract(target), "Address: call to non-contract");
            ⋮┆----------------------------------------
          511┆ require(isContract(target), "Address: static call to             
  non-contract");                                                               
            ⋮┆----------------------------------------
          535┆ require(isContract(target), "Address: delegate call to           
  non-contract");                                                               
            ⋮┆----------------------------------------
          595┆ require((value == 0) || (token.allowance(address(this), spender) 
  == 0),                                                                        
          596┆     "SafeERC20: approve from non-zero to non-zero allowance"
          597┆ );
            ⋮┆----------------------------------------
          625┆ require(abi.decode(returndata, (bool)), "SafeERC20: ERC20        
  operation did not succeed");                                                  
            ⋮┆----------------------------------------
          798┆ require(user.amount >= _amount, "withdraw: not good");
            ⋮┆----------------------------------------
          837┆ require(_amount <= rewardToken.balanceOf(address(this)), 'not    
  enough token');                                                               
            ⋮┆----------------------------------------
       solidity.performance.use-nested-if                                       
          Using nested is cheaper than using && multiple check combinations.    
  There are more                                                                
          advantages, such as easier to read code and better coverage reports.  
                                                                                
          728┆ if (block.number > pool.lastRewardBlock && lpSupply != 0) {
          729┆     uint256 multiplier = getMultiplier(pool.lastRewardBlock,     
  block.number);                                                                
          730┆     uint256 tokenReward =                                        
  multiplier.mul(rewardPerBlock).mul(pool.allocPoint).div(totalAllocPoint);     
          731┆     accRewardsPerShare =                                         
  accRewardsPerShare.add(tokenReward.mul(1e18).div(lpSupply));                  
          732┆ }
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
           85┆ require(newOwner != address(0), "Ownable: new owner is the zero  
  address");                                                                    
            ⋮┆----------------------------------------
          279┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          429┆ require(success, "Address: unable to send value, recipient may   
  have reverted");                                                              
            ⋮┆----------------------------------------
          486┆ require(address(this).balance >= value, "Address: insufficient   
  balance for call");                                                           
            ⋮┆----------------------------------------
          511┆ require(isContract(target), "Address: static call to             
  non-contract");                                                               
            ⋮┆----------------------------------------
          535┆ require(isContract(target), "Address: delegate call to           
  non-contract");                                                               
            ⋮┆----------------------------------------
          595┆ require((value == 0) || (token.allowance(address(this), spender) 
  == 0),                                                                        
          596┆     "SafeERC20: approve from non-zero to non-zero allowance"
          597┆ );
            ⋮┆----------------------------------------
          625┆ require(abi.decode(returndata, (bool)), "SafeERC20: ERC20        
  operation did not succeed");                                                  

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 35 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
