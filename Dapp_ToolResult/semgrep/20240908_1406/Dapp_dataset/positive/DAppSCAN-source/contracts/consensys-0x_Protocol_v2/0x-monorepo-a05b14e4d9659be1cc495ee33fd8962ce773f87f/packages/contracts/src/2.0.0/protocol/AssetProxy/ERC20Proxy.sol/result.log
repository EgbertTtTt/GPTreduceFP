METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 44 Code Findings │
└──────────────────┘
                       
    /sb/ERC20Proxy.sol 
       solidity.best-practice.use-ownable2step                                  
          By demanding that the receiver of the owner permissions actively      
  accept via a contract call                                                    
          of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the 
  contract ownership                                                            
          from accidentally being transferred  to an address that cannot handle 
  it.                                                                           
                                                                                
          706┆ Ownable,
            ⋮┆----------------------------------------
       solidity.performance.array-length-outside-loop                           
          Caching the array length outside a loop saves reading it on each      
  iteration, as long as the                                                     
          array's length is not changed during the loop.                        
                                                                                
          749┆ for (uint256 i = 0; i < authorities.length; i++) {
            ⋮┆----------------------------------------
          751┆ authorities[i] = authorities[authorities.length - 1];
            ⋮┆----------------------------------------
          752┆ authorities.length -= 1;
            ⋮┆----------------------------------------
       solidity.performance.non-payable-constructor      
          Consider making costructor payable to save gas.
                                                         
          581┆ constructor ()
          582┆     public
          583┆ {
          584┆     owner = msg.sender;
          585┆ }
            ⋮┆----------------------------------------
       solidity.performance.state-variable-read-in-a-loop                       
          Replace state variable reads and writes within loops with local       
  variable reads and writes.                                                    
                                                                                
          749┆ for (uint256 i = 0; i < authorities.length; i++) {
            ⋮┆----------------------------------------
          750┆ if (authorities[i] == target) {
            ⋮┆----------------------------------------
          751┆ authorities[i] = authorities[authorities.length - 1];
            ⋮┆----------------------------------------
          751┆ authorities[i] = authorities[authorities.length - 1];
            ⋮┆----------------------------------------
          751┆ authorities[i] = authorities[authorities.length - 1];
            ⋮┆----------------------------------------
          752┆ authorities.length -= 1;
            ⋮┆----------------------------------------
       solidity.performance.unnecessary-checked-arithmetic-in-loop              
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
                                                                                
          749┆ for (uint256 i = 0; i < authorities.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
          176┆ require(
          177┆     from <= to,
          178┆     "FROM_LESS_THAN_TO_REQUIRED"
          179┆ );
            ⋮┆----------------------------------------
          180┆ require(
          181┆     to < b.length,
          182┆     "TO_LESS_THAN_LENGTH_REQUIRED"
          183┆ );
            ⋮┆----------------------------------------
          209┆ require(
          210┆     from <= to,
          211┆     "FROM_LESS_THAN_TO_REQUIRED"
          212┆ );
            ⋮┆----------------------------------------
          213┆ require(
          214┆     to < b.length,
          215┆     "TO_LESS_THAN_LENGTH_REQUIRED"
          216┆ );
            ⋮┆----------------------------------------
          234┆ require(
          235┆     b.length > 0,
          236┆     "GREATER_THAN_ZERO_LENGTH_REQUIRED"
          237┆ );
            ⋮┆----------------------------------------
          258┆ require(
          259┆     b.length >= 20,
          260┆     "GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED"
          261┆ );
            ⋮┆----------------------------------------
          304┆ require(
          305┆     b.length >= index + 20,  // 20 is length of address
          306┆     "GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED"
          307┆ );
            ⋮┆----------------------------------------
          336┆ require(
          337┆     b.length >= index + 20,  // 20 is length of address
          338┆     "GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED"
          339┆ );
            ⋮┆----------------------------------------
          382┆ require(
          383┆     b.length >= index + 32,
          384┆     "GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED"
          385┆ );
            ⋮┆----------------------------------------
          409┆ require(
          410┆     b.length >= index + 32,
          411┆     "GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED"
          412┆ );
            ⋮┆----------------------------------------
          465┆ require(
          466┆     b.length >= index + 4,
          467┆     "GREATER_OR_EQUAL_TO_4_LENGTH_REQUIRED"
          468┆ );
            ⋮┆----------------------------------------
          498┆ require(
          499┆     b.length >= index + nestedBytesLength,
          500┆     "GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED"
          501┆ );
            ⋮┆----------------------------------------
          524┆ require(
          525┆     b.length >= index + 32 + input.length,  // 32 bytes to store 
  length                                                                        
          526┆     "GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED"
          527┆ );
            ⋮┆----------------------------------------
          549┆ require(
          550┆     dest.length >= sourceLen,
          551┆     "GREATER_OR_EQUAL_TO_SOURCE_BYTES_LENGTH_REQUIRED"
          552┆ );
            ⋮┆----------------------------------------
          588┆ require(
          589┆     msg.sender == owner,
          590┆     "ONLY_CONTRACT_OWNER"
          591┆ );
            ⋮┆----------------------------------------
          711┆ require(
          712┆     authorized[msg.sender],
          713┆     "SENDER_NOT_AUTHORIZED"
          714┆ );
            ⋮┆----------------------------------------
          727┆ require(
          728┆     !authorized[target],
          729┆     "TARGET_ALREADY_AUTHORIZED"
          730┆ );
            ⋮┆----------------------------------------
          743┆ require(
          744┆     authorized[target],
          745┆     "TARGET_NOT_AUTHORIZED"
          746┆ );
            ⋮┆----------------------------------------
          769┆ require(
          770┆     authorized[target],
          771┆     "TARGET_NOT_AUTHORIZED"
          772┆ );
            ⋮┆----------------------------------------
          773┆ require(
          774┆     index < authorities.length,
          775┆     "INDEX_OUT_OF_BOUNDS"
          776┆ );
            ⋮┆----------------------------------------
          777┆ require(
          778┆     authorities[index] == target,
          779┆     "AUTHORIZED_ADDRESS_MISMATCH"
          780┆ );
            ⋮┆----------------------------------------
       solidity.performance.use-prefix-increment-not-postfix                    
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
                                                                                
          749┆ for (uint256 i = 0; i < authorities.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
          234┆ require(
          235┆     b.length > 0,
          236┆     "GREATER_THAN_ZERO_LENGTH_REQUIRED"
          237┆ );
            ⋮┆----------------------------------------
          258┆ require(
          259┆     b.length >= 20,
          260┆     "GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED"
          261┆ );
            ⋮┆----------------------------------------
          304┆ require(
          305┆     b.length >= index + 20,  // 20 is length of address
          306┆     "GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED"
          307┆ );
            ⋮┆----------------------------------------
          336┆ require(
          337┆     b.length >= index + 20,  // 20 is length of address
          338┆     "GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED"
          339┆ );
            ⋮┆----------------------------------------
          382┆ require(
          383┆     b.length >= index + 32,
          384┆     "GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED"
          385┆ );
            ⋮┆----------------------------------------
          409┆ require(
          410┆     b.length >= index + 32,
          411┆     "GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED"
          412┆ );
            ⋮┆----------------------------------------
          465┆ require(
          466┆     b.length >= index + 4,
          467┆     "GREATER_OR_EQUAL_TO_4_LENGTH_REQUIRED"
          468┆ );
            ⋮┆----------------------------------------
          498┆ require(
          499┆     b.length >= index + nestedBytesLength,
          500┆     "GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED"
          501┆ );
            ⋮┆----------------------------------------
          524┆ require(
          525┆     b.length >= index + 32 + input.length,  // 32 bytes to store 
  length                                                                        
          526┆     "GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED"
          527┆ );
            ⋮┆----------------------------------------
          549┆ require(
          550┆     dest.length >= sourceLen,
          551┆     "GREATER_OR_EQUAL_TO_SOURCE_BYTES_LENGTH_REQUIRED"
          552┆ );

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 44 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
