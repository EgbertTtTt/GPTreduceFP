METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 75 Code Findings │
└──────────────────┘
                         
    /sb/GoodGhosting.sol 
       solidity.best-practice.use-ownable2step                                  
          By demanding that the receiver of the owner permissions actively      
  accept via a contract call                                                    
          of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the 
  contract ownership                                                            
          from accidentally being transferred  to an address that cannot handle 
  it.                                                                           
                                                                                
          524┆ contract GoodGhosting is Ownable, Pausable {
            ⋮┆----------------------------------------
       solidity.performance.init-variables-with-default-value                   
          Uninitialized variables are assigned with the types default value.    
  Explicitly initializing a                                                     
          variable with its default value costs unnecessary gas.                
                                                                                
          538┆ uint256 public totalIncentiveAmount = 0;
            ⋮┆----------------------------------------
          540┆ uint256 public activePlayersCount = 0;
            ⋮┆----------------------------------------
       solidity.performance.non-payable-constructor      
          Consider making costructor payable to save gas.
                                                         
          637┆ constructor(
          638┆     IERC20 _inboundCurrency,
          639┆     ILendingPoolAddressesProvider _lendingPoolAddressProvider,
          640┆     uint256 _segmentCount,
          641┆     uint256 _segmentLength,
          642┆     uint256 _segmentPayment,
          643┆     uint256 _earlyWithdrawalFee,
          644┆     uint256 _customFee,
          645┆     address _dataProvider,
          646┆     uint256 _maxPlayersCount,
             [hid 34 additional lines, adjust with --max-lines-per-finding] 
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
           63┆ require(owner() == _msgSender(), "Ownable: caller is not the     
  owner");                                                                      
            ⋮┆----------------------------------------
           84┆ require(newOwner != address(0), "Ownable: new owner is the zero  
  address");                                                                    
            ⋮┆----------------------------------------
          134┆ require(!paused(), "Pausable: paused");
            ⋮┆----------------------------------------
          146┆ require(paused(), "Pausable: not paused");
            ⋮┆----------------------------------------
          257┆ require(c >= a, "SafeMath: addition overflow");
            ⋮┆----------------------------------------
          272┆ require(b <= a, "SafeMath: subtraction overflow");
            ⋮┆----------------------------------------
          289┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          306┆ require(b > 0, "SafeMath: division by zero");
            ⋮┆----------------------------------------
          323┆ require(b > 0, "SafeMath: modulo by zero");
            ⋮┆----------------------------------------
          615┆ require(isGameCompleted(), "Game is not completed");
            ⋮┆----------------------------------------
          620┆ require(!isGameCompleted(), "Game is already completed");
            ⋮┆----------------------------------------
          649┆ require(_customFee <= 20, "_customFee must be less than or equal 
  to 20%");                                                                     
            ⋮┆----------------------------------------
          650┆ require(_earlyWithdrawalFee <= 10, "_earlyWithdrawalFee must be  
  less than or equal to 10%");                                                  
            ⋮┆----------------------------------------
          651┆ require(_earlyWithdrawalFee > 0,  "_earlyWithdrawalFee must be   
  greater than zero");                                                          
            ⋮┆----------------------------------------
          652┆ require(_maxPlayersCount > 0, "_maxPlayersCount must be greater  
  than zero");                                                                  
            ⋮┆----------------------------------------
          653┆ require(address(_inboundCurrency) != address(0), "invalid        
  _inboundCurrency address");                                                   
            ⋮┆----------------------------------------
          654┆ require(address(_lendingPoolAddressProvider) != address(0),      
  "invalid _lendingPoolAddressProvider address");                               
            ⋮┆----------------------------------------
          655┆ require(_segmentCount > 0, "_segmentCount must be greater than   
  zero");                                                                       
            ⋮┆----------------------------------------
          656┆ require(_segmentLength > 0, "_segmentLength must be greater than 
  zero");                                                                       
            ⋮┆----------------------------------------
          657┆ require(_segmentPayment > 0, "_segmentPayment must be greater    
  than zero");                                                                  
            ⋮┆----------------------------------------
          658┆ require(_dataProvider != address(0), "invalid _dataProvider      
  address");                                                                    
            ⋮┆----------------------------------------
          695┆ require(redeemed, "Funds not redeemed from external pool");
            ⋮┆----------------------------------------
          696┆ require(!adminWithdraw, "Admin has already withdrawn");
            ⋮┆----------------------------------------
          709┆ require(
          710┆     IERC20(daiToken).transfer(owner(), adminFeeAmount),
          711┆     "Fail to transfer ER20 tokens to admin"
          712┆ );
            ⋮┆----------------------------------------
          716┆ require(
          717┆     IERC20(incentiveToken).transfer(owner(),                     
  adminIncentiveAmount),                                                        
          718┆     "Fail to transfer ER20 incentive tokens to admin"
          719┆ );
            ⋮┆----------------------------------------
          736┆ require(player.amountPaid > 0, "Player does not exist");
            ⋮┆----------------------------------------
          737┆ require(!player.withdrawn, "Player has already withdrawn");
            ⋮┆----------------------------------------
          758┆ require(
          759┆     IERC20(daiToken).transfer(msg.sender, withdrawAmount),
          760┆     "Fail to transfer ERC20 tokens on early withdraw"
          761┆ );
            ⋮┆----------------------------------------
          767┆ require(player.amountPaid > 0, "Player does not exist");
            ⋮┆----------------------------------------
          768┆ require(!player.withdrawn, "Player has already withdrawn");
            ⋮┆----------------------------------------
          788┆ require(
          789┆     IERC20(daiToken).transfer(msg.sender, payout),
          790┆     "Fail to transfer ERC20 tokens on withdraw"
          791┆ );
            ⋮┆----------------------------------------
          794┆ require(
          795┆     IERC20(incentiveToken).transfer(msg.sender, playerIncentive),
          796┆     "Fail to transfer ERC20 incentive tokens on withdraw"
          797┆ );
            ⋮┆----------------------------------------
          803┆ require(
          804┆     !players[msg.sender].withdrawn,
          805┆     "Player already withdraw from game"
          806┆ );
            ⋮┆----------------------------------------
          808┆ require(
          809┆     players[msg.sender].addr == msg.sender,
          810┆     "Sender is not a player"
          811┆ );
            ⋮┆----------------------------------------
          821┆ require(
          822┆     currentSegment > 0 && currentSegment < lastSegment,
          823┆     "Deposit available only between segment 1 and segment n-1    
  (penultimate)"                                                                
          824┆ );
            ⋮┆----------------------------------------
          827┆ require(
          828┆     players[msg.sender].mostRecentSegmentPaid != currentSegment,
          829┆     "Player already paid current segment"
          830┆ );
            ⋮┆----------------------------------------
          833┆ require(
          834┆     players[msg.sender].mostRecentSegmentPaid ==                 
  currentSegment.sub(1),                                                        
          835┆     "Player didn't pay the previous segment - game over!"
          836┆ );
            ⋮┆----------------------------------------
          856┆ require(!redeemed, "Redeem operation already happened for the    
  game");                                                                       
            ⋮┆----------------------------------------
          927┆ require(
          928┆     daiToken.allowance(msg.sender, address(this)) >=             
  segmentPayment,                                                               
          929┆     "You need to have allowance to do transfer DAI on the smart  
  contract"                                                                     
          930┆ );
            ⋮┆----------------------------------------
          938┆ require(
          939┆     daiToken.transferFrom(msg.sender, address(this),             
  segmentPayment),                                                              
          940┆     "Transfer failed"
          941┆ );
            ⋮┆----------------------------------------
          946┆ require(
          947┆     daiToken.approve(address(lendingPool), contractBalance),
          948┆     "Fail to approve allowance to lending pool"
          949┆ );
            ⋮┆----------------------------------------
          956┆ require(getCurrentSegment() == 0, "Game has already started");
            ⋮┆----------------------------------------
          957┆ require(
          958┆     players[msg.sender].addr != msg.sender ||
          959┆         players[msg.sender].canRejoin,
          960┆     "Cannot join the game more than once"
          961┆ );
            ⋮┆----------------------------------------
          964┆ require(activePlayersCount <= maxPlayersCount, "Reached max      
  quantity of players allowed");                                                
            ⋮┆----------------------------------------
       solidity.performance.use-multiple-require                                
          Using multiple require statements is cheaper than using && multiple   
  check combinations.                                                           
          There are more advantages, such as easier to read code and better     
  coverage reports.                                                             
                                                                                
          821┆ require(
          822┆     currentSegment > 0 && currentSegment < lastSegment,
          823┆     "Deposit available only between segment 1 and segment n-1    
  (penultimate)"                                                                
          824┆ );
            ⋮┆----------------------------------------
       solidity.performance.use-nested-if                                       
          Using nested is cheaper than using && multiple check combinations.    
  There are more                                                                
          advantages, such as easier to read code and better coverage reports.  
                                                                                
          702┆ if (winners.length == 0 && totalIncentiveAmount > 0) {
          703┆     adminIncentiveAmount = totalIncentiveAmount;
          704┆ }
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
           84┆ require(newOwner != address(0), "Ownable: new owner is the zero  
  address");                                                                    
            ⋮┆----------------------------------------
          289┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          649┆ require(_customFee <= 20, "_customFee must be less than or equal 
  to 20%");                                                                     
            ⋮┆----------------------------------------
          650┆ require(_earlyWithdrawalFee <= 10, "_earlyWithdrawalFee must be  
  less than or equal to 10%");                                                  
            ⋮┆----------------------------------------
          651┆ require(_earlyWithdrawalFee > 0,  "_earlyWithdrawalFee must be   
  greater than zero");                                                          
            ⋮┆----------------------------------------
          652┆ require(_maxPlayersCount > 0, "_maxPlayersCount must be greater  
  than zero");                                                                  
            ⋮┆----------------------------------------
          654┆ require(address(_lendingPoolAddressProvider) != address(0),      
  "invalid _lendingPoolAddressProvider address");                               
            ⋮┆----------------------------------------
          655┆ require(_segmentCount > 0, "_segmentCount must be greater than   
  zero");                                                                       
            ⋮┆----------------------------------------
          656┆ require(_segmentLength > 0, "_segmentLength must be greater than 
  zero");                                                                       
            ⋮┆----------------------------------------
          657┆ require(_segmentPayment > 0, "_segmentPayment must be greater    
  than zero");                                                                  
            ⋮┆----------------------------------------
          695┆ require(redeemed, "Funds not redeemed from external pool");
            ⋮┆----------------------------------------
          709┆ require(
          710┆     IERC20(daiToken).transfer(owner(), adminFeeAmount),
          711┆     "Fail to transfer ER20 tokens to admin"
          712┆ );
            ⋮┆----------------------------------------
          716┆ require(
          717┆     IERC20(incentiveToken).transfer(owner(),                     
  adminIncentiveAmount),                                                        
          718┆     "Fail to transfer ER20 incentive tokens to admin"
          719┆ );
            ⋮┆----------------------------------------
          758┆ require(
          759┆     IERC20(daiToken).transfer(msg.sender, withdrawAmount),
          760┆     "Fail to transfer ERC20 tokens on early withdraw"
          761┆ );
            ⋮┆----------------------------------------
          788┆ require(
          789┆     IERC20(daiToken).transfer(msg.sender, payout),
          790┆     "Fail to transfer ERC20 tokens on withdraw"
          791┆ );
            ⋮┆----------------------------------------
          794┆ require(
          795┆     IERC20(incentiveToken).transfer(msg.sender, playerIncentive),
          796┆     "Fail to transfer ERC20 incentive tokens on withdraw"
          797┆ );
            ⋮┆----------------------------------------
          803┆ require(
          804┆     !players[msg.sender].withdrawn,
          805┆     "Player already withdraw from game"
          806┆ );
            ⋮┆----------------------------------------
          821┆ require(
          822┆     currentSegment > 0 && currentSegment < lastSegment,
          823┆     "Deposit available only between segment 1 and segment n-1    
  (penultimate)"                                                                
          824┆ );
            ⋮┆----------------------------------------
          827┆ require(
          828┆     players[msg.sender].mostRecentSegmentPaid != currentSegment,
          829┆     "Player already paid current segment"
          830┆ );
            ⋮┆----------------------------------------
          833┆ require(
          834┆     players[msg.sender].mostRecentSegmentPaid ==                 
  currentSegment.sub(1),                                                        
          835┆     "Player didn't pay the previous segment - game over!"
          836┆ );
            ⋮┆----------------------------------------
          856┆ require(!redeemed, "Redeem operation already happened for the    
  game");                                                                       
            ⋮┆----------------------------------------
          927┆ require(
          928┆     daiToken.allowance(msg.sender, address(this)) >=             
  segmentPayment,                                                               
          929┆     "You need to have allowance to do transfer DAI on the smart  
  contract"                                                                     
          930┆ );
            ⋮┆----------------------------------------
          946┆ require(
          947┆     daiToken.approve(address(lendingPool), contractBalance),
          948┆     "Fail to approve allowance to lending pool"
          949┆ );
            ⋮┆----------------------------------------
          957┆ require(
          958┆     players[msg.sender].addr != msg.sender ||
          959┆         players[msg.sender].canRejoin,
          960┆     "Cannot join the game more than once"
          961┆ );
            ⋮┆----------------------------------------
          964┆ require(activePlayersCount <= maxPlayersCount, "Reached max      
  quantity of players allowed");                                                

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 75 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
