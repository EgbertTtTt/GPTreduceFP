METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 23 Code Findings │
└──────────────────┘
                   
    /sb/CToken.sol 
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
          844┆ require(msg.sender == admin, "only admin may initialize the      
  market");                                                                     
            ⋮┆----------------------------------------
          845┆ require(accrualBlockNumber == 0 && borrowIndex == 0, "market may 
  only be initialized once");                                                   
            ⋮┆----------------------------------------
          849┆ require(initialExchangeRateMantissa > 0, "initial exchange rate  
  must be greater than zero.");                                                 
            ⋮┆----------------------------------------
          853┆ require(err == NO_ERROR, "setting comptroller failed");
            ⋮┆----------------------------------------
          861┆ require(err == NO_ERROR, "setting interest rate model failed");
            ⋮┆----------------------------------------
         1036┆ require(accrueInterest() == NO_ERROR, "accrue interest failed");
            ⋮┆----------------------------------------
         1046┆ require(accrueInterest() == NO_ERROR, "accrue interest failed");
            ⋮┆----------------------------------------
         1087┆ require(accrueInterest() == NO_ERROR, "accrue interest failed");
            ⋮┆----------------------------------------
         1157┆ require(borrowRateMantissa <= borrowRateMaxMantissa, "borrow rate
  is absurdly high");                                                           
            ⋮┆----------------------------------------
         1305┆ require(redeemTokensIn == 0 || redeemAmountIn == 0, "one of      
  redeemTokensIn or redeemAmountIn must be zero");                              
            ⋮┆----------------------------------------
         1602┆ require(amountSeizeError == NO_ERROR,                            
  "LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED");                       
            ⋮┆----------------------------------------
         1605┆ require(cTokenCollateral.balanceOf(borrower) >= seizeTokens,     
  "LIQUIDATE_SEIZE_TOO_MUCH");                                                  
            ⋮┆----------------------------------------
         1611┆ require(cTokenCollateral.seize(liquidator, borrower, seizeTokens)
  == NO_ERROR, "token seizure failed");                                         
            ⋮┆----------------------------------------
         1750┆ require(newComptroller.isComptroller(), "marker method returned  
  false");                                                                      
            ⋮┆----------------------------------------
         1968┆ require(newInterestRateModel.isInterestRateModel(), "marker      
  method returned false");                                                      
            ⋮┆----------------------------------------
         2008┆ require(_notEntered, "re-entered");
            ⋮┆----------------------------------------
       solidity.performance.use-multiple-require                                
          Using multiple require statements is cheaper than using && multiple   
  check combinations.                                                           
          There are more advantages, such as easier to read code and better     
  coverage reports.                                                             
                                                                                
          845┆ require(accrualBlockNumber == 0 && borrowIndex == 0, "market may 
  only be initialized once");                                                   
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
          844┆ require(msg.sender == admin, "only admin may initialize the      
  market");                                                                     
            ⋮┆----------------------------------------
          845┆ require(accrualBlockNumber == 0 && borrowIndex == 0, "market may 
  only be initialized once");                                                   
            ⋮┆----------------------------------------
          849┆ require(initialExchangeRateMantissa > 0, "initial exchange rate  
  must be greater than zero.");                                                 
            ⋮┆----------------------------------------
          861┆ require(err == NO_ERROR, "setting interest rate model failed");
            ⋮┆----------------------------------------
         1305┆ require(redeemTokensIn == 0 || redeemAmountIn == 0, "one of      
  redeemTokensIn or redeemAmountIn must be zero");                              
            ⋮┆----------------------------------------
         1602┆ require(amountSeizeError == NO_ERROR,                            
  "LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED");                       

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 23 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
