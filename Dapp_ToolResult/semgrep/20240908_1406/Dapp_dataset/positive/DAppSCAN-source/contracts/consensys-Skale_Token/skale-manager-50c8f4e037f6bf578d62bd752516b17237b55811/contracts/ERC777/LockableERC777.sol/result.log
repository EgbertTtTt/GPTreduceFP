METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 50 Code Findings │
└──────────────────┘
                           
    /sb/LockableERC777.sol 
       solidity.performance.array-length-outside-loop                           
          Caching the array length outside a loop saves reading it on each      
  iteration, as long as the                                                     
          array's length is not changed during the loop.                        
                                                                                
          882┆ for (uint256 i = 0; i < _defaultOperatorsArray.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.non-payable-constructor      
          Consider making costructor payable to save gas.
                                                         
          873┆ constructor(
          874┆     string memory name,
          875┆     string memory symbol,
          876┆     address[] memory defaultOperators
          877┆ ) public {
          878┆     _name = name;
          879┆     _symbol = symbol;
          880┆ 
          881┆     _defaultOperatorsArray = defaultOperators;
          882┆     for (uint256 i = 0; i < _defaultOperatorsArray.length; i++) {
             [hid 7 additional lines, adjust with --max-lines-per-finding] 
       solidity.performance.state-variable-read-in-a-loop                       
          Replace state variable reads and writes within loops with local       
  variable reads and writes.                                                    
                                                                                
          882┆ for (uint256 i = 0; i < _defaultOperatorsArray.length; i++) {
            ⋮┆----------------------------------------
          883┆ _defaultOperators[_defaultOperatorsArray[i]] = true;
            ⋮┆----------------------------------------
          883┆ _defaultOperators[_defaultOperatorsArray[i]] = true;
            ⋮┆----------------------------------------
       solidity.performance.unnecessary-checked-arithmetic-in-loop              
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
                                                                                
          882┆ for (uint256 i = 0; i < _defaultOperatorsArray.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
          408┆ require(c >= a, "SafeMath: addition overflow");
            ⋮┆----------------------------------------
          423┆ require(b <= a, "SafeMath: subtraction overflow");
            ⋮┆----------------------------------------
          440┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          457┆ require(b > 0, "SafeMath: division by zero");
            ⋮┆----------------------------------------
          474┆ require(b > 0, "SafeMath: modulo by zero");
            ⋮┆----------------------------------------
          586┆ require(address(this).balance >= amount, "Address: insufficient  
  balance");                                                                    
            ⋮┆----------------------------------------
          590┆ require(success, "Address: unable to send value, recipient may   
  have reverted");                                                              
            ⋮┆----------------------------------------
          647┆ require(address(this).balance >= value, "Address: insufficient   
  balance for call");                                                           
            ⋮┆----------------------------------------
          648┆ require(isContract(target), "Address: call to non-contract");
            ⋮┆----------------------------------------
          672┆ require(isContract(target), "Address: static call to             
  non-contract");                                                               
            ⋮┆----------------------------------------
          696┆ require(isContract(target), "Address: delegate call to           
  non-contract");                                                               
            ⋮┆----------------------------------------
          911┆ require(recipient != address(0), "ERC777: transfer to the zero   
  address");                                                                    
            ⋮┆----------------------------------------
          945┆ require(msg.sender != operator, "ERC777: authorizing self as     
  operator");                                                                   
            ⋮┆----------------------------------------
          960┆ require(operator != msg.sender, "ERC777: revoking self as        
  operator");                                                                   
            ⋮┆----------------------------------------
          985┆ require(isOperatorFor(msg.sender, sender), "ERC777: caller is not
  an operator for holder");                                                     
            ⋮┆----------------------------------------
         1000┆ require(isOperatorFor(msg.sender, account), "ERC777: caller is   
  not an operator for holder");                                                 
            ⋮┆----------------------------------------
         1027┆ require(recipient != address(0), "ERC777: transfer to the zero   
  address");                                                                    
            ⋮┆----------------------------------------
         1028┆ require(holder != address(0), "ERC777: transfer from the zero    
  address");                                                                    
            ⋮┆----------------------------------------
         1152┆ require(account != address(0), "ERC777: mint to the zero         
  address");                                                                    
            ⋮┆----------------------------------------
         1193┆ require(from != address(0), "ERC777: send from the zero          
  address");                                                                    
            ⋮┆----------------------------------------
         1194┆ require(to != address(0), "ERC777: send to the zero address");
            ⋮┆----------------------------------------
         1227┆ require(from != address(0), "ERC777: burn from the zero          
  address");                                                                    
            ⋮┆----------------------------------------
         1256┆ require(_balances[from] >= locked + amount, "Token should be     
  unlocked for transferring");                                                  
            ⋮┆----------------------------------------
         1272┆ require(spender != address(0), "ERC777: approve to the zero      
  address");                                                                    
            ⋮┆----------------------------------------
         1333┆ require(!to.isContract(), "Token recipient contract has no       
  implementer for ERC777TokensRecipient");                                      
            ⋮┆----------------------------------------
       solidity.performance.use-prefix-increment-not-postfix                    
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
                                                                                
          882┆ for (uint256 i = 0; i < _defaultOperatorsArray.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
          440┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          590┆ require(success, "Address: unable to send value, recipient may   
  have reverted");                                                              
            ⋮┆----------------------------------------
          647┆ require(address(this).balance >= value, "Address: insufficient   
  balance for call");                                                           
            ⋮┆----------------------------------------
          672┆ require(isContract(target), "Address: static call to             
  non-contract");                                                               
            ⋮┆----------------------------------------
          696┆ require(isContract(target), "Address: delegate call to           
  non-contract");                                                               
            ⋮┆----------------------------------------
          911┆ require(recipient != address(0), "ERC777: transfer to the zero   
  address");                                                                    
            ⋮┆----------------------------------------
          945┆ require(msg.sender != operator, "ERC777: authorizing self as     
  operator");                                                                   
            ⋮┆----------------------------------------
          960┆ require(operator != msg.sender, "ERC777: revoking self as        
  operator");                                                                   
            ⋮┆----------------------------------------
          985┆ require(isOperatorFor(msg.sender, sender), "ERC777: caller is not
  an operator for holder");                                                     
            ⋮┆----------------------------------------
         1000┆ require(isOperatorFor(msg.sender, account), "ERC777: caller is   
  not an operator for holder");                                                 
            ⋮┆----------------------------------------
         1027┆ require(recipient != address(0), "ERC777: transfer to the zero   
  address");                                                                    
            ⋮┆----------------------------------------
         1028┆ require(holder != address(0), "ERC777: transfer from the zero    
  address");                                                                    
            ⋮┆----------------------------------------
         1193┆ require(from != address(0), "ERC777: send from the zero          
  address");                                                                    
            ⋮┆----------------------------------------
         1227┆ require(from != address(0), "ERC777: burn from the zero          
  address");                                                                    
            ⋮┆----------------------------------------
         1256┆ require(_balances[from] >= locked + amount, "Token should be     
  unlocked for transferring");                                                  
            ⋮┆----------------------------------------
         1272┆ require(spender != address(0), "ERC777: approve to the zero      
  address");                                                                    
            ⋮┆----------------------------------------
         1333┆ require(!to.isContract(), "Token recipient contract has no       
  implementer for ERC777TokensRecipient");                                      
            ⋮┆----------------------------------------
       solidity.security.erc777-reentrancy  
          ERC777 tokensReceived() reentrancy
                                            
         1329┆ IERC777Recipient(implementer).tokensReceived(
         1330┆     operator, from, to, amount, userData, operatorData
         1331┆ );

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 50 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
