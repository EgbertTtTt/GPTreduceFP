METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 23 Code Findings │
└──────────────────┘
                           
    /sb/NanoLoanEngine.sol 
       solidity.best-practice.use-ownable2step                                  
          By demanding that the receiver of the owner permissions actively      
  accept via a contract call                                                    
          of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the 
  contract ownership                                                            
          from accidentally being transferred  to an address that cannot handle 
  it.                                                                           
                                                                                
           43┆ contract Oracle is Ownable {
            ⋮┆----------------------------------------
          136┆ contract TokenLockable is RpSafeMath, Ownable {
            ⋮┆----------------------------------------
          261┆ contract NanoLoanEngine is ERC721, Engine, Ownable, TokenLockable
  {                                                                             
            ⋮┆----------------------------------------
       solidity.performance.array-length-outside-loop                           
          Caching the array length outside a loop saves reading it on each      
  iteration, as long as the                                                     
          array's length is not changed during the loop.                        
                                                                                
          862┆ for (inputId = 0; inputId < loanIds.length; inputId++) {
            ⋮┆----------------------------------------
       solidity.performance.inefficient-state-variable-increment             
          <x> += <y> costs more gas than <x> = <x> + <y> for state variables.
                                                                             
          520┆ activeLoans += 1;
            ⋮┆----------------------------------------
       solidity.performance.init-variables-with-default-value                   
          Uninitialized variables are assigned with the types default value.    
  Explicitly initializing a                                                     
          variable with its default value costs unnecessary gas.                
                                                                                
          265┆ uint256 private activeLoans = 0;
            ⋮┆----------------------------------------
       solidity.performance.state-variable-read-in-a-loop                       
          Replace state variable reads and writes within loops with local       
  variable reads and writes.                                                    
                                                                                
          297┆ if (loans[loanId].lender == _owner && loans[loanId].status ==    
  Status.lent) {                                                                
            ⋮┆----------------------------------------
          297┆ if (loans[loanId].lender == _owner && loans[loanId].status ==    
  Status.lent) {                                                                
            ⋮┆----------------------------------------
          323┆ if (loans[loanId].lender == _owner && loans[loanId].status ==    
  Status.lent) {                                                                
            ⋮┆----------------------------------------
          323┆ if (loans[loanId].lender == _owner && loans[loanId].status ==    
  Status.lent) {                                                                
            ⋮┆----------------------------------------
          845┆ Loan storage loan = loans[loanId];
            ⋮┆----------------------------------------
          863┆ Loan storage loan = loans[loanIds[inputId]];
            ⋮┆----------------------------------------
       solidity.performance.use-multiple-require                                
          Using multiple require statements is cheaper than using && multiple   
  check combinations.                                                           
          There are more advantages, such as easier to read code and better     
  coverage reports.                                                             
                                                                                
          537┆ require(loan.status == Status.lent && (loan.dueTime -            
  loan.duesIn) == block.timestamp);                                             
            ⋮┆----------------------------------------
          559┆ require(msg.sender == loan.lender || (msg.sender == loan.borrower
  && loan.status == Status.initial));                                           
            ⋮┆----------------------------------------
          585┆ require(loan.status != Status.destroyed && loan.status !=        
  Status.paid);                                                                 
            ⋮┆----------------------------------------
       solidity.performance.use-nested-if                                       
          Using nested is cheaper than using && multiple check combinations.    
  There are more                                                                
          advantages, such as easier to read code and better coverage reports.  
                                                                                
          297┆ if (loans[loanId].lender == _owner && loans[loanId].status ==    
  Status.lent) {                                                                
          298┆     if (resultIndex == _index) {
          299┆         return loanId;
          300┆     }
          301┆     resultIndex++;
          302┆ }
            ⋮┆----------------------------------------
          323┆ if (loans[loanId].lender == _owner && loans[loanId].status ==    
  Status.lent) {                                                                
          324┆     result[resultIndex] = loanId;
          325┆     resultIndex++;
          326┆ }
            ⋮┆----------------------------------------
       solidity.performance.use-prefix-increment-not-postfix                    
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
                                                                                
          296┆ for (loanId = 0; loanId <= totalLoans; loanId++) {
            ⋮┆----------------------------------------
          301┆ resultIndex++;
            ⋮┆----------------------------------------
          322┆ for (loanId = 0; loanId <= totalLoans; loanId++) {
            ⋮┆----------------------------------------
          325┆ resultIndex++;
            ⋮┆----------------------------------------
          844┆ for (loanId = fromIndex; loanId <= toIndex; loanId++) {
            ⋮┆----------------------------------------
          862┆ for (inputId = 0; inputId < loanIds.length; inputId++) {

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 23 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
