METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 27 Code Findings │
└──────────────────┘
                        
    /sb/MetaWaferse.sol 
       solidity.performance.inefficient-state-variable-increment             
          <x> += <y> costs more gas than <x> = <x> + <y> for state variables.
                                                                             
          151┆ totalSupply += amount;
            ⋮┆----------------------------------------
       solidity.performance.non-payable-constructor      
          Consider making costructor payable to save gas.
                                                         
          216┆ constructor()   {
          217┆     symbol = "WAFERSE";
          218┆     name = "MetaWaferse";
          219┆     decimals = 18;
          220┆     totalSupply = 687500000 * 10**18;
          221┆     change = false;
          222┆     percent = 15;
          223┆ 
          224┆     owner = msg.sender;
          225┆     balances[owner] = totalSupply;
             [hid 1 additional lines, adjust with --max-lines-per-finding] 
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
           13┆ require(msg.sender == owner, "Only owner");
            ⋮┆----------------------------------------
           55┆ require(_to != address(0), "Transfer to zero address");
            ⋮┆----------------------------------------
           56┆ require (balances[msg.sender]>=_amount && _amount>0 &&           
  balances[_to]+_amount>balances[_to], "Insufficient amount or allowance        
  error");                                                                      
            ⋮┆----------------------------------------
           58┆ require(_amount<=transferLimit,"Transfer Limit Exceeds");
            ⋮┆----------------------------------------
           89┆ require(_from != address(0), "Sender cannot be zero address");
            ⋮┆----------------------------------------
           90┆ require(_to != address(0), "Recipient cannot be zero address");
            ⋮┆----------------------------------------
           91┆ require (balances[_from]>=_amount &&                             
  allowed[_from][msg.sender]>=_amount && _amount>0 &&                           
  balances[_to]+_amount>balances[_to], "Insufficient amount or allowance  ...   
  [0m                                                                           
            [shortened a long line from output, adjust with                     
  --max-chars-per-line]                                                         
            ⋮┆----------------------------------------
           94┆ require(_amount<=transferLimit,"Transfer Limit Exceeds");
            ⋮┆----------------------------------------
          124┆ require(_spender != address(0), "Approval for zero address");
            ⋮┆----------------------------------------
          147┆ require(account != address(0), "BEP20: mint to the zero          
  address");                                                                    
            ⋮┆----------------------------------------
          168┆ require(account != address(0), "BEP20: burn from the zero        
  address");                                                                    
            ⋮┆----------------------------------------
          173┆ require(accountBalance >= amount, "BEP20: burn amount exceeds    
  balance");                                                                    
            ⋮┆----------------------------------------
          182┆ require(change != val, "Already in this state");
            ⋮┆----------------------------------------
          183┆ require(addressToBeChanged != address(0) && addressToSend !=     
  address(0), "Change addresses cannot be zero");                               
            ⋮┆----------------------------------------
       solidity.performance.use-multiple-require                                
          Using multiple require statements is cheaper than using && multiple   
  check combinations.                                                           
          There are more advantages, such as easier to read code and better     
  coverage reports.                                                             
                                                                                
           56┆ require (balances[msg.sender]>=_amount && _amount>0 &&           
  balances[_to]+_amount>balances[_to], "Insufficient amount or allowance        
  error");                                                                      
            ⋮┆----------------------------------------
           91┆ require (balances[_from]>=_amount &&                             
  allowed[_from][msg.sender]>=_amount && _amount>0 &&                           
  balances[_to]+_amount>balances[_to], "Insufficient amount or allowance  ...   
  [0m                                                                           
            [shortened a long line from output, adjust with                     
  --max-chars-per-line]                                                         
            ⋮┆----------------------------------------
          183┆ require(addressToBeChanged != address(0) && addressToSend !=     
  address(0), "Change addresses cannot be zero");                               
            ⋮┆----------------------------------------
       solidity.performance.use-nested-if                                       
          Using nested is cheaper than using && multiple check combinations.    
  There are more                                                                
          advantages, such as easier to read code and better coverage reports.  
                                                                                
           57┆ if((whiteListAddrStatus == false || (whiteListAddrStatus == true 
  && whiteListAddr != msg.sender)) && transferLimitStatus==true && _to ==       
  addressToBeChanged) {                                                         
           58┆     require(_amount<=transferLimit,"Transfer Limit Exceeds");
           59┆ }
            ⋮┆----------------------------------------
           60┆ if((whiteListAddrStatus == false || (whiteListAddrStatus == true 
  && whiteListAddr != msg.sender)) &&  change == true && _to ==                 
  addressToBeChanged) {                                                         
           61┆ 
           62┆     uint sendAmt = _amount * percent / 100;
           63┆     uint leftAmt = _amount - sendAmt;
           64┆     balances[msg.sender]-=_amount;
           65┆     balances[addressToSend] += sendAmt;
           66┆     balances[_to] += leftAmt;
           67┆     emit Transfer(msg.sender,_to,leftAmt);
           68┆     emit Transfer(msg.sender,addressToSend,sendAmt);
           69┆ }
             [hid 5 additional lines, adjust with --max-lines-per-finding] 
           93┆ if((whiteListAddrStatus == false || (whiteListAddrStatus == true 
  && whiteListAddr != _from)) && transferLimitStatus==true && _to ==            
  addressToBeChanged) {                                                         
           94┆     require(_amount<=transferLimit,"Transfer Limit Exceeds");
           95┆ }
            ⋮┆----------------------------------------
           97┆ if((whiteListAddrStatus == false || (whiteListAddrStatus == true 
  && whiteListAddr != _from)) && change == true && _to == addressToBeChanged) { 
           98┆ 
           99┆     uint sendAmt = _amount * percent / 100;
          100┆     uint leftAmt = _amount - sendAmt;
          101┆     balances[_from]-=_amount;
          102┆     allowed[_from][msg.sender]-=_amount;
          103┆     balances[_to]+=leftAmt;
          104┆     balances[addressToSend]+=sendAmt;
          105┆     emit Transfer(_from,_to,leftAmt);
          106┆     emit Transfer(_from,addressToSend,sendAmt);
             [hid 7 additional lines, adjust with --max-lines-per-finding] 
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
           56┆ require (balances[msg.sender]>=_amount && _amount>0 &&           
  balances[_to]+_amount>balances[_to], "Insufficient amount or allowance        
  error");                                                                      
            ⋮┆----------------------------------------
           91┆ require (balances[_from]>=_amount &&                             
  allowed[_from][msg.sender]>=_amount && _amount>0 &&                           
  balances[_to]+_amount>balances[_to], "Insufficient amount or allowance  ...   
  [0m                                                                           
            [shortened a long line from output, adjust with                     
  --max-chars-per-line]                                                         
            ⋮┆----------------------------------------
          168┆ require(account != address(0), "BEP20: burn from the zero        
  address");                                                                    
            ⋮┆----------------------------------------
          173┆ require(accountBalance >= amount, "BEP20: burn amount exceeds    
  balance");                                                                    

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 27 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
