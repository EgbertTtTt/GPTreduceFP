METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 40 Code Findings │
└──────────────────┘
                    
    /sb/Falcons.sol 
       solidity.best-practice.use-ownable2step                                  
          By demanding that the receiver of the owner permissions actively      
  accept via a contract call                                                    
          of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the 
  contract ownership                                                            
          from accidentally being transferred  to an address that cannot handle 
  it.                                                                           
                                                                                
          572┆ contract BEP20 is Context, IBEP20, Ownable {
            ⋮┆----------------------------------------
       solidity.performance.non-payable-constructor      
          Consider making costructor payable to save gas.
                                                         
           21┆ constructor() internal {}
            ⋮┆----------------------------------------
           54┆ constructor() internal {
           55┆     address msgSender = _msgSender();
           56┆     _owner = msgSender;
           57┆     emit OwnershipTransferred(address(0), msgSender);
           58┆ }
            ⋮┆----------------------------------------
          595┆ constructor(string memory name, string memory symbol) internal {
          596┆     _name = name;
          597┆     _symbol = symbol;
          598┆     _decimals = 18;
          599┆ }
            ⋮┆----------------------------------------
          848┆ constructor() BEP20("FalconSwaps Token", "FALCONS") public {
          849┆     _mint(msg.sender, 1 * 10**9 * 10**18);
          850┆     _moveDelegates(address(0), _delegates[msg.sender], 1 * 10**9 
  * 10**18);                                                                    
          851┆ }
            ⋮┆----------------------------------------
       solidity.performance.state-variable-read-in-a-loop                       
          Replace state variable reads and writes within loops with local       
  variable reads and writes.                                                    
                                                                                
         1008┆ Checkpoint memory cp = checkpoints[account][center];
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
           71┆ require(_owner == _msgSender(), 'Ownable: caller is not the      
  owner');                                                                      
            ⋮┆----------------------------------------
           99┆ require(newOwner != address(0), 'Ownable: new owner is the zero  
  address');                                                                    
            ⋮┆----------------------------------------
          228┆ require(c >= a, 'SafeMath: addition overflow');
            ⋮┆----------------------------------------
          287┆ require(c / a == b, 'SafeMath: multiplication overflow');
            ⋮┆----------------------------------------
          440┆ require(address(this).balance >= amount, 'Address: insufficient  
  balance');                                                                    
            ⋮┆----------------------------------------
          444┆ require(success, 'Address: unable to send value, recipient may   
  have reverted');                                                              
            ⋮┆----------------------------------------
          514┆ require(address(this).balance >= value, 'Address: insufficient   
  balance for call');                                                           
            ⋮┆----------------------------------------
          524┆ require(isContract(target), 'Address: call to non-contract');
            ⋮┆----------------------------------------
          760┆ require(sender != address(0), 'BEP20: transfer from the zero     
  address');                                                                    
            ⋮┆----------------------------------------
          761┆ require(recipient != address(0), 'BEP20: transfer to the zero    
  address');                                                                    
            ⋮┆----------------------------------------
          778┆ require(account != address(0), 'BEP20: mint to the zero          
  address');                                                                    
            ⋮┆----------------------------------------
          797┆ require(account != address(0), 'BEP20: burn from the zero        
  address');                                                                    
            ⋮┆----------------------------------------
          822┆ require(owner != address(0), 'BEP20: approve from the zero       
  address');                                                                    
            ⋮┆----------------------------------------
          823┆ require(spender != address(0), 'BEP20: approve to the zero       
  address');                                                                    
            ⋮┆----------------------------------------
          955┆ require(signatory != address(0), "FLNS::delegateBySig: invalid   
  signature");                                                                  
            ⋮┆----------------------------------------
          956┆ require(nonce == nonces[signatory]++, "FLNS::delegateBySig:      
  invalid nonce");                                                              
            ⋮┆----------------------------------------
          957┆ require(now <= expiry, "FLNS::delegateBySig: signature expired");
            ⋮┆----------------------------------------
          987┆ require(blockNumber < block.number, "FLNS::getPriorVotes: not yet
  determined");                                                                 
            ⋮┆----------------------------------------
       solidity.performance.use-nested-if                                       
          Using nested is cheaper than using && multiple check combinations.    
  There are more                                                                
          advantages, such as easier to read code and better coverage reports.  
                                                                                
         1033┆ if (srcRep != dstRep && amount > 0) {
         1034┆     if (srcRep != address(0)) {
         1035┆         // decrease old representative
         1036┆         uint32 srcRepNum = numCheckpoints[srcRep];
         1037┆         uint256 srcRepOld = srcRepNum > 0 ?                      
  checkpoints[srcRep][srcRepNum - 1].votes : 0;                                 
         1038┆         uint256 srcRepNew = srcRepOld.sub(amount);
         1039┆         _writeCheckpoint(srcRep, srcRepNum, srcRepOld,           
  srcRepNew);                                                                   
         1040┆     }
         1041┆ 
         1042┆     if (dstRep != address(0)) {
             [hid 7 additional lines, adjust with --max-lines-per-finding] 
         1062┆ if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints -    
  1].fromBlock == blockNumber) {                                                
         1063┆     checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;
         1064┆ } else {
         1065┆     checkpoints[delegatee][nCheckpoints] =                       
  Checkpoint(blockNumber, newVotes);                                            
         1066┆     numCheckpoints[delegatee] = nCheckpoints + 1;
         1067┆ }
            ⋮┆----------------------------------------
       solidity.performance.use-prefix-increment-not-postfix                    
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
                                                                                
          956┆ require(nonce == nonces[signatory]++, "FLNS::delegateBySig:      
  invalid nonce");                                                              
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
           99┆ require(newOwner != address(0), 'Ownable: new owner is the zero  
  address');                                                                    
            ⋮┆----------------------------------------
          287┆ require(c / a == b, 'SafeMath: multiplication overflow');
            ⋮┆----------------------------------------
          444┆ require(success, 'Address: unable to send value, recipient may   
  have reverted');                                                              
            ⋮┆----------------------------------------
          514┆ require(address(this).balance >= value, 'Address: insufficient   
  balance for call');                                                           
            ⋮┆----------------------------------------
          760┆ require(sender != address(0), 'BEP20: transfer from the zero     
  address');                                                                    
            ⋮┆----------------------------------------
          761┆ require(recipient != address(0), 'BEP20: transfer to the zero    
  address');                                                                    
            ⋮┆----------------------------------------
          797┆ require(account != address(0), 'BEP20: burn from the zero        
  address');                                                                    
            ⋮┆----------------------------------------
          822┆ require(owner != address(0), 'BEP20: approve from the zero       
  address');                                                                    
            ⋮┆----------------------------------------
          823┆ require(spender != address(0), 'BEP20: approve to the zero       
  address');                                                                    
            ⋮┆----------------------------------------
          955┆ require(signatory != address(0), "FLNS::delegateBySig: invalid   
  signature");                                                                  
            ⋮┆----------------------------------------
          956┆ require(nonce == nonces[signatory]++, "FLNS::delegateBySig:      
  invalid nonce");                                                              
            ⋮┆----------------------------------------
          957┆ require(now <= expiry, "FLNS::delegateBySig: signature expired");
            ⋮┆----------------------------------------
          987┆ require(blockNumber < block.number, "FLNS::getPriorVotes: not yet
  determined");                                                                 

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 40 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
