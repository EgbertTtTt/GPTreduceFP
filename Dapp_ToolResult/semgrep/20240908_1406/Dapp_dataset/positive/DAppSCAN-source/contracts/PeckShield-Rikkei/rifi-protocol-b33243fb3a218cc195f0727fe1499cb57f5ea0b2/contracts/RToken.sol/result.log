METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 42 Code Findings │
└──────────────────┘
                   
    /sb/RToken.sol 
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
         1216┆ require(msg.sender == admin, "only admin may initialize the      
  market");                                                                     
            ⋮┆----------------------------------------
         1217┆ require(accrualBlockNumber == 0 && borrowIndex == 0, "market may 
  only be initialized once");                                                   
            ⋮┆----------------------------------------
         1221┆ require(initialExchangeRateMantissa > 0, "initial exchange rate  
  must be greater than zero.");                                                 
            ⋮┆----------------------------------------
         1225┆ require(err == uint(Error.NO_ERROR), "setting cointroller        
  failed");                                                                     
            ⋮┆----------------------------------------
         1233┆ require(err == uint(Error.NO_ERROR), "setting interest rate model
  failed");                                                                     
            ⋮┆----------------------------------------
         1378┆ require(mErr == MathError.NO_ERROR, "balance could not be        
  calculated");                                                                 
            ⋮┆----------------------------------------
         1437┆ require(accrueInterest() == uint(Error.NO_ERROR), "accrue        
  interest failed");                                                            
            ⋮┆----------------------------------------
         1447┆ require(accrueInterest() == uint(Error.NO_ERROR), "accrue        
  interest failed");                                                            
            ⋮┆----------------------------------------
         1458┆ require(err == MathError.NO_ERROR, "borrowBalanceStored:         
  borrowBalanceStoredInternal failed");                                         
            ⋮┆----------------------------------------
         1504┆ require(accrueInterest() == uint(Error.NO_ERROR), "accrue        
  interest failed");                                                            
            ⋮┆----------------------------------------
         1515┆ require(err == MathError.NO_ERROR, "exchangeRateStored:          
  exchangeRateStoredInternal failed");                                          
            ⋮┆----------------------------------------
         1587┆ require(borrowRateMantissa <= borrowRateMaxMantissa, "borrow rate
  is absurdly high");                                                           
            ⋮┆----------------------------------------
         1591┆ require(mathErr == MathError.NO_ERROR, "could not calculate block
  delta");                                                                      
            ⋮┆----------------------------------------
         1721┆ require(vars.mathErr == MathError.NO_ERROR,                      
  "MINT_EXCHANGE_CALCULATION_FAILED");                                          
            ⋮┆----------------------------------------
         1729┆ require(vars.mathErr == MathError.NO_ERROR,                      
  "MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED");                                  
            ⋮┆----------------------------------------
         1732┆ require(vars.mathErr == MathError.NO_ERROR,                      
  "MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED");                               
            ⋮┆----------------------------------------
         1800┆ require(redeemTokensIn == 0 || redeemAmountIn == 0, "one of      
  redeemTokensIn or redeemAmountIn must be zero");                              
            ⋮┆----------------------------------------
         2087┆ require(vars.mathErr == MathError.NO_ERROR,                      
  "REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED");                
            ⋮┆----------------------------------------
         2090┆ require(vars.mathErr == MathError.NO_ERROR,                      
  "REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED");                         
            ⋮┆----------------------------------------
         2186┆ require(amountSeizeError == uint(Error.NO_ERROR),                
  "LIQUIDATE_COINTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED");                       
            ⋮┆----------------------------------------
         2189┆ require(rTokenCollateral.balanceOf(borrower) >= seizeTokens,     
  "LIQUIDATE_SEIZE_TOO_MUCH");                                                  
            ⋮┆----------------------------------------
         2200┆ require(seizeError == uint(Error.NO_ERROR), "token seizure       
  failed");                                                                     
            ⋮┆----------------------------------------
         2351┆ require(newCointroller.isCointroller(), "marker method returned  
  false");                                                                      
            ⋮┆----------------------------------------
         2456┆ require(totalReservesNew >= totalReserves, "add reserves         
  unexpected overflow");                                                        
            ⋮┆----------------------------------------
         2520┆ require(totalReservesNew <= totalReserves, "reduce reserves      
  unexpected underflow");                                                       
            ⋮┆----------------------------------------
         2574┆ require(newInterestRateModel.isInterestRateModel(), "marker      
  method returned false");                                                      
            ⋮┆----------------------------------------
         2614┆ require(_notEntered, "re-entered");
            ⋮┆----------------------------------------
       solidity.performance.use-multiple-require                                
          Using multiple require statements is cheaper than using && multiple   
  check combinations.                                                           
          There are more advantages, such as easier to read code and better     
  coverage reports.                                                             
                                                                                
         1217┆ require(accrualBlockNumber == 0 && borrowIndex == 0, "market may 
  only be initialized once");                                                   
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
         1216┆ require(msg.sender == admin, "only admin may initialize the      
  market");                                                                     
            ⋮┆----------------------------------------
         1217┆ require(accrualBlockNumber == 0 && borrowIndex == 0, "market may 
  only be initialized once");                                                   
            ⋮┆----------------------------------------
         1221┆ require(initialExchangeRateMantissa > 0, "initial exchange rate  
  must be greater than zero.");                                                 
            ⋮┆----------------------------------------
         1233┆ require(err == uint(Error.NO_ERROR), "setting interest rate model
  failed");                                                                     
            ⋮┆----------------------------------------
         1458┆ require(err == MathError.NO_ERROR, "borrowBalanceStored:         
  borrowBalanceStoredInternal failed");                                         
            ⋮┆----------------------------------------
         1515┆ require(err == MathError.NO_ERROR, "exchangeRateStored:          
  exchangeRateStoredInternal failed");                                          
            ⋮┆----------------------------------------
         1729┆ require(vars.mathErr == MathError.NO_ERROR,                      
  "MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED");                                  
            ⋮┆----------------------------------------
         1732┆ require(vars.mathErr == MathError.NO_ERROR,                      
  "MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED");                               
            ⋮┆----------------------------------------
         1800┆ require(redeemTokensIn == 0 || redeemAmountIn == 0, "one of      
  redeemTokensIn or redeemAmountIn must be zero");                              
            ⋮┆----------------------------------------
         2087┆ require(vars.mathErr == MathError.NO_ERROR,                      
  "REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED");                
            ⋮┆----------------------------------------
         2090┆ require(vars.mathErr == MathError.NO_ERROR,                      
  "REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED");                         
            ⋮┆----------------------------------------
         2186┆ require(amountSeizeError == uint(Error.NO_ERROR),                
  "LIQUIDATE_COINTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED");                       
            ⋮┆----------------------------------------
         2520┆ require(totalReservesNew <= totalReserves, "reduce reserves      
  unexpected underflow");                                                       
            ⋮┆----------------------------------------
       solidity.security.compound-borrowfresh-reentrancy                        
          Function borrowFresh() in Compound performs state update after        
  doTransferOut()                                                               
                                                                                
         1972┆ doTransferOut(borrower, borrowAmount);

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 42 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
