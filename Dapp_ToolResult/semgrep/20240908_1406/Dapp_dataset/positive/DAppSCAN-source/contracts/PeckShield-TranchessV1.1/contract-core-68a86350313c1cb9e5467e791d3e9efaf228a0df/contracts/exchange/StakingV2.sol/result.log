METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 44 Code Findings │
└──────────────────┘
                      
    /sb/StakingV2.sol 
       solidity.best-practice.use-abi-encodecall-instead-of-encodewithselector  
          To guarantee arguments type safety it is recommended to use           
  `abi.encodeCall` instead of                                                   
          `abi.encodeWithSelector`.                                             
                                                                                
          519┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.transfer.selector, to, value));                  
            ⋮┆----------------------------------------
          523┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.transferFrom.selector, from, to, value));        
            ⋮┆----------------------------------------
          541┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.approve.selector, spender, value));              
            ⋮┆----------------------------------------
          546┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.approve.selector, spender, newAllowance));       
            ⋮┆----------------------------------------
          551┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.approve.selector, spender, newAllowance));       
            ⋮┆----------------------------------------
       solidity.performance.state-variable-read-in-a-loop                       
          Replace state variable reads and writes within loops with local       
  variable reads and writes.                                                    
                                                                                
         1687┆ uint256 oldSize = _historicalIntegralSize;
            ⋮┆----------------------------------------
         1688┆ _historicalIntegrals[oldSize] = integral;
            ⋮┆----------------------------------------
         1689┆ _historicalIntegralSize = oldSize + 1;
            ⋮┆----------------------------------------
         1792┆                                                                  
  weight.multiplyDecimalPrecise(_historicalIntegrals[i].sub(userIntegral))      
            ⋮┆----------------------------------------
       solidity.performance.unnecessary-checked-arithmetic-in-loop              
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
                                                                                
         1674┆ for (uint256 i = 0; i < MAX_ITERATIONS && timestamp_ <           
  block.timestamp; i++) {                                                       
            ⋮┆----------------------------------------
         1790┆ for (uint256 i = oldVersion; i < targetVersion; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
          190┆ require(c >= a, "SafeMath: addition overflow");
            ⋮┆----------------------------------------
          205┆ require(b <= a, "SafeMath: subtraction overflow");
            ⋮┆----------------------------------------
          222┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          239┆ require(b > 0, "SafeMath: division by zero");
            ⋮┆----------------------------------------
          256┆ require(b > 0, "SafeMath: modulo by zero");
            ⋮┆----------------------------------------
          368┆ require(address(this).balance >= amount, "Address: insufficient  
  balance");                                                                    
            ⋮┆----------------------------------------
          372┆ require(success, "Address: unable to send value, recipient may   
  have reverted");                                                              
            ⋮┆----------------------------------------
          429┆ require(address(this).balance >= value, "Address: insufficient   
  balance for call");                                                           
            ⋮┆----------------------------------------
          430┆ require(isContract(target), "Address: call to non-contract");
            ⋮┆----------------------------------------
          454┆ require(isContract(target), "Address: static call to             
  non-contract");                                                               
            ⋮┆----------------------------------------
          478┆ require(isContract(target), "Address: delegate call to           
  non-contract");                                                               
            ⋮┆----------------------------------------
          538┆ require((value == 0) || (token.allowance(address(this), spender) 
  == 0),                                                                        
          539┆     "SafeERC20: approve from non-zero to non-zero allowance"
          540┆ );
            ⋮┆----------------------------------------
          568┆ require(abi.decode(returndata, (bool)), "SafeERC20: ERC20        
  operation did not succeed");                                                  
            ⋮┆----------------------------------------
          740┆ require(_pauser == msg.sender, "Pausable: only pauser");
            ⋮┆----------------------------------------
          752┆ require(_paused == FALSE, "Pausable: paused");
            ⋮┆----------------------------------------
          764┆ require(_paused != FALSE, "Pausable: not paused");
            ⋮┆----------------------------------------
         1449┆ require(targetVersion <= rebalanceSize, "Target version out of   
  bound");                                                                      
            ⋮┆----------------------------------------
         1472┆ require(
         1473┆     block.timestamp >= guardedLaunchStart + 15 days,
         1474┆     "Cannot claim during guarded launch"
         1475┆ );
            ⋮┆----------------------------------------
       solidity.performance.use-nested-if                                       
          Using nested is cheaper than using && multiple check combinations.    
  There are more                                                                
          advantages, such as easier to read code and better coverage reports.  
                                                                                
         1236┆ if (amountM == 0 && amountA == 0 && amountB == 0) return 0;
            ⋮┆----------------------------------------
         1270┆ if (amountM == 0 && amountA == 0 && amountB == 0) return 0;
            ⋮┆----------------------------------------
         1762┆ if (userIntegral == integral && oldVersion == targetVersion) {
         1763┆     // Return immediately when the user's rewards have already   
  been updated to                                                               
         1764┆     // the target version.
         1765┆     return;
         1766┆ }
            ⋮┆----------------------------------------
         1866┆ if (veProportion > 0 && _veSnapshots[account].veLocked.unlockTime
  > block.timestamp) {                                                          
         1867┆     newWorkingBalance = newWorkingBalance.add(
         1868┆                                                                  
  weightedSupply.multiplyDecimal(veProportion).multiplyDecimal(                 
         1869┆             MAX_BOOSTING_FACTOR - 1e18
         1870┆         )
         1871┆     );
         1872┆     newWorkingBalance = newWorkingBalance.min(
         1873┆         weightedUserBalance.multiplyDecimal(MAX_BOOSTING_FACTOR)
         1874┆     );
         1875┆ }
            ⋮┆----------------------------------------
       solidity.performance.use-prefix-increment-not-postfix                    
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
                                                                                
         1674┆ for (uint256 i = 0; i < MAX_ITERATIONS && timestamp_ <           
  block.timestamp; i++) {                                                       
            ⋮┆----------------------------------------
         1699┆ version++;
            ⋮┆----------------------------------------
         1790┆ for (uint256 i = oldVersion; i < targetVersion; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
          222┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          372┆ require(success, "Address: unable to send value, recipient may   
  have reverted");                                                              
            ⋮┆----------------------------------------
          429┆ require(address(this).balance >= value, "Address: insufficient   
  balance for call");                                                           
            ⋮┆----------------------------------------
          454┆ require(isContract(target), "Address: static call to             
  non-contract");                                                               
            ⋮┆----------------------------------------
          478┆ require(isContract(target), "Address: delegate call to           
  non-contract");                                                               
            ⋮┆----------------------------------------
          538┆ require((value == 0) || (token.allowance(address(this), spender) 
  == 0),                                                                        
          539┆     "SafeERC20: approve from non-zero to non-zero allowance"
          540┆ );
            ⋮┆----------------------------------------
          568┆ require(abi.decode(returndata, (bool)), "SafeERC20: ERC20        
  operation did not succeed");                                                  
            ⋮┆----------------------------------------
         1472┆ require(
         1473┆     block.timestamp >= guardedLaunchStart + 15 days,
         1474┆     "Cannot claim during guarded launch"
         1475┆ );

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 44 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
