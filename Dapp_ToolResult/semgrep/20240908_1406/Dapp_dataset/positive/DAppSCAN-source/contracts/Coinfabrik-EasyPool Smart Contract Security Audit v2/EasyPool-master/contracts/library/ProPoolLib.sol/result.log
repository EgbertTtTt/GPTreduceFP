METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 39 Code Findings │
└──────────────────┘
                       
    /sb/ProPoolLib.sol 
       solidity.performance.array-length-outside-loop                           
          Caching the array length outside a loop saves reading it on each      
  iteration, as long as the                                                     
          array's length is not changed during the loop.                        
                                                                                
          372┆ for(uint i = 0; i < admins.length; i++) {
            ⋮┆----------------------------------------
          809┆ for(uint i = 0; i < tokenAddresses.length; i++) {
            ⋮┆----------------------------------------
          873┆ for(uint i = 0; i < pool.tokenAddresses.length; i++) {
            ⋮┆----------------------------------------
         1282┆ for(i = 0; i < exclude.length; i++) {
            ⋮┆----------------------------------------
         1294┆ for(i = 0; i < include.length; i++) {
            ⋮┆----------------------------------------
         1359┆ for(uint i = 0; i < pool.participants.length; i++) {
            ⋮┆----------------------------------------
         1614┆ for (uint i = 0; i < array.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.unnecessary-checked-arithmetic-in-loop              
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
                                                                                
          372┆ for(uint i = 0; i < admins.length; i++) {
            ⋮┆----------------------------------------
          809┆ for(uint i = 0; i < tokenAddresses.length; i++) {
            ⋮┆----------------------------------------
          837┆ for(uint i = 0; i < length; i++) {
            ⋮┆----------------------------------------
          873┆ for(uint i = 0; i < pool.tokenAddresses.length; i++) {
            ⋮┆----------------------------------------
          934┆ for(uint idx = 0; idx < length; idx++) {
            ⋮┆----------------------------------------
          988┆ for(uint idx = 0; idx < length; idx++) {
            ⋮┆----------------------------------------
         1039┆ for(uint idx = 0; idx < length; idx++) {
            ⋮┆----------------------------------------
         1169┆ for(uint i = 0; i < length; i++) {
            ⋮┆----------------------------------------
         1359┆ for(uint i = 0; i < pool.participants.length; i++) {
            ⋮┆----------------------------------------
         1525┆ for(uint idx = 0; idx < length; idx++) {
            ⋮┆----------------------------------------
         1555┆ for(uint idx = 0; idx < length; idx++) {
            ⋮┆----------------------------------------
         1614┆ for (uint i = 0; i < array.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-multiple-require                                
          Using multiple require statements is cheaper than using && multiple   
  check combinations.                                                           
          There are more advantages, such as easier to read code and better     
  coverage reports.                                                             
                                                                                
          554┆ require(poolContribution > 0 && poolContribution >=              
  minPoolBalance);                                                              
            ⋮┆----------------------------------------
         1268┆ require(pool.groups.length > idx && pool.groups[idx].exists);
            ⋮┆----------------------------------------
         1418┆ require(!participant.exists && !participant.isAdmin);
            ⋮┆----------------------------------------
         1602┆ require(
         1603┆     minContribution > 0 &&
         1604┆     minContribution <= maxContribution &&
         1605┆     maxContribution <= maxBalance &&
         1606┆     maxBalance <= 1e9 ether
         1607┆ );
            ⋮┆----------------------------------------
       solidity.performance.use-nested-if                                       
          Using nested is cheaper than using && multiple check combinations.    
  There are more                                                                
          advantages, such as easier to read code and better coverage reports.  
                                                                                
         1324┆ if(ctorFee > 0 && !pool.feeToTokenMode) {
         1325┆     addressTransfer(msg.sender, ctorFee);
         1326┆ }
            ⋮┆----------------------------------------
         1492┆ if(currentBalance >= maxBalance || (isRestricted &&              
  !participant.whitelist[idx])) {                                               
         1493┆     remaining = totalAmount;
         1494┆     return;
         1495┆ }
            ⋮┆----------------------------------------
       solidity.performance.use-prefix-increment-not-postfix                    
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
                                                                                
          372┆ for(uint i = 0; i < admins.length; i++) {
            ⋮┆----------------------------------------
          809┆ for(uint i = 0; i < tokenAddresses.length; i++) {
            ⋮┆----------------------------------------
          837┆ for(uint i = 0; i < length; i++) {
            ⋮┆----------------------------------------
          873┆ for(uint i = 0; i < pool.tokenAddresses.length; i++) {
            ⋮┆----------------------------------------
          934┆ for(uint idx = 0; idx < length; idx++) {
            ⋮┆----------------------------------------
          988┆ for(uint idx = 0; idx < length; idx++) {
            ⋮┆----------------------------------------
         1039┆ for(uint idx = 0; idx < length; idx++) {
            ⋮┆----------------------------------------
         1169┆ for(uint i = 0; i < length; i++) {
            ⋮┆----------------------------------------
         1282┆ for(i = 0; i < exclude.length; i++) {
            ⋮┆----------------------------------------
         1294┆ for(i = 0; i < include.length; i++) {
            ⋮┆----------------------------------------
         1359┆ for(uint i = 0; i < pool.participants.length; i++) {
            ⋮┆----------------------------------------
         1525┆ for(uint idx = 0; idx < length; idx++) {
            ⋮┆----------------------------------------
         1555┆ for(uint idx = 0; idx < length; idx++) {
            ⋮┆----------------------------------------
         1614┆ for (uint i = 0; i < array.length; i++) {

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 39 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
