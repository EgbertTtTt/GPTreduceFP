METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 50 Code Findings │
└──────────────────┘
                         
    /sb/RevomonToken.sol 
       solidity.best-practice.use-ownable2step                                  
          By demanding that the receiver of the owner permissions actively      
  accept via a contract call                                                    
          of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the 
  contract ownership                                                            
          from accidentally being transferred  to an address that cannot handle 
  it.                                                                           
                                                                                
          700┆ contract TokenRecover is Ownable {
            ⋮┆----------------------------------------
       solidity.performance.non-payable-constructor      
          Consider making costructor payable to save gas.
                                                         
           25┆ constructor () internal { }
            ⋮┆----------------------------------------
          165┆ constructor () internal {
          166┆     address msgSender = _msgSender();
          167┆     _owner = msgSender;
          168┆     emit OwnershipTransferred(address(0), msgSender);
          169┆ }
            ⋮┆----------------------------------------
          448┆ constructor (string memory name, string memory symbol) public {
          449┆     _name = name;
          450┆     _symbol = symbol;
          451┆     _decimals = 18;
          452┆ }
            ⋮┆----------------------------------------
          742┆ constructor () internal {
          743┆     // Derived contracts need only register support for their own
  interfaces,                                                                   
          744┆     // we register support for ERC165 itself here
          745┆     _registerInterface(_INTERFACE_ID_ERC165);
          746┆ }
            ⋮┆----------------------------------------
          795┆ constructor () public {
          796┆     _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());
          797┆     _setupRole(MINTER_ROLE, _msgSender());
          798┆     _setupRole(OPERATOR_ROLE, _msgSender());
          799┆ }
            ⋮┆----------------------------------------
          934┆ constructor(
          935┆     string memory name,
          936┆     string memory symbol,
          937┆     uint8 decimals,
          938┆     uint256 cap,
          939┆     uint256 initialSupply) public ERC20Capped(cap) ERC1363(name, 
  symbol) {                                                                     
          940┆ 
          941┆     require(cap == initialSupply, "RevomonToken: cap must be     
  equal to initialSupply");                                                     
          942┆ 
          943┆     _setupDecimals(decimals);
             [hid 5 additional lines, adjust with --max-lines-per-finding] 
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
          104┆ require(set._values.length > index, "EnumerableSet: index out of 
  bounds");                                                                     
            ⋮┆----------------------------------------
          176┆ require(_owner == _msgSender(), "Ownable: caller is not the      
  owner");                                                                      
            ⋮┆----------------------------------------
          186┆ require(newOwner != address(0), "Ownable: new owner is the zero  
  address");                                                                    
            ⋮┆----------------------------------------
          202┆ require(address(this).balance >= amount, "Address: insufficient  
  balance");                                                                    
            ⋮┆----------------------------------------
          206┆ require(success, "Address: unable to send value, recipient may   
  have reverted");                                                              
            ⋮┆----------------------------------------
          244┆ require(hasRole(_roles[role].adminRole, _msgSender()),           
  "AccessControl: sender must be an admin to grant");                           
            ⋮┆----------------------------------------
          250┆ require(hasRole(_roles[role].adminRole, _msgSender()),           
  "AccessControl: sender must be an admin to revoke");                          
            ⋮┆----------------------------------------
          256┆ require(account == _msgSender(), "AccessControl: can only        
  renounce roles for self");                                                    
            ⋮┆----------------------------------------
          295┆ require(c >= a, "SafeMath: addition overflow");
            ⋮┆----------------------------------------
          350┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          601┆ require(sender != address(0), "ERC20: transfer from the zero     
  address");                                                                    
            ⋮┆----------------------------------------
          602┆ require(recipient != address(0), "ERC20: transfer to the zero    
  address");                                                                    
            ⋮┆----------------------------------------
          621┆ require(account != address(0), "ERC20: mint to the zero          
  address");                                                                    
            ⋮┆----------------------------------------
          642┆ require(account != address(0), "ERC20: burn from the zero        
  address");                                                                    
            ⋮┆----------------------------------------
          665┆ require(owner != address(0), "ERC20: approve from the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          666┆ require(spender != address(0), "ERC20: approve to the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          769┆ require(interfaceId != 0xffffffff, "ERC165: invalid interface    
  id");                                                                         
            ⋮┆----------------------------------------
          802┆ require(hasRole(MINTER_ROLE, _msgSender()), "Roles: caller does  
  not have the MINTER role");                                                   
            ⋮┆----------------------------------------
          807┆ require(hasRole(OPERATOR_ROLE, _msgSender()), "Roles: caller does
  not have the OPERATOR role");                                                 
            ⋮┆----------------------------------------
          847┆ require(_checkAndCallTransfer(_msgSender(), to, value, data),    
  "ERC1363: _checkAndCallTransfer reverts");                                    
            ⋮┆----------------------------------------
          857┆ require(_checkAndCallTransfer(from, to, value, data), "ERC1363:  
  _checkAndCallTransfer reverts");                                              
            ⋮┆----------------------------------------
          867┆ require(_checkAndCallApprove(spender, value, data), "ERC1363:    
  _checkAndCallApprove reverts");                                               
            ⋮┆----------------------------------------
          900┆ require(cap > 0, "ERC20Capped: cap is 0");
            ⋮┆----------------------------------------
          922┆ require(totalSupply().add(amount) <= _cap, "ERC20Capped: cap     
  exceeded");                                                                   
            ⋮┆----------------------------------------
          941┆ require(cap == initialSupply, "RevomonToken: cap must be equal to
  initialSupply");                                                              
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
          104┆ require(set._values.length > index, "EnumerableSet: index out of 
  bounds");                                                                     
            ⋮┆----------------------------------------
          186┆ require(newOwner != address(0), "Ownable: new owner is the zero  
  address");                                                                    
            ⋮┆----------------------------------------
          206┆ require(success, "Address: unable to send value, recipient may   
  have reverted");                                                              
            ⋮┆----------------------------------------
          244┆ require(hasRole(_roles[role].adminRole, _msgSender()),           
  "AccessControl: sender must be an admin to grant");                           
            ⋮┆----------------------------------------
          250┆ require(hasRole(_roles[role].adminRole, _msgSender()),           
  "AccessControl: sender must be an admin to revoke");                          
            ⋮┆----------------------------------------
          256┆ require(account == _msgSender(), "AccessControl: can only        
  renounce roles for self");                                                    
            ⋮┆----------------------------------------
          350┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          601┆ require(sender != address(0), "ERC20: transfer from the zero     
  address");                                                                    
            ⋮┆----------------------------------------
          602┆ require(recipient != address(0), "ERC20: transfer to the zero    
  address");                                                                    
            ⋮┆----------------------------------------
          642┆ require(account != address(0), "ERC20: burn from the zero        
  address");                                                                    
            ⋮┆----------------------------------------
          665┆ require(owner != address(0), "ERC20: approve from the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          666┆ require(spender != address(0), "ERC20: approve to the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          802┆ require(hasRole(MINTER_ROLE, _msgSender()), "Roles: caller does  
  not have the MINTER role");                                                   
            ⋮┆----------------------------------------
          807┆ require(hasRole(OPERATOR_ROLE, _msgSender()), "Roles: caller does
  not have the OPERATOR role");                                                 
            ⋮┆----------------------------------------
          847┆ require(_checkAndCallTransfer(_msgSender(), to, value, data),    
  "ERC1363: _checkAndCallTransfer reverts");                                    
            ⋮┆----------------------------------------
          857┆ require(_checkAndCallTransfer(from, to, value, data), "ERC1363:  
  _checkAndCallTransfer reverts");                                              
            ⋮┆----------------------------------------
          867┆ require(_checkAndCallApprove(spender, value, data), "ERC1363:    
  _checkAndCallApprove reverts");                                               
            ⋮┆----------------------------------------
          941┆ require(cap == initialSupply, "RevomonToken: cap must be equal to
  initialSupply");                                                              

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 50 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
