METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 31 Code Findings │
└──────────────────┘
                     
    /sb/TImelock.sol 
       solidity.performance.non-payable-constructor      
          Consider making costructor payable to save gas.
                                                         
           46┆ constructor(address admin_, uint256 delay_) {
           47┆   require(
           48┆     delay_ >= MINIMUM_DELAY,
           49┆     "Timelock::constructor: Delay must exceed minimum delay."
           50┆   );
           51┆   require(
           52┆     delay_ <= MAXIMUM_DELAY,
           53┆     "Timelock::constructor: Delay must not exceed maximum delay."
           54┆   );
           55┆ 
             [hid 4 additional lines, adjust with --max-lines-per-finding] 
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
           47┆ require(
           48┆   delay_ >= MINIMUM_DELAY,
           49┆   "Timelock::constructor: Delay must exceed minimum delay."
           50┆ );
            ⋮┆----------------------------------------
           51┆ require(
           52┆   delay_ <= MAXIMUM_DELAY,
           53┆   "Timelock::constructor: Delay must not exceed maximum delay."
           54┆ );
            ⋮┆----------------------------------------
           64┆ require(
           65┆   msg.sender == address(this),
           66┆   "Timelock::setDelay: Call must come from Timelock."
           67┆ );
            ⋮┆----------------------------------------
           68┆ require(
           69┆   delay_ >= MINIMUM_DELAY,
           70┆   "Timelock::setDelay: Delay must exceed minimum delay."
           71┆ );
            ⋮┆----------------------------------------
           72┆ require(
           73┆   delay_ <= MAXIMUM_DELAY,
           74┆   "Timelock::setDelay: Delay must not exceed maximum delay."
           75┆ );
            ⋮┆----------------------------------------
           82┆ require(
           83┆   msg.sender == pendingAdmin,
           84┆   "Timelock::acceptAdmin: Call must come from pendingAdmin."
           85┆ );
            ⋮┆----------------------------------------
           94┆ require(
           95┆   msg.sender == address(this),
           96┆   "Timelock::setPendingAdmin: Call must come from Timelock."
           97┆ );
            ⋮┆----------------------------------------
           99┆ require(
          100┆   msg.sender == admin,
          101┆   "Timelock::setPendingAdmin: First call must come from admin."
          102┆ );
            ⋮┆----------------------------------------
          117┆ require(
          118┆   msg.sender == admin,
          119┆   "Timelock::queueTransaction: Call must come from admin."
          120┆ );
            ⋮┆----------------------------------------
          121┆ require(
          122┆   eta >= getBlockTimestamp() + delay,
          123┆   "Timelock::queueTransaction: Estimated execution block must    
  satisfy delay."                                                               
          124┆ );
            ⋮┆----------------------------------------
          140┆ require(
          141┆   msg.sender == admin,
          142┆   "Timelock::cancelTransaction: Call must come from admin."
          143┆ );
            ⋮┆----------------------------------------
          171┆ require(
          172┆   msg.sender == admin,
          173┆   "Timelock::executeTransaction: Call must come from admin."
          174┆ );
            ⋮┆----------------------------------------
          177┆ require(
          178┆   queuedTransactions[txHash],
          179┆   "Timelock::executeTransaction: Transaction hasn't been queued."
          180┆ );
            ⋮┆----------------------------------------
          181┆ require(
          182┆   getBlockTimestamp() >= eta,
          183┆   "Timelock::executeTransaction: Transaction hasn't surpassed    
  time lock."                                                                   
          184┆ );
            ⋮┆----------------------------------------
          185┆ require(
          186┆   getBlockTimestamp() <= eta + GRACE_PERIOD,
          187┆   "Timelock::executeTransaction: Transaction is stale."
          188┆ );
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
           47┆ require(
           48┆   delay_ >= MINIMUM_DELAY,
           49┆   "Timelock::constructor: Delay must exceed minimum delay."
           50┆ );
            ⋮┆----------------------------------------
           51┆ require(
           52┆   delay_ <= MAXIMUM_DELAY,
           53┆   "Timelock::constructor: Delay must not exceed maximum delay."
           54┆ );
            ⋮┆----------------------------------------
           64┆ require(
           65┆   msg.sender == address(this),
           66┆   "Timelock::setDelay: Call must come from Timelock."
           67┆ );
            ⋮┆----------------------------------------
           68┆ require(
           69┆   delay_ >= MINIMUM_DELAY,
           70┆   "Timelock::setDelay: Delay must exceed minimum delay."
           71┆ );
            ⋮┆----------------------------------------
           72┆ require(
           73┆   delay_ <= MAXIMUM_DELAY,
           74┆   "Timelock::setDelay: Delay must not exceed maximum delay."
           75┆ );
            ⋮┆----------------------------------------
           82┆ require(
           83┆   msg.sender == pendingAdmin,
           84┆   "Timelock::acceptAdmin: Call must come from pendingAdmin."
           85┆ );
            ⋮┆----------------------------------------
           94┆ require(
           95┆   msg.sender == address(this),
           96┆   "Timelock::setPendingAdmin: Call must come from Timelock."
           97┆ );
            ⋮┆----------------------------------------
           99┆ require(
          100┆   msg.sender == admin,
          101┆   "Timelock::setPendingAdmin: First call must come from admin."
          102┆ );
            ⋮┆----------------------------------------
          117┆ require(
          118┆   msg.sender == admin,
          119┆   "Timelock::queueTransaction: Call must come from admin."
          120┆ );
            ⋮┆----------------------------------------
          121┆ require(
          122┆   eta >= getBlockTimestamp() + delay,
          123┆   "Timelock::queueTransaction: Estimated execution block must    
  satisfy delay."                                                               
          124┆ );
            ⋮┆----------------------------------------
          140┆ require(
          141┆   msg.sender == admin,
          142┆   "Timelock::cancelTransaction: Call must come from admin."
          143┆ );
            ⋮┆----------------------------------------
          171┆ require(
          172┆   msg.sender == admin,
          173┆   "Timelock::executeTransaction: Call must come from admin."
          174┆ );
            ⋮┆----------------------------------------
          177┆ require(
          178┆   queuedTransactions[txHash],
          179┆   "Timelock::executeTransaction: Transaction hasn't been queued."
          180┆ );
            ⋮┆----------------------------------------
          181┆ require(
          182┆   getBlockTimestamp() >= eta,
          183┆   "Timelock::executeTransaction: Transaction hasn't surpassed    
  time lock."                                                                   
          184┆ );
            ⋮┆----------------------------------------
          185┆ require(
          186┆   getBlockTimestamp() <= eta + GRACE_PERIOD,
          187┆   "Timelock::executeTransaction: Transaction is stale."
          188┆ );

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 31 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
