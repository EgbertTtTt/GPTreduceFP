METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 44 Code Findings │
└──────────────────┘
                         
    /sb/OlympusERC20.sol 
       solidity.best-practice.use-ownable2step                                  
          By demanding that the receiver of the owner permissions actively      
  accept via a contract call                                                    
          of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the 
  contract ownership                                                            
          from accidentally being transferred  to an address that cannot handle 
  it.                                                                           
                                                                                
         1216┆ contract VaultOwned is Ownable {
            ⋮┆----------------------------------------
       solidity.performance.non-payable-constructor      
          Consider making costructor payable to save gas.
                                                         
         1172┆ constructor () {
         1173┆   _owner = msg.sender;
         1174┆   emit OwnershipTransferred( address(0), _owner );
         1175┆ }
            ⋮┆----------------------------------------
         1259┆ constructor(
         1260┆       string memory name_,
         1261┆       string memory symbol_,
         1262┆       uint8 decimals_
         1263┆   ) ERC20(name_, symbol_, decimals_) {
         1264┆   }
            ⋮┆----------------------------------------
         1305┆ constructor(
         1306┆   string memory name_,
         1307┆   string memory symbol_,
         1308┆   uint8 decimals_
         1309┆ ) TWAPOracleUpdater(name_, symbol_, decimals_) {
         1310┆ }
            ⋮┆----------------------------------------
         1317┆ constructor() Divine("Olympus", "OHM", 9) {
         1318┆ }
            ⋮┆----------------------------------------
       solidity.performance.unnecessary-checked-arithmetic-in-loop              
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
                                                                                
          204┆ for( uint256 iteration_ = 0; _length( set_._inner ) > iteration_;
  iteration_++ ) {                                                              
            ⋮┆----------------------------------------
          269┆ for( uint256 iteration_ = 0; _length( set_._inner ) >=           
  iteration_; iteration_++ ){                                                   
            ⋮┆----------------------------------------
          341┆ for( uint256 iteration_ = 0; _length(set_._inner) >= iteration_; 
  iteration_++ ){                                                               
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
          129┆ require(set._values.length > index, "EnumerableSet: index out of 
  bounds");                                                                     
            ⋮┆----------------------------------------
          144┆ require( !_contains( set_, valueToInsert_ ), "Remove value you   
  wish to insert if you wish to reorder array." );                              
            ⋮┆----------------------------------------
          544┆ require(c >= a, "SafeMath: addition overflow");
            ⋮┆----------------------------------------
          599┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          923┆ require(sender != address(0), "ERC20: transfer from the zero     
  address");                                                                    
            ⋮┆----------------------------------------
          924┆ require(recipient != address(0), "ERC20: transfer to the zero    
  address");                                                                    
            ⋮┆----------------------------------------
          944┆ require(account_ != address(0), "ERC20: mint to the zero         
  address");                                                                    
            ⋮┆----------------------------------------
          964┆ require(account != address(0), "ERC20: burn from the zero        
  address");                                                                    
            ⋮┆----------------------------------------
          988┆ require(owner != address(0), "ERC20: approve from the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          989┆ require(spender != address(0), "ERC20: approve to the zero       
  address");                                                                    
            ⋮┆----------------------------------------
         1132┆ require(block.timestamp <= deadline, "Permit: expired deadline");
            ⋮┆----------------------------------------
         1140┆ require(signer != address(0) && signer == owner, "ZeroSwapPermit:
  Invalid signature");                                                          
            ⋮┆----------------------------------------
         1188┆ require( _owner == msg.sender, "Ownable: caller is not the owner"
  );                                                                            
            ⋮┆----------------------------------------
         1209┆ require( newOwner_ != address(0), "Ownable: new owner is the zero
  address");                                                                    
            ⋮┆----------------------------------------
         1237┆ require( _vault == msg.sender, "VaultOwned: caller is not the    
  Vault" );                                                                     
            ⋮┆----------------------------------------
         1272┆ require( newTWAPEpochPeriod_ > 0, "TWAPOracleUpdater: TWAP Epoch 
  period must be greater than 0." );                                            
            ⋮┆----------------------------------------
         1278┆ require( _dexPoolsTWAPSources.add( newTWAPSourceDexPool_ ),      
  "OlympusERC20TOken: TWAP Source already stored." );                           
            ⋮┆----------------------------------------
         1283┆ require( _dexPoolsTWAPSources.remove( twapSourceToRemove_ ),     
  "OlympusERC20TOken: TWAP source not present." );                              
            ⋮┆----------------------------------------
       solidity.performance.use-multiple-require                                
          Using multiple require statements is cheaper than using && multiple   
  check combinations.                                                           
          There are more advantages, such as easier to read code and better     
  coverage reports.                                                             
                                                                                
         1140┆ require(signer != address(0) && signer == owner, "ZeroSwapPermit:
  Invalid signature");                                                          
            ⋮┆----------------------------------------
       solidity.performance.use-prefix-increment-not-postfix                    
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
                                                                                
          204┆ for( uint256 iteration_ = 0; _length( set_._inner ) > iteration_;
  iteration_++ ) {                                                              
            ⋮┆----------------------------------------
          269┆ for( uint256 iteration_ = 0; _length( set_._inner ) >=           
  iteration_; iteration_++ ){                                                   
            ⋮┆----------------------------------------
          341┆ for( uint256 iteration_ = 0; _length(set_._inner) >= iteration_; 
  iteration_++ ){                                                               
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
          129┆ require(set._values.length > index, "EnumerableSet: index out of 
  bounds");                                                                     
            ⋮┆----------------------------------------
          144┆ require( !_contains( set_, valueToInsert_ ), "Remove value you   
  wish to insert if you wish to reorder array." );                              
            ⋮┆----------------------------------------
          599┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          923┆ require(sender != address(0), "ERC20: transfer from the zero     
  address");                                                                    
            ⋮┆----------------------------------------
          924┆ require(recipient != address(0), "ERC20: transfer to the zero    
  address");                                                                    
            ⋮┆----------------------------------------
          964┆ require(account != address(0), "ERC20: burn from the zero        
  address");                                                                    
            ⋮┆----------------------------------------
          988┆ require(owner != address(0), "ERC20: approve from the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          989┆ require(spender != address(0), "ERC20: approve to the zero       
  address");                                                                    
            ⋮┆----------------------------------------
         1140┆ require(signer != address(0) && signer == owner, "ZeroSwapPermit:
  Invalid signature");                                                          
            ⋮┆----------------------------------------
         1209┆ require( newOwner_ != address(0), "Ownable: new owner is the zero
  address");                                                                    
            ⋮┆----------------------------------------
         1237┆ require( _vault == msg.sender, "VaultOwned: caller is not the    
  Vault" );                                                                     
            ⋮┆----------------------------------------
         1272┆ require( newTWAPEpochPeriod_ > 0, "TWAPOracleUpdater: TWAP Epoch 
  period must be greater than 0." );                                            
            ⋮┆----------------------------------------
         1278┆ require( _dexPoolsTWAPSources.add( newTWAPSourceDexPool_ ),      
  "OlympusERC20TOken: TWAP Source already stored." );                           
            ⋮┆----------------------------------------
         1283┆ require( _dexPoolsTWAPSources.remove( twapSourceToRemove_ ),     
  "OlympusERC20TOken: TWAP source not present." );                              

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 44 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
