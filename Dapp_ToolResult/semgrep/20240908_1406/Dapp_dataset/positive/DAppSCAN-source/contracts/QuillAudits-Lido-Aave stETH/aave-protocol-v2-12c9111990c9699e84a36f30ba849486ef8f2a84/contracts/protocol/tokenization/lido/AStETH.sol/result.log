METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 49 Code Findings │
└──────────────────┘
                   
    /sb/AStETH.sol 
       solidity.best-practice.use-abi-encodecall-instead-of-encodewithselector  
          To guarantee arguments type safety it is recommended to use           
  `abi.encodeCall` instead of                                                   
          `abi.encodeWithSelector`.                                             
                                                                                
          293┆ callOptionalReturn(token,                                        
  abi.encodeWithSelector(token.transfer.selector, to, value));                  
            ⋮┆----------------------------------------
          302┆ callOptionalReturn(token,                                        
  abi.encodeWithSelector(token.transferFrom.selector, from, to, value));        
            ⋮┆----------------------------------------
          314┆ callOptionalReturn(token,                                        
  abi.encodeWithSelector(token.approve.selector, spender, value));              
            ⋮┆----------------------------------------
       solidity.performance.init-variables-with-default-value                   
          Uninitialized variables are assigned with the types default value.    
  Explicitly initializing a                                                     
          variable with its default value costs unnecessary gas.                
                                                                                
         1169┆ uint256 private lastInitializedRevision = 0;
            ⋮┆----------------------------------------
       solidity.performance.non-payable-constructor      
          Consider making costructor payable to save gas.
                                                         
         1266┆ constructor(
         1267┆   string memory name,
         1268┆   string memory symbol,
         1269┆   uint8 decimals,
         1270┆   address incentivesController
         1271┆ ) public {
         1272┆   _name = name;
         1273┆   _symbol = symbol;
         1274┆   _decimals = decimals;
         1275┆   _incentivesController =                                        
  IAaveIncentivesController(incentivesController);                              
             [hid 1 additional lines, adjust with --max-lines-per-finding] 
         1698┆ constructor(
         1699┆   ILendingPool pool,
         1700┆   address underlyingAssetAddress,
         1701┆   address reserveTreasuryAddress,
         1702┆   string memory tokenName,
         1703┆   string memory tokenSymbol,
         1704┆   address incentivesController
         1705┆ ) public IncentivizedERC20(tokenName, tokenSymbol, 18,           
  incentivesController) {                                                       
         1706┆   POOL = pool;
         1707┆   UNDERLYING_ASSET_ADDRESS = underlyingAssetAddress;
             [hid 2 additional lines, adjust with --max-lines-per-finding] 
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
           92┆ require(c >= a, 'SafeMath: addition overflow');
            ⋮┆----------------------------------------
          148┆ require(c / a == b, 'SafeMath: multiplication overflow');
            ⋮┆----------------------------------------
          276┆ require(address(this).balance >= amount, 'Address: insufficient  
  balance');                                                                    
            ⋮┆----------------------------------------
          280┆ require(success, 'Address: unable to send value, recipient may   
  have reverted');                                                              
            ⋮┆----------------------------------------
          310┆ require(
          311┆   (value == 0) || (token.allowance(address(this), spender) == 0),
          312┆   'SafeERC20: approve from non-zero to non-zero allowance'
          313┆ );
            ⋮┆----------------------------------------
          318┆ require(address(token).isContract(), 'SafeERC20: call to         
  non-contract');                                                               
            ⋮┆----------------------------------------
          322┆ require(success, 'SafeERC20: low-level call failed');
            ⋮┆----------------------------------------
          327┆ require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20        
  operation did not succeed');                                                  
            ⋮┆----------------------------------------
         1181┆ require(
         1182┆   initializing || isConstructor() || revision >                  
  lastInitializedRevision,                                                      
         1183┆   'Contract instance has already been initialized'
         1184┆ );
            ⋮┆----------------------------------------
         1411┆ require(sender != address(0), 'ERC20: transfer from the zero     
  address');                                                                    
            ⋮┆----------------------------------------
         1412┆ require(recipient != address(0), 'ERC20: transfer to the zero    
  address');                                                                    
            ⋮┆----------------------------------------
         1431┆ require(account != address(0), 'ERC20: mint to the zero          
  address');                                                                    
            ⋮┆----------------------------------------
         1447┆ require(account != address(0), 'ERC20: burn from the zero        
  address');                                                                    
            ⋮┆----------------------------------------
         1467┆ require(owner != address(0), 'ERC20: approve from the zero       
  address');                                                                    
            ⋮┆----------------------------------------
         1468┆ require(spender != address(0), 'ERC20: approve to the zero       
  address');                                                                    
            ⋮┆----------------------------------------
         1569┆ require(!(a == -1 && b == _INT256_MIN), 'SignedSafeMath:         
  multiplication overflow');                                                    
            ⋮┆----------------------------------------
         1572┆ require(c / a == b, 'SignedSafeMath: multiplication overflow');
            ⋮┆----------------------------------------
         1590┆ require(b != 0, 'SignedSafeMath: division by zero');
            ⋮┆----------------------------------------
         1591┆ require(!(b == -1 && a == _INT256_MIN), 'SignedSafeMath: division
  overflow');                                                                   
            ⋮┆----------------------------------------
         1610┆ require((b >= 0 && c <= a) || (b < 0 && c > a), 'SignedSafeMath: 
  subtraction overflow');                                                       
            ⋮┆----------------------------------------
         1627┆ require((b >= 0 && c >= a) || (b < 0 && c < a), 'SignedSafeMath: 
  addition overflow');                                                          
            ⋮┆----------------------------------------
         1988┆ require(owner != address(0), 'INVALID_OWNER');
            ⋮┆----------------------------------------
         1990┆ require(block.timestamp <= deadline, 'INVALID_EXPIRATION');
            ⋮┆----------------------------------------
         2000┆ require(owner == ecrecover(digest, v, r, s),                     
  'INVALID_SIGNATURE');                                                         
            ⋮┆----------------------------------------
       solidity.performance.use-multiple-require                                
          Using multiple require statements is cheaper than using && multiple   
  check combinations.                                                           
          There are more advantages, such as easier to read code and better     
  coverage reports.                                                             
                                                                                
         1569┆ require(!(a == -1 && b == _INT256_MIN), 'SignedSafeMath:         
  multiplication overflow');                                                    
            ⋮┆----------------------------------------
         1591┆ require(!(b == -1 && a == _INT256_MIN), 'SignedSafeMath: division
  overflow');                                                                   
            ⋮┆----------------------------------------
         1610┆ require((b >= 0 && c <= a) || (b < 0 && c > a), 'SignedSafeMath: 
  subtraction overflow');                                                       
            ⋮┆----------------------------------------
         1627┆ require((b >= 0 && c >= a) || (b < 0 && c < a), 'SignedSafeMath: 
  addition overflow');                                                          
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
          148┆ require(c / a == b, 'SafeMath: multiplication overflow');
            ⋮┆----------------------------------------
          280┆ require(success, 'Address: unable to send value, recipient may   
  have reverted');                                                              
            ⋮┆----------------------------------------
          310┆ require(
          311┆   (value == 0) || (token.allowance(address(this), spender) == 0),
          312┆   'SafeERC20: approve from non-zero to non-zero allowance'
          313┆ );
            ⋮┆----------------------------------------
          327┆ require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20        
  operation did not succeed');                                                  
            ⋮┆----------------------------------------
         1181┆ require(
         1182┆   initializing || isConstructor() || revision >                  
  lastInitializedRevision,                                                      
         1183┆   'Contract instance has already been initialized'
         1184┆ );
            ⋮┆----------------------------------------
         1411┆ require(sender != address(0), 'ERC20: transfer from the zero     
  address');                                                                    
            ⋮┆----------------------------------------
         1412┆ require(recipient != address(0), 'ERC20: transfer to the zero    
  address');                                                                    
            ⋮┆----------------------------------------
         1447┆ require(account != address(0), 'ERC20: burn from the zero        
  address');                                                                    
            ⋮┆----------------------------------------
         1467┆ require(owner != address(0), 'ERC20: approve from the zero       
  address');                                                                    
            ⋮┆----------------------------------------
         1468┆ require(spender != address(0), 'ERC20: approve to the zero       
  address');                                                                    
            ⋮┆----------------------------------------
         1569┆ require(!(a == -1 && b == _INT256_MIN), 'SignedSafeMath:         
  multiplication overflow');                                                    
            ⋮┆----------------------------------------
         1572┆ require(c / a == b, 'SignedSafeMath: multiplication overflow');
            ⋮┆----------------------------------------
         1591┆ require(!(b == -1 && a == _INT256_MIN), 'SignedSafeMath: division
  overflow');                                                                   
            ⋮┆----------------------------------------
         1610┆ require((b >= 0 && c <= a) || (b < 0 && c > a), 'SignedSafeMath: 
  subtraction overflow');                                                       
            ⋮┆----------------------------------------
         1627┆ require((b >= 0 && c >= a) || (b < 0 && c < a), 'SignedSafeMath: 
  addition overflow');                                                          

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 49 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
