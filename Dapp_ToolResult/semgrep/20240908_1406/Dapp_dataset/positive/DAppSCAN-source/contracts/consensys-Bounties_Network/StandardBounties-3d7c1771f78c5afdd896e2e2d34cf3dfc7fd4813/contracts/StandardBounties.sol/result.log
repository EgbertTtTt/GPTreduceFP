METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 22 Code Findings │
└──────────────────┘
                             
    /sb/StandardBounties.sol 
       solidity.performance.array-length-outside-loop                           
          Caching the array length outside a loop saves reading it on each      
  iteration, as long as the                                                     
          array's length is not changed during the loop.                        
                                                                                
          995┆ for (uint i = 0; i < _contributionIds.length; i++){
            ⋮┆----------------------------------------
         1097┆ for (uint256 i = 0; i < fulfillment.fulfillers.length; i++){
            ⋮┆----------------------------------------
         1287┆ for (uint i = 0; i < _issuers.length; i++){
            ⋮┆----------------------------------------
         1330┆ for (uint i = 0; i < _approvers.length; i++){
            ⋮┆----------------------------------------
       solidity.performance.non-payable-constructor      
          Consider making costructor payable to save gas.
                                                         
          221┆ constructor()
          222┆   public
          223┆ {
          224┆   _registerInterface(InterfaceId_ERC165);
          225┆ }
            ⋮┆----------------------------------------
          394┆ constructor()
          395┆   public
          396┆ {
          397┆   // register the supported interfaces to conform to ERC721 via  
  ERC165                                                                        
          398┆   _registerInterface(InterfaceId_ERC721);
          399┆   _registerInterface(InterfaceId_ERC721Exists);
          400┆ }
            ⋮┆----------------------------------------
          839┆ constructor() public {
          840┆   // The owner of the contract is automatically designated to be 
  the deployer of the contract                                                  
          841┆   owner = msg.sender;
          842┆ }
            ⋮┆----------------------------------------
       solidity.performance.state-variable-read-in-a-loop                       
          Replace state variable reads and writes within loops with local       
  variable reads and writes.                                                    
                                                                                
         1099┆ require(bounties[_bountyId].balance >= _tokenAmounts[i]); //     
  Checks that the bounty has a sufficient balance to make the payout            
            ⋮┆----------------------------------------
         1101┆ bounties[_bountyId].balance -= _tokenAmounts[i];
            ⋮┆----------------------------------------
         1288┆ bounties[_bountyId].issuers.push(_issuers[i]);
            ⋮┆----------------------------------------
         1331┆ bounties[_bountyId].approvers.push(_approvers[i]);
            ⋮┆----------------------------------------
       solidity.performance.unnecessary-checked-arithmetic-in-loop              
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
                                                                                
          995┆ for (uint i = 0; i < _contributionIds.length; i++){
            ⋮┆----------------------------------------
         1097┆ for (uint256 i = 0; i < fulfillment.fulfillers.length; i++){
            ⋮┆----------------------------------------
         1287┆ for (uint i = 0; i < _issuers.length; i++){
            ⋮┆----------------------------------------
         1330┆ for (uint i = 0; i < _approvers.length; i++){
            ⋮┆----------------------------------------
       solidity.performance.use-nested-if                                       
          Using nested is cheaper than using && multiple check combinations.    
  There are more                                                                
          advantages, such as easier to read code and better coverage reports.  
                                                                                
           67┆ if (balances[msg.sender] >= _value && _value > 0) {
           68┆     balances[msg.sender] -= _value;
           69┆     balances[_to] += _value;
           70┆     emit Transfer(msg.sender, _to, _value);
           71┆     return true;
           72┆ } else { return false; }
            ⋮┆----------------------------------------
           78┆ if (balances[_from] >= _value && allowed[_from][msg.sender] >=   
  _value && _value > 0) {                                                       
           79┆     balances[_to] += _value;
           80┆     balances[_from] -= _value;
           81┆     allowed[_from][msg.sender] -= _value;
           82┆     emit Transfer(_from, _to, _value);
           83┆     return true;
           84┆ } else { return false; }
            ⋮┆----------------------------------------
       solidity.performance.use-prefix-increment-not-postfix                    
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
                                                                                
          888┆ numBounties++; // Increments the number of bounties, since a new 
  one has just been added                                                       
            ⋮┆----------------------------------------
          995┆ for (uint i = 0; i < _contributionIds.length; i++){
            ⋮┆----------------------------------------
         1097┆ for (uint256 i = 0; i < fulfillment.fulfillers.length; i++){
            ⋮┆----------------------------------------
         1287┆ for (uint i = 0; i < _issuers.length; i++){
            ⋮┆----------------------------------------
         1330┆ for (uint i = 0; i < _approvers.length; i++){

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 22 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
