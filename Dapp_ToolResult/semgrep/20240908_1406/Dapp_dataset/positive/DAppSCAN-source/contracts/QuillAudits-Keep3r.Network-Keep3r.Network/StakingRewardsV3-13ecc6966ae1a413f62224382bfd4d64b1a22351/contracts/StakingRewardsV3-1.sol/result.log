METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 18 Code Findings │
└──────────────────┘
                               
    /sb/StakingRewardsV3-1.sol 
       solidity.best-practice.use-abi-encodecall-instead-of-encodewithselector  
          To guarantee arguments type safety it is recommended to use           
  `abi.encodeCall` instead of                                                   
          `abi.encodeWithSelector`.                                             
                                                                                
          355┆ (bool success, bytes memory data) =
          356┆     token.call(abi.encodeWithSelector(erc20.transfer.selector,   
  to, value));                                                                  
            ⋮┆----------------------------------------
          361┆ (bool success, bytes memory data) =
          362┆                                                                  
  token.call(abi.encodeWithSelector(erc20.transferFrom.selector, from, to,      
  value));                                                                      
            ⋮┆----------------------------------------
       solidity.performance.array-length-outside-loop                           
          Caching the array length outside a loop saves reading it on each      
  iteration, as long as the                                                     
          array's length is not changed during the loop.                        
                                                                                
          229┆ for (i = 0; i < array.length; i++) {
            ⋮┆----------------------------------------
          266┆ for (uint i = 0; i < _tokens.length; i++) {
            ⋮┆----------------------------------------
          292┆ for (uint i = 0; i < _tokens.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.inefficient-state-variable-increment             
          <x> += <y> costs more gas than <x> = <x> + <y> for state variables.
                                                                             
          169┆ earned0 += amount0;
            ⋮┆----------------------------------------
          170┆ earned1 += amount1;
            ⋮┆----------------------------------------
          338┆ forfeit += _forfeited;
            ⋮┆----------------------------------------
          348┆ totalLiquidity += _liquidity;
            ⋮┆----------------------------------------
       solidity.performance.non-payable-constructor      
          Consider making costructor payable to save gas.
                                                         
          140┆ constructor(address _reward, address _pool) {
          141┆     reward = _reward;
          142┆     pool = _pool;
          143┆     owner = msg.sender;
          144┆ }
            ⋮┆----------------------------------------
       solidity.performance.unnecessary-checked-arithmetic-in-loop              
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
                                                                                
          266┆ for (uint i = 0; i < _tokens.length; i++) {
            ⋮┆----------------------------------------
          292┆ for (uint i = 0; i < _tokens.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-multiple-require                                
          Using multiple require statements is cheaper than using && multiple   
  check combinations.                                                           
          There are more advantages, such as easier to read code and better     
  coverage reports.                                                             
                                                                                
          218┆ require(tickLower < _tick && _tick < tickUpper);
            ⋮┆----------------------------------------
          357┆ require(success && (data.length == 0 || abi.decode(data,         
  (bool))));                                                                    
            ⋮┆----------------------------------------
          363┆ require(success && (data.length == 0 || abi.decode(data,         
  (bool))));                                                                    
            ⋮┆----------------------------------------
       solidity.performance.use-prefix-increment-not-postfix                    
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
                                                                                
          229┆ for (i = 0; i < array.length; i++) {
            ⋮┆----------------------------------------
          266┆ for (uint i = 0; i < _tokens.length; i++) {
            ⋮┆----------------------------------------
          292┆ for (uint i = 0; i < _tokens.length; i++) {

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 18 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
