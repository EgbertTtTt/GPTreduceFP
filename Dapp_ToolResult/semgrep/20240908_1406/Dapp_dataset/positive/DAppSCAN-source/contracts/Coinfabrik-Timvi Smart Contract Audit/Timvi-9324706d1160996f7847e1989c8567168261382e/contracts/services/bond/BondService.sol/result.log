METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 45 Code Findings │
└──────────────────┘
                        
    /sb/BondService.sol 
       solidity.performance.non-payable-constructor      
          Consider making costructor payable to save gas.
                                                         
          246┆ constructor(ISettings _settings) public {
          247┆     admin = msg.sender;
          248┆     settings = _settings;
          249┆ 
          250┆     emitterFee = 500; // 0.5%
          251┆     emit BondEmitterFeeUpdated(emitterFee);
          252┆ 
          253┆     ownerFee = 10000; // 10%
          254┆     emit BondOwnerFeeUpdated(ownerFee);
          255┆ 
             [hid 3 additional lines, adjust with --max-lines-per-finding] 
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
           21┆ require(c / a == b, 'mul');
            ⋮┆----------------------------------------
           31┆ require(b > 0, 'div');
            ⋮┆----------------------------------------
           42┆ require(b <= a, 'sub');
            ⋮┆----------------------------------------
           53┆ require(c >= a, 'add');
            ⋮┆----------------------------------------
          201┆ require(admin == msg.sender, "You have no access");
            ⋮┆----------------------------------------
          208┆ require(bonds[_id].emitter == msg.sender, "You are not the       
  emitter");                                                                    
            ⋮┆----------------------------------------
          217┆ require(_a || _b, "You are not the single owner");
            ⋮┆----------------------------------------
          224┆ require(bonds[_id].emitter != address(0) && bonds[_id].owner ==  
  address(0), "The bond isn't an emit request");                                
            ⋮┆----------------------------------------
          231┆ require(bonds[_id].owner != address(0) && bonds[_id].emitter ==  
  address(0), "The bond isn't an buy request");                                 
            ⋮┆----------------------------------------
          238┆ require(bonds[_id].emitter != address(0) && bonds[_id].owner !=  
  address(0), "Bond isn't matched");                                            
            ⋮┆----------------------------------------
          266┆ require(msg.value >= minEther, "Too small funds");
            ⋮┆----------------------------------------
          267┆ require(_percent >=                                              
  ILogic(settings.logicManager()).withdrawPercent(msg.value), "Collateralization
  is not enough");                                                              
            ⋮┆----------------------------------------
          268┆ require(_expiration >= 1 days && _expiration <= 365 days,        
  "Expiration out of range");                                                   
            ⋮┆----------------------------------------
          269┆ require(_yearFee <= 10000, "Fee out of range");
            ⋮┆----------------------------------------
          279┆ require(msg.value >= minEther, "Too small funds");
            ⋮┆----------------------------------------
          280┆ require(_expiration >= 1 days && _expiration <= 365 days,        
  "Expiration out of range");                                                   
            ⋮┆----------------------------------------
          281┆ require(_yearFee <= 10000, "Fee out of range");
            ⋮┆----------------------------------------
          358┆ require(bonds[_id].owner == msg.sender && bonds[_id].emitter ==  
  address(0), "You are not the owner ot bond is matched");                      
            ⋮┆----------------------------------------
          368┆ require(_deposit >= minEther, "Too small funds");
            ⋮┆----------------------------------------
          373┆ require(msg.value == _deposit.sub(_oldDeposit), "Incorrect       
  value");                                                                      
            ⋮┆----------------------------------------
          381┆ require(_percent >=                                              
  ILogic(settings.logicManager()).withdrawPercent(bonds[_id].deposit),          
  "Collateralization is not enough");                                           
            ⋮┆----------------------------------------
          389┆ require(_expiration >= 1 days && _expiration <= 365 days,        
  "Expiration out of range");                                                   
            ⋮┆----------------------------------------
          397┆ require(_yearFee <= 10000, "Fee out of range");
            ⋮┆----------------------------------------
          409┆ require(msg.value == _eth, "Incorrect ETH value");
            ⋮┆----------------------------------------
          459┆ require(now < bonds[_id].expiration, "Bond expired");
            ⋮┆----------------------------------------
          490┆ require(now > bonds[_id].expiration, "Bond hasn't expired");
            ⋮┆----------------------------------------
          530┆ require(_beneficiary != address(0), "Zero address, be careful");
            ⋮┆----------------------------------------
          531┆ require(systemETH > 0, "There is no available ETH");
            ⋮┆----------------------------------------
          542┆ require(_beneficiary != address(0), "Zero address, be careful");
            ⋮┆----------------------------------------
          545┆ require(_amount > 0, "There are no tokens");
            ⋮┆----------------------------------------
          552┆ require(_value <= 10000, "Too much");
            ⋮┆----------------------------------------
          560┆ require(_value <= 50000, "Too much");
            ⋮┆----------------------------------------
          568┆ require(_value <= 100 ether, "Too much");
            ⋮┆----------------------------------------
          576┆ require(_newAdmin != address(0), "Zero address, be careful");
            ⋮┆----------------------------------------
       solidity.performance.use-multiple-require                                
          Using multiple require statements is cheaper than using && multiple   
  check combinations.                                                           
          There are more advantages, such as easier to read code and better     
  coverage reports.                                                             
                                                                                
          224┆ require(bonds[_id].emitter != address(0) && bonds[_id].owner ==  
  address(0), "The bond isn't an emit request");                                
            ⋮┆----------------------------------------
          231┆ require(bonds[_id].owner != address(0) && bonds[_id].emitter ==  
  address(0), "The bond isn't an buy request");                                 
            ⋮┆----------------------------------------
          238┆ require(bonds[_id].emitter != address(0) && bonds[_id].owner !=  
  address(0), "Bond isn't matched");                                            
            ⋮┆----------------------------------------
          268┆ require(_expiration >= 1 days && _expiration <= 365 days,        
  "Expiration out of range");                                                   
            ⋮┆----------------------------------------
          280┆ require(_expiration >= 1 days && _expiration <= 365 days,        
  "Expiration out of range");                                                   
            ⋮┆----------------------------------------
          358┆ require(bonds[_id].owner == msg.sender && bonds[_id].emitter ==  
  address(0), "You are not the owner ot bond is matched");                      
            ⋮┆----------------------------------------
          389┆ require(_expiration >= 1 days && _expiration <= 365 days,        
  "Expiration out of range");                                                   
            ⋮┆----------------------------------------
       solidity.performance.use-nested-if                                       
          Using nested is cheaper than using && multiple check combinations.    
  There are more                                                                
          advantages, such as easier to read code and better coverage reports.  
                                                                                
          367┆ if (_deposit != 0 && _oldDeposit != _deposit) {
          368┆     require(_deposit >= minEther, "Too small funds");
          369┆     bonds[_id].deposit = _deposit;
          370┆     if (_oldDeposit > _deposit) {
          371┆         msg.sender.transfer(_oldDeposit.sub(_deposit));
          372┆     } else {
          373┆         require(msg.value == _deposit.sub(_oldDeposit),          
  "Incorrect value");                                                           
          374┆     }
          375┆ }
            ⋮┆----------------------------------------
          380┆ if (_percent != 0 && _oldPercent != _percent) {
          381┆     require(_percent >=                                          
  ILogic(settings.logicManager()).withdrawPercent(bonds[_id].deposit),          
  "Collateralization is not enough");                                           
          382┆     bonds[_id].percent = _percent;
          383┆ }
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
          358┆ require(bonds[_id].owner == msg.sender && bonds[_id].emitter ==  
  address(0), "You are not the owner ot bond is matched");                      

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 45 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
