METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 70 Code Findings │
└──────────────────┘
                              
    /sb/AddressArrayUtils.sol 
       solidity.performance.array-length-outside-loop                           
          Caching the array length outside a loop saves reading it on each      
  iteration, as long as the                                                     
          array's length is not changed during the loop.                        
                                                                                
           75┆ for (uint256 i = 0; i < A.length; i++) {
            ⋮┆----------------------------------------
          142┆ for (uint256 i = 0; i < A.length; i++) {
            ⋮┆----------------------------------------
          146┆ for (uint256 j = 0; j < B.length; j++) {
            ⋮┆----------------------------------------
          148┆ includeMap[A.length + j] = true;
            ⋮┆----------------------------------------
          154┆ for (uint256 m = 0; m < A.length; m++) {
            ⋮┆----------------------------------------
          160┆ for (uint256 n = 0; n < B.length; n++) {
            ⋮┆----------------------------------------
          161┆ if (includeMap[A.length + n]) {
            ⋮┆----------------------------------------
          206┆ A[i] = A[A.length - i - 1];
            ⋮┆----------------------------------------
          207┆ A[A.length - i - 1] = t;
            ⋮┆----------------------------------------
          306┆ for (uint256 i = 0; i < A.length - 1; i++) {
            ⋮┆----------------------------------------
          307┆ for (uint256 j = i + 1; j < A.length; j++) {
            ⋮┆----------------------------------------
          326┆ for (uint256 i = 0; i < A.length; i++) {
            ⋮┆----------------------------------------
          346┆ for (uint256 i = 0; i < indexArray.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.non-optimal-variables-swap                          
          Consider swapping variables using `(A[i], A[A.length - i - 1]) =      
  (A[A.length - i - 1],                                                         
          A[i])` to save gas                                                    
                                                                                
          205┆ t = A[i];
          206┆ A[i] = A[A.length - i - 1];
          207┆ A[A.length - i - 1] = t;
            ⋮┆----------------------------------------
       solidity.performance.unnecessary-checked-arithmetic-in-loop              
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
                                                                                
           16┆ for (uint256 i = 0; i < length; i++) {
            ⋮┆----------------------------------------
           58┆ for (uint256 i = 0; i < aLength; i++) {
            ⋮┆----------------------------------------
           61┆ for (uint256 j = 0; j < bLength; j++) {
            ⋮┆----------------------------------------
           75┆ for (uint256 i = 0; i < A.length; i++) {
            ⋮┆----------------------------------------
           90┆ for (uint256 i = 0; i < length; i++) {
            ⋮┆----------------------------------------
          105┆ for (uint256 i = 0; i < length; i++) {
            ⋮┆----------------------------------------
          113┆ for (uint256 k = 0; k < length; k++) {
            ⋮┆----------------------------------------
          142┆ for (uint256 i = 0; i < A.length; i++) {
            ⋮┆----------------------------------------
          146┆ for (uint256 j = 0; j < B.length; j++) {
            ⋮┆----------------------------------------
          154┆ for (uint256 m = 0; m < A.length; m++) {
            ⋮┆----------------------------------------
          160┆ for (uint256 n = 0; n < B.length; n++) {
            ⋮┆----------------------------------------
          180┆ for (uint256 i = 0; i < length; i++) {
            ⋮┆----------------------------------------
          189┆ for (uint256 k = 0; k < length; k++) {
            ⋮┆----------------------------------------
          204┆ for (uint256 i = 0; i < length / 2; i++) {
            ⋮┆----------------------------------------
          223┆ for (uint256 i = 0; i < index; i++) {
            ⋮┆----------------------------------------
          226┆ for (uint256 j = index + 1; j < length; j++) {
            ⋮┆----------------------------------------
          255┆ for (uint256 i = index; i < length - 1; i++) {
            ⋮┆----------------------------------------
          306┆ for (uint256 i = 0; i < A.length - 1; i++) {
            ⋮┆----------------------------------------
          307┆ for (uint256 j = i + 1; j < A.length; j++) {
            ⋮┆----------------------------------------
          326┆ for (uint256 i = 0; i < A.length; i++) {
            ⋮┆----------------------------------------
          346┆ for (uint256 i = 0; i < indexArray.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
          252┆ revert("Error: index out of bounds");
            ⋮┆----------------------------------------
          270┆ revert("Error: index out of bounds");
            ⋮┆----------------------------------------
          289┆ revert("Error: entry not found");
            ⋮┆----------------------------------------
       solidity.performance.use-prefix-decrement-not-postfix                    
          Consider using the prefix decrement expression whenever the return    
  value is not needed. The                                                      
          prefix decrement expression is cheaper in terms of gas.               
                                                                                
           40┆ for (uint256 i = length; i > 0; i--) {
            ⋮┆----------------------------------------
          258┆ A.length--;
            ⋮┆----------------------------------------
          277┆ A.length--;
            ⋮┆----------------------------------------
       solidity.performance.use-prefix-increment-not-postfix                    
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
                                                                                
           16┆ for (uint256 i = 0; i < length; i++) {
            ⋮┆----------------------------------------
           58┆ for (uint256 i = 0; i < aLength; i++) {
            ⋮┆----------------------------------------
           61┆ for (uint256 j = 0; j < bLength; j++) {
            ⋮┆----------------------------------------
           75┆ for (uint256 i = 0; i < A.length; i++) {
            ⋮┆----------------------------------------
           90┆ for (uint256 i = 0; i < length; i++) {
            ⋮┆----------------------------------------
          105┆ for (uint256 i = 0; i < length; i++) {
            ⋮┆----------------------------------------
          108┆ newLength++;
            ⋮┆----------------------------------------
          113┆ for (uint256 k = 0; k < length; k++) {
            ⋮┆----------------------------------------
          116┆ j++;
            ⋮┆----------------------------------------
          142┆ for (uint256 i = 0; i < A.length; i++) {
            ⋮┆----------------------------------------
          144┆ count++;
            ⋮┆----------------------------------------
          146┆ for (uint256 j = 0; j < B.length; j++) {
            ⋮┆----------------------------------------
          149┆ count++;
            ⋮┆----------------------------------------
          154┆ for (uint256 m = 0; m < A.length; m++) {
            ⋮┆----------------------------------------
          157┆ k++;
            ⋮┆----------------------------------------
          160┆ for (uint256 n = 0; n < B.length; n++) {
            ⋮┆----------------------------------------
          163┆ k++;
            ⋮┆----------------------------------------
          180┆ for (uint256 i = 0; i < length; i++) {
            ⋮┆----------------------------------------
          184┆ count++;
            ⋮┆----------------------------------------
          189┆ for (uint256 k = 0; k < length; k++) {
            ⋮┆----------------------------------------
          192┆ j++;
            ⋮┆----------------------------------------
          204┆ for (uint256 i = 0; i < length / 2; i++) {
            ⋮┆----------------------------------------
          223┆ for (uint256 i = 0; i < index; i++) {
            ⋮┆----------------------------------------
          226┆ for (uint256 j = index + 1; j < length; j++) {
            ⋮┆----------------------------------------
          255┆ for (uint256 i = index; i < length - 1; i++) {
            ⋮┆----------------------------------------
          306┆ for (uint256 i = 0; i < A.length - 1; i++) {
            ⋮┆----------------------------------------
          307┆ for (uint256 j = i + 1; j < A.length; j++) {
            ⋮┆----------------------------------------
          326┆ for (uint256 i = 0; i < A.length; i++) {
            ⋮┆----------------------------------------
          346┆ for (uint256 i = 0; i < indexArray.length; i++) {

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 70 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
