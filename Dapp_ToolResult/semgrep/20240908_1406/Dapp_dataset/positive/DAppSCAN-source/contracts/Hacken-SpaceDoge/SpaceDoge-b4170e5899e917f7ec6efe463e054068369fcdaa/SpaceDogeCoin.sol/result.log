METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 74 Code Findings │
└──────────────────┘
                          
    /sb/SpaceDogeCoin.sol 
       solidity.best-practice.use-ownable2step                                  
          By demanding that the receiver of the owner permissions actively      
  accept via a contract call                                                    
          of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the 
  contract ownership                                                            
          from accidentally being transferred  to an address that cannot handle 
  it.                                                                           
                                                                                
          687┆ contract SpaceDogeCoin is Context, IERC20, Ownable {
            ⋮┆----------------------------------------
       solidity.performance.array-length-outside-loop                           
          Caching the array length outside a loop saves reading it on each      
  iteration, as long as the                                                     
          array's length is not changed during the loop.                        
                                                                                
          862┆ for (uint256 i = 0; i < _excluded.length; i++) {
            ⋮┆----------------------------------------
          864┆ _excluded[i] = _excluded[_excluded.length - 1];
            ⋮┆----------------------------------------
          954┆ for (uint256 i = 0; i < _excluded.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.non-payable-constructor      
          Consider making costructor payable to save gas.
                                                         
          413┆ constructor () internal {
          414┆     address msgSender = _msgSender();
          415┆     _owner = msgSender;
          416┆     emit OwnershipTransferred(address(0), msgSender);
          417┆ }
            ⋮┆----------------------------------------
          741┆ constructor () public {
          742┆     _rOwned[_msgSender()] = _rTotal;
          743┆ 
          744┆     IUniswapV2Router02 _uniswapV2Router =                        
  IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);               
          745┆      // Create a uniswap pair for this new token
          746┆     uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())
          747┆         .createPair(address(this), address(usdt));
          748┆ 
          749┆     // set the rest of the contract variables
          750┆     uniswapV2Router = _uniswapV2Router;
             [hid 7 additional lines, adjust with --max-lines-per-finding] 
       solidity.performance.state-variable-read-in-a-loop                       
          Replace state variable reads and writes within loops with local       
  variable reads and writes.                                                    
                                                                                
          862┆ for (uint256 i = 0; i < _excluded.length; i++) {
            ⋮┆----------------------------------------
          863┆ if (_excluded[i] == account) {
            ⋮┆----------------------------------------
          864┆ _excluded[i] = _excluded[_excluded.length - 1];
            ⋮┆----------------------------------------
          864┆ _excluded[i] = _excluded[_excluded.length - 1];
            ⋮┆----------------------------------------
          864┆ _excluded[i] = _excluded[_excluded.length - 1];
            ⋮┆----------------------------------------
          865┆ _tOwned[account] = 0;
            ⋮┆----------------------------------------
          866┆ _isExcluded[account] = false;
            ⋮┆----------------------------------------
          867┆ _excluded.pop();
            ⋮┆----------------------------------------
          954┆ for (uint256 i = 0; i < _excluded.length; i++) {
            ⋮┆----------------------------------------
          955┆ if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] >   
  tSupply) return (_rTotal, _tTotal);                                           
            ⋮┆----------------------------------------
          955┆ if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] >   
  tSupply) return (_rTotal, _tTotal);                                           
            ⋮┆----------------------------------------
          955┆ if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] >   
  tSupply) return (_rTotal, _tTotal);                                           
            ⋮┆----------------------------------------
          955┆ if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] >   
  tSupply) return (_rTotal, _tTotal);                                           
            ⋮┆----------------------------------------
          955┆ if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] >   
  tSupply) return (_rTotal, _tTotal);                                           
            ⋮┆----------------------------------------
          955┆ if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] >   
  tSupply) return (_rTotal, _tTotal);                                           
            ⋮┆----------------------------------------
          956┆ rSupply = rSupply.sub(_rOwned[_excluded[i]]);
            ⋮┆----------------------------------------
          956┆ rSupply = rSupply.sub(_rOwned[_excluded[i]]);
            ⋮┆----------------------------------------
          957┆ tSupply = tSupply.sub(_tOwned[_excluded[i]]);
            ⋮┆----------------------------------------
          957┆ tSupply = tSupply.sub(_tOwned[_excluded[i]]);
            ⋮┆----------------------------------------
       solidity.performance.unnecessary-checked-arithmetic-in-loop              
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
                                                                                
          862┆ for (uint256 i = 0; i < _excluded.length; i++) {
            ⋮┆----------------------------------------
          954┆ for (uint256 i = 0; i < _excluded.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
          112┆ require(c >= a, "SafeMath: addition overflow");
            ⋮┆----------------------------------------
          167┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          302┆ require(address(this).balance >= amount, "Address: insufficient  
  balance");                                                                    
            ⋮┆----------------------------------------
          306┆ require(success, "Address: unable to send value, recipient may   
  have reverted");                                                              
            ⋮┆----------------------------------------
          363┆ require(address(this).balance >= value, "Address: insufficient   
  balance for call");                                                           
            ⋮┆----------------------------------------
          368┆ require(isContract(target), "Address: call to non-contract");
            ⋮┆----------------------------------------
          430┆ require(_owner == _msgSender(), "Ownable: caller is not the      
  owner");                                                                      
            ⋮┆----------------------------------------
          451┆ require(newOwner != address(0), "Ownable: new owner is the zero  
  address");                                                                    
            ⋮┆----------------------------------------
          470┆ require(_previousOwner == msg.sender, "You don't have permission 
  to unlock");                                                                  
            ⋮┆----------------------------------------
          471┆ require(now > _lockTime , "Contract is locked until 7 days");
            ⋮┆----------------------------------------
          760┆ require(_msgSender() == owner(), "fail");
            ⋮┆----------------------------------------
          826┆ require(!_isExcluded[sender], "Excluded addresses cannot call    
  this function");                                                              
            ⋮┆----------------------------------------
          834┆ require(tAmount <= _tTotal, "Amount must be less than supply");
            ⋮┆----------------------------------------
          845┆ require(rAmount <= _rTotal, "Amount must be less than total      
  reflections");                                                                
            ⋮┆----------------------------------------
          852┆ require(!_isExcluded[account], "Account is already excluded");
            ⋮┆----------------------------------------
          861┆ require(_isExcluded[account], "Account is already excluded");
            ⋮┆----------------------------------------
          912┆ require(_msgSender() == owner(), "fail");
            ⋮┆----------------------------------------
         1003┆ require(owner != address(0), "ERC20: approve from the zero       
  address");                                                                    
            ⋮┆----------------------------------------
         1004┆ require(spender != address(0), "ERC20: approve to the zero       
  address");                                                                    
            ⋮┆----------------------------------------
         1015┆ require(from != address(0), "ERC20: transfer from the zero       
  address");                                                                    
            ⋮┆----------------------------------------
         1016┆ require(to != address(0), "ERC20: transfer to the zero address");
            ⋮┆----------------------------------------
         1017┆ require(amount > 0, "Transfer amount must be greater than zero");
            ⋮┆----------------------------------------
         1019┆ require(amount <= _maxTxAmount, "Transfer amount exceeds the     
  maxTxAmount.");                                                               
            ⋮┆----------------------------------------
       solidity.performance.use-nested-if                                       
          Using nested is cheaper than using && multiple check combinations.    
  There are more                                                                
          advantages, such as easier to read code and better coverage reports.  
                                                                                
          984┆ if(_taxFee == 0 && _liquidityFee == 0) return;
            ⋮┆----------------------------------------
         1018┆ if(from != owner() && to != owner())
         1019┆     require(amount <= _maxTxAmount, "Transfer amount exceeds the 
  maxTxAmount.");                                                               
            ⋮┆----------------------------------------
         1033┆ if (
         1034┆     overMinTokenBalance &&
         1035┆     !inSwapAndLiquify &&
         1036┆     from != uniswapV2Pair &&
         1037┆     swapAndLiquifyEnabled
         1038┆ ) {
         1039┆     contractTokenBalance = numTokensSellToAddToLiquidity;
         1040┆     //add liquidity
         1041┆     swapAndLiquify(contractTokenBalance);
         1042┆ }
            ⋮┆----------------------------------------
         1155┆ if (_isExcluded[sender] && !_isExcluded[recipient]) {
         1156┆     _transferFromExcluded(sender, recipient, amount);
         1157┆ } else if (!_isExcluded[sender] && _isExcluded[recipient]) {
         1158┆     _transferToExcluded(sender, recipient, amount);
         1159┆ } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {
         1160┆     _transferStandard(sender, recipient, amount);
         1161┆ } else if (_isExcluded[sender] && _isExcluded[recipient]) {
         1162┆     // SWC-135-Code With No Effects: L1171 - L1172
         1163┆     _transferBothExcluded(sender, recipient, amount);
         1164┆ } else {
             [hid 2 additional lines, adjust with --max-lines-per-finding] 
         1157┆ } else if (!_isExcluded[sender] && _isExcluded[recipient]) {
         1158┆     _transferToExcluded(sender, recipient, amount);
         1159┆ } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {
         1160┆     _transferStandard(sender, recipient, amount);
         1161┆ } else if (_isExcluded[sender] && _isExcluded[recipient]) {
         1162┆     // SWC-135-Code With No Effects: L1171 - L1172
         1163┆     _transferBothExcluded(sender, recipient, amount);
         1164┆ } else {
         1165┆     _transferStandard(sender, recipient, amount);
         1166┆ }
            ⋮┆----------------------------------------
         1159┆ } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {
         1160┆     _transferStandard(sender, recipient, amount);
         1161┆ } else if (_isExcluded[sender] && _isExcluded[recipient]) {
         1162┆     // SWC-135-Code With No Effects: L1171 - L1172
         1163┆     _transferBothExcluded(sender, recipient, amount);
         1164┆ } else {
         1165┆     _transferStandard(sender, recipient, amount);
         1166┆ }
            ⋮┆----------------------------------------
         1161┆ } else if (_isExcluded[sender] && _isExcluded[recipient]) {
         1162┆     // SWC-135-Code With No Effects: L1171 - L1172
         1163┆     _transferBothExcluded(sender, recipient, amount);
         1164┆ } else {
         1165┆     _transferStandard(sender, recipient, amount);
         1166┆ }
            ⋮┆----------------------------------------
       solidity.performance.use-prefix-increment-not-postfix                    
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
                                                                                
          862┆ for (uint256 i = 0; i < _excluded.length; i++) {
            ⋮┆----------------------------------------
          954┆ for (uint256 i = 0; i < _excluded.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
          167┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          306┆ require(success, "Address: unable to send value, recipient may   
  have reverted");                                                              
            ⋮┆----------------------------------------
          363┆ require(address(this).balance >= value, "Address: insufficient   
  balance for call");                                                           
            ⋮┆----------------------------------------
          451┆ require(newOwner != address(0), "Ownable: new owner is the zero  
  address");                                                                    
            ⋮┆----------------------------------------
          470┆ require(_previousOwner == msg.sender, "You don't have permission 
  to unlock");                                                                  
            ⋮┆----------------------------------------
          826┆ require(!_isExcluded[sender], "Excluded addresses cannot call    
  this function");                                                              
            ⋮┆----------------------------------------
          845┆ require(rAmount <= _rTotal, "Amount must be less than total      
  reflections");                                                                
            ⋮┆----------------------------------------
         1003┆ require(owner != address(0), "ERC20: approve from the zero       
  address");                                                                    
            ⋮┆----------------------------------------
         1004┆ require(spender != address(0), "ERC20: approve to the zero       
  address");                                                                    
            ⋮┆----------------------------------------
         1015┆ require(from != address(0), "ERC20: transfer from the zero       
  address");                                                                    
            ⋮┆----------------------------------------
         1016┆ require(to != address(0), "ERC20: transfer to the zero address");
            ⋮┆----------------------------------------
         1017┆ require(amount > 0, "Transfer amount must be greater than zero");
            ⋮┆----------------------------------------
         1019┆ require(amount <= _maxTxAmount, "Transfer amount exceeds the     
  maxTxAmount.");                                                               
            ⋮┆----------------------------------------
       solidity.security.no-slippage-check          
          No slippage check in a Uniswap v2/v3 trade
                                                    
         1088┆                                                                  
  uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(        
         1089┆     tokenAmount,
         1090┆     0, // accept any amount of ETH
         1091┆     path,
         1092┆     address(wrap),
         1093┆     block.timestamp
         1094┆ );
            ⋮┆----------------------------------------
         1108┆                                                                  
  uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(           
         1109┆     tokenAmount,
         1110┆     0, // accept any amount of ETH
         1111┆     path,
         1112┆     address(this),
         1113┆     block.timestamp
         1114┆ );

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 74 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
