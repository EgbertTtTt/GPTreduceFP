METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 30 Code Findings │
└──────────────────┘
                         
    /sb/BaseFilterV1.sol 
       solidity.performance.array-length-outside-loop                           
          Caching the array length outside a loop saves reading it on each      
  iteration, as long as the                                                     
          array's length is not changed during the loop.                        
                                                                                
          272┆ for (; i < _NFT_IDS_.length; i++) {
            ⋮┆----------------------------------------
          455┆ for (uint256 i = 0; i < tokenIds.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.init-variables-with-default-value                   
          Uninitialized variables are assigned with the types default value.    
  Explicitly initializing a                                                     
          variable with its default value costs unnecessary gas.                
                                                                                
          223┆ bool public _NFT_IN_TOGGLE_ = false;
            ⋮┆----------------------------------------
          228┆ bool public _NFT_RANDOM_OUT_TOGGLE_ = false;
            ⋮┆----------------------------------------
          233┆ bool public _NFT_TARGET_OUT_TOGGLE_ = false;
            ⋮┆----------------------------------------
       solidity.performance.state-variable-read-in-a-loop                       
          Replace state variable reads and writes within loops with local       
  variable reads and writes.                                                    
                                                                                
          272┆ for (; i < _NFT_IDS_.length; i++) {
            ⋮┆----------------------------------------
          273┆ if (_NFT_IDS_[i] == tokenId) break;
            ⋮┆----------------------------------------
          456┆ _SPREAD_IDS_REGISTRY_[tokenIds[i]] = isRegistered[i];
            ⋮┆----------------------------------------
       solidity.performance.unnecessary-checked-arithmetic-in-loop              
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
                                                                                
          455┆ for (uint256 i = 0; i < tokenIds.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
           19┆ require(!_INITIALIZED_, "DODO_INITIALIZED");
            ⋮┆----------------------------------------
           24┆ require(msg.sender == _OWNER_, "NOT_OWNER");
            ⋮┆----------------------------------------
           41┆ require(msg.sender == _NEW_OWNER_, "INVALID_CLAIM");
            ⋮┆----------------------------------------
           55┆ require(c / a == b, "MUL_ERROR");
            ⋮┆----------------------------------------
           61┆ require(b > 0, "DIVIDING_ERROR");
            ⋮┆----------------------------------------
           76┆ require(b <= a, "SUB_ERROR");
            ⋮┆----------------------------------------
           82┆ require(c >= a, "ADD_ERROR");
            ⋮┆----------------------------------------
          187┆ require(!_ENTERED_, "REENTRANT");
            ⋮┆----------------------------------------
          236┆ require(msg.sender == IFilterAdmin(_OWNER_)._OWNER_(),           
  "ONLY_SUPER_OWNER");                                                          
            ⋮┆----------------------------------------
          275┆ require(i < _NFT_IDS_.length, "TOKEN_ID_NOT_EXSIT");
            ⋮┆----------------------------------------
          289┆ require(NFTInAmount <= getAvaliableNFTInAmount(),                
  "EXCEDD_IN_AMOUNT");                                                          
            ⋮┆----------------------------------------
          307┆ require(NFTOutAmount <= getAvaliableNFTOutAmount(),              
  "EXCEED_OUT_AMOUNT");                                                         
            ⋮┆----------------------------------------
          325┆ require(NFTOutAmount <= getAvaliableNFTOutAmount(),              
  "EXCEED_OUT_AMOUNT");                                                         
            ⋮┆----------------------------------------
          377┆ require(newCr > DecimalMath.ONE, "CR_INVALID");
            ⋮┆----------------------------------------
          396┆ require(newCr > DecimalMath.ONE, "CR_INVALID");
            ⋮┆----------------------------------------
          415┆ require(newCr > DecimalMath.ONE, "CR_INVALID");
            ⋮┆----------------------------------------
          429┆ require(maxNFTAmount >= minNFTAmount, "AMOUNT_INVALID");
            ⋮┆----------------------------------------
          439┆ require(nftIdStart <= nftIdEnd, "TOKEN_RANGE_INVALID");
            ⋮┆----------------------------------------
          453┆ require(tokenIds.length == isRegistered.length,                  
  "PARAM_NOT_MATCH");                                                           
            ⋮┆----------------------------------------
       solidity.performance.use-prefix-increment-not-postfix                    
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
                                                                                
          272┆ for (; i < _NFT_IDS_.length; i++) {
            ⋮┆----------------------------------------
          455┆ for (uint256 i = 0; i < tokenIds.length; i++) {

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 30 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
