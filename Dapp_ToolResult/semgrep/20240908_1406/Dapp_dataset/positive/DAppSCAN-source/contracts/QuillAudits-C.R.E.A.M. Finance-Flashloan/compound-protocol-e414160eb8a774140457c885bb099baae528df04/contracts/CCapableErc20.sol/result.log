METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 28 Code Findings │
└──────────────────┘
                          
    /sb/CCapableErc20.sol 
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
         1237┆ require(msg.sender == admin, "only admin may initialize the      
  market");                                                                     
            ⋮┆----------------------------------------
         1238┆ require(accrualBlockNumber == 0 && borrowIndex == 0, "market may 
  only be initialized once");                                                   
            ⋮┆----------------------------------------
         1242┆ require(initialExchangeRateMantissa > 0, "initial exchange rate  
  must be greater than zero.");                                                 
            ⋮┆----------------------------------------
         1246┆ require(err == uint(Error.NO_ERROR), "setting comptroller        
  failed");                                                                     
            ⋮┆----------------------------------------
         1254┆ require(err == uint(Error.NO_ERROR), "setting interest rate model
  failed");                                                                     
            ⋮┆----------------------------------------
         1427┆ require(accrueInterest() == uint(Error.NO_ERROR), "accrue        
  interest failed");                                                            
            ⋮┆----------------------------------------
         1437┆ require(accrueInterest() == uint(Error.NO_ERROR), "accrue        
  interest failed");                                                            
            ⋮┆----------------------------------------
         1479┆ require(accrueInterest() == uint(Error.NO_ERROR), "accrue        
  interest failed");                                                            
            ⋮┆----------------------------------------
         1548┆ require(borrowRateMantissa <= borrowRateMaxMantissa, "borrow rate
  is absurdly high");                                                           
            ⋮┆----------------------------------------
         1727┆ require(redeemTokensIn == 0 || redeemAmountIn == 0, "one of      
  redeemTokensIn or redeemAmountIn must be zero");                              
            ⋮┆----------------------------------------
         2074┆ require(amountSeizeError == uint(Error.NO_ERROR),                
  "LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED");                       
            ⋮┆----------------------------------------
         2077┆ require(cTokenCollateral.balanceOf(borrower) >= seizeTokens,     
  "LIQUIDATE_SEIZE_TOO_MUCH");                                                  
            ⋮┆----------------------------------------
         2088┆ require(seizeError == uint(Error.NO_ERROR), "token seizure       
  failed");                                                                     
            ⋮┆----------------------------------------
         2226┆ require(newComptroller.isComptroller(), "marker method returned  
  false");                                                                      
            ⋮┆----------------------------------------
         2444┆ require(newInterestRateModel.isInterestRateModel(), "marker      
  method returned false");                                                      
            ⋮┆----------------------------------------
         2484┆ require(_notEntered, "re-entered");
            ⋮┆----------------------------------------
         2678┆ require(success, "TOKEN_TRANSFER_IN_FAILED");
            ⋮┆----------------------------------------
         2714┆ require(success, "TOKEN_TRANSFER_OUT_FAILED");
            ⋮┆----------------------------------------
         2721┆ require(cashBefore >= amount, "INSUFFICIENT_LIQUIDITY");
            ⋮┆----------------------------------------
         2734┆ require(cashOnChainAfter == add_(cashOnChainBefore, totalFee),   
  "BALANCE_INCONSISTENT");                                                      
            ⋮┆----------------------------------------
       solidity.performance.use-multiple-require                                
          Using multiple require statements is cheaper than using && multiple   
  check combinations.                                                           
          There are more advantages, such as easier to read code and better     
  coverage reports.                                                             
                                                                                
         1238┆ require(accrualBlockNumber == 0 && borrowIndex == 0, "market may 
  only be initialized once");                                                   
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
         1237┆ require(msg.sender == admin, "only admin may initialize the      
  market");                                                                     
            ⋮┆----------------------------------------
         1238┆ require(accrualBlockNumber == 0 && borrowIndex == 0, "market may 
  only be initialized once");                                                   
            ⋮┆----------------------------------------
         1242┆ require(initialExchangeRateMantissa > 0, "initial exchange rate  
  must be greater than zero.");                                                 
            ⋮┆----------------------------------------
         1254┆ require(err == uint(Error.NO_ERROR), "setting interest rate model
  failed");                                                                     
            ⋮┆----------------------------------------
         1727┆ require(redeemTokensIn == 0 || redeemAmountIn == 0, "one of      
  redeemTokensIn or redeemAmountIn must be zero");                              
            ⋮┆----------------------------------------
         2074┆ require(amountSeizeError == uint(Error.NO_ERROR),                
  "LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED");                       
            ⋮┆----------------------------------------
       solidity.security.compound-borrowfresh-reentrancy                        
          Function borrowFresh() in Compound performs state update after        
  doTransferOut()                                                               
                                                                                
         1868┆ doTransferOut(borrower, borrowAmount);

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 28 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
