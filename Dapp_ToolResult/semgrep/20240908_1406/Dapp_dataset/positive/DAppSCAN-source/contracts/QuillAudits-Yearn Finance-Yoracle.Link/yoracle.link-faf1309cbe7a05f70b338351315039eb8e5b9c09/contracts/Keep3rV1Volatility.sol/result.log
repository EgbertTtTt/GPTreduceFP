METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                   
                   
┌─────────────────┐
│ 4 Code Findings │
└─────────────────┘
                               
    /sb/Keep3rV1Volatility.sol 
       solidity.performance.array-length-outside-loop                           
          Caching the array length outside a loop saves reading it on each      
  iteration, as long as the                                                     
          array's length is not changed during the loop.                        
                                                                                
          244┆ for (uint8 i = 1; i <= (p.length-1); i++) {
            ⋮┆----------------------------------------
       solidity.performance.unnecessary-checked-arithmetic-in-loop              
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
                                                                                
          244┆ for (uint8 i = 1; i <= (p.length-1); i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-prefix-increment-not-postfix                    
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
                                                                                
          244┆ for (uint8 i = 1; i <= (p.length-1); i++) {
            ⋮┆----------------------------------------
       solidity.security.keeper-network-oracle-manipulation                     
          Keep3rV2.current() call has high data freshness, but it has low       
  security,  an exploiter                                                       
          simply needs to manipulate 2 data points to be able to impact the     
  feed.                                                                         
                                                                                
          157┆ uint price = KV1O.current(tokenIn,                               
  uint(10)**IERC20(tokenIn).decimals(), tokenOut);                              

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 4 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
