METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 84 Code Findings │
└──────────────────┘
                           
    /sb/Keep3rV1Oracle.sol 
       solidity.performance.array-length-outside-loop                           
          Caching the array length outside a loop saves reading it on each      
  iteration, as long as the                                                     
          array's length is not changed during the loop.                        
                                                                                
          412┆ for (uint i; i < path.length - 1; i++) {
            ⋮┆----------------------------------------
          423┆ for (uint i = path.length - 1; i > 0; i--) {
            ⋮┆----------------------------------------
          584┆ for (uint i = 0; i < _pairs.length; i++) {
            ⋮┆----------------------------------------
          605┆ for (uint i = 0; i < _pairs.length; i++) {
            ⋮┆----------------------------------------
          798┆ for(uint i = 0; i < numbers.length; i++) {
            ⋮┆----------------------------------------
          804┆ for(i = 0; i < numbers.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.non-payable-constructor      
          Consider making costructor payable to save gas.
                                                         
          544┆ constructor() public {
          545┆     governance = msg.sender;
          546┆ }
            ⋮┆----------------------------------------
       solidity.performance.state-variable-read-in-a-loop                       
          Replace state variable reads and writes within loops with local       
  variable reads and writes.                                                    
                                                                                
          584┆ for (uint i = 0; i < _pairs.length; i++) {
            ⋮┆----------------------------------------
          585┆ if (_update(_pairs[i])) {
            ⋮┆----------------------------------------
          593┆ if (_update(_pairs[i])) {
            ⋮┆----------------------------------------
          605┆ for (uint i = 0; i < _pairs.length; i++) {
            ⋮┆----------------------------------------
          606┆ if (workable(_pairs[i])) {
            ⋮┆----------------------------------------
          680┆ observations[pair][i].price0Cumulative,
            ⋮┆----------------------------------------
          681┆ observations[pair][nextIndex].price0Cumulative,
            ⋮┆----------------------------------------
          683┆ observations[pair][nextIndex].timestamp -                        
  observations[pair][i].timestamp, amountIn);                                   
            ⋮┆----------------------------------------
          683┆ observations[pair][nextIndex].timestamp -                        
  observations[pair][i].timestamp, amountIn);                                   
            ⋮┆----------------------------------------
          691┆ observations[pair][i].price1Cumulative,
            ⋮┆----------------------------------------
          692┆ observations[pair][nextIndex].price1Cumulative,
            ⋮┆----------------------------------------
          694┆ observations[pair][nextIndex].timestamp -                        
  observations[pair][i].timestamp, amountIn);                                   
            ⋮┆----------------------------------------
          694┆ observations[pair][nextIndex].timestamp -                        
  observations[pair][i].timestamp, amountIn);                                   
            ⋮┆----------------------------------------
          721┆ observations[pair][i].price0Cumulative,
            ⋮┆----------------------------------------
          722┆ observations[pair][nextIndex].price0Cumulative,
            ⋮┆----------------------------------------
          724┆ observations[pair][nextIndex].timestamp -                        
  observations[pair][i].timestamp, amountIn);                                   
            ⋮┆----------------------------------------
          724┆ observations[pair][nextIndex].timestamp -                        
  observations[pair][i].timestamp, amountIn);                                   
            ⋮┆----------------------------------------
          734┆ observations[pair][i].price1Cumulative,
            ⋮┆----------------------------------------
          735┆ observations[pair][nextIndex].price1Cumulative,
            ⋮┆----------------------------------------
          737┆ observations[pair][nextIndex].timestamp -                        
  observations[pair][i].timestamp, amountIn);                                   
            ⋮┆----------------------------------------
          737┆ observations[pair][nextIndex].timestamp -                        
  observations[pair][i].timestamp, amountIn);                                   
            ⋮┆----------------------------------------
       solidity.performance.unnecessary-checked-arithmetic-in-loop              
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
                                                                                
          412┆ for (uint i; i < path.length - 1; i++) {
            ⋮┆----------------------------------------
          584┆ for (uint i = 0; i < _pairs.length; i++) {
            ⋮┆----------------------------------------
          605┆ for (uint i = 0; i < _pairs.length; i++) {
            ⋮┆----------------------------------------
          798┆ for(uint i = 0; i < numbers.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
          101┆ require(x != 0, 'FixedPoint: DIV_BY_ZERO');
            ⋮┆----------------------------------------
          111┆ require(y == 0 || (z = uint(self._x) * y) / y == uint(self._x),  
  "FixedPoint: MULTIPLICATION_OVERFLOW");                                       
            ⋮┆----------------------------------------
          118┆ require(denominator > 0, "FixedPoint: DIV_BY_ZERO");
            ⋮┆----------------------------------------
          192┆ require(c >= a, "SafeMath: addition overflow");
            ⋮┆----------------------------------------
          256┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          355┆ require(tokenA != tokenB, 'UniswapV2Library:                     
  IDENTICAL_ADDRESSES');                                                        
            ⋮┆----------------------------------------
          357┆ require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');
            ⋮┆----------------------------------------
          380┆ require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');
            ⋮┆----------------------------------------
          381┆ require(reserveA > 0 && reserveB > 0, 'UniswapV2Library:         
  INSUFFICIENT_LIQUIDITY');                                                     
            ⋮┆----------------------------------------
          388┆ require(amountIn > 0, 'UniswapV2Library:                         
  INSUFFICIENT_INPUT_AMOUNT');                                                  
            ⋮┆----------------------------------------
          389┆ require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library:      
  INSUFFICIENT_LIQUIDITY');                                                     
            ⋮┆----------------------------------------
          399┆ require(amountOut > 0, 'UniswapV2Library:                        
  INSUFFICIENT_OUTPUT_AMOUNT');                                                 
            ⋮┆----------------------------------------
          400┆ require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library:      
  INSUFFICIENT_LIQUIDITY');                                                     
            ⋮┆----------------------------------------
          409┆ require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');
            ⋮┆----------------------------------------
          420┆ require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');
            ⋮┆----------------------------------------
          476┆ require(KP3R.isMinKeeper(msg.sender, minKeep, 0, 0), "::isKeeper:
  keeper is not registered");                                                   
            ⋮┆----------------------------------------
          482┆ require(KP3R.isMinKeeper(msg.sender, minKeep, 0, 0), "::isKeeper:
  keeper is not registered");                                                   
            ⋮┆----------------------------------------
          494┆ require(msg.sender == governance, "setGovernance: !gov");
            ⋮┆----------------------------------------
          503┆ require(msg.sender == governance, "setGovernance: !gov");
            ⋮┆----------------------------------------
          511┆ require(msg.sender == pendingGovernance, "acceptGovernance:      
  !pendingGov");                                                                
            ⋮┆----------------------------------------
          558┆ require(msg.sender == governance, "UniswapV2Oracle::add: !gov");
            ⋮┆----------------------------------------
          560┆ require(!_known[pair], "known");
            ⋮┆----------------------------------------
          570┆ require(worked, "UniswapV2Oracle: !work");
            ⋮┆----------------------------------------
          575┆ require(worked, "UniswapV2Oracle: !work");
            ⋮┆----------------------------------------
          643┆ require(_valid(pair, periodSize.mul(2)), "UniswapV2Oracle::quote:
  stale prices");                                                               
            ⋮┆----------------------------------------
          664┆ require(_valid(pair, periodSize.mul(granularity)),               
  "UniswapV2Oracle::quote: stale prices");                                      
            ⋮┆----------------------------------------
       solidity.performance.use-multiple-require                                
          Using multiple require statements is cheaper than using && multiple   
  check combinations.                                                           
          There are more advantages, such as easier to read code and better     
  coverage reports.                                                             
                                                                                
          381┆ require(reserveA > 0 && reserveB > 0, 'UniswapV2Library:         
  INSUFFICIENT_LIQUIDITY');                                                     
            ⋮┆----------------------------------------
          389┆ require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library:      
  INSUFFICIENT_LIQUIDITY');                                                     
            ⋮┆----------------------------------------
          400┆ require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library:      
  INSUFFICIENT_LIQUIDITY');                                                     
            ⋮┆----------------------------------------
       solidity.performance.use-prefix-decrement-not-postfix                    
          Consider using the prefix decrement expression whenever the return    
  value is not needed. The                                                      
          prefix decrement expression is cheaper in terms of gas.               
                                                                                
          423┆ for (uint i = path.length - 1; i > 0; i--) {
            ⋮┆----------------------------------------
       solidity.performance.use-prefix-increment-not-postfix                    
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
                                                                                
          412┆ for (uint i; i < path.length - 1; i++) {
            ⋮┆----------------------------------------
          584┆ for (uint i = 0; i < _pairs.length; i++) {
            ⋮┆----------------------------------------
          592┆ for (; i < length; i++) {
            ⋮┆----------------------------------------
          605┆ for (uint i = 0; i < _pairs.length; i++) {
            ⋮┆----------------------------------------
          676┆ for (; i < length; i++) {
            ⋮┆----------------------------------------
          686┆ for (; i < length; i++) {
            ⋮┆----------------------------------------
          798┆ for(uint i = 0; i < numbers.length; i++) {
            ⋮┆----------------------------------------
          804┆ for(i = 0; i < numbers.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
          111┆ require(y == 0 || (z = uint(self._x) * y) / y == uint(self._x),  
  "FixedPoint: MULTIPLICATION_OVERFLOW");                                       
            ⋮┆----------------------------------------
          256┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          355┆ require(tokenA != tokenB, 'UniswapV2Library:                     
  IDENTICAL_ADDRESSES');                                                        
            ⋮┆----------------------------------------
          380┆ require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');
            ⋮┆----------------------------------------
          381┆ require(reserveA > 0 && reserveB > 0, 'UniswapV2Library:         
  INSUFFICIENT_LIQUIDITY');                                                     
            ⋮┆----------------------------------------
          388┆ require(amountIn > 0, 'UniswapV2Library:                         
  INSUFFICIENT_INPUT_AMOUNT');                                                  
            ⋮┆----------------------------------------
          389┆ require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library:      
  INSUFFICIENT_LIQUIDITY');                                                     
            ⋮┆----------------------------------------
          399┆ require(amountOut > 0, 'UniswapV2Library:                        
  INSUFFICIENT_OUTPUT_AMOUNT');                                                 
            ⋮┆----------------------------------------
          400┆ require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library:      
  INSUFFICIENT_LIQUIDITY');                                                     
            ⋮┆----------------------------------------
          476┆ require(KP3R.isMinKeeper(msg.sender, minKeep, 0, 0), "::isKeeper:
  keeper is not registered");                                                   
            ⋮┆----------------------------------------
          482┆ require(KP3R.isMinKeeper(msg.sender, minKeep, 0, 0), "::isKeeper:
  keeper is not registered");                                                   
            ⋮┆----------------------------------------
          643┆ require(_valid(pair, periodSize.mul(2)), "UniswapV2Oracle::quote:
  stale prices");                                                               
            ⋮┆----------------------------------------
          664┆ require(_valid(pair, periodSize.mul(granularity)),               
  "UniswapV2Oracle::quote: stale prices");                                      
            ⋮┆----------------------------------------
       solidity.security.no-slippage-check          
          No slippage check in a Uniswap v2/v3 trade
                                                    
          855┆ uint[] memory amounts = UNI.swapExactTokensForTokens(_amount,    
  uint256(0), path, address(this), now.add(1800));                              

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 84 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
