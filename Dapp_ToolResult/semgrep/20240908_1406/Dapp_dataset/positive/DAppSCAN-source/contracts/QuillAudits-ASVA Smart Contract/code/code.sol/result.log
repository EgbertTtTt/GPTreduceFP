METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 33 Code Findings │
└──────────────────┘
                 
    /sb/code.sol 
       solidity.best-practice.use-ownable2step                                  
          By demanding that the receiver of the owner permissions actively      
  accept via a contract call                                                    
          of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the 
  contract ownership                                                            
          from accidentally being transferred  to an address that cannot handle 
  it.                                                                           
                                                                                
          908┆ contract ASVA is BEP20Burnable, Ownable {
            ⋮┆----------------------------------------
       solidity.performance.non-payable-constructor      
          Consider making costructor payable to save gas.
                                                         
          368┆ constructor (string memory name_, string memory symbol_) public {
          369┆     _name = name_;
          370┆     _symbol = symbol_;
          371┆     _decimals = 18;
          372┆ }
            ⋮┆----------------------------------------
          947┆ constructor(address _user) BEP20("Asva finance", "ASVA") {
          948┆     seedToken =                                                  
  (initialSupply.mul(seedTokenPercentage)).div(percentageDivider);              
          949┆     privateSaleToken =                                           
  (initialSupply.mul(privateSalePercentage)).div(percentageDivider);            
          950┆     publicSaleToken =                                            
  (initialSupply.mul(publicSalePercentage)).div(percentageDivider);             
          951┆     liquidityToken =                                             
  (initialSupply.mul(liquidityPercentage)).div(percentageDivider);              
          952┆     teamToken =                                                  
  (initialSupply.mul(teamPercentage)).div(percentageDivider);                   
          953┆     marketingToken =                                             
  (initialSupply.mul(marketingPercentage)).div(percentageDivider);              
          954┆     partnersToken =                                              
  (initialSupply.mul(partnersPercentage)).div(percentageDivider);               
          955┆     stakingToken =                                               
  (initialSupply.mul(stakingPercentage)).div(percentageDivider);                
          956┆     reserveToken =                                               
  (initialSupply.mul(reserveFundPercentage)).div(percentageDivider);            
             [hid 2 additional lines, adjust with --max-lines-per-finding] 
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
          193┆ require(c >= a, "SafeMath: addition overflow");
            ⋮┆----------------------------------------
          208┆ require(b <= a, "SafeMath: subtraction overflow");
            ⋮┆----------------------------------------
          225┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          242┆ require(b > 0, "SafeMath: division by zero");
            ⋮┆----------------------------------------
          259┆ require(b > 0, "SafeMath: modulo by zero");
            ⋮┆----------------------------------------
          522┆ require(sender != address(0), "BEP20: transfer from the zero     
  address");                                                                    
            ⋮┆----------------------------------------
          523┆ require(recipient != address(0), "BEP20: transfer to the zero    
  address");                                                                    
            ⋮┆----------------------------------------
          542┆ require(account != address(0), "BEP20: mint to the zero          
  address");                                                                    
            ⋮┆----------------------------------------
          563┆ require(account != address(0), "BEP20: burn from the zero        
  address");                                                                    
            ⋮┆----------------------------------------
          586┆ require(owner != address(0), "BEP20: approve from the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          587┆ require(spender != address(0), "BEP20: approve to the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          706┆ require(address(this).balance >= amount, "Address: insufficient  
  balance");                                                                    
            ⋮┆----------------------------------------
          710┆ require(success, "Address: unable to send value, recipient may   
  have reverted");                                                              
            ⋮┆----------------------------------------
          767┆ require(address(this).balance >= value, "Address: insufficient   
  balance for call");                                                           
            ⋮┆----------------------------------------
          768┆ require(isContract(target), "Address: call to non-contract");
            ⋮┆----------------------------------------
          792┆ require(isContract(target), "Address: static call to             
  non-contract");                                                               
            ⋮┆----------------------------------------
          816┆ require(isContract(target), "Address: delegate call to           
  non-contract");                                                               
            ⋮┆----------------------------------------
          880┆ require(owner() == _msgSender(), "Ownable: caller is not the     
  owner");                                                                      
            ⋮┆----------------------------------------
          901┆ require(newOwner != address(0), "Ownable: new owner is the zero  
  address");                                                                    
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
          225┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          522┆ require(sender != address(0), "BEP20: transfer from the zero     
  address");                                                                    
            ⋮┆----------------------------------------
          523┆ require(recipient != address(0), "BEP20: transfer to the zero    
  address");                                                                    
            ⋮┆----------------------------------------
          563┆ require(account != address(0), "BEP20: burn from the zero        
  address");                                                                    
            ⋮┆----------------------------------------
          586┆ require(owner != address(0), "BEP20: approve from the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          587┆ require(spender != address(0), "BEP20: approve to the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          710┆ require(success, "Address: unable to send value, recipient may   
  have reverted");                                                              
            ⋮┆----------------------------------------
          767┆ require(address(this).balance >= value, "Address: insufficient   
  balance for call");                                                           
            ⋮┆----------------------------------------
          792┆ require(isContract(target), "Address: static call to             
  non-contract");                                                               
            ⋮┆----------------------------------------
          816┆ require(isContract(target), "Address: delegate call to           
  non-contract");                                                               
            ⋮┆----------------------------------------
          901┆ require(newOwner != address(0), "Ownable: new owner is the zero  
  address");                                                                    

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 33 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
