METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 72 Code Findings │
└──────────────────┘
                 
    /sb/Pool.sol 
       solidity.best-practice.use-ownable2step                                  
          By demanding that the receiver of the owner permissions actively      
  accept via a contract call                                                    
          of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the 
  contract ownership                                                            
          from accidentally being transferred  to an address that cannot handle 
  it.                                                                           
                                                                                
         1020┆ contract Pool is Ownable, Lendable, Borrowable {
            ⋮┆----------------------------------------
       solidity.performance.array-length-outside-loop                           
          Caching the array length outside a loop saves reading it on each      
  iteration, as long as the                                                     
          array's length is not changed during the loop.                        
                                                                                
          657┆ for (uint8 i = 0; i < creditLines.length; i++) {
            ⋮┆----------------------------------------
          665┆ for (uint8 i = 0; i < creditLines.length; i++) {
            ⋮┆----------------------------------------
          678┆ for(uint8 i=0; i < loansIdsByAddress[_borrower].length; i++) {
            ⋮┆----------------------------------------
          691┆ for(uint8 i=0; i < loansIdsByAddress[_borrower].length; i++) {
            ⋮┆----------------------------------------
         1167┆ for (uint8 i = 0; i < creditLines.length; i++) {
            ⋮┆----------------------------------------
         1237┆ for(uint8 i=0; i < _gracePeriod.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.inefficient-state-variable-increment             
          <x> += <y> costs more gas than <x> = <x> + <y> for state variables.
                                                                             
          113┆ _totalSupply += amount;
            ⋮┆----------------------------------------
       solidity.performance.non-payable-constructor      
          Consider making costructor payable to save gas.
                                                         
           44┆ constructor(string memory name_, string memory symbol_) {
           45┆     _name = name_;
           46┆     _symbol = symbol_;
           47┆ }
            ⋮┆----------------------------------------
          175┆ constructor(
          176┆     string memory name,
          177┆     string memory underlyingSymbol
          178┆     ) ERC20Mintable(name,                                        
  createPoolTokenSymbol(underlyingSymbol)) {}                                   
            ⋮┆----------------------------------------
       solidity.performance.state-variable-read-in-a-loop                       
          Replace state variable reads and writes within loops with local       
  variable reads and writes.                                                    
                                                                                
          657┆ for (uint8 i = 0; i < creditLines.length; i++) {
            ⋮┆----------------------------------------
          658┆ total += creditLines[i].principal;
            ⋮┆----------------------------------------
          665┆ for (uint8 i = 0; i < creditLines.length; i++) {
            ⋮┆----------------------------------------
          666┆ total += creditLines[i].interestRate;
            ⋮┆----------------------------------------
          678┆ for(uint8 i=0; i < loansIdsByAddress[_borrower].length; i++) {
            ⋮┆----------------------------------------
          679┆ uint256 loanId = loansIdsByAddress[_borrower][i];
            ⋮┆----------------------------------------
          681┆ uint256 principal = creditLines[loanId].principal;
            ⋮┆----------------------------------------
          682┆ bool penaltyStarted = penaltyInfo[loanId].isOpened;
            ⋮┆----------------------------------------
          691┆ for(uint8 i=0; i < loansIdsByAddress[_borrower].length; i++) {
            ⋮┆----------------------------------------
          692┆ balance +=                                                       
  borrowBalanceSnapshot(loansIdsByAddress[_borrower][i]);                       
            ⋮┆----------------------------------------
       solidity.performance.unnecessary-checked-arithmetic-in-loop              
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
                                                                                
          657┆ for (uint8 i = 0; i < creditLines.length; i++) {
            ⋮┆----------------------------------------
          665┆ for (uint8 i = 0; i < creditLines.length; i++) {
            ⋮┆----------------------------------------
          678┆ for(uint8 i=0; i < loansIdsByAddress[_borrower].length; i++) {
            ⋮┆----------------------------------------
          691┆ for(uint8 i=0; i < loansIdsByAddress[_borrower].length; i++) {
            ⋮┆----------------------------------------
         1167┆ for (uint8 i = 0; i < creditLines.length; i++) {
            ⋮┆----------------------------------------
         1237┆ for(uint8 i=0; i < _gracePeriod.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
           78┆ require(currentAllowance >= amount, "ERC20: transfer amount      
  exceeds allowance");                                                          
            ⋮┆----------------------------------------
           97┆ require(sender != address(0), "ERC20: transfer from the zero     
  address");                                                                    
            ⋮┆----------------------------------------
           98┆ require(recipient != address(0), "ERC20: transfer to the zero    
  address");                                                                    
            ⋮┆----------------------------------------
          101┆ require(senderBalance >= amount, "ERC20: transfer amount exceeds 
  balance");                                                                    
            ⋮┆----------------------------------------
          111┆ require(account != address(0), "ERC20: mint to the zero          
  address");                                                                    
            ⋮┆----------------------------------------
          119┆ require(account != address(0), "ERC20: burn from the zero        
  address");                                                                    
            ⋮┆----------------------------------------
          122┆ require(accountBalance >= amount, "ERC20: burn amount exceeds    
  balance");                                                                    
            ⋮┆----------------------------------------
          132┆ require(owner != address(0), "ERC20: approve from the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          133┆ require(spender != address(0), "ERC20: approve to the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          147┆ require(currentAllowance >= amount, "ERC20: burn amount exceeds  
  allowance");                                                                  
            ⋮┆----------------------------------------
          163┆ require(msg.sender == _admin, "ERC20: must have admin role to    
  mint");                                                                       
            ⋮┆----------------------------------------
          227┆ require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
            ⋮┆----------------------------------------
          243┆ require(_address != address(0), "Address must be non-zero");
            ⋮┆----------------------------------------
          507┆ require(_amount == 0 || _tokenAmount == 0, "one of _amount or    
  _tokenAmount must be zero");                                                  
            ⋮┆----------------------------------------
          740┆ require(creditLine.principal == 0, "Debt should be 0");
            ⋮┆----------------------------------------
          791┆ require(vars.mathErr == MathError.NO_ERROR, "borrow: principal   
  failed");                                                                     
            ⋮┆----------------------------------------
          827┆ require(vars.mathErr == MathError.NO_ERROR, "repay: penalty      
  amount failed");                                                              
            ⋮┆----------------------------------------
          838┆ require(vars.mathErr == MathError.NO_ERROR, "repay: principal    
  failed");                                                                     
            ⋮┆----------------------------------------
          848┆ require(closeCreditLineInternal(borrower, loanId) == 0, "close   
  failed");                                                                     
            ⋮┆----------------------------------------
          870┆ require(vars.mathErr == MathError.NO_ERROR, "principal times     
  failed");                                                                     
            ⋮┆----------------------------------------
          873┆ require(vars.mathErr == MathError.NO_ERROR, "borrowBalance       
  failed");                                                                     
            ⋮┆----------------------------------------
          942┆ require(msg.sender == owner, "Only owner can call this           
  function");                                                                   
            ⋮┆----------------------------------------
          957┆ require(_newOwner != address(0), "Address must be non-zero");
            ⋮┆----------------------------------------
          960┆ require(_newOwner != currentOwner, "New owner cannot be the      
  current owner");                                                              
            ⋮┆----------------------------------------
         1040┆ require(!isInitialized, "already initialized");
            ⋮┆----------------------------------------
         1070┆ require(msg.sender == address(controller), "wrong address");
            ⋮┆----------------------------------------
       solidity.performance.use-prefix-increment-not-postfix                    
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
                                                                                
          298┆ len++;
            ⋮┆----------------------------------------
          657┆ for (uint8 i = 0; i < creditLines.length; i++) {
            ⋮┆----------------------------------------
          665┆ for (uint8 i = 0; i < creditLines.length; i++) {
            ⋮┆----------------------------------------
          678┆ for(uint8 i=0; i < loansIdsByAddress[_borrower].length; i++) {
            ⋮┆----------------------------------------
          691┆ for(uint8 i=0; i < loansIdsByAddress[_borrower].length; i++) {
            ⋮┆----------------------------------------
         1167┆ for (uint8 i = 0; i < creditLines.length; i++) {
            ⋮┆----------------------------------------
         1237┆ for(uint8 i=0; i < _gracePeriod.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
           78┆ require(currentAllowance >= amount, "ERC20: transfer amount      
  exceeds allowance");                                                          
            ⋮┆----------------------------------------
           97┆ require(sender != address(0), "ERC20: transfer from the zero     
  address");                                                                    
            ⋮┆----------------------------------------
           98┆ require(recipient != address(0), "ERC20: transfer to the zero    
  address");                                                                    
            ⋮┆----------------------------------------
          101┆ require(senderBalance >= amount, "ERC20: transfer amount exceeds 
  balance");                                                                    
            ⋮┆----------------------------------------
          119┆ require(account != address(0), "ERC20: burn from the zero        
  address");                                                                    
            ⋮┆----------------------------------------
          122┆ require(accountBalance >= amount, "ERC20: burn amount exceeds    
  balance");                                                                    
            ⋮┆----------------------------------------
          132┆ require(owner != address(0), "ERC20: approve from the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          133┆ require(spender != address(0), "ERC20: approve to the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          147┆ require(currentAllowance >= amount, "ERC20: burn amount exceeds  
  allowance");                                                                  
            ⋮┆----------------------------------------
          163┆ require(msg.sender == _admin, "ERC20: must have admin role to    
  mint");                                                                       
            ⋮┆----------------------------------------
          507┆ require(_amount == 0 || _tokenAmount == 0, "one of _amount or    
  _tokenAmount must be zero");                                                  
            ⋮┆----------------------------------------
          942┆ require(msg.sender == owner, "Only owner can call this           
  function");                                                                   
            ⋮┆----------------------------------------
          960┆ require(_newOwner != currentOwner, "New owner cannot be the      
  current owner");                                                              

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 72 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
