METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 49 Code Findings │
└──────────────────┘
                    
    /sb/Vesting.sol 
       solidity.best-practice.use-ownable2step                                  
          By demanding that the receiver of the owner permissions actively      
  accept via a contract call                                                    
          of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the 
  contract ownership                                                            
          from accidentally being transferred  to an address that cannot handle 
  it.                                                                           
                                                                                
          129┆ contract Vesting is ReentrancyGuard, Ownable, NonZeroAddressGuard
  {                                                                             
            ⋮┆----------------------------------------
       solidity.performance.array-length-outside-loop                           
          Caching the array length outside a loop saves reading it on each      
  iteration, as long as the                                                     
          array's length is not changed during the loop.                        
                                                                                
          226┆ for(uint8 i=0; i < entryIdsByRecipient[msg.sender].length; i++) {
            ⋮┆----------------------------------------
          268┆ for(uint8 i=0; i < entryIdsByRecipient[account].length; i++) {
            ⋮┆----------------------------------------
          296┆ for(uint8 i=0; i < entryIdsByRecipient[account].length; i++) {
            ⋮┆----------------------------------------
          327┆ for(uint8 i=0; i < entryIdsByRecipient[account].length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.state-variable-read-in-a-loop                       
          Replace state variable reads and writes within loops with local       
  variable reads and writes.                                                    
                                                                                
          226┆ for(uint8 i=0; i < entryIdsByRecipient[msg.sender].length; i++) {
            ⋮┆----------------------------------------
          227┆ totalAmount += _claim(entryIdsByRecipient[msg.sender][i]);
            ⋮┆----------------------------------------
          268┆ for(uint8 i=0; i < entryIdsByRecipient[account].length; i++) {
            ⋮┆----------------------------------------
          269┆ amount += _balanceOf(entryIdsByRecipient[account][i]);
            ⋮┆----------------------------------------
          296┆ for(uint8 i=0; i < entryIdsByRecipient[account].length; i++) {
            ⋮┆----------------------------------------
          297┆ Entry memory entry = entries[entryIdsByRecipient[account][i]];
            ⋮┆----------------------------------------
          297┆ Entry memory entry = entries[entryIdsByRecipient[account][i]];
            ⋮┆----------------------------------------
          299┆ entryId: entryIdsByRecipient[account][i],
            ⋮┆----------------------------------------
          305┆ available: _balanceOf(entryIdsByRecipient[account][i]),
            ⋮┆----------------------------------------
          327┆ for(uint8 i=0; i < entryIdsByRecipient[account].length; i++) {
            ⋮┆----------------------------------------
          328┆ amount += _lockedOf(entryIdsByRecipient[account][i]);
            ⋮┆----------------------------------------
       solidity.performance.unnecessary-checked-arithmetic-in-loop              
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
                                                                                
          214┆ for(uint8 i=0; i < _entries.length; i++) {
            ⋮┆----------------------------------------
          226┆ for(uint8 i=0; i < entryIdsByRecipient[msg.sender].length; i++) {
            ⋮┆----------------------------------------
          268┆ for(uint8 i=0; i < entryIdsByRecipient[account].length; i++) {
            ⋮┆----------------------------------------
          296┆ for(uint8 i=0; i < entryIdsByRecipient[account].length; i++) {
            ⋮┆----------------------------------------
          327┆ for(uint8 i=0; i < entryIdsByRecipient[account].length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
           56┆ require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
            ⋮┆----------------------------------------
           88┆ require(_address != address(0), "Address must be non-zero");
            ⋮┆----------------------------------------
          101┆ require(msg.sender == owner, "Only owner can call this           
  function");                                                                   
            ⋮┆----------------------------------------
          116┆ require(_newOwner != address(0), "Address must be non-zero");
            ⋮┆----------------------------------------
          119┆ require(_newOwner != currentOwner, "New owner cannot be the      
  current owner");                                                              
            ⋮┆----------------------------------------
          169┆ require(!_initialized, "Already initialized");
            ⋮┆----------------------------------------
          211┆ require(_entries.length  > 0, "empty data");
            ⋮┆----------------------------------------
          212┆ require(_entries.length  <= 80, "exceed max length");
            ⋮┆----------------------------------------
          240┆ require(token.transfer(destination, this.balanceOf()), "transfer 
  failed");                                                                     
            ⋮┆----------------------------------------
          367┆ require(recipient != address(0), "recipient cannot be the zero   
  address");                                                                    
            ⋮┆----------------------------------------
          370┆ require(entry.amount > 0, "amount must be greater than zero");
            ⋮┆----------------------------------------
          371┆ require(entry.unlocked <= entry.amount, "unlocked cannot be      
  greater than amount");                                                        
            ⋮┆----------------------------------------
          372┆ require(entry.end >= entry.start, "End time must be after start  
  time");                                                                       
            ⋮┆----------------------------------------
          373┆ require(entry.end > entry.start + entry.cliff, "cliff must be    
  less than end");                                                              
            ⋮┆----------------------------------------
          376┆ require(entry.start >= currentTimestamp, "Start time must be in  
  the future");                                                                 
            ⋮┆----------------------------------------
          406┆ require(entry.amount > 0, "entry not exists");
            ⋮┆----------------------------------------
          407┆ require(entry.isFireable, "entry not fireable");
            ⋮┆----------------------------------------
          427┆ require(entry.amount >= entry.claimed, "claim exceed vested      
  amount");                                                                     
            ⋮┆----------------------------------------
       solidity.performance.use-prefix-increment-not-postfix                    
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
                                                                                
          214┆ for(uint8 i=0; i < _entries.length; i++) {
            ⋮┆----------------------------------------
          226┆ for(uint8 i=0; i < entryIdsByRecipient[msg.sender].length; i++) {
            ⋮┆----------------------------------------
          268┆ for(uint8 i=0; i < entryIdsByRecipient[account].length; i++) {
            ⋮┆----------------------------------------
          296┆ for(uint8 i=0; i < entryIdsByRecipient[account].length; i++) {
            ⋮┆----------------------------------------
          327┆ for(uint8 i=0; i < entryIdsByRecipient[account].length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
          101┆ require(msg.sender == owner, "Only owner can call this           
  function");                                                                   
            ⋮┆----------------------------------------
          119┆ require(_newOwner != currentOwner, "New owner cannot be the      
  current owner");                                                              
            ⋮┆----------------------------------------
          367┆ require(recipient != address(0), "recipient cannot be the zero   
  address");                                                                    
            ⋮┆----------------------------------------
          371┆ require(entry.unlocked <= entry.amount, "unlocked cannot be      
  greater than amount");                                                        
            ⋮┆----------------------------------------
          372┆ require(entry.end >= entry.start, "End time must be after start  
  time");                                                                       

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 49 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
