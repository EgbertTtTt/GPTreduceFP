METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 35 Code Findings │
└──────────────────┘
                  
    /sb/Asset.sol 
       solidity.best-practice.use-ownable2step                                  
          By demanding that the receiver of the owner permissions actively      
  accept via a contract call                                                    
          of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the 
  contract ownership                                                            
          from accidentally being transferred  to an address that cannot handle 
  it.                                                                           
                                                                                
          276┆ contract Asset is AssetInterface, AssetStorage, Ownable {
            ⋮┆----------------------------------------
       solidity.performance.non-payable-constructor      
          Consider making costructor payable to save gas.
                                                         
           38┆ constructor(string memory name_, string memory symbol_) {
           39┆     _name = name_;
           40┆     _symbol = symbol_;
           41┆ }
            ⋮┆----------------------------------------
          285┆ constructor() ERC721("AmplifyAsset", "AAT") {}
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
           45┆ require(owner != address(0), "ERC721: balance query for the zero 
  address");                                                                    
            ⋮┆----------------------------------------
           51┆ require(owner != address(0), "ERC721: owner query for nonexistent
  token");                                                                      
            ⋮┆----------------------------------------
           64┆ require(_exists(tokenId), "ERC721Metadata: URI query for         
  nonexistent token");                                                          
            ⋮┆----------------------------------------
           76┆ require(to != owner, "ERC721: approval to current owner");
            ⋮┆----------------------------------------
           77┆ require(msg.sender == owner, "ERC721: approve caller is not      
  owner");                                                                      
            ⋮┆----------------------------------------
           83┆ require(_isApprovedOrOwner(msg.sender, tokenId), "ERC721:        
  transfer caller is not owner nor approved");                                  
            ⋮┆----------------------------------------
           89┆ require(_exists(tokenId), "ERC721: operator query for nonexistent
  token");                                                                      
            ⋮┆----------------------------------------
           99┆ require(to != address(0), "ERC721: mint to the zero address");
            ⋮┆----------------------------------------
          100┆ require(!_exists(tokenId), "ERC721: token already minted");
            ⋮┆----------------------------------------
          109┆ require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of    
  token that is not own");                                                      
            ⋮┆----------------------------------------
          110┆ require(to != address(0), "ERC721: transfer to the zero          
  address");                                                                    
            ⋮┆----------------------------------------
          154┆ require(_exists(tokenId), "ERC721URIStorage: URI query for       
  nonexistent token");                                                          
            ⋮┆----------------------------------------
          172┆ require(_exists(tokenId), "ERC721URIStorage: URI set of          
  nonexistent token");                                                          
            ⋮┆----------------------------------------
          249┆ require(msg.sender == owner, "Only owner can call this           
  function");                                                                   
            ⋮┆----------------------------------------
          264┆ require(_newOwner != address(0), "Address must be non-zero");
            ⋮┆----------------------------------------
          267┆ require(_newOwner != currentOwner, "New owner cannot be the      
  current owner");                                                              
            ⋮┆----------------------------------------
          335┆ require(ownerOf(tokenId) == msg.sender, "Only the owner can      
  consume the asset");                                                          
            ⋮┆----------------------------------------
       solidity.performance.use-prefix-increment-not-postfix                    
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
                                                                                
          137┆ digits++;
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
           45┆ require(owner != address(0), "ERC721: balance query for the zero 
  address");                                                                    
            ⋮┆----------------------------------------
           51┆ require(owner != address(0), "ERC721: owner query for nonexistent
  token");                                                                      
            ⋮┆----------------------------------------
           64┆ require(_exists(tokenId), "ERC721Metadata: URI query for         
  nonexistent token");                                                          
            ⋮┆----------------------------------------
           76┆ require(to != owner, "ERC721: approval to current owner");
            ⋮┆----------------------------------------
           77┆ require(msg.sender == owner, "ERC721: approve caller is not      
  owner");                                                                      
            ⋮┆----------------------------------------
           83┆ require(_isApprovedOrOwner(msg.sender, tokenId), "ERC721:        
  transfer caller is not owner nor approved");                                  
            ⋮┆----------------------------------------
           89┆ require(_exists(tokenId), "ERC721: operator query for nonexistent
  token");                                                                      
            ⋮┆----------------------------------------
          109┆ require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of    
  token that is not own");                                                      
            ⋮┆----------------------------------------
          110┆ require(to != address(0), "ERC721: transfer to the zero          
  address");                                                                    
            ⋮┆----------------------------------------
          154┆ require(_exists(tokenId), "ERC721URIStorage: URI query for       
  nonexistent token");                                                          
            ⋮┆----------------------------------------
          172┆ require(_exists(tokenId), "ERC721URIStorage: URI set of          
  nonexistent token");                                                          
            ⋮┆----------------------------------------
          249┆ require(msg.sender == owner, "Only owner can call this           
  function");                                                                   
            ⋮┆----------------------------------------
          267┆ require(_newOwner != currentOwner, "New owner cannot be the      
  current owner");                                                              
            ⋮┆----------------------------------------
          335┆ require(ownerOf(tokenId) == msg.sender, "Only the owner can      
  consume the asset");                                                          

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 35 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
