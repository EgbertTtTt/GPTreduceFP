METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 28 Code Findings │
└──────────────────┘
                              
    /sb/RocketDepositPool.sol 
       solidity.performance.non-payable-constructor      
          Consider making costructor payable to save gas.
                                                         
          589┆ constructor(address _rocketStorageAddress)                       
  RocketBase(_rocketStorageAddress) {                                           
          590┆     version = 1;
          591┆ }
            ⋮┆----------------------------------------
       solidity.performance.unnecessary-checked-arithmetic-in-loop              
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
                                                                                
          673┆ for (uint256 i = 0; i <                                          
  rocketDAOProtocolSettingsDeposit.getMaximumDepositAssignments(); ++i) {       
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
           87┆ require(c >= a, "SafeMath: addition overflow");
            ⋮┆----------------------------------------
          102┆ require(b <= a, "SafeMath: subtraction overflow");
            ⋮┆----------------------------------------
          119┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          136┆ require(b > 0, "SafeMath: division by zero");
            ⋮┆----------------------------------------
          153┆ require(b > 0, "SafeMath: modulo by zero");
            ⋮┆----------------------------------------
          265┆ require(getBool(keccak256(abi.encodePacked("contract.exists",    
  msg.sender))), "Invalid or outdated network contract");                       
            ⋮┆----------------------------------------
          273┆ require(_contractAddress ==                                      
  getAddress(keccak256(abi.encodePacked("contract.address", _contractName))),   
  "Invalid or outdated contract");                                              
            ⋮┆----------------------------------------
          281┆ require(getBool(keccak256(abi.encodePacked("node.exists",        
  _nodeAddress))), "Invalid node");                                             
            ⋮┆----------------------------------------
          289┆ require(getBool(keccak256(abi.encodePacked("dao.trustednodes",   
  "member", _nodeAddress))), "Invalid trusted node");                           
            ⋮┆----------------------------------------
          297┆ require(getBool(keccak256(abi.encodePacked("minipool.exists",    
  _minipoolAddress))), "Invalid minipool");                                     
            ⋮┆----------------------------------------
          306┆ require(getBool(keccak256(abi.encodePacked("access.role",        
  "guardian", msg.sender))), "Account is not a temporary guardian");            
            ⋮┆----------------------------------------
          327┆ require(contractAddress != address(0x0), "Contract not found");
            ⋮┆----------------------------------------
          338┆ require(keccak256(abi.encodePacked(contractName)) !=             
  keccak256(abi.encodePacked("")), "Contract not found");                       
            ⋮┆----------------------------------------
          620┆ require(rocketDAOProtocolSettingsDeposit.getDepositEnabled(),    
  "Deposits into Rocket Pool are currently disabled");                          
            ⋮┆----------------------------------------
          621┆ require(msg.value >=                                             
  rocketDAOProtocolSettingsDeposit.getMinimumDeposit(), "The deposited amount is
  less than the minimum deposit size");                                         
            ⋮┆----------------------------------------
          622┆ require(getBalance().add(msg.value) <=                           
  rocketDAOProtocolSettingsDeposit.getMaximumDepositPoolSize(), "The deposit    
  pool size after depositing exceeds the maximum ... [0m                        
            [shortened a long line from output, adjust with                     
  --max-chars-per-line]                                                         
            ⋮┆----------------------------------------
          670┆                                                                  
  require(rocketDAOProtocolSettingsDeposit.getAssignDepositsEnabled(), "Deposit 
  assignments are currently disabled");                                         
            ⋮┆----------------------------------------
          695┆ require(_amount <= getExcessBalance(), "Insufficient excess      
  balance for withdrawal");                                                     
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
          119┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          265┆ require(getBool(keccak256(abi.encodePacked("contract.exists",    
  msg.sender))), "Invalid or outdated network contract");                       
            ⋮┆----------------------------------------
          306┆ require(getBool(keccak256(abi.encodePacked("access.role",        
  "guardian", msg.sender))), "Account is not a temporary guardian");            
            ⋮┆----------------------------------------
          620┆ require(rocketDAOProtocolSettingsDeposit.getDepositEnabled(),    
  "Deposits into Rocket Pool are currently disabled");                          
            ⋮┆----------------------------------------
          621┆ require(msg.value >=                                             
  rocketDAOProtocolSettingsDeposit.getMinimumDeposit(), "The deposited amount is
  less than the minimum deposit size");                                         
            ⋮┆----------------------------------------
          622┆ require(getBalance().add(msg.value) <=                           
  rocketDAOProtocolSettingsDeposit.getMaximumDepositPoolSize(), "The deposit    
  pool size after depositing exceeds the maximum ... [0m                        
            [shortened a long line from output, adjust with                     
  --max-chars-per-line]                                                         
            ⋮┆----------------------------------------
          670┆                                                                  
  require(rocketDAOProtocolSettingsDeposit.getAssignDepositsEnabled(), "Deposit 
  assignments are currently disabled");                                         
            ⋮┆----------------------------------------
          695┆ require(_amount <= getExcessBalance(), "Insufficient excess      
  balance for withdrawal");                                                     

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 28 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
