METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 36 Code Findings │
└──────────────────┘
                            
    /sb/RocketTokenRETH.sol 
       solidity.performance.non-payable-constructor      
          Consider making costructor payable to save gas.
                                                         
          357┆ constructor (string memory name_, string memory symbol_) public {
          358┆     _name = name_;
          359┆     _symbol = symbol_;
          360┆     _decimals = 18;
          361┆ }
            ⋮┆----------------------------------------
          838┆ constructor(address _rocketStorageAddress)                       
  RocketBase(_rocketStorageAddress) ERC20("Rocket Pool ETH", "rETH") {          
          839┆     // Version
          840┆     version = 1;
          841┆ }
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
          182┆ require(c >= a, "SafeMath: addition overflow");
            ⋮┆----------------------------------------
          197┆ require(b <= a, "SafeMath: subtraction overflow");
            ⋮┆----------------------------------------
          214┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          231┆ require(b > 0, "SafeMath: division by zero");
            ⋮┆----------------------------------------
          248┆ require(b > 0, "SafeMath: modulo by zero");
            ⋮┆----------------------------------------
          511┆ require(sender != address(0), "ERC20: transfer from the zero     
  address");                                                                    
            ⋮┆----------------------------------------
          512┆ require(recipient != address(0), "ERC20: transfer to the zero    
  address");                                                                    
            ⋮┆----------------------------------------
          531┆ require(account != address(0), "ERC20: mint to the zero          
  address");                                                                    
            ⋮┆----------------------------------------
          552┆ require(account != address(0), "ERC20: burn from the zero        
  address");                                                                    
            ⋮┆----------------------------------------
          575┆ require(owner != address(0), "ERC20: approve from the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          576┆ require(spender != address(0), "ERC20: approve to the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          659┆ require(getBool(keccak256(abi.encodePacked("contract.exists",    
  msg.sender))), "Invalid or outdated network contract");                       
            ⋮┆----------------------------------------
          667┆ require(_contractAddress ==                                      
  getAddress(keccak256(abi.encodePacked("contract.address", _contractName))),   
  "Invalid or outdated contract");                                              
            ⋮┆----------------------------------------
          675┆ require(getBool(keccak256(abi.encodePacked("node.exists",        
  _nodeAddress))), "Invalid node");                                             
            ⋮┆----------------------------------------
          683┆ require(getBool(keccak256(abi.encodePacked("dao.trustednodes",   
  "member", _nodeAddress))), "Invalid trusted node");                           
            ⋮┆----------------------------------------
          691┆ require(getBool(keccak256(abi.encodePacked("minipool.exists",    
  _minipoolAddress))), "Invalid minipool");                                     
            ⋮┆----------------------------------------
          700┆ require(getBool(keccak256(abi.encodePacked("access.role",        
  "guardian", msg.sender))), "Account is not a temporary guardian");            
            ⋮┆----------------------------------------
          721┆ require(contractAddress != address(0x0), "Contract not found");
            ⋮┆----------------------------------------
          732┆ require(keccak256(abi.encodePacked(contractName)) !=             
  keccak256(abi.encodePacked("")), "Contract not found");                       
            ⋮┆----------------------------------------
          864┆ require(totalEthBalance > 0, "Cannot calculate rETH token amount 
  while total network balance is zero");                                        
            ⋮┆----------------------------------------
          911┆ require(rethAmount > 0, "Invalid token mint amount");
            ⋮┆----------------------------------------
          921┆ require(_rethAmount > 0, "Invalid token burn amount");
            ⋮┆----------------------------------------
          922┆ require(balanceOf(msg.sender) >= _rethAmount, "Insufficient rETH 
  balance");                                                                    
            ⋮┆----------------------------------------
          927┆ require(ethBalance >= ethAmount, "Insufficient ETH balance for   
  exchange");                                                                   
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
          214┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          511┆ require(sender != address(0), "ERC20: transfer from the zero     
  address");                                                                    
            ⋮┆----------------------------------------
          512┆ require(recipient != address(0), "ERC20: transfer to the zero    
  address");                                                                    
            ⋮┆----------------------------------------
          552┆ require(account != address(0), "ERC20: burn from the zero        
  address");                                                                    
            ⋮┆----------------------------------------
          575┆ require(owner != address(0), "ERC20: approve from the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          576┆ require(spender != address(0), "ERC20: approve to the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          659┆ require(getBool(keccak256(abi.encodePacked("contract.exists",    
  msg.sender))), "Invalid or outdated network contract");                       
            ⋮┆----------------------------------------
          700┆ require(getBool(keccak256(abi.encodePacked("access.role",        
  "guardian", msg.sender))), "Account is not a temporary guardian");            
            ⋮┆----------------------------------------
          864┆ require(totalEthBalance > 0, "Cannot calculate rETH token amount 
  while total network balance is zero");                                        
            ⋮┆----------------------------------------
          927┆ require(ethBalance >= ethAmount, "Insufficient ETH balance for   
  exchange");                                                                   

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 36 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
