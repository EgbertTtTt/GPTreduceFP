METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 17 Code Findings │
└──────────────────┘
                    
    /sb/BMON_Z1.sol 
       solidity.best-practice.use-ownable2step                                  
          By demanding that the receiver of the owner permissions actively      
  accept via a contract call                                                    
          of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the 
  contract ownership                                                            
          from accidentally being transferred  to an address that cannot handle 
  it.                                                                           
                                                                                
           42┆ contract BMON_Z1 is IERC20, Ownable {
            ⋮┆----------------------------------------
       solidity.performance.non-payable-constructor      
          Consider making costructor payable to save gas.
                                                         
           23┆ constructor () {
           24┆     _owner = msg.sender;
           25┆ }
            ⋮┆----------------------------------------
           69┆ constructor() {
           70┆     state = State.Locked;
           71┆     balances[msg.sender] = _totalSupply;
           72┆     emit Transfer(address(0), msg.sender, _totalSupply);
           73┆ }
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
           32┆ require(_owner == msg.sender, "Ownable: caller is not the        
  owner");                                                                      
            ⋮┆----------------------------------------
           37┆ require(newOwner != address(0), "Ownable: new owner is the zero  
  address");                                                                    
            ⋮┆----------------------------------------
           96┆ require(numTokens > 0, "Transfer amount must be greater than     
  zero");                                                                       
            ⋮┆----------------------------------------
          170┆ require(sender == owner(), "Tokens are locked");
            ⋮┆----------------------------------------
          173┆ require(amount <= maxRestrictionAmount, "Amount greater than max 
  limit in restricted mode");                                                   
            ⋮┆----------------------------------------
          174┆ require(lastTx[sender].add(60) <= block.timestamp &&             
  lastTx[recipient].add(60) <= block.timestamp, "BMON: only one tx/min in       
  restricted mode");                                                            
            ⋮┆----------------------------------------
          180┆ require(lastTx[recipient] + 30 days <= block.timestamp, "Only one
  tx/month in banned mode");                                                    
            ⋮┆----------------------------------------
          183┆ require(lastTx[sender] + 30 days <= block.timestamp, "Only one   
  tx/month in banned mode");                                                    
            ⋮┆----------------------------------------
       solidity.performance.use-multiple-require                                
          Using multiple require statements is cheaper than using && multiple   
  check combinations.                                                           
          There are more advantages, such as easier to read code and better     
  coverage reports.                                                             
                                                                                
          174┆ require(lastTx[sender].add(60) <= block.timestamp &&             
  lastTx[recipient].add(60) <= block.timestamp, "BMON: only one tx/min in       
  restricted mode");                                                            
            ⋮┆----------------------------------------
       solidity.performance.use-nested-if                                       
          Using nested is cheaper than using && multiple check combinations.    
  There are more                                                                
          advantages, such as easier to read code and better coverage reports.  
                                                                                
          156┆ if (enable && state == State.Locked) state = State.Restricted;
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
           37┆ require(newOwner != address(0), "Ownable: new owner is the zero  
  address");                                                                    
            ⋮┆----------------------------------------
           96┆ require(numTokens > 0, "Transfer amount must be greater than     
  zero");                                                                       
            ⋮┆----------------------------------------
          173┆ require(amount <= maxRestrictionAmount, "Amount greater than max 
  limit in restricted mode");                                                   
            ⋮┆----------------------------------------
          174┆ require(lastTx[sender].add(60) <= block.timestamp &&             
  lastTx[recipient].add(60) <= block.timestamp, "BMON: only one tx/min in       
  restricted mode");                                                            

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 17 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
