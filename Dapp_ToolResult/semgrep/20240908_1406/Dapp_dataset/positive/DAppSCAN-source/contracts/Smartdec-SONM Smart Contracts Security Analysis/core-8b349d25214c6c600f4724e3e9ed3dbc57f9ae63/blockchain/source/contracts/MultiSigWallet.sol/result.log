METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 19 Code Findings │
└──────────────────┘
                           
    /sb/MultiSigWallet.sol 
       solidity.performance.array-length-outside-loop                           
          Caching the array length outside a loop saves reading it on each      
  iteration, as long as the                                                     
          array's length is not changed during the loop.                        
                                                                                
          259┆ for (uint i = 0; i < owners.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.inefficient-state-variable-increment             
          <x> += <y> costs more gas than <x> = <x> + <y> for state variables.
                                                                             
          287┆ transactionCount += 1;
            ⋮┆----------------------------------------
       solidity.performance.state-variable-read-in-a-loop                       
          Replace state variable reads and writes within loops with local       
  variable reads and writes.                                                    
                                                                                
          259┆ for (uint i = 0; i < owners.length; i++) {
            ⋮┆----------------------------------------
          260┆ if (confirmations[transactionId][owners[i]])
            ⋮┆----------------------------------------
          260┆ if (confirmations[transactionId][owners[i]])
            ⋮┆----------------------------------------
          262┆ if (count == required)
            ⋮┆----------------------------------------
       solidity.performance.unnecessary-checked-arithmetic-in-loop              
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
                                                                                
          259┆ for (uint i = 0; i < owners.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-multiple-require                                
          Using multiple require statements is cheaper than using && multiple   
  check combinations.                                                           
          There are more advantages, such as easier to read code and better     
  coverage reports.                                                             
                                                                                
           87┆ require(ownerCount <= MAX_OWNER_COUNT && _required <= ownerCount 
  && _required != 0 && ownerCount != 0);                                        
            ⋮┆----------------------------------------
       solidity.performance.use-nested-if                                       
          Using nested is cheaper than using && multiple check combinations.    
  There are more                                                                
          advantages, such as easier to read code and better coverage reports.  
                                                                                
          318┆ if (pending && !transactions[i].executed || executed &&          
  transactions[i].executed) {                                                   
          319┆     count += 1;
          320┆ }
            ⋮┆----------------------------------------
          369┆ if (pending && !transactions[i].executed
          370┆ || executed && transactions[i].executed)
          371┆ {
          372┆     transactionIdsTemp[count] = i;
          373┆     count += 1;
          374┆ }
            ⋮┆----------------------------------------
       solidity.performance.use-prefix-increment-not-postfix                    
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
                                                                                
          128┆ for (uint i = 0; i < owners.length - 1; i++)
            ⋮┆----------------------------------------
          148┆ for (uint i = 0; i < owners.length; i++)
            ⋮┆----------------------------------------
          259┆ for (uint i = 0; i < owners.length; i++) {
            ⋮┆----------------------------------------
          302┆ for (uint i = 0; i < owners.length; i++)
            ⋮┆----------------------------------------
          317┆ for (uint i = 0; i < transactionCount; i++)
            ⋮┆----------------------------------------
          344┆ for (i = 0; i < owners.length; i++)
            ⋮┆----------------------------------------
          350┆ for (i = 0; i < count; i++)
            ⋮┆----------------------------------------
          368┆ for (i = 0; i < transactionCount; i++)
            ⋮┆----------------------------------------
          377┆ for (i = from; i < to; i++)

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 19 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
