METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 56 Code Findings │
└──────────────────┘
                            
    /sb/HoldefiSettings.sol 
       solidity.performance.non-payable-constructor      
          Consider making costructor payable to save gas.
                                                         
          315┆ constructor () public {
          316┆     owner = msg.sender;
          317┆     emit OwnershipTransferred(owner, address(0));
          318┆ }
            ⋮┆----------------------------------------
       solidity.performance.state-variable-read-in-a-loop                       
          Replace state variable reads and writes within loops with local       
  variable reads and writes.                                                    
                                                                                
          695┆ if (marketsList[i] == market) {
            ⋮┆----------------------------------------
          702┆ marketsList[i] = marketsList[i+1];
            ⋮┆----------------------------------------
          702┆ marketsList[i] = marketsList[i+1];
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
           88┆ require(c >= a, "SafeMath: addition overflow");
            ⋮┆----------------------------------------
          103┆ require(b <= a, "SafeMath: subtraction overflow");
            ⋮┆----------------------------------------
          120┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          137┆ require(b > 0, "SafeMath: division by zero");
            ⋮┆----------------------------------------
          154┆ require(b > 0, "SafeMath: modulo by zero");
            ⋮┆----------------------------------------
          322┆ require(msg.sender == owner, "Sender should be owner");
            ⋮┆----------------------------------------
          330┆ require(newOwner != address(0), "New owner can not be zero       
  address");                                                                    
            ⋮┆----------------------------------------
          339┆ require (pendingOwner != address(0), "Pending owner is empty");
            ⋮┆----------------------------------------
          340┆ require (pendingOwner == msg.sender, "Pending owner is not same  
  as sender");                                                                  
            ⋮┆----------------------------------------
          479┆ require (marketAssets[market].isExist, "The market is not        
  exist");                                                                      
            ⋮┆----------------------------------------
          486┆ require (collateralAssets[collateral].isExist, "The collateral is
  not exist");                                                                  
            ⋮┆----------------------------------------
          536┆ require (holdefiContractAddress.holdefiSettings() ==             
  address(this),                                                                
          537┆    "Conflict with Holdefi contract      
  address"                                             
          538┆ );
            ⋮┆----------------------------------------
          539┆ require (address(holdefiContract) == address(0), "Should be set  
  once");                                                                       
            ⋮┆----------------------------------------
          576┆ require (newPromotionRate <= maxPromotionRate, "Rate should be in
  allowed range");                                                              
            ⋮┆----------------------------------------
          589┆ require (msg.sender == address(holdefiContract), "Sender is not  
  Holdefi contract");                                                           
            ⋮┆----------------------------------------
          665┆ require (!marketAssets[market].isExist, "The market is exist");
            ⋮┆----------------------------------------
          666┆ require (marketsList.length < maxListsLength, "Market list is    
  full");                                                                       
            ⋮┆----------------------------------------
          687┆ require (totalBorrow == 0, "Total borrow is not zero");
            ⋮┆----------------------------------------
          726┆ require (!collateralAssets[collateral].isExist, "The collateral  
  is exist");                                                                   
            ⋮┆----------------------------------------
          756┆ require (newBorrowRate <= maxBorrowRate, "Rate should be less    
  than max");                                                                   
            ⋮┆----------------------------------------
          762┆ require (deltaTime >= periodBetweenUpdates, "Increasing rate is  
  not allowed at this time");                                                   
            ⋮┆----------------------------------------
          765┆ require (newBorrowRate <= maxIncrease, "Rate should be increased 
  less than max allowed");                                                      
            ⋮┆----------------------------------------
          779┆ require (
          780┆    newSuppliersShareRate >= minSuppliersShareRate &&             
  newSuppliersShareRate <= rateDecimals,                                        
          781┆    "Rate should be in allowed    
  range"                                        
          782┆ );
            ⋮┆----------------------------------------
          788┆ require (deltaTime >= periodBetweenUpdates, "Decreasing rate is  
  not allowed at this time");                                                   
            ⋮┆----------------------------------------
          791┆ require (
          792┆    marketAssets[market].suppliersShareRate <=               
  decreasedAllowed,                                                        
          793┆    "Rate should be decreased less than max      
  allowed"                                                     
          794┆ );
            ⋮┆----------------------------------------
          812┆ require (
          813┆    newValueToLoanRate <= maxValueToLoanRate
  &&                                                      
          814┆                                                                  
  collateralAssets[collateral].penaltyRate.add(fivePercentLiquidationGap) <=    
  newValueToLoanRate,                                                           
          815┆    "Rate should be in allowed    
  range"                                        
          816┆ );
            ⋮┆----------------------------------------
          824┆ require (deltaTime >= periodBetweenUpdates,"Increasing rate is   
  not allowed at this time");                                                   
            ⋮┆----------------------------------------
          828┆ require (newValueToLoanRate <= maxIncrease,"Rate should be       
  increased less than max allowed");                                            
            ⋮┆----------------------------------------
          842┆ require (
          843┆    newPenaltyRate <= maxPenaltyRate
  &&                                              
          844┆    newPenaltyRate <=                                             
  collateralAssets[collateral].valueToLoanRate.sub(fivePercentLiquidationGap) &&
          845┆    collateralAssets[collateral].bonusRate <=             
  newPenaltyRate,                                                       
          846┆    "Rate should be in allowed    
  range"                                        
          847┆ );
            ⋮┆----------------------------------------
          855┆ require (deltaTime >= periodBetweenUpdates, "Increasing rate is  
  not allowed at this time");                                                   
            ⋮┆----------------------------------------
          857┆ require (newPenaltyRate <= maxIncrease, "Rate should be increased
  less than max allowed");                                                      
            ⋮┆----------------------------------------
          868┆ require (
          869┆    newBonusRate <= collateralAssets[collateral].penaltyRate &&   
  newBonusRate >= rateDecimals,                                                 
          870┆    "Rate should be in allowed    
  range"                                        
          871┆ );
            ⋮┆----------------------------------------
       solidity.performance.use-multiple-require                                
          Using multiple require statements is cheaper than using && multiple   
  check combinations.                                                           
          There are more advantages, such as easier to read code and better     
  coverage reports.                                                             
                                                                                
          779┆ require (
          780┆    newSuppliersShareRate >= minSuppliersShareRate &&             
  newSuppliersShareRate <= rateDecimals,                                        
          781┆    "Rate should be in allowed    
  range"                                        
          782┆ );
            ⋮┆----------------------------------------
          812┆ require (
          813┆    newValueToLoanRate <= maxValueToLoanRate
  &&                                                      
          814┆                                                                  
  collateralAssets[collateral].penaltyRate.add(fivePercentLiquidationGap) <=    
  newValueToLoanRate,                                                           
          815┆    "Rate should be in allowed    
  range"                                        
          816┆ );
            ⋮┆----------------------------------------
          842┆ require (
          843┆    newPenaltyRate <= maxPenaltyRate
  &&                                              
          844┆    newPenaltyRate <=                                             
  collateralAssets[collateral].valueToLoanRate.sub(fivePercentLiquidationGap) &&
          845┆    collateralAssets[collateral].bonusRate <=             
  newPenaltyRate,                                                       
          846┆    "Rate should be in allowed    
  range"                                        
          847┆ );
            ⋮┆----------------------------------------
          868┆ require (
          869┆    newBonusRate <= collateralAssets[collateral].penaltyRate &&   
  newBonusRate >= rateDecimals,                                                 
          870┆    "Rate should be in allowed    
  range"                                        
          871┆ );
            ⋮┆----------------------------------------
       solidity.performance.use-nested-if                                       
          Using nested is cheaper than using && multiple check combinations.    
  There are more                                                                
          advantages, such as easier to read code and better coverage reports.  
                                                                                
          819┆ if (
          820┆    collateralAssets[collateral].VTLUpdateTime != 0
  &&                                                             
          821┆    newValueToLoanRate >                                          
  collateralAssets[collateral].valueToLoanRate                                  
          822┆ ) {
          823┆    uint256 deltaTime =                                           
  currentTime.sub(collateralAssets[collateral].VTLUpdateTime);                  
          824┆    require (deltaTime >= periodBetweenUpdates,"Increasing rate is
  not allowed at this time");                                                   
          825┆    uint256 maxIncrease =                                         
  collateralAssets[collateral].valueToLoanRate.add(                             
          826┆                           
  valueToLoanRateMaxIncrease             
          827┆   
  );             
          828┆    require (newValueToLoanRate <= maxIncrease,"Rate should be    
  increased less than max allowed");                                            
             [hid 1 additional lines, adjust with --max-lines-per-finding] 
          850┆ if (
          851┆    collateralAssets[collateral].penaltyUpdateTime != 0
  &&                                                                 
          852┆    newPenaltyRate >                                      
  collateralAssets[collateral].penaltyRate                              
          853┆ ) {
          854┆    uint256 deltaTime =                                           
  currentTime.sub(collateralAssets[collateral].penaltyUpdateTime);              
          855┆    require (deltaTime >= periodBetweenUpdates, "Increasing rate  
  is not allowed at this time");                                                
          856┆    uint256 maxIncrease =                                         
  collateralAssets[collateral].penaltyRate.add(penaltyRateMaxIncrease);         
          857┆    require (newPenaltyRate <= maxIncrease, "Rate should be       
  increased less than max allowed");                                            
          858┆ }
            ⋮┆----------------------------------------
       solidity.performance.use-prefix-increment-not-postfix                    
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
                                                                                
          694┆ for (i = 0 ; i < marketListLength ; i++) {
            ⋮┆----------------------------------------
          701┆ for (i = index ; i < marketListLength-1 ; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
          120┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          330┆ require(newOwner != address(0), "New owner can not be zero       
  address");                                                                    
            ⋮┆----------------------------------------
          340┆ require (pendingOwner == msg.sender, "Pending owner is not same  
  as sender");                                                                  
            ⋮┆----------------------------------------
          536┆ require (holdefiContractAddress.holdefiSettings() ==             
  address(this),                                                                
          537┆    "Conflict with Holdefi contract      
  address"                                             
          538┆ );
            ⋮┆----------------------------------------
          762┆ require (deltaTime >= periodBetweenUpdates, "Increasing rate is  
  not allowed at this time");                                                   
            ⋮┆----------------------------------------
          765┆ require (newBorrowRate <= maxIncrease, "Rate should be increased 
  less than max allowed");                                                      
            ⋮┆----------------------------------------
          788┆ require (deltaTime >= periodBetweenUpdates, "Decreasing rate is  
  not allowed at this time");                                                   
            ⋮┆----------------------------------------
          791┆ require (
          792┆    marketAssets[market].suppliersShareRate <=               
  decreasedAllowed,                                                        
          793┆    "Rate should be decreased less than max      
  allowed"                                                     
          794┆ );
            ⋮┆----------------------------------------
          824┆ require (deltaTime >= periodBetweenUpdates,"Increasing rate is   
  not allowed at this time");                                                   
            ⋮┆----------------------------------------
          828┆ require (newValueToLoanRate <= maxIncrease,"Rate should be       
  increased less than max allowed");                                            
            ⋮┆----------------------------------------
          855┆ require (deltaTime >= periodBetweenUpdates, "Increasing rate is  
  not allowed at this time");                                                   
            ⋮┆----------------------------------------
          857┆ require (newPenaltyRate <= maxIncrease, "Rate should be increased
  less than max allowed");                                                      

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 56 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
