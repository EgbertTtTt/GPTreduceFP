METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                   
                   
┌─────────────────┐
│ 7 Code Findings │
└─────────────────┘
                  
    /sb/ERC20.sol 
       solidity.performance.non-payable-constructor      
          Consider making costructor payable to save gas.
                                                         
           48┆ constructor(string memory _name, string memory _symbol, uint     
  _amount) public {                                                             
           49┆     name = _name;
           50┆     symbol = _symbol;
           51┆     _mint(msg.sender, _amount);
           52┆ }
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
           55┆ require(spender != msg.sender, 'Cannot approve self');
            ⋮┆----------------------------------------
           56┆ require(spender != address(0x0), 'Cannot approve a zero          
  address');                                                                    
            ⋮┆----------------------------------------
           57┆ require(balances[msg.sender] >= value, 'Cannot approve more than 
  available balance');                                                          
            ⋮┆----------------------------------------
           98┆ require(_account != address(0x0), "ERC20: mint to the zero       
  address");                                                                    
            ⋮┆----------------------------------------
       solidity.performance.use-multiple-require                                
          Using multiple require statements is cheaper than using && multiple   
  check combinations.                                                           
          There are more advantages, such as easier to read code and better     
  coverage reports.                                                             
                                                                                
           71┆ require(balances[from] >= value && allowance >= value);
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
           57┆ require(balances[msg.sender] >= value, 'Cannot approve more than 
  available balance');                                                          

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 7 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
