METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 55 Code Findings │
└──────────────────┘
                                     
    /sb/strategy-basis-farm-base.sol 
       solidity.best-practice.use-abi-encodecall-instead-of-encodewithselector  
          To guarantee arguments type safety it is recommended to use           
  `abi.encodeCall` instead of                                                   
          `abi.encodeWithSelector`.                                             
                                                                                
          713┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.transfer.selector, to, value));                  
            ⋮┆----------------------------------------
          717┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.transferFrom.selector, from, to, value));        
            ⋮┆----------------------------------------
          735┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.approve.selector, spender, value));              
            ⋮┆----------------------------------------
          740┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.approve.selector, spender, newAllowance));       
            ⋮┆----------------------------------------
          745┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.approve.selector, spender, newAllowance));       
            ⋮┆----------------------------------------
       solidity.performance.init-variables-with-default-value                   
          Uninitialized variables are assigned with the types default value.    
  Explicitly initializing a                                                     
          variable with its default value costs unnecessary gas.                
                                                                                
         1199┆ uint256 public withdrawalTreasuryFee = 0;
            ⋮┆----------------------------------------
         1202┆ uint256 public withdrawalDevFundFee = 0;
            ⋮┆----------------------------------------
         1546┆ uint256 public keepRewards = 0;
            ⋮┆----------------------------------------
       solidity.performance.non-payable-constructor      
          Consider making costructor payable to save gas.
                                                         
          445┆ constructor (string memory name, string memory symbol) public {
          446┆     // SWC-119-Shadowing State Variables: L280
          447┆     _name = name;
          448┆     // SWC-119-Shadowing State Variables: L282
          449┆     _symbol = symbol;
          450┆     _decimals = 18;
          451┆ }
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
           31┆ require(c >= a, "SafeMath: addition overflow");
            ⋮┆----------------------------------------
           86┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          308┆ require(address(this).balance >= amount, "Address: insufficient  
  balance");                                                                    
            ⋮┆----------------------------------------
          312┆ require(success, "Address: unable to send value, recipient may   
  have reverted");                                                              
            ⋮┆----------------------------------------
          369┆ require(address(this).balance >= value, "Address: insufficient   
  balance for call");                                                           
            ⋮┆----------------------------------------
          374┆ require(isContract(target), "Address: call to non-contract");
            ⋮┆----------------------------------------
          600┆ require(sender != address(0), "ERC20: transfer from the zero     
  address");                                                                    
            ⋮┆----------------------------------------
          601┆ require(recipient != address(0), "ERC20: transfer to the zero    
  address");                                                                    
            ⋮┆----------------------------------------
          620┆ require(account != address(0), "ERC20: mint to the zero          
  address");                                                                    
            ⋮┆----------------------------------------
          641┆ require(account != address(0), "ERC20: burn from the zero        
  address");                                                                    
            ⋮┆----------------------------------------
          664┆ require(owner != address(0), "ERC20: approve from the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          665┆ require(spender != address(0), "ERC20: approve to the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          732┆ require((value == 0) || (token.allowance(address(this), spender) 
  == 0),                                                                        
          733┆     "SafeERC20: approve from non-zero to non-zero allowance"
          734┆ );
            ⋮┆----------------------------------------
          762┆ require(abi.decode(returndata, (bool)), "SafeERC20: ERC20        
  operation did not succeed");                                                  
            ⋮┆----------------------------------------
         1262┆ require(msg.sender == controller ||
         1263┆      msg.sender == strategist, "not authorized");
            ⋮┆----------------------------------------
         1268┆ require(msg.sender == controller ||
         1269┆      msg.sender == strategist, "not authorized");
            ⋮┆----------------------------------------
         1274┆ require(msg.sender == strategist, "!strategist");
            ⋮┆----------------------------------------
         1279┆ require(msg.sender == strategist, "!strategist");
            ⋮┆----------------------------------------
         1284┆ require(msg.sender == strategist, "!strategist");
            ⋮┆----------------------------------------
         1291┆ require(msg.sender == strategist, "!strategist");
            ⋮┆----------------------------------------
         1296┆ require(msg.sender == strategist, "!strategist");
            ⋮┆----------------------------------------
         1301┆ require(msg.sender == strategist, "!strategist");
            ⋮┆----------------------------------------
         1306┆ require(msg.sender == strategist, "!strategist");
            ⋮┆----------------------------------------
         1311┆ require(msg.sender == strategist, "!strategist");
            ⋮┆----------------------------------------
         1316┆ require(msg.sender == strategist, "!strategist");
            ⋮┆----------------------------------------
         1325┆ require(msg.sender == controller, "!controller");
            ⋮┆----------------------------------------
         1351┆ require(msg.sender == controller, "!controller");
            ⋮┆----------------------------------------
         1356┆ require(_newStrategy != address(0), "!newStrategy"); //          
  additional protection so we don't burn the funds                              
            ⋮┆----------------------------------------
         1375┆ require(msg.sender == strategist, "!strategist");
            ⋮┆----------------------------------------
         1376┆ require(_target != address(0), "!target");
            ⋮┆----------------------------------------
         1576┆ require(msg.sender == strategist, "!strategist");
            ⋮┆----------------------------------------
       solidity.performance.use-nested-if                                       
          Using nested is cheaper than using && multiple check combinations.    
  There are more                                                                
          advantages, such as easier to read code and better coverage reports.  
                                                                                
         1651┆ if (_token1 > 0 && _token2 > 0) {
         1652┆     IERC20(token1).safeApprove(univ2Router2, 0);
         1653┆     IERC20(token1).safeApprove(univ2Router2, _token1);
         1654┆ 
         1655┆     IERC20(token2).safeApprove(univ2Router2, 0);
         1656┆     IERC20(token2).safeApprove(univ2Router2, _token2);
         1657┆ 
         1658┆     UniswapRouterV2(univ2Router2).addLiquidity(
         1659┆         token1,
         1660┆         token2,
             [hid 18 additional lines, adjust with --max-lines-per-finding] 
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
           86┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          312┆ require(success, "Address: unable to send value, recipient may   
  have reverted");                                                              
            ⋮┆----------------------------------------
          369┆ require(address(this).balance >= value, "Address: insufficient   
  balance for call");                                                           
            ⋮┆----------------------------------------
          600┆ require(sender != address(0), "ERC20: transfer from the zero     
  address");                                                                    
            ⋮┆----------------------------------------
          601┆ require(recipient != address(0), "ERC20: transfer to the zero    
  address");                                                                    
            ⋮┆----------------------------------------
          641┆ require(account != address(0), "ERC20: burn from the zero        
  address");                                                                    
            ⋮┆----------------------------------------
          664┆ require(owner != address(0), "ERC20: approve from the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          665┆ require(spender != address(0), "ERC20: approve to the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          732┆ require((value == 0) || (token.allowance(address(this), spender) 
  == 0),                                                                        
          733┆     "SafeERC20: approve from non-zero to non-zero allowance"
          734┆ );
            ⋮┆----------------------------------------
          762┆ require(abi.decode(returndata, (bool)), "SafeERC20: ERC20        
  operation did not succeed");                                                  
            ⋮┆----------------------------------------
       solidity.security.no-slippage-check          
          No slippage check in a Uniswap v2/v3 trade
                                                    
         1432┆ UniswapRouterV2(univ2Router2).swapExactTokensForTokens(
         1433┆     _amount,
         1434┆     0,
         1435┆     path,
         1436┆     address(this),
         1437┆     now.add(60)
         1438┆ );
            ⋮┆----------------------------------------
         1452┆ UniswapRouterV2(univ2Router2).swapExactTokensForTokens(
         1453┆     _amount,
         1454┆     0,
         1455┆     path,
         1456┆     address(this),
         1457┆     now.add(60)
         1458┆ );
            ⋮┆----------------------------------------
         1486┆ UniswapRouterV2(sushiRouter).swapExactTokensForTokens(
         1487┆     _amount,
         1488┆     0,
         1489┆     path,
         1490┆     address(this),
         1491┆     now.add(60)
         1492┆ );
            ⋮┆----------------------------------------
         1506┆ UniswapRouterV2(sushiRouter).swapExactTokensForTokens(
         1507┆     _amount,
         1508┆     0,
         1509┆     path,
         1510┆     address(this),
         1511┆     now.add(60)
         1512┆ );

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 55 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
