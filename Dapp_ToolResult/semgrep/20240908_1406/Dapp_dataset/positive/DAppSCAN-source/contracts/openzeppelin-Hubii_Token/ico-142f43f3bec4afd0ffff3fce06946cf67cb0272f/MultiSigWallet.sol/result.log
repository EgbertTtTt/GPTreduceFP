METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 19 Code Findings │
└──────────────────┘
                           
    /sb/MultiSigWallet.sol 
       solidity.performance.array-length-outside-loop                           
          Caching the array length outside a loop saves reading it on each      
  iteration, as long as the                                                     
          array's length is not changed during the loop.                        
                                                                                
          230┆ for (uint i=0; i<owners.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.inefficient-state-variable-increment             
          <x> += <y> costs more gas than <x> = <x> + <y> for state variables.
                                                                             
          258┆ transactionCount += 1;
            ⋮┆----------------------------------------
       solidity.performance.state-variable-read-in-a-loop                       
          Replace state variable reads and writes within loops with local       
  variable reads and writes.                                                    
                                                                                
          230┆ for (uint i=0; i<owners.length; i++) {
            ⋮┆----------------------------------------
          231┆ if (confirmations[transactionId][owners[i]])
            ⋮┆----------------------------------------
          231┆ if (confirmations[transactionId][owners[i]])
            ⋮┆----------------------------------------
          233┆ if (count == required)
            ⋮┆----------------------------------------
       solidity.performance.unnecessary-checked-arithmetic-in-loop              
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
                                                                                
          230┆ for (uint i=0; i<owners.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-multiple-require                                
          Using multiple require statements is cheaper than using && multiple   
  check combinations.                                                           
          There are more advantages, such as easier to read code and better     
  coverage reports.                                                             
                                                                                
           80┆ require (   ownerCount <= MAX_OWNER_COUNT
           81┆          && _required <= ownerCount
           82┆          && _required != 0
           83┆          && ownerCount != 0);
            ⋮┆----------------------------------------
       solidity.performance.use-nested-if                                       
          Using nested is cheaper than using && multiple check combinations.    
  There are more                                                                
          advantages, such as easier to read code and better coverage reports.  
                                                                                
          288┆ if (   pending && !transactions[i].executed
          289┆     || executed && transactions[i].executed)
          290┆     count += 1;
            ⋮┆----------------------------------------
          339┆ if (   pending && !transactions[i].executed
          340┆     || executed && transactions[i].executed)
          341┆ {
          342┆     transactionIdsTemp[count] = i;
          343┆     count += 1;
          344┆ }
            ⋮┆----------------------------------------
       solidity.performance.use-prefix-increment-not-postfix                    
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
                                                                                
          123┆ for (uint i=0; i<owners.length - 1; i++)
            ⋮┆----------------------------------------
          143┆ for (uint i=0; i<owners.length; i++)
            ⋮┆----------------------------------------
          230┆ for (uint i=0; i<owners.length; i++) {
            ⋮┆----------------------------------------
          273┆ for (uint i=0; i<owners.length; i++)
            ⋮┆----------------------------------------
          287┆ for (uint i=0; i<transactionCount; i++)
            ⋮┆----------------------------------------
          314┆ for (i=0; i<owners.length; i++)
            ⋮┆----------------------------------------
          320┆ for (i=0; i<count; i++)
            ⋮┆----------------------------------------
          338┆ for (i=0; i<transactionCount; i++)
            ⋮┆----------------------------------------
          346┆ for (i=from; i<to; i++)

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 19 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
