METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 81 Code Findings │
└──────────────────┘
                         
    /sb/GenesisGroup.sol 
       solidity.performance.inefficient-state-variable-increment             
          <x> += <y> costs more gas than <x> = <x> + <y> for state variables.
                                                                             
         2045┆ totalCommittedFGEN += amount;
            ⋮┆----------------------------------------
       solidity.performance.non-payable-constructor      
          Consider making costructor payable to save gas.
                                                         
          358┆ constructor (string memory name_, string memory symbol_) public {
          359┆     _name = name_;
          360┆     _symbol = symbol_;
          361┆     _decimals = 18;
          362┆ }
            ⋮┆----------------------------------------
         1999┆ constructor(
         2000┆    address    
  _core,                     
         2001┆    address            
  _bondingcurve,                     
         2002┆    address   
  _ido,                     
         2003┆    address      
  _oracle,                     
         2004┆    address    
  _pool,                     
         2005┆    uint32        
  _duration,                    
         2006┆    uint           
  _maxPriceBPs,                  
         2007┆    uint                   
  _exchangeRateDiscount                  
         2008┆ ) public
             [hid 17 additional lines, adjust with --max-lines-per-finding] 
       solidity.performance.unnecessary-checked-arithmetic-in-loop              
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
                                                                                
          946┆ for (uint256 i = 1; i < b; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
          183┆ require(c >= a, "SafeMath: addition overflow");
            ⋮┆----------------------------------------
          198┆ require(b <= a, "SafeMath: subtraction overflow");
            ⋮┆----------------------------------------
          215┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          232┆ require(b > 0, "SafeMath: division by zero");
            ⋮┆----------------------------------------
          249┆ require(b > 0, "SafeMath: modulo by zero");
            ⋮┆----------------------------------------
          512┆ require(sender != address(0), "ERC20: transfer from the zero     
  address");                                                                    
            ⋮┆----------------------------------------
          513┆ require(recipient != address(0), "ERC20: transfer to the zero    
  address");                                                                    
            ⋮┆----------------------------------------
          532┆ require(account != address(0), "ERC20: mint to the zero          
  address");                                                                    
            ⋮┆----------------------------------------
          553┆ require(account != address(0), "ERC20: burn from the zero        
  address");                                                                    
            ⋮┆----------------------------------------
          576┆ require(owner != address(0), "ERC20: approve from the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          577┆ require(spender != address(0), "ERC20: approve to the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          673┆ require(c >= a, "SafeMath: addition overflow");
            ⋮┆----------------------------------------
          728┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
         1161┆ require(c >= a, "SafeMath: addition overflow");
            ⋮┆----------------------------------------
         1226┆ require(value < 2**128, "SafeCast: value doesn\'t fit in 128     
  bits");                                                                       
            ⋮┆----------------------------------------
         1241┆ require(value < 2**64, "SafeCast: value doesn\'t fit in 64       
  bits");                                                                       
            ⋮┆----------------------------------------
         1256┆ require(value < 2**32, "SafeCast: value doesn\'t fit in 32       
  bits");                                                                       
            ⋮┆----------------------------------------
         1271┆ require(value < 2**16, "SafeCast: value doesn\'t fit in 16       
  bits");                                                                       
            ⋮┆----------------------------------------
         1286┆ require(value < 2**8, "SafeCast: value doesn\'t fit in 8 bits");
            ⋮┆----------------------------------------
         1298┆ require(value >= 0, "SafeCast: value must be positive");
            ⋮┆----------------------------------------
         1316┆ require(value >= -2**127 && value < 2**127, "SafeCast: value     
  doesn\'t fit in 128 bits");                                                   
            ⋮┆----------------------------------------
         1334┆ require(value >= -2**63 && value < 2**63, "SafeCast: value       
  doesn\'t fit in 64 bits");                                                    
            ⋮┆----------------------------------------
         1352┆ require(value >= -2**31 && value < 2**31, "SafeCast: value       
  doesn\'t fit in 32 bits");                                                    
            ⋮┆----------------------------------------
         1370┆ require(value >= -2**15 && value < 2**15, "SafeCast: value       
  doesn\'t fit in 16 bits");                                                    
            ⋮┆----------------------------------------
         1388┆ require(value >= -2**7 && value < 2**7, "SafeCast: value doesn\'t
  fit in 8 bits");                                                              
            ⋮┆----------------------------------------
         1400┆ require(value < 2**255, "SafeCast: value doesn't fit in an       
  int256");                                                                     
            ⋮┆----------------------------------------
         1693┆ require(_core.isMinter(msg.sender), "CoreRef: Caller is not a    
  minter");                                                                     
            ⋮┆----------------------------------------
         1698┆ require(_core.isBurner(msg.sender), "CoreRef: Caller is not a    
  burner");                                                                     
            ⋮┆----------------------------------------
         1703┆ require(_core.isPCVController(msg.sender), "CoreRef: Caller is   
  not a PCV controller");                                                       
            ⋮┆----------------------------------------
         1708┆ require(_core.isGovernor(msg.sender), "CoreRef: Caller is not a  
  governor");                                                                   
            ⋮┆----------------------------------------
         1713┆ require(msg.sender == address(fei()), "CoreRef: Caller is not    
  FEI");                                                                        
            ⋮┆----------------------------------------
         1718┆ require(msg.sender == _core.genesisGroup(), "CoreRef: Caller is  
  not GenesisGroup");                                                           
            ⋮┆----------------------------------------
         1723┆ require(_core.hasGenesisGroupCompleted(), "CoreRef: Still in     
  Genesis Period");                                                             
            ⋮┆----------------------------------------
         2028┆ require(!isTimeEnded(), "GenesisGroup: Not in Genesis Period");
            ⋮┆----------------------------------------
         2033┆ require(msg.value == value, "GenesisGroup: value mismatch");
            ⋮┆----------------------------------------
         2034┆ require(value != 0, "GenesisGroup: no value sent");
            ⋮┆----------------------------------------
         2055┆ require(tribeAmount != 0, "GenesisGroup: No redeemable TRIBE");
            ⋮┆----------------------------------------
         2104┆ require(isTimeEnded() || isAtMaxPrice(), "GenesisGroup: Still in 
  Genesis Period");                                                             
            ⋮┆----------------------------------------
         2131┆ require(now > (startTime + duration + 3 days), "GenesisGroup: Not
  in exit window");                                                             
            ⋮┆----------------------------------------
         2136┆ require(total != 0, "GenesisGroup: No FGEN or committed          
  balance");                                                                    
            ⋮┆----------------------------------------
         2137┆ require(address(this).balance >= total, "GenesisGroup: Not enough
  ETH to redeem");                                                              
            ⋮┆----------------------------------------
         2138┆ require(msg.sender == from || allowance(from, msg.sender) >=     
  total, "GenesisGroup: Not approved for emergency withdrawal");                
            ⋮┆----------------------------------------
         2154┆ require(amountIn <= totalIn, "GenesisGroup: Not enough supply");
            ⋮┆----------------------------------------
         2164┆ require(balance != 0, "GenesisGroup: No balance");
            ⋮┆----------------------------------------
       solidity.performance.use-multiple-require                                
          Using multiple require statements is cheaper than using && multiple   
  check combinations.                                                           
          There are more advantages, such as easier to read code and better     
  coverage reports.                                                             
                                                                                
         1316┆ require(value >= -2**127 && value < 2**127, "SafeCast: value     
  doesn\'t fit in 128 bits");                                                   
            ⋮┆----------------------------------------
         1334┆ require(value >= -2**63 && value < 2**63, "SafeCast: value       
  doesn\'t fit in 64 bits");                                                    
            ⋮┆----------------------------------------
         1352┆ require(value >= -2**31 && value < 2**31, "SafeCast: value       
  doesn\'t fit in 32 bits");                                                    
            ⋮┆----------------------------------------
         1370┆ require(value >= -2**15 && value < 2**15, "SafeCast: value       
  doesn\'t fit in 16 bits");                                                    
            ⋮┆----------------------------------------
         1388┆ require(value >= -2**7 && value < 2**7, "SafeCast: value doesn\'t
  fit in 8 bits");                                                              
            ⋮┆----------------------------------------
       solidity.performance.use-prefix-increment-not-postfix                    
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
                                                                                
          946┆ for (uint256 i = 1; i < b; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
          215┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          512┆ require(sender != address(0), "ERC20: transfer from the zero     
  address");                                                                    
            ⋮┆----------------------------------------
          513┆ require(recipient != address(0), "ERC20: transfer to the zero    
  address");                                                                    
            ⋮┆----------------------------------------
          553┆ require(account != address(0), "ERC20: burn from the zero        
  address");                                                                    
            ⋮┆----------------------------------------
          576┆ require(owner != address(0), "ERC20: approve from the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          577┆ require(spender != address(0), "ERC20: approve to the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          728┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
         1226┆ require(value < 2**128, "SafeCast: value doesn\'t fit in 128     
  bits");                                                                       
            ⋮┆----------------------------------------
         1241┆ require(value < 2**64, "SafeCast: value doesn\'t fit in 64       
  bits");                                                                       
            ⋮┆----------------------------------------
         1256┆ require(value < 2**32, "SafeCast: value doesn\'t fit in 32       
  bits");                                                                       
            ⋮┆----------------------------------------
         1271┆ require(value < 2**16, "SafeCast: value doesn\'t fit in 16       
  bits");                                                                       
            ⋮┆----------------------------------------
         1286┆ require(value < 2**8, "SafeCast: value doesn\'t fit in 8 bits");
            ⋮┆----------------------------------------
         1316┆ require(value >= -2**127 && value < 2**127, "SafeCast: value     
  doesn\'t fit in 128 bits");                                                   
            ⋮┆----------------------------------------
         1334┆ require(value >= -2**63 && value < 2**63, "SafeCast: value       
  doesn\'t fit in 64 bits");                                                    
            ⋮┆----------------------------------------
         1352┆ require(value >= -2**31 && value < 2**31, "SafeCast: value       
  doesn\'t fit in 32 bits");                                                    
            ⋮┆----------------------------------------
         1370┆ require(value >= -2**15 && value < 2**15, "SafeCast: value       
  doesn\'t fit in 16 bits");                                                    
            ⋮┆----------------------------------------
         1388┆ require(value >= -2**7 && value < 2**7, "SafeCast: value doesn\'t
  fit in 8 bits");                                                              
            ⋮┆----------------------------------------
         1400┆ require(value < 2**255, "SafeCast: value doesn't fit in an       
  int256");                                                                     
            ⋮┆----------------------------------------
         1703┆ require(_core.isPCVController(msg.sender), "CoreRef: Caller is   
  not a PCV controller");                                                       
            ⋮┆----------------------------------------
         1708┆ require(_core.isGovernor(msg.sender), "CoreRef: Caller is not a  
  governor");                                                                   
            ⋮┆----------------------------------------
         1718┆ require(msg.sender == _core.genesisGroup(), "CoreRef: Caller is  
  not GenesisGroup");                                                           
            ⋮┆----------------------------------------
         2028┆ require(!isTimeEnded(), "GenesisGroup: Not in Genesis Period");
            ⋮┆----------------------------------------
         2055┆ require(tribeAmount != 0, "GenesisGroup: No redeemable TRIBE");
            ⋮┆----------------------------------------
         2104┆ require(isTimeEnded() || isAtMaxPrice(), "GenesisGroup: Still in 
  Genesis Period");                                                             
            ⋮┆----------------------------------------
         2136┆ require(total != 0, "GenesisGroup: No FGEN or committed          
  balance");                                                                    
            ⋮┆----------------------------------------
         2137┆ require(address(this).balance >= total, "GenesisGroup: Not enough
  ETH to redeem");                                                              
            ⋮┆----------------------------------------
         2138┆ require(msg.sender == from || allowance(from, msg.sender) >=     
  total, "GenesisGroup: Not approved for emergency withdrawal");                

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 81 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
