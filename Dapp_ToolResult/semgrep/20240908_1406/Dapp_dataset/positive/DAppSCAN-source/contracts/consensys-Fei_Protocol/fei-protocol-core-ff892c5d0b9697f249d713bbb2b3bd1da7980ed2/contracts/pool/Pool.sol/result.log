METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 62 Code Findings │
└──────────────────┘
                 
    /sb/Pool.sol 
       solidity.performance.non-payable-constructor      
          Consider making costructor payable to save gas.
                                                         
          565┆ constructor (string memory name_, string memory symbol_) public {
          566┆     _name = name_;
          567┆     _symbol = symbol_;
          568┆     _decimals = 18;
          569┆ }
            ⋮┆----------------------------------------
       solidity.performance.unnecessary-checked-arithmetic-in-loop              
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
                                                                                
         1466┆ for (uint256 i = 1; i < b; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
           34┆ require(value < 2**128, "SafeCast: value doesn\'t fit in 128     
  bits");                                                                       
            ⋮┆----------------------------------------
           49┆ require(value < 2**64, "SafeCast: value doesn\'t fit in 64       
  bits");                                                                       
            ⋮┆----------------------------------------
           64┆ require(value < 2**32, "SafeCast: value doesn\'t fit in 32       
  bits");                                                                       
            ⋮┆----------------------------------------
           79┆ require(value < 2**16, "SafeCast: value doesn\'t fit in 16       
  bits");                                                                       
            ⋮┆----------------------------------------
           94┆ require(value < 2**8, "SafeCast: value doesn\'t fit in 8 bits");
            ⋮┆----------------------------------------
          106┆ require(value >= 0, "SafeCast: value must be positive");
            ⋮┆----------------------------------------
          124┆ require(value >= -2**127 && value < 2**127, "SafeCast: value     
  doesn\'t fit in 128 bits");                                                   
            ⋮┆----------------------------------------
          142┆ require(value >= -2**63 && value < 2**63, "SafeCast: value       
  doesn\'t fit in 64 bits");                                                    
            ⋮┆----------------------------------------
          160┆ require(value >= -2**31 && value < 2**31, "SafeCast: value       
  doesn\'t fit in 32 bits");                                                    
            ⋮┆----------------------------------------
          178┆ require(value >= -2**15 && value < 2**15, "SafeCast: value       
  doesn\'t fit in 16 bits");                                                    
            ⋮┆----------------------------------------
          196┆ require(value >= -2**7 && value < 2**7, "SafeCast: value doesn\'t
  fit in 8 bits");                                                              
            ⋮┆----------------------------------------
          208┆ require(value < 2**255, "SafeCast: value doesn't fit in an       
  int256");                                                                     
            ⋮┆----------------------------------------
          390┆ require(c >= a, "SafeMath: addition overflow");
            ⋮┆----------------------------------------
          405┆ require(b <= a, "SafeMath: subtraction overflow");
            ⋮┆----------------------------------------
          422┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          439┆ require(b > 0, "SafeMath: division by zero");
            ⋮┆----------------------------------------
          456┆ require(b > 0, "SafeMath: modulo by zero");
            ⋮┆----------------------------------------
          719┆ require(sender != address(0), "ERC20: transfer from the zero     
  address");                                                                    
            ⋮┆----------------------------------------
          720┆ require(recipient != address(0), "ERC20: transfer to the zero    
  address");                                                                    
            ⋮┆----------------------------------------
          739┆ require(account != address(0), "ERC20: mint to the zero          
  address");                                                                    
            ⋮┆----------------------------------------
          760┆ require(account != address(0), "ERC20: burn from the zero        
  address");                                                                    
            ⋮┆----------------------------------------
          783┆ require(owner != address(0), "ERC20: approve from the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          784┆ require(spender != address(0), "ERC20: approve to the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          963┆ require(c >= a, "SafeMath: addition overflow");
            ⋮┆----------------------------------------
         1070┆ require(c >= a, "SafeMath: addition overflow");
            ⋮┆----------------------------------------
         1125┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
         1193┆ require(c >= a, "SafeMath: addition overflow");
            ⋮┆----------------------------------------
         1248┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
         1634┆ require(!initialized, "Pool: Already initialized");
            ⋮┆----------------------------------------
         1691┆ require(initialized, "Pool: Uninitialized");
            ⋮┆----------------------------------------
         1692┆ require(amount <= stakedToken.balanceOf(from), "Pool: Balance too
  low to stake");                                                               
            ⋮┆----------------------------------------
         1700┆ require(poolTokens != 0, "Pool: Window has ended");
            ⋮┆----------------------------------------
         1719┆ require(amountPool != 0, "Pool: User has no redeemable pool      
  tokens");                                                                     
            ⋮┆----------------------------------------
       solidity.performance.use-multiple-require                                
          Using multiple require statements is cheaper than using && multiple   
  check combinations.                                                           
          There are more advantages, such as easier to read code and better     
  coverage reports.                                                             
                                                                                
          124┆ require(value >= -2**127 && value < 2**127, "SafeCast: value     
  doesn\'t fit in 128 bits");                                                   
            ⋮┆----------------------------------------
          142┆ require(value >= -2**63 && value < 2**63, "SafeCast: value       
  doesn\'t fit in 64 bits");                                                    
            ⋮┆----------------------------------------
          160┆ require(value >= -2**31 && value < 2**31, "SafeCast: value       
  doesn\'t fit in 32 bits");                                                    
            ⋮┆----------------------------------------
          178┆ require(value >= -2**15 && value < 2**15, "SafeCast: value       
  doesn\'t fit in 16 bits");                                                    
            ⋮┆----------------------------------------
          196┆ require(value >= -2**7 && value < 2**7, "SafeCast: value doesn\'t
  fit in 8 bits");                                                              
            ⋮┆----------------------------------------
       solidity.performance.use-nested-if                                       
          Using nested is cheaper than using && multiple check combinations.    
  There are more                                                                
          advantages, such as easier to read code and better coverage reports.  
                                                                                
         1742┆        if (from != address(0) && to != address(0)) {
         1743┆                    Decimal.D256 memory ratio =                   
  Decimal.ratio(amount, balanceOf(from));                                       
         1744┆                    uint amountStaked =                         
  ratio.mul(stakedBalance[from]).asUint256();                                 
         1745┆ 
         1746┆                                     
  stakedBalance[from] -= amountStaked;             
         1747┆                                   
  stakedBalance[to] += amountStaked;             
         1748┆        }
            ⋮┆----------------------------------------
       solidity.performance.use-prefix-increment-not-postfix                    
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
                                                                                
         1466┆ for (uint256 i = 1; i < b; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
           34┆ require(value < 2**128, "SafeCast: value doesn\'t fit in 128     
  bits");                                                                       
            ⋮┆----------------------------------------
           49┆ require(value < 2**64, "SafeCast: value doesn\'t fit in 64       
  bits");                                                                       
            ⋮┆----------------------------------------
           64┆ require(value < 2**32, "SafeCast: value doesn\'t fit in 32       
  bits");                                                                       
            ⋮┆----------------------------------------
           79┆ require(value < 2**16, "SafeCast: value doesn\'t fit in 16       
  bits");                                                                       
            ⋮┆----------------------------------------
           94┆ require(value < 2**8, "SafeCast: value doesn\'t fit in 8 bits");
            ⋮┆----------------------------------------
          124┆ require(value >= -2**127 && value < 2**127, "SafeCast: value     
  doesn\'t fit in 128 bits");                                                   
            ⋮┆----------------------------------------
          142┆ require(value >= -2**63 && value < 2**63, "SafeCast: value       
  doesn\'t fit in 64 bits");                                                    
            ⋮┆----------------------------------------
          160┆ require(value >= -2**31 && value < 2**31, "SafeCast: value       
  doesn\'t fit in 32 bits");                                                    
            ⋮┆----------------------------------------
          178┆ require(value >= -2**15 && value < 2**15, "SafeCast: value       
  doesn\'t fit in 16 bits");                                                    
            ⋮┆----------------------------------------
          196┆ require(value >= -2**7 && value < 2**7, "SafeCast: value doesn\'t
  fit in 8 bits");                                                              
            ⋮┆----------------------------------------
          208┆ require(value < 2**255, "SafeCast: value doesn't fit in an       
  int256");                                                                     
            ⋮┆----------------------------------------
          422┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          719┆ require(sender != address(0), "ERC20: transfer from the zero     
  address");                                                                    
            ⋮┆----------------------------------------
          720┆ require(recipient != address(0), "ERC20: transfer to the zero    
  address");                                                                    
            ⋮┆----------------------------------------
          760┆ require(account != address(0), "ERC20: burn from the zero        
  address");                                                                    
            ⋮┆----------------------------------------
          783┆ require(owner != address(0), "ERC20: approve from the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          784┆ require(spender != address(0), "ERC20: approve to the zero       
  address");                                                                    
            ⋮┆----------------------------------------
         1125┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
         1248┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
         1719┆ require(amountPool != 0, "Pool: User has no redeemable pool      
  tokens");                                                                     

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 62 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
