METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 50 Code Findings │
└──────────────────┘
                          
    /sb/Consideration.sol 
       solidity.best-practice.use-abi-encodecall-instead-of-encodewithselector  
          To guarantee arguments type safety it is recommended to use           
  `abi.encodeCall` instead of                                                   
          `abi.encodeWithSelector`.                                             
                                                                                
         3223┆ bool success = _staticcall(
         3224┆     offerer,
         3225┆     abi.encodeWithSelector(
         3226┆         EIP1271Interface.isValidSignature.selector,
         3227┆         digest,
         3228┆         signature
         3229┆     )
         3230┆ );
            ⋮┆----------------------------------------
         3499┆ bool success = _staticcall(
         3500┆     zone,
         3501┆     abi.encodeWithSelector(
         3502┆         ZoneInterface.isValidOrder.selector,
         3503┆         orderHash,
         3504┆         msg.sender,
         3505┆         offerer,
         3506┆         zoneHash
         3507┆     )
         3508┆ );
            ⋮┆----------------------------------------
         3553┆ success = _staticcall(
         3554┆     zone,
         3555┆     abi.encodeWithSelector(
         3556┆         ZoneInterface.isValidOrder.selector,
         3557┆         orderHash,
         3558┆         msg.sender,
         3559┆         offerer,
         3560┆         zoneHash
         3561┆     )
         3562┆ );
            ⋮┆----------------------------------------
         3566┆ success = _staticcall(
         3567┆     zone,
         3568┆     abi.encodeWithSelector(
         3569┆         ZoneInterface.isValidOrderIncludingExtraData.selector,
         3570┆         orderHash,
         3571┆         msg.sender,
         3572┆         advancedOrder,
         3573┆         priorOrderHashes
         3574┆     )
         3575┆ );
            ⋮┆----------------------------------------
         6329┆ bool success = _callProxy(
         6330┆     from,
         6331┆     token,
         6332┆     abi.encodeWithSelector(
         6333┆         ERC1155Interface.safeTransferFrom.selector,
         6334┆         from,
         6335┆         to,
         6336┆         identifier,
         6337┆         amount,
         6338┆         ""
             [hid 2 additional lines, adjust with --max-lines-per-finding] 
         6381┆ (success, ) = token.call(
         6382┆     abi.encodeWithSelector(
         6383┆         ERC1155Interface.safeBatchTransferFrom.selector,
         6384┆         from,
         6385┆         to,
         6386┆         tokenIds,
         6387┆         amounts,
         6388┆         ""
         6389┆     )
         6390┆ );
            ⋮┆----------------------------------------
         6393┆ success = _callProxy(
         6394┆     from,
         6395┆     token,
         6396┆     abi.encodeWithSelector(
         6397┆         ERC1155Interface.safeBatchTransferFrom.selector,
         6398┆         from,
         6399┆         to,
         6400┆         tokenIds,
         6401┆         amounts,
         6402┆         ""
             [hid 2 additional lines, adjust with --max-lines-per-finding] 
         6460┆ (success, ) = proxy.call(
         6461┆     abi.encodeWithSelector(
         6462┆         ProxyInterface.proxyAssert.selector,
         6463┆         target,
         6464┆         0,
         6465┆         callData
         6466┆     )
         6467┆ );
            ⋮┆----------------------------------------
       solidity.performance.array-length-outside-loop                           
          Caching the array length outside a loop saves reading it on each      
  iteration, as long as the                                                     
          array's length is not changed during the loop.                        
                                                                                
         1669┆ for (uint256 i = 0; i < criteriaResolvers.length; ++i) {
            ⋮┆----------------------------------------
         1677┆ if (orderIndex >= advancedOrders.length) {
            ⋮┆----------------------------------------
         1701┆ if (componentIndex >= orderParameters.offer.length) {
            ⋮┆----------------------------------------
         1727┆ componentIndex >= orderParameters.consideration.length
            ⋮┆----------------------------------------
         1771┆ for (uint256 i = 0; i < advancedOrders.length; ++i) {
            ⋮┆----------------------------------------
         1782┆ advancedOrder.parameters.consideration.length
            ⋮┆----------------------------------------
         1798┆ totalItems = advancedOrder.parameters.offer.length;
            ⋮┆----------------------------------------
         1946┆ for (uint256 i = 0; i < executions.length; ++i) {
            ⋮┆----------------------------------------
         2005┆ uint256 originalLength = oldExecutionIndices.length;
            ⋮┆----------------------------------------
         2063┆ uint256 indicesLength = indices.length;
            ⋮┆----------------------------------------
         2161┆ batches[batchIndex].executionIndices.length
            ⋮┆----------------------------------------
         2874┆ for (uint256 i = 0; i < proof.length; ++i) {
            ⋮┆----------------------------------------
         3718┆ for (uint256 i = 0; i < fulfillmentComponents.length; ++i) {
            ⋮┆----------------------------------------
         3723┆ if (orderIndex >= advancedOrders.length) {
            ⋮┆----------------------------------------
         5097┆ for (uint256 i = 0; i < orderParameters.offer.length; ) {
            ⋮┆----------------------------------------
         5181┆ for (uint256 i = 0; i < orderParameters.consideration.length; ) {
            ⋮┆----------------------------------------
         5331┆ for (uint256 j = 0; j < offer.length; ++j) {
            ⋮┆----------------------------------------
         5375┆ for (uint256 j = 0; j < consideration.length; ++j) {
            ⋮┆----------------------------------------
         5626┆ for (uint256 i = 0; i < offerFulfillments.length; ++i) {
            ⋮┆----------------------------------------
         5649┆ for (uint256 i = 0; i < considerationFulfillments.length; ++i) {
            ⋮┆----------------------------------------
         5670┆ i + offerFulfillments.length - totalFilteredExecutions
            ⋮┆----------------------------------------
         5758┆ for (uint256 j = 0; j < consideration.length; ++j) {
            ⋮┆----------------------------------------
         5777┆ for (uint256 i = 0; i < standardExecutions.length; ) {
            ⋮┆----------------------------------------
         5807┆ for (uint256 i = 0; i < batchExecutions.length; ++i) {
            ⋮┆----------------------------------------
         6487┆ for (uint256 i = 0; i < parameters.additionalRecipients.length; )
  {                                                                             
            ⋮┆----------------------------------------
         6566┆ for (uint256 i = 0; i < parameters.additionalRecipients.length; )
  {                                                                             
            ⋮┆----------------------------------------
         7300┆ order.consideration.length
            ⋮┆----------------------------------------
       solidity.performance.non-payable-constructor      
          Consider making costructor payable to save gas.
                                                         
         1130┆ constructor(
         1131┆     address legacyProxyRegistry,
         1132┆     address legacyTokenTransferProxy,
         1133┆     address requiredProxyImplementation
         1134┆ ) {
         1135┆     // Derive hashes, reference chainId, and associated domain   
  separator.                                                                    
         1136┆     _NAME_HASH = keccak256(bytes(_NAME));
         1137┆     _VERSION_HASH = keccak256(bytes(_VERSION));
         1138┆ 
         1139┆     // prettier-ignore
             [hid 69 additional lines, adjust with --max-lines-per-finding] 
         1636┆ constructor(
         1637┆     address legacyProxyRegistry,
         1638┆     address legacyTokenTransferProxy,
         1639┆     address requiredProxyImplementation
         1640┆ )
         1641┆     ConsiderationBase(
         1642┆         legacyProxyRegistry,
         1643┆         legacyTokenTransferProxy,
         1644┆         requiredProxyImplementation
         1645┆     )
             [hid 1 additional lines, adjust with --max-lines-per-finding] 
         3003┆ constructor(
         3004┆     address legacyProxyRegistry,
         3005┆     address legacyTokenTransferProxy,
         3006┆     address requiredProxyImplementation
         3007┆ )
         3008┆     ConsiderationPure(
         3009┆         legacyProxyRegistry,
         3010┆         legacyTokenTransferProxy,
         3011┆         requiredProxyImplementation
         3012┆     )
             [hid 1 additional lines, adjust with --max-lines-per-finding] 
         4109┆ constructor(
         4110┆     address legacyProxyRegistry,
         4111┆     address legacyTokenTransferProxy,
         4112┆     address requiredProxyImplementation
         4113┆ )
         4114┆     ConsiderationInternalView(
         4115┆         legacyProxyRegistry,
         4116┆         legacyTokenTransferProxy,
         4117┆         requiredProxyImplementation
         4118┆     )
             [hid 1 additional lines, adjust with --max-lines-per-finding] 
         6688┆ constructor(
         6689┆     address legacyProxyRegistry,
         6690┆     address legacyTokenTransferProxy,
         6691┆     address requiredProxyImplementation
         6692┆ )
         6693┆     ConsiderationInternal(
         6694┆         legacyProxyRegistry,
         6695┆         legacyTokenTransferProxy,
         6696┆         requiredProxyImplementation
         6697┆     )
             [hid 1 additional lines, adjust with --max-lines-per-finding] 
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
         5958┆ revert("Not yet implemented");
            ⋮┆----------------------------------------
         6219┆ revert("Not yet implemented");
            ⋮┆----------------------------------------
         6352┆ revert("Not yet implemented");
            ⋮┆----------------------------------------
         6406┆ revert("Not yet implemented");
            ⋮┆----------------------------------------
       solidity.performance.use-nested-if                                       
          Using nested is cheaper than using && multiple check combinations.    
  There are more                                                                
          advantages, such as easier to read code and better coverage reports.  
                                                                                
         3118┆ if (returnDataSize == 0 && account.code.length == 0) {
         3119┆     revert NoContract(account);
         3120┆ }
            ⋮┆----------------------------------------
         3183┆ if (v != 27 && v != 28) {
         3184┆     revert BadSignatureV(v);
         3185┆ }
            ⋮┆----------------------------------------
         3493┆ if (
         3494┆     uint256(orderType) > 1 &&
         3495┆     msg.sender != zone &&
         3496┆     msg.sender != offerer
         3497┆ ) {
         3498┆     // Perform minimal staticcall to the zone.
         3499┆     bool success = _staticcall(
         3500┆         zone,
         3501┆         abi.encodeWithSelector(
         3502┆             ZoneInterface.isValidOrder.selector,
             [hid 10 additional lines, adjust with --max-lines-per-finding] 
         3542┆ if (
         3543┆     uint256(orderType) > 1 &&
         3544┆     msg.sender != zone &&
         3545┆     msg.sender != offerer
         3546┆ ) {
         3547┆     // Declare a variable for the status of the staticcall to the
  zone.                                                                         
         3548┆     bool success;
         3549┆ 
         3550┆     // If no extraData is supplied...
         3551┆     if (advancedOrder.extraData.length == 0) {
             [hid 29 additional lines, adjust with --max-lines-per-finding] 
         4838┆ if (
         4839┆     numerator < denominator &&
         4840┆     _doesNotSupportPartialFills(orderParameters.orderType)
         4841┆ ) {
         4842┆     // Revert if partial fill was attempted on an unsupported    
  order.                                                                        
         4843┆     revert PartialFillsNotEnabledForOrder();
         4844┆ }
            ⋮┆----------------------------------------
         7283┆ if (msg.sender != offerer && msg.sender != zone) {
         7284┆     revert InvalidCanceller();
         7285┆ }

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 50 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
