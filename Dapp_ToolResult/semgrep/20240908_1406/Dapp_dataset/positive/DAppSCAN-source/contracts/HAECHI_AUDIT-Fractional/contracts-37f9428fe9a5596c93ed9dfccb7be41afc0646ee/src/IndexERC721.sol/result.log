METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 58 Code Findings │
└──────────────────┘
                        
    /sb/IndexERC721.sol 
       solidity.performance.non-payable-constructor      
          Consider making costructor payable to save gas.
                                                         
         1232┆ constructor (string memory name_, string memory symbol_) {
         1233┆     _name = name_;
         1234┆     _symbol = symbol_;
         1235┆ 
         1236┆     // register the supported interfaces to conform to ERC721 via
  ERC165                                                                        
         1237┆     _registerInterface(type(IERC721).interfaceId);
         1238┆     _registerInterface(type(IERC721Metadata).interfaceId);
         1239┆     _registerInterface(type(IERC721Enumerable).interfaceId);
         1240┆ }
            ⋮┆----------------------------------------
         1658┆ constructor(string memory name, string memory symbol)            
  ERC721(name, symbol) {                                                        
         1659┆     _mint(msg.sender, 0);
         1660┆ }
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
           33┆ require(value > 0, "Counter: decrement overflow");
            ⋮┆----------------------------------------
          383┆ require(interfaceId != 0xffffffff, "ERC165: invalid interface    
  id");                                                                         
            ⋮┆----------------------------------------
          437┆ require(address(this).balance >= amount, "Address: insufficient  
  balance");                                                                    
            ⋮┆----------------------------------------
          441┆ require(success, "Address: unable to send value, recipient may   
  have reverted");                                                              
            ⋮┆----------------------------------------
          498┆ require(address(this).balance >= value, "Address: insufficient   
  balance for call");                                                           
            ⋮┆----------------------------------------
          499┆ require(isContract(target), "Address: call to non-contract");
            ⋮┆----------------------------------------
          523┆ require(isContract(target), "Address: static call to             
  non-contract");                                                               
            ⋮┆----------------------------------------
          547┆ require(isContract(target), "Address: delegate call to           
  non-contract");                                                               
            ⋮┆----------------------------------------
          700┆ require(set._values.length > index, "EnumerableSet: index out of 
  bounds");                                                                     
            ⋮┆----------------------------------------
         1003┆ require(map._entries.length > index, "EnumerableMap: index out of
  bounds");                                                                     
            ⋮┆----------------------------------------
         1028┆ require(keyIndex != 0, "EnumerableMap: nonexistent key"); //     
  Equivalent to contains(map, key)                                              
            ⋮┆----------------------------------------
         1189┆ require(value == 0, "Strings: hex length insufficient");
            ⋮┆----------------------------------------
         1246┆ require(owner != address(0), "ERC721: balance query for the zero 
  address");                                                                    
            ⋮┆----------------------------------------
         1275┆ require(_exists(tokenId), "ERC721Metadata: URI query for         
  nonexistent token");                                                          
            ⋮┆----------------------------------------
         1329┆ require(to != owner, "ERC721: approval to current owner");
            ⋮┆----------------------------------------
         1331┆ require(_msgSender() == owner || ERC721.isApprovedForAll(owner,  
  _msgSender()),                                                                
         1332┆     "ERC721: approve caller is not owner nor approved for all"
         1333┆ );
            ⋮┆----------------------------------------
         1342┆ require(_exists(tokenId), "ERC721: approved query for nonexistent
  token");                                                                      
            ⋮┆----------------------------------------
         1351┆ require(operator != _msgSender(), "ERC721: approve to caller");
            ⋮┆----------------------------------------
         1369┆ require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721:      
  transfer caller is not owner nor approved");                                  
            ⋮┆----------------------------------------
         1385┆ require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721:      
  transfer caller is not owner nor approved");                                  
            ⋮┆----------------------------------------
         1409┆ require(_checkOnERC721Received(from, to, tokenId, _data),        
  "ERC721: transfer to non ERC721Receiver implementer");                        
            ⋮┆----------------------------------------
         1432┆ require(_exists(tokenId), "ERC721: operator query for nonexistent
  token");                                                                      
            ⋮┆----------------------------------------
         1457┆ require(_checkOnERC721Received(address(0), to, tokenId, _data),  
  "ERC721: transfer to non ERC721Receiver implementer");                        
            ⋮┆----------------------------------------
         1473┆ require(to != address(0), "ERC721: mint to the zero address");
            ⋮┆----------------------------------------
         1474┆ require(!_exists(tokenId), "ERC721: token already minted");
            ⋮┆----------------------------------------
         1527┆ require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of    
  token that is not own"); // internal owner                                    
            ⋮┆----------------------------------------
         1528┆ require(to != address(0), "ERC721: transfer to the zero          
  address");                                                                    
            ⋮┆----------------------------------------
         1551┆ require(_exists(tokenId), "ERC721Metadata: URI set of nonexistent
  token");                                                                      
            ⋮┆----------------------------------------
         1582┆ revert("ERC721: transfer to non ERC721Receiver implementer");
            ⋮┆----------------------------------------
         1675┆ require(_isApprovedOrOwner(msg.sender, 0), "withdraw:not         
  allowed");                                                                    
            ⋮┆----------------------------------------
         1684┆ require(_isApprovedOrOwner(msg.sender, 0), "withdraw:not         
  allowed");                                                                    
            ⋮┆----------------------------------------
         1693┆ require(_isApprovedOrOwner(msg.sender, 0), "withdraw:not         
  allowed");                                                                    
            ⋮┆----------------------------------------
       solidity.performance.use-prefix-increment-not-postfix                    
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
                                                                                
         1150┆ digits++;
            ⋮┆----------------------------------------
         1172┆ length++;
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
          441┆ require(success, "Address: unable to send value, recipient may   
  have reverted");                                                              
            ⋮┆----------------------------------------
          498┆ require(address(this).balance >= value, "Address: insufficient   
  balance for call");                                                           
            ⋮┆----------------------------------------
          523┆ require(isContract(target), "Address: static call to             
  non-contract");                                                               
            ⋮┆----------------------------------------
          547┆ require(isContract(target), "Address: delegate call to           
  non-contract");                                                               
            ⋮┆----------------------------------------
          700┆ require(set._values.length > index, "EnumerableSet: index out of 
  bounds");                                                                     
            ⋮┆----------------------------------------
         1003┆ require(map._entries.length > index, "EnumerableMap: index out of
  bounds");                                                                     
            ⋮┆----------------------------------------
         1246┆ require(owner != address(0), "ERC721: balance query for the zero 
  address");                                                                    
            ⋮┆----------------------------------------
         1275┆ require(_exists(tokenId), "ERC721Metadata: URI query for         
  nonexistent token");                                                          
            ⋮┆----------------------------------------
         1329┆ require(to != owner, "ERC721: approval to current owner");
            ⋮┆----------------------------------------
         1331┆ require(_msgSender() == owner || ERC721.isApprovedForAll(owner,  
  _msgSender()),                                                                
         1332┆     "ERC721: approve caller is not owner nor approved for all"
         1333┆ );
            ⋮┆----------------------------------------
         1342┆ require(_exists(tokenId), "ERC721: approved query for nonexistent
  token");                                                                      
            ⋮┆----------------------------------------
         1369┆ require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721:      
  transfer caller is not owner nor approved");                                  
            ⋮┆----------------------------------------
         1385┆ require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721:      
  transfer caller is not owner nor approved");                                  
            ⋮┆----------------------------------------
         1409┆ require(_checkOnERC721Received(from, to, tokenId, _data),        
  "ERC721: transfer to non ERC721Receiver implementer");                        
            ⋮┆----------------------------------------
         1432┆ require(_exists(tokenId), "ERC721: operator query for nonexistent
  token");                                                                      
            ⋮┆----------------------------------------
         1457┆ require(_checkOnERC721Received(address(0), to, tokenId, _data),  
  "ERC721: transfer to non ERC721Receiver implementer");                        
            ⋮┆----------------------------------------
         1527┆ require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of    
  token that is not own"); // internal owner                                    
            ⋮┆----------------------------------------
         1528┆ require(to != address(0), "ERC721: transfer to the zero          
  address");                                                                    
            ⋮┆----------------------------------------
         1551┆ require(_exists(tokenId), "ERC721Metadata: URI set of nonexistent
  token");                                                                      
            ⋮┆----------------------------------------
         1582┆ revert("ERC721: transfer to non ERC721Receiver implementer");
            ⋮┆----------------------------------------
       solidity.security.erc721-reentrancy    
          ERC721 onERC721Received() reentrancy
                                              
         1409┆ require(_checkOnERC721Received(from, to, tokenId, _data),        
  "ERC721: transfer to non ERC721Receiver implementer");                        
            ⋮┆----------------------------------------
         1457┆ require(_checkOnERC721Received(address(0), to, tokenId, _data),  
  "ERC721: transfer to non ERC721Receiver implementer");                        

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 58 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
