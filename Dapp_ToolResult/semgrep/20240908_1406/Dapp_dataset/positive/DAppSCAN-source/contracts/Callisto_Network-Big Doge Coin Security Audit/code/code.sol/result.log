METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 64 Code Findings │
└──────────────────┘
                 
    /sb/code.sol 
       solidity.best-practice.use-ownable2step                                  
          By demanding that the receiver of the owner permissions actively      
  accept via a contract call                                                    
          of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the 
  contract ownership                                                            
          from accidentally being transferred  to an address that cannot handle 
  it.                                                                           
                                                                                
          679┆ contract LiquidityGeneratorToken is Context, IERC20, Ownable {
            ⋮┆----------------------------------------
       solidity.performance.array-length-outside-loop                           
          Caching the array length outside a loop saves reading it on each      
  iteration, as long as the                                                     
          array's length is not changed during the loop.                        
                                                                                
          933┆ for (uint256 i = 0; i < _excluded.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.init-variables-with-default-value                   
          Uninitialized variables are assigned with the types default value.    
  Explicitly initializing a                                                     
          variable with its default value costs unnecessary gas.                
                                                                                
          718┆ bool public swapAndLiquifyEnabled = false;
            ⋮┆----------------------------------------
       solidity.performance.non-payable-constructor      
          Consider making costructor payable to save gas.
                                                         
          409┆ constructor () internal {
          410┆     address msgSender = _msgSender();
          411┆     _owner = msgSender;
          412┆     emit OwnershipTransferred(address(0), msgSender);
          413┆ }
            ⋮┆----------------------------------------
          737┆ constructor (address tokenOwner,string memory name, string memory
  symbol,uint8 decimal, uint256 amountOfTokenWei,uint8 setTaxFee, uint8         
  setLiqFee, uint256 _maxT ... [0m                                              
          738┆     _name = name;
          739┆     _symbol = symbol;
          740┆     _decimals = decimal;
          741┆     _tTotal = amountOfTokenWei;
          742┆     _rTotal = (MAX - (MAX % _tTotal));
          743┆ 
          744┆     _rOwned[tokenOwner] = _rTotal;
          745┆ 
          746┆     maxTaxFee = _maxTaxFee;
            [shortened a long line from output, adjust with                     
  --max-chars-per-line]                                                         
             [hid 21 additional lines, adjust with --max-lines-per-finding] 
       solidity.performance.state-variable-read-in-a-loop                       
          Replace state variable reads and writes within loops with local       
  variable reads and writes.                                                    
                                                                                
          933┆ for (uint256 i = 0; i < _excluded.length; i++) {
            ⋮┆----------------------------------------
          934┆ if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] >   
  tSupply) return (_rTotal, _tTotal);                                           
            ⋮┆----------------------------------------
          934┆ if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] >   
  tSupply) return (_rTotal, _tTotal);                                           
            ⋮┆----------------------------------------
          934┆ if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] >   
  tSupply) return (_rTotal, _tTotal);                                           
            ⋮┆----------------------------------------
          934┆ if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] >   
  tSupply) return (_rTotal, _tTotal);                                           
            ⋮┆----------------------------------------
          934┆ if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] >   
  tSupply) return (_rTotal, _tTotal);                                           
            ⋮┆----------------------------------------
          934┆ if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] >   
  tSupply) return (_rTotal, _tTotal);                                           
            ⋮┆----------------------------------------
          935┆ rSupply = rSupply.sub(_rOwned[_excluded[i]]);
            ⋮┆----------------------------------------
          935┆ rSupply = rSupply.sub(_rOwned[_excluded[i]]);
            ⋮┆----------------------------------------
          936┆ tSupply = tSupply.sub(_tOwned[_excluded[i]]);
            ⋮┆----------------------------------------
          936┆ tSupply = tSupply.sub(_tOwned[_excluded[i]]);
            ⋮┆----------------------------------------
       solidity.performance.unnecessary-checked-arithmetic-in-loop              
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
                                                                                
          933┆ for (uint256 i = 0; i < _excluded.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
          108┆ require(c >= a, "SafeMath: addition overflow");
            ⋮┆----------------------------------------
          163┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          298┆ require(address(this).balance >= amount, "Address: insufficient  
  balance");                                                                    
            ⋮┆----------------------------------------
          302┆ require(success, "Address: unable to send value, recipient may   
  have reverted");                                                              
            ⋮┆----------------------------------------
          359┆ require(address(this).balance >= value, "Address: insufficient   
  balance for call");                                                           
            ⋮┆----------------------------------------
          364┆ require(isContract(target), "Address: call to non-contract");
            ⋮┆----------------------------------------
          426┆ require(_owner == _msgSender(), "Ownable: caller is not the      
  owner");                                                                      
            ⋮┆----------------------------------------
          447┆ require(newOwner != address(0), "Ownable: new owner is the zero  
  address");                                                                    
            ⋮┆----------------------------------------
          466┆ require(_previousOwner == msg.sender, "You don't have permission 
  to unlock the token contract");                                               
            ⋮┆----------------------------------------
          467┆ require(now > _lockTime , "Contract is locked until 7 days");
            ⋮┆----------------------------------------
          830┆ require(!_isExcluded[sender], "Excluded addresses cannot call    
  this function");                                                              
            ⋮┆----------------------------------------
          838┆ require(tAmount <= _tTotal, "Amount must be less than supply");
            ⋮┆----------------------------------------
          849┆ require(rAmount <= _rTotal, "Amount must be less than total      
  reflections");                                                                
            ⋮┆----------------------------------------
          875┆ require(taxFee >= 0 && taxFee <=maxTaxFee,"taxFee out of range");
            ⋮┆----------------------------------------
          880┆ require(liquidityFee >= 0 && liquidityFee                        
  <=maxLiqFee,"liquidityFee out of range");                                     
            ⋮┆----------------------------------------
          885┆ require(maxTxPercent >= minMxTxPercentage && maxTxPercent        
  <=100,"maxTxPercent out of range");                                           
            ⋮┆----------------------------------------
          982┆ require(owner != address(0), "ERC20: approve from the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          983┆ require(spender != address(0), "ERC20: approve to the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          994┆ require(from != address(0), "ERC20: transfer from the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          995┆ require(to != address(0), "ERC20: transfer to the zero address");
            ⋮┆----------------------------------------
          996┆ require(amount > 0, "Transfer amount must be greater than zero");
            ⋮┆----------------------------------------
          998┆ require(amount <= _maxTxAmount, "Transfer amount exceeds the     
  maxTxAmount.");                                                               
            ⋮┆----------------------------------------
       solidity.performance.use-multiple-require                                
          Using multiple require statements is cheaper than using && multiple   
  check combinations.                                                           
          There are more advantages, such as easier to read code and better     
  coverage reports.                                                             
                                                                                
          875┆ require(taxFee >= 0 && taxFee <=maxTaxFee,"taxFee out of range");
            ⋮┆----------------------------------------
          880┆ require(liquidityFee >= 0 && liquidityFee                        
  <=maxLiqFee,"liquidityFee out of range");                                     
            ⋮┆----------------------------------------
          885┆ require(maxTxPercent >= minMxTxPercentage && maxTxPercent        
  <=100,"maxTxPercent out of range");                                           
            ⋮┆----------------------------------------
       solidity.performance.use-nested-if                                       
          Using nested is cheaper than using && multiple check combinations.    
  There are more                                                                
          advantages, such as easier to read code and better coverage reports.  
                                                                                
          963┆ if(_taxFee == 0 && _liquidityFee == 0) return;
            ⋮┆----------------------------------------
          997┆ if(from != owner() && to != owner())
          998┆     require(amount <= _maxTxAmount, "Transfer amount exceeds the 
  maxTxAmount.");                                                               
            ⋮┆----------------------------------------
         1012┆ if (
         1013┆     overMinTokenBalance &&
         1014┆     !inSwapAndLiquify &&
         1015┆     from != uniswapV2Pair &&
         1016┆     swapAndLiquifyEnabled
         1017┆ ) {
         1018┆     contractTokenBalance = numTokensSellToAddToLiquidity;
         1019┆     //add liquidity
         1020┆     swapAndLiquify(contractTokenBalance);
         1021┆ }
            ⋮┆----------------------------------------
         1096┆ if (_isExcluded[sender] && !_isExcluded[recipient]) {
         1097┆     _transferFromExcluded(sender, recipient, amount);
         1098┆ } else if (!_isExcluded[sender] && _isExcluded[recipient]) {
         1099┆     _transferToExcluded(sender, recipient, amount);
         1100┆ } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {
         1101┆     _transferStandard(sender, recipient, amount);
         1102┆ } else if (_isExcluded[sender] && _isExcluded[recipient]) {
         1103┆     _transferBothExcluded(sender, recipient, amount);
         1104┆ } else {
         1105┆     _transferStandard(sender, recipient, amount);
             [hid 1 additional lines, adjust with --max-lines-per-finding] 
         1098┆ } else if (!_isExcluded[sender] && _isExcluded[recipient]) {
         1099┆     _transferToExcluded(sender, recipient, amount);
         1100┆ } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {
         1101┆     _transferStandard(sender, recipient, amount);
         1102┆ } else if (_isExcluded[sender] && _isExcluded[recipient]) {
         1103┆     _transferBothExcluded(sender, recipient, amount);
         1104┆ } else {
         1105┆     _transferStandard(sender, recipient, amount);
         1106┆ }
            ⋮┆----------------------------------------
         1100┆ } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {
         1101┆     _transferStandard(sender, recipient, amount);
         1102┆ } else if (_isExcluded[sender] && _isExcluded[recipient]) {
         1103┆     _transferBothExcluded(sender, recipient, amount);
         1104┆ } else {
         1105┆     _transferStandard(sender, recipient, amount);
         1106┆ }
            ⋮┆----------------------------------------
         1102┆ } else if (_isExcluded[sender] && _isExcluded[recipient]) {
         1103┆     _transferBothExcluded(sender, recipient, amount);
         1104┆ } else {
         1105┆     _transferStandard(sender, recipient, amount);
         1106┆ }
            ⋮┆----------------------------------------
       solidity.performance.use-prefix-increment-not-postfix                    
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
                                                                                
          933┆ for (uint256 i = 0; i < _excluded.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
          163┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          302┆ require(success, "Address: unable to send value, recipient may   
  have reverted");                                                              
            ⋮┆----------------------------------------
          359┆ require(address(this).balance >= value, "Address: insufficient   
  balance for call");                                                           
            ⋮┆----------------------------------------
          447┆ require(newOwner != address(0), "Ownable: new owner is the zero  
  address");                                                                    
            ⋮┆----------------------------------------
          466┆ require(_previousOwner == msg.sender, "You don't have permission 
  to unlock the token contract");                                               
            ⋮┆----------------------------------------
          830┆ require(!_isExcluded[sender], "Excluded addresses cannot call    
  this function");                                                              
            ⋮┆----------------------------------------
          849┆ require(rAmount <= _rTotal, "Amount must be less than total      
  reflections");                                                                
            ⋮┆----------------------------------------
          982┆ require(owner != address(0), "ERC20: approve from the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          983┆ require(spender != address(0), "ERC20: approve to the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          994┆ require(from != address(0), "ERC20: transfer from the zero       
  address");                                                                    
            ⋮┆----------------------------------------
          995┆ require(to != address(0), "ERC20: transfer to the zero address");
            ⋮┆----------------------------------------
          996┆ require(amount > 0, "Transfer amount must be greater than zero");
            ⋮┆----------------------------------------
          998┆ require(amount <= _maxTxAmount, "Transfer amount exceeds the     
  maxTxAmount.");                                                               
            ⋮┆----------------------------------------
       solidity.security.no-slippage-check          
          No slippage check in a Uniswap v2/v3 trade
                                                    
         1067┆                                                                  
  uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(           
         1068┆     tokenAmount,
         1069┆     0, // accept any amount of ETH
         1070┆     path,
         1071┆     address(this),
         1072┆     block.timestamp
         1073┆ );

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 64 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
