METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 15 Code Findings │
└──────────────────┘
                             
    /sb/LiquidityStaking.sol 
       solidity.performance.non-payable-constructor      
          Consider making costructor payable to save gas.
                                                         
          427┆ constructor(
          428┆     address rewardToken_,
          429┆     address stakedToken_,
          430┆     uint256 startTimestamp_,
          431┆     uint256 endTimestamp_
          432┆ ) public {
          433┆     require(startTimestamp_ >= block.timestamp, "Start cannot be 
  in the past");                                                                
          434┆     rewardToken = rewardToken_;
          435┆     stakedToken = stakedToken_;
          436┆     startTimestamp = startTimestamp_;
             [hid 3 additional lines, adjust with --max-lines-per-finding] 
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
          115┆ require(c >= a, "SafeMath: addition overflow");
            ⋮┆----------------------------------------
          130┆ require(b <= a, "SafeMath: subtraction overflow");
            ⋮┆----------------------------------------
          147┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          164┆ require(b > 0, "SafeMath: division by zero");
            ⋮┆----------------------------------------
          181┆ require(b > 0, "SafeMath: modulo by zero");
            ⋮┆----------------------------------------
          433┆ require(startTimestamp_ >= block.timestamp, "Start cannot be in  
  the past");                                                                   
            ⋮┆----------------------------------------
          442┆ require(rate == 0 && rate_ != 0, "Should not initialize twice");
            ⋮┆----------------------------------------
          443┆ require(startTimestamp >= block.timestamp, "Start cannot be in   
  the past");                                                                   
            ⋮┆----------------------------------------
          446┆ require(
          447┆     IERC20(rewardToken).transferFrom(msg.sender, address(this),  
  amount),                                                                      
          448┆     "Reward transferFrom failed"
          449┆ );
            ⋮┆----------------------------------------
          462┆ require(
          463┆     IERC20(stakedToken).transferFrom(msg.sender, address(this),  
  amount),                                                                      
          464┆     "Staked transferFrom failed"
          465┆ );
            ⋮┆----------------------------------------
          487┆ require(IERC20(stakedToken).transfer(account, amount), "Staked   
  transfer failed");                                                            
            ⋮┆----------------------------------------
          494┆ require(IERC20(rewardToken).transfer(account, rewards), "Reward  
  transfer failed");                                                            
            ⋮┆----------------------------------------
       solidity.performance.use-multiple-require                                
          Using multiple require statements is cheaper than using && multiple   
  check combinations.                                                           
          There are more advantages, such as easier to read code and better     
  coverage reports.                                                             
                                                                                
          442┆ require(rate == 0 && rate_ != 0, "Should not initialize twice");
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
          147┆ require(c / a == b, "SafeMath: multiplication overflow");

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 15 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
