METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                     
                     
┌───────────────────┐
│ 174 Code Findings │
└───────────────────┘
                                   
    /sb/PayableProxyController.sol 
       solidity.best-practice.use-abi-encodecall-instead-of-encodewithselector  
          To guarantee arguments type safety it is recommended to use           
  `abi.encodeCall` instead of                                                   
          `abi.encodeWithSelector`.                                             
                                                                                
          566┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.transfer.selector, to, value));                  
            ⋮┆----------------------------------------
          575┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.transferFrom.selector, from, to, value));        
            ⋮┆----------------------------------------
          598┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.approve.selector, spender, value));              
            ⋮┆----------------------------------------
          607┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.approve.selector, spender, newAllowance));       
            ⋮┆----------------------------------------
          619┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.approve.selector, spender, newAllowance));       
            ⋮┆----------------------------------------
       solidity.performance.array-length-outside-loop                           
          Caching the array length outside a loop saves reading it on each      
  iteration, as long as the                                                     
          array's length is not changed during the loop.                        
                                                                                
         1937┆ for (uint256 i = 0; i < _actions.length; i++) {
            ⋮┆----------------------------------------
         2332┆ for (uint256 i = 0; i < _actions.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.non-payable-constructor      
          Consider making costructor payable to save gas.
                                                         
          127┆ constructor() internal {
          128┆     _status = _NOT_ENTERED;
          129┆ }
            ⋮┆----------------------------------------
         2303┆ constructor(
         2304┆     address _controller,
         2305┆     address _marginPool,
         2306┆     address payable _weth
         2307┆ ) public {
         2308┆     controller = Controller(_controller);
         2309┆     weth = WETH9(_weth);
         2310┆     ERC20Interface(address(weth)).safeApprove(_marginPool,       
  uint256(-1));                                                                 
         2311┆ }
            ⋮┆----------------------------------------
       solidity.performance.state-variable-read-in-a-loop                       
          Replace state variable reads and writes within loops with local       
  variable reads and writes.                                                    
                                                                                
         2338┆ (msg.sender == action.owner) ||                                  
  (controller.isOperator(action.owner, msg.sender)),                            
            ⋮┆----------------------------------------
       solidity.performance.unnecessary-checked-arithmetic-in-loop              
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
                                                                                
         1937┆ for (uint256 i = 0; i < _actions.length; i++) {
            ⋮┆----------------------------------------
         2332┆ for (uint256 i = 0; i < _actions.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
           46┆ require(balanceOf[msg.sender] >= _wad, "WETH9: insufficient      
  sender balance");                                                             
            ⋮┆----------------------------------------
           94┆ require(balanceOf[_src] >= _wad, "WETH9: insufficient source     
  balance");                                                                    
            ⋮┆----------------------------------------
           97┆ require(allowance[_src][msg.sender] >= _wad, "WETH9: invalid     
  allowance");                                                                  
            ⋮┆----------------------------------------
          140┆ require(_status != _ENTERED, "ReentrancyGuard: reentrant call");
            ⋮┆----------------------------------------
          263┆ require(c >= a, "SafeMath: addition overflow");
            ⋮┆----------------------------------------
          319┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          450┆ require(address(this).balance >= amount, "Address: insufficient  
  balance");                                                                    
            ⋮┆----------------------------------------
          454┆ require(success, "Address: unable to send value, recipient may   
  have reverted");                                                              
            ⋮┆----------------------------------------
          524┆ require(address(this).balance >= value, "Address: insufficient   
  balance for call");                                                           
            ⋮┆----------------------------------------
          534┆ require(isContract(target), "Address: call to non-contract");
            ⋮┆----------------------------------------
          594┆ require(
          595┆     (value == 0) || (token.allowance(address(this), spender) ==  
  0),                                                                           
          596┆     "SafeERC20: approve from non-zero to non-zero allowance"
          597┆ );
            ⋮┆----------------------------------------
          637┆ require(abi.decode(returndata, (bool)), "SafeERC20: ERC20        
  operation did not succeed");                                                  
            ⋮┆----------------------------------------
          676┆ require(_amount > 0, "MarginVault: invalid short otoken amount");
            ⋮┆----------------------------------------
          684┆ require(
          685┆     (_vault.shortOtokens[_index] == _shortOtoken) ||             
  (_vault.shortOtokens[_index] == address(0)),                                  
          686┆     "MarginVault: invalid short otoken position"
          687┆ );
            ⋮┆----------------------------------------
          708┆ require(
          709┆     (_index < _vault.shortOtokens.length) &&                     
  (_vault.shortOtokens[_index] == _shortOtoken),                                
          710┆     "MarginVault: short otoken address mismatch"
          711┆ );
            ⋮┆----------------------------------------
          733┆ require(_amount > 0, "MarginVault: invalid long otoken amount");
            ⋮┆----------------------------------------
          741┆ require(
          742┆     (_vault.longOtokens[_index] == _longOtoken) ||               
  (_vault.longOtokens[_index] == address(0)),                                   
          743┆     "MarginVault: invalid long otoken position"
          744┆ );
            ⋮┆----------------------------------------
          765┆ require(
          766┆     (_index < _vault.longOtokens.length) &&                      
  (_vault.longOtokens[_index] == _longOtoken),                                  
          767┆     "MarginVault: long otoken address mismatch"
          768┆ );
            ⋮┆----------------------------------------
          790┆ require(_amount > 0, "MarginVault: invalid collateral amount");
            ⋮┆----------------------------------------
          798┆ require(
          799┆     (_vault.collateralAssets[_index] == _collateralAsset) ||
          800┆         (_vault.collateralAssets[_index] == address(0)),
          801┆     "MarginVault: invalid collateral token position"
          802┆ );
            ⋮┆----------------------------------------
          823┆ require(
          824┆     (_index < _vault.collateralAssets.length) &&                 
  (_vault.collateralAssets[_index] == _collateralAsset),                        
          825┆     "MarginVault: collateral token address mismatch"
          826┆ );
            ⋮┆----------------------------------------
          979┆ require(_args.actionType == ActionType.OpenVault, "Actions: can  
  only parse arguments for open vault actions");                                
            ⋮┆----------------------------------------
          980┆ require(_args.owner != address(0), "Actions: cannot open vault   
  for an invalid account");                                                     
            ⋮┆----------------------------------------
          991┆ require(_args.actionType == ActionType.MintShortOption, "Actions:
  can only parse arguments for mint actions");                                  
            ⋮┆----------------------------------------
          992┆ require(_args.owner != address(0), "Actions: cannot mint from an 
  invalid account");                                                            
            ⋮┆----------------------------------------
         1011┆ require(_args.actionType == ActionType.BurnShortOption, "Actions:
  can only parse arguments for burn actions");                                  
            ⋮┆----------------------------------------
         1012┆ require(_args.owner != address(0), "Actions: cannot burn from an 
  invalid account");                                                            
            ⋮┆----------------------------------------
         1031┆ require(
         1032┆     (_args.actionType == ActionType.DepositLongOption) ||        
  (_args.actionType == ActionType.DepositCollateral),                           
         1033┆     "Actions: can only parse arguments for deposit actions"
         1034┆ );
            ⋮┆----------------------------------------
         1035┆ require(_args.owner != address(0), "Actions: cannot deposit to an
  invalid account");                                                            
            ⋮┆----------------------------------------
         1054┆ require(
         1055┆     (_args.actionType == ActionType.WithdrawLongOption) ||       
  (_args.actionType == ActionType.WithdrawCollateral),                          
         1056┆     "Actions: can only parse arguments for withdraw actions"
         1057┆ );
            ⋮┆----------------------------------------
         1058┆ require(_args.owner != address(0), "Actions: cannot withdraw from
  an invalid account");                                                         
            ⋮┆----------------------------------------
         1059┆ require(_args.secondAddress != address(0), "Actions: cannot      
  withdraw to an invalid account");                                             
            ⋮┆----------------------------------------
         1078┆ require(_args.actionType == ActionType.Redeem, "Actions: can only
  parse arguments for redeem actions");                                         
            ⋮┆----------------------------------------
         1079┆ require(_args.secondAddress != address(0), "Actions: cannot      
  redeem to an invalid account");                                               
            ⋮┆----------------------------------------
         1090┆ require(
         1091┆     _args.actionType == ActionType.SettleVault,
         1092┆     "Actions: can only parse arguments for settle vault actions"
         1093┆ );
            ⋮┆----------------------------------------
         1094┆ require(_args.owner != address(0), "Actions: cannot settle vault 
  for an invalid account");                                                     
            ⋮┆----------------------------------------
         1095┆ require(_args.secondAddress != address(0), "Actions: cannot      
  withdraw payout to an invalid account");                                      
            ⋮┆----------------------------------------
         1106┆ require(_args.actionType == ActionType.Call, "Actions: can only  
  parse arguments for call actions");                                           
            ⋮┆----------------------------------------
         1107┆ require(_args.secondAddress != address(0), "Actions: target      
  address cannot be address(0)");                                               
            ⋮┆----------------------------------------
         1148┆ require(initializing || isConstructor() || !initialized,         
  "Contract instance has already been initialized");                            
            ⋮┆----------------------------------------
         1245┆ require(_owner == _msgSender(), "Ownable: caller is not the      
  owner");                                                                      
            ⋮┆----------------------------------------
         1266┆ require(newOwner != address(0), "Ownable: new owner is the zero  
  address");                                                                    
            ⋮┆----------------------------------------
         1300┆ require(_notEntered, "ReentrancyGuard: reentrant call");
            ⋮┆----------------------------------------
         1640┆ require(msg.sender == fullPauser, "Controller: sender is not     
  fullPauser");                                                                 
            ⋮┆----------------------------------------
         1649┆ require(msg.sender == partialPauser, "Controller: sender is not  
  partialPauser");                                                              
            ⋮┆----------------------------------------
         1671┆ require(_isCalleeWhitelisted(_callee), "Controller: callee is not
  a whitelisted address");                                                      
            ⋮┆----------------------------------------
         1681┆ require(!systemPartiallyPaused, "Controller: system is partially 
  paused");                                                                     
            ⋮┆----------------------------------------
         1688┆ require(!systemFullyPaused, "Controller: system is fully         
  paused");                                                                     
            ⋮┆----------------------------------------
         1697┆ require(
         1698┆     (_sender == _accountOwner) ||                                
  (operators[_accountOwner][_sender]),                                          
         1699┆     "Controller: msg.sender is not authorized to run action"
         1700┆ );
            ⋮┆----------------------------------------
         1709┆ require(_addressBook != address(0), "Controller: invalid         
  addressbook address");                                                        
            ⋮┆----------------------------------------
         1710┆ require(_owner != address(0), "Controller: invalid owner         
  address");                                                                    
            ⋮┆----------------------------------------
         1748┆ require(_fullPauser != address(0), "Controller: fullPauser cannot
  be set to address zero");                                                     
            ⋮┆----------------------------------------
         1761┆ require(_partialPauser != address(0), "Controller: partialPauser 
  cannot be set to address zero");                                              
            ⋮┆----------------------------------------
         1948┆ require(vaultOwner == action.owner, "Controller: can not run     
  actions for different owners");                                               
            ⋮┆----------------------------------------
         1949┆ require(vaultId == action.vaultId, "Controller: can not run      
  actions on different vaults");                                                
            ⋮┆----------------------------------------
         1992┆ require(isValidVault, "Controller: invalid final vault state");
            ⋮┆----------------------------------------
         2007┆ require(
         2008┆     _args.vaultId == accountVaultCounter[_args.owner],
         2009┆     "Controller: can not run actions on inexistent vault"
         2010┆ );
            ⋮┆----------------------------------------
         2025┆ require(_checkVaultId(_args.owner, _args.vaultId), "Controller:  
  invalid vault id");                                                           
            ⋮┆----------------------------------------
         2026┆ require(
         2027┆     (_args.from == msg.sender) || (_args.from == _args.owner),
         2028┆     "Controller: cannot deposit long otoken from this address"
         2029┆ );
            ⋮┆----------------------------------------
         2031┆ require(
         2032┆     whitelist.isWhitelistedOtoken(_args.asset),
         2033┆     "Controller: otoken is not whitelisted to be used as         
  collateral"                                                                   
         2034┆ );
            ⋮┆----------------------------------------
         2038┆ require(now < otoken.expiryTimestamp(), "Controller: otoken used 
  as collateral is already expired");                                           
            ⋮┆----------------------------------------
         2057┆ require(_checkVaultId(_args.owner, _args.vaultId), "Controller:  
  invalid vault id");                                                           
            ⋮┆----------------------------------------
         2061┆ require(now < otoken.expiryTimestamp(), "Controller: can not     
  withdraw an expired otoken");                                                 
            ⋮┆----------------------------------------
         2080┆ require(_checkVaultId(_args.owner, _args.vaultId), "Controller:  
  invalid vault id");                                                           
            ⋮┆----------------------------------------
         2081┆ require(
         2082┆     (_args.from == msg.sender) || (_args.from == _args.owner),
         2083┆     "Controller: cannot deposit collateral from this address"
         2084┆ );
            ⋮┆----------------------------------------
         2086┆ require(
         2087┆     whitelist.isWhitelistedCollateral(_args.asset),
         2088┆     "Controller: asset is not whitelisted to be used as          
  collateral"                                                                   
         2089┆ );
            ⋮┆----------------------------------------
         2108┆ require(_checkVaultId(_args.owner, _args.vaultId), "Controller:  
  invalid vault id");                                                           
            ⋮┆----------------------------------------
         2114┆ require(
         2115┆     now < otoken.expiryTimestamp(),
         2116┆     "Controller: can not withdraw collateral from a vault with an
  expired short otoken"                                                         
         2117┆ );
            ⋮┆----------------------------------------
         2137┆ require(_checkVaultId(_args.owner, _args.vaultId), "Controller:  
  invalid vault id");                                                           
            ⋮┆----------------------------------------
         2139┆ require(whitelist.isWhitelistedOtoken(_args.otoken), "Controller:
  otoken is not whitelisted to be minted");                                     
            ⋮┆----------------------------------------
         2143┆ require(now < otoken.expiryTimestamp(), "Controller: can not mint
  expired otoken");                                                             
            ⋮┆----------------------------------------
         2162┆ require(_checkVaultId(_args.owner, _args.vaultId), "Controller:  
  invalid vault id");                                                           
            ⋮┆----------------------------------------
         2163┆ require((_args.from == msg.sender) || (_args.from ==             
  _args.owner), "Controller: cannot burn from this address");                   
            ⋮┆----------------------------------------
         2167┆ require(now < otoken.expiryTimestamp(), "Controller: can not burn
  expired otoken");                                                             
            ⋮┆----------------------------------------
         2184┆ require(now > otoken.expiryTimestamp(), "Controller: can not     
  redeem un-expired otoken");                                                   
            ⋮┆----------------------------------------
         2186┆ require(isSettlementAllowed(_args.otoken), "Controller: asset    
  prices not finalized yet");                                                   
            ⋮┆----------------------------------------
         2203┆ require(_checkVaultId(_args.owner, _args.vaultId), "Controller:  
  invalid vault id");                                                           
            ⋮┆----------------------------------------
         2207┆ require(_isNotEmpty(vault.shortOtokens) ||                       
  _isNotEmpty(vault.longOtokens), "Can't settle vault with no otoken");         
            ⋮┆----------------------------------------
         2213┆ require(now > otoken.expiryTimestamp(), "Controller: can not     
  settle vault with un-expired otoken");                                        
            ⋮┆----------------------------------------
         2214┆ require(isSettlementAllowed(address(otoken)), "Controller: asset 
                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘
  prices not finalized yet");                                                   
            ⋮┆----------------------------------------
         2317┆ require(msg.sender == address(weth), "PayableProxyController:    
  Cannot receive ETH");                                                         
            ⋮┆----------------------------------------
         2337┆ require(
         2338┆     (msg.sender == action.owner) ||                              
  (controller.isOperator(action.owner, msg.sender)),                            
         2339┆     "PayableProxyController: cannot execute action "
         2340┆ );
            ⋮┆----------------------------------------
         2349┆ require(sendEthTo != address(0), "PayableProxyController: cannot 
  send ETH to address zero");                                                   
            ⋮┆----------------------------------------
       solidity.performance.use-multiple-require                                
          Using multiple require statements is cheaper than using && multiple   
  check combinations.                                                           
          There are more advantages, such as easier to read code and better     
  coverage reports.                                                             
                                                                                
          708┆ require(
          709┆     (_index < _vault.shortOtokens.length) &&                     
  (_vault.shortOtokens[_index] == _shortOtoken),                                
          710┆     "MarginVault: short otoken address mismatch"
          711┆ );
            ⋮┆----------------------------------------
          765┆ require(
          766┆     (_index < _vault.longOtokens.length) &&                      
  (_vault.longOtokens[_index] == _longOtoken),                                  

Ran 48 rules on 1 file: 174 findings.
          767┆     "MarginVault: long otoken address mismatch"
          768┆ );
            ⋮┆----------------------------------------
          823┆ require(
          824┆     (_index < _vault.collateralAssets.length) &&                 
  (_vault.collateralAssets[_index] == _collateralAsset),                        
          825┆     "MarginVault: collateral token address mismatch"
          826┆ );
            ⋮┆----------------------------------------
       solidity.performance.use-nested-if                                       
          Using nested is cheaper than using && multiple check combinations.    
  There are more                                                                
          advantages, such as easier to read code and better coverage reports.  
                                                                                
           96┆ if (_src != msg.sender && allowance[_src][msg.sender] !=         
  uint256(-1)) {                                                                
           97┆     require(allowance[_src][msg.sender] >= _wad, "WETH9: invalid 
  allowance");                                                                  
           98┆     allowance[_src][msg.sender] -= _wad;
           99┆ }
            ⋮┆----------------------------------------
          680┆ if ((_index >= _vault.shortOtokens.length) && ((_index >=        
  _vault.shortAmounts.length))) {                                               
          681┆     _vault.shortOtokens.push(_shortOtoken);
          682┆     _vault.shortAmounts.push(_amount);
          683┆ } else {
          684┆     require(
          685┆         (_vault.shortOtokens[_index] == _shortOtoken) ||         
  (_vault.shortOtokens[_index] == address(0)),                                  
          686┆         "MarginVault: invalid short otoken position"
          687┆     );
          688┆ 
          689┆     _vault.shortAmounts[_index] =                                
  _vault.shortAmounts[_index].add(_amount);                                     
             [hid 2 additional lines, adjust with --max-lines-per-finding] 
          737┆ if ((_index >= _vault.longOtokens.length) && ((_index >=         
  _vault.longAmounts.length))) {                                                
          738┆     _vault.longOtokens.push(_longOtoken);
          739┆     _vault.longAmounts.push(_amount);
          740┆ } else {
          741┆     require(
          742┆         (_vault.longOtokens[_index] == _longOtoken) ||           
  (_vault.longOtokens[_index] == address(0)),                                   
          743┆         "MarginVault: invalid long otoken position"
          744┆     );
          745┆ 
          746┆     _vault.longAmounts[_index] =                                 
  _vault.longAmounts[_index].add(_amount);                                      
             [hid 2 additional lines, adjust with --max-lines-per-finding] 
          794┆ if ((_index >= _vault.collateralAssets.length) && ((_index >=    
  _vault.collateralAmounts.length))) {                                          
          795┆     _vault.collateralAssets.push(_collateralAsset);
          796┆     _vault.collateralAmounts.push(_amount);
          797┆ } else {
          798┆     require(
          799┆         (_vault.collateralAssets[_index] == _collateralAsset) ||
          800┆             (_vault.collateralAssets[_index] == address(0)),
          801┆         "MarginVault: invalid collateral token position"
          802┆     );
          803┆ 
             [hid 3 additional lines, adjust with --max-lines-per-finding] 
         1941┆ if (
         1942┆     (actionType != Actions.ActionType.SettleVault) &&
         1943┆     (actionType != Actions.ActionType.Redeem) &&
         1944┆     (actionType != Actions.ActionType.Call)
         1945┆ ) {
         1946┆     // check if this action is manipulating the same vault as all
  other actions, if a vault has already been updated                            
         1947┆     if (vaultUpdated) {
         1948┆         require(vaultOwner == action.owner, "Controller: can not 
  run actions for different owners");                                           
         1949┆         require(vaultId == action.vaultId, "Controller: can not  
  run actions on different vaults");                                            
         1950┆     }
             [hid 4 additional lines, adjust with --max-lines-per-finding] 
       solidity.performance.use-prefix-increment-not-postfix                    
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
                                                                                
         1937┆ for (uint256 i = 0; i < _actions.length; i++) {
            ⋮┆----------------------------------------
         2332┆ for (uint256 i = 0; i < _actions.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
           46┆ require(balanceOf[msg.sender] >= _wad, "WETH9: insufficient      
  sender balance");                                                             
            ⋮┆----------------------------------------
           94┆ require(balanceOf[_src] >= _wad, "WETH9: insufficient source     
  balance");                                                                    
            ⋮┆----------------------------------------
          319┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          454┆ require(success, "Address: unable to send value, recipient may   
  have reverted");                                                              
            ⋮┆----------------------------------------
          524┆ require(address(this).balance >= value, "Address: insufficient   
  balance for call");                                                           
            ⋮┆----------------------------------------
          594┆ require(
          595┆     (value == 0) || (token.allowance(address(this), spender) ==  
  0),                                                                           
          596┆     "SafeERC20: approve from non-zero to non-zero allowance"
          597┆ );
            ⋮┆----------------------------------------
          637┆ require(abi.decode(returndata, (bool)), "SafeERC20: ERC20        
  operation did not succeed");                                                  
            ⋮┆----------------------------------------
          676┆ require(_amount > 0, "MarginVault: invalid short otoken amount");
            ⋮┆----------------------------------------
          684┆ require(
          685┆     (_vault.shortOtokens[_index] == _shortOtoken) ||             
  (_vault.shortOtokens[_index] == address(0)),                                  
          686┆     "MarginVault: invalid short otoken position"
          687┆ );
            ⋮┆----------------------------------------
          708┆ require(
          709┆     (_index < _vault.shortOtokens.length) &&                     
  (_vault.shortOtokens[_index] == _shortOtoken),                                
          710┆     "MarginVault: short otoken address mismatch"
          711┆ );
            ⋮┆----------------------------------------
          733┆ require(_amount > 0, "MarginVault: invalid long otoken amount");
            ⋮┆----------------------------------------
          741┆ require(
          742┆     (_vault.longOtokens[_index] == _longOtoken) ||               
  (_vault.longOtokens[_index] == address(0)),                                   
          743┆     "MarginVault: invalid long otoken position"
          744┆ );
            ⋮┆----------------------------------------
          765┆ require(
          766┆     (_index < _vault.longOtokens.length) &&                      
  (_vault.longOtokens[_index] == _longOtoken),                                  
          767┆     "MarginVault: long otoken address mismatch"
          768┆ );
            ⋮┆----------------------------------------
          790┆ require(_amount > 0, "MarginVault: invalid collateral amount");
            ⋮┆----------------------------------------
          798┆ require(
          799┆     (_vault.collateralAssets[_index] == _collateralAsset) ||
          800┆         (_vault.collateralAssets[_index] == address(0)),
          801┆     "MarginVault: invalid collateral token position"
          802┆ );
            ⋮┆----------------------------------------
          823┆ require(
          824┆     (_index < _vault.collateralAssets.length) &&                 
  (_vault.collateralAssets[_index] == _collateralAsset),                        
          825┆     "MarginVault: collateral token address mismatch"
          826┆ );
            ⋮┆----------------------------------------
          979┆ require(_args.actionType == ActionType.OpenVault, "Actions: can  
  only parse arguments for open vault actions");                                
            ⋮┆----------------------------------------
          980┆ require(_args.owner != address(0), "Actions: cannot open vault   
  for an invalid account");                                                     
            ⋮┆----------------------------------------
          991┆ require(_args.actionType == ActionType.MintShortOption, "Actions:
  can only parse arguments for mint actions");                                  
            ⋮┆----------------------------------------
          992┆ require(_args.owner != address(0), "Actions: cannot mint from an 
  invalid account");                                                            
            ⋮┆----------------------------------------
         1011┆ require(_args.actionType == ActionType.BurnShortOption, "Actions:
  can only parse arguments for burn actions");                                  
            ⋮┆----------------------------------------
         1012┆ require(_args.owner != address(0), "Actions: cannot burn from an 
  invalid account");                                                            
            ⋮┆----------------------------------------
         1031┆ require(
         1032┆     (_args.actionType == ActionType.DepositLongOption) ||        
  (_args.actionType == ActionType.DepositCollateral),                           
         1033┆     "Actions: can only parse arguments for deposit actions"
         1034┆ );
            ⋮┆----------------------------------------
         1035┆ require(_args.owner != address(0), "Actions: cannot deposit to an
  invalid account");                                                            
            ⋮┆----------------------------------------
         1054┆ require(
         1055┆     (_args.actionType == ActionType.WithdrawLongOption) ||       
  (_args.actionType == ActionType.WithdrawCollateral),                          
         1056┆     "Actions: can only parse arguments for withdraw actions"
         1057┆ );
            ⋮┆----------------------------------------
         1058┆ require(_args.owner != address(0), "Actions: cannot withdraw from
  an invalid account");                                                         
            ⋮┆----------------------------------------
         1059┆ require(_args.secondAddress != address(0), "Actions: cannot      
  withdraw to an invalid account");                                             
            ⋮┆----------------------------------------
         1078┆ require(_args.actionType == ActionType.Redeem, "Actions: can only
  parse arguments for redeem actions");                                         
            ⋮┆----------------------------------------
         1079┆ require(_args.secondAddress != address(0), "Actions: cannot      
  redeem to an invalid account");                                               
            ⋮┆----------------------------------------
         1090┆ require(
         1091┆     _args.actionType == ActionType.SettleVault,
         1092┆     "Actions: can only parse arguments for settle vault actions"
         1093┆ );
            ⋮┆----------------------------------------
         1094┆ require(_args.owner != address(0), "Actions: cannot settle vault 
  for an invalid account");                                                     
            ⋮┆----------------------------------------
         1095┆ require(_args.secondAddress != address(0), "Actions: cannot      
  withdraw payout to an invalid account");                                      
            ⋮┆----------------------------------------
         1106┆ require(_args.actionType == ActionType.Call, "Actions: can only  
  parse arguments for call actions");                                           
            ⋮┆----------------------------------------
         1107┆ require(_args.secondAddress != address(0), "Actions: target      
  address cannot be address(0)");                                               
            ⋮┆----------------------------------------
         1148┆ require(initializing || isConstructor() || !initialized,         
  "Contract instance has already been initialized");                            
            ⋮┆----------------------------------------
         1266┆ require(newOwner != address(0), "Ownable: new owner is the zero  
  address");                                                                    
            ⋮┆----------------------------------------
         1640┆ require(msg.sender == fullPauser, "Controller: sender is not     
  fullPauser");                                                                 
            ⋮┆----------------------------------------
         1649┆ require(msg.sender == partialPauser, "Controller: sender is not  
  partialPauser");                                                              
            ⋮┆----------------------------------------
         1671┆ require(_isCalleeWhitelisted(_callee), "Controller: callee is not
  a whitelisted address");                                                      
            ⋮┆----------------------------------------
         1681┆ require(!systemPartiallyPaused, "Controller: system is partially 
  paused");                                                                     
            ⋮┆----------------------------------------
         1688┆ require(!systemFullyPaused, "Controller: system is fully         
  paused");                                                                     
            ⋮┆----------------------------------------
         1697┆ require(
         1698┆     (_sender == _accountOwner) ||                                
  (operators[_accountOwner][_sender]),                                          
         1699┆     "Controller: msg.sender is not authorized to run action"
         1700┆ );
            ⋮┆----------------------------------------
         1709┆ require(_addressBook != address(0), "Controller: invalid         
  addressbook address");                                                        
            ⋮┆----------------------------------------
         1710┆ require(_owner != address(0), "Controller: invalid owner         
  address");                                                                    
            ⋮┆----------------------------------------
         1748┆ require(_fullPauser != address(0), "Controller: fullPauser cannot
  be set to address zero");                                                     
            ⋮┆----------------------------------------
         1761┆ require(_partialPauser != address(0), "Controller: partialPauser 
  cannot be set to address zero");                                              
            ⋮┆----------------------------------------
         1948┆ require(vaultOwner == action.owner, "Controller: can not run     
  actions for different owners");                                               
            ⋮┆----------------------------------------
         1949┆ require(vaultId == action.vaultId, "Controller: can not run      
  actions on different vaults");                                                
            ⋮┆----------------------------------------
         1992┆ require(isValidVault, "Controller: invalid final vault state");
            ⋮┆----------------------------------------
         2007┆ require(
         2008┆     _args.vaultId == accountVaultCounter[_args.owner],
         2009┆     "Controller: can not run actions on inexistent vault"
         2010┆ );
            ⋮┆----------------------------------------
         2026┆ require(
         2027┆     (_args.from == msg.sender) || (_args.from == _args.owner),
         2028┆     "Controller: cannot deposit long otoken from this address"
         2029┆ );
            ⋮┆----------------------------------------
         2031┆ require(
         2032┆     whitelist.isWhitelistedOtoken(_args.asset),
         2033┆     "Controller: otoken is not whitelisted to be used as         
  collateral"                                                                   
         2034┆ );
            ⋮┆----------------------------------------
         2038┆ require(now < otoken.expiryTimestamp(), "Controller: otoken used 
  as collateral is already expired");                                           
            ⋮┆----------------------------------------
         2061┆ require(now < otoken.expiryTimestamp(), "Controller: can not     
  withdraw an expired otoken");                                                 
            ⋮┆----------------------------------------
         2081┆ require(
         2082┆     (_args.from == msg.sender) || (_args.from == _args.owner),
         2083┆     "Controller: cannot deposit collateral from this address"
         2084┆ );
            ⋮┆----------------------------------------
         2086┆ require(
         2087┆     whitelist.isWhitelistedCollateral(_args.asset),
         2088┆     "Controller: asset is not whitelisted to be used as          
  collateral"                                                                   
         2089┆ );
            ⋮┆----------------------------------------
         2114┆ require(
         2115┆     now < otoken.expiryTimestamp(),
         2116┆     "Controller: can not withdraw collateral from a vault with an
  expired short otoken"                                                         
         2117┆ );
            ⋮┆----------------------------------------
         2139┆ require(whitelist.isWhitelistedOtoken(_args.otoken), "Controller:
  otoken is not whitelisted to be minted");                                     
            ⋮┆----------------------------------------
         2143┆ require(now < otoken.expiryTimestamp(), "Controller: can not mint
  expired otoken");                                                             
            ⋮┆----------------------------------------
         2163┆ require((_args.from == msg.sender) || (_args.from ==             
  _args.owner), "Controller: cannot burn from this address");                   
            ⋮┆----------------------------------------
         2167┆ require(now < otoken.expiryTimestamp(), "Controller: can not burn
  expired otoken");                                                             
            ⋮┆----------------------------------------
         2184┆ require(now > otoken.expiryTimestamp(), "Controller: can not     
  redeem un-expired otoken");                                                   
            ⋮┆----------------------------------------
         2186┆ require(isSettlementAllowed(_args.otoken), "Controller: asset    
  prices not finalized yet");                                                   
            ⋮┆----------------------------------------
         2207┆ require(_isNotEmpty(vault.shortOtokens) ||                       
  _isNotEmpty(vault.longOtokens), "Can't settle vault with no otoken");         
            ⋮┆----------------------------------------
         2213┆ require(now > otoken.expiryTimestamp(), "Controller: can not     
  settle vault with un-expired otoken");                                        
            ⋮┆----------------------------------------
         2214┆ require(isSettlementAllowed(address(otoken)), "Controller: asset 
  prices not finalized yet");                                                   
            ⋮┆----------------------------------------
         2317┆ require(msg.sender == address(weth), "PayableProxyController:    
  Cannot receive ETH");                                                         
            ⋮┆----------------------------------------
         2337┆ require(
         2338┆     (msg.sender == action.owner) ||                              
  (controller.isOperator(action.owner, msg.sender)),                            
         2339┆     "PayableProxyController: cannot execute action "
         2340┆ );
            ⋮┆----------------------------------------
         2349┆ require(sendEthTo != address(0), "PayableProxyController: cannot 
  send ETH to address zero");                                                   


A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
