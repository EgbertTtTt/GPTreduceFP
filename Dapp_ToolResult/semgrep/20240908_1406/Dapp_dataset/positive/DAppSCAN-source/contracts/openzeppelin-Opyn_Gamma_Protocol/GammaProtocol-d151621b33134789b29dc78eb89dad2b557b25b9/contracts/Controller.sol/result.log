METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                     
                     
┌───────────────────┐
│ 140 Code Findings │
└───────────────────┘
                       
    /sb/Controller.sol 
       solidity.performance.array-length-outside-loop                           
          Caching the array length outside a loop saves reading it on each      
  iteration, as long as the                                                     
          array's length is not changed during the loop.                        
                                                                                
         1457┆ for (uint256 i = 0; i < _actions.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.unnecessary-checked-arithmetic-in-loop              
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
                                                                                
         1457┆ for (uint256 i = 0; i < _actions.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
           34┆ require(initializing || isConstructor() || !initialized,         
  "Contract instance has already been initialized");                            
            ⋮┆----------------------------------------
          131┆ require(_owner == _msgSender(), "Ownable: caller is not the      
  owner");                                                                      
            ⋮┆----------------------------------------
          152┆ require(newOwner != address(0), "Ownable: new owner is the zero  
  address");                                                                    
            ⋮┆----------------------------------------
          186┆ require(_notEntered, "ReentrancyGuard: reentrant call");
            ⋮┆----------------------------------------
          213┆ require(c >= a, "SafeMath: addition overflow");
            ⋮┆----------------------------------------
          269┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          383┆ require(_amount > 0, "MarginVault: invalid short otoken amount");
            ⋮┆----------------------------------------
          391┆ require(
          392┆     (_vault.shortOtokens[_index] == _shortOtoken) ||             
  (_vault.shortOtokens[_index] == address(0)),                                  
          393┆     "MarginVault: invalid short otoken position"
          394┆ );
            ⋮┆----------------------------------------
          415┆ require(
          416┆     (_index < _vault.shortOtokens.length) &&                     
  (_vault.shortOtokens[_index] == _shortOtoken),                                
          417┆     "MarginVault: short otoken address mismatch"
          418┆ );
            ⋮┆----------------------------------------
          440┆ require(_amount > 0, "MarginVault: invalid long otoken amount");
            ⋮┆----------------------------------------
          448┆ require(
          449┆     (_vault.longOtokens[_index] == _longOtoken) ||               
  (_vault.longOtokens[_index] == address(0)),                                   
          450┆     "MarginVault: invalid long otoken position"
          451┆ );
            ⋮┆----------------------------------------
          472┆ require(
          473┆     (_index < _vault.longOtokens.length) &&                      
  (_vault.longOtokens[_index] == _longOtoken),                                  
          474┆     "MarginVault: long otoken address mismatch"
          475┆ );
            ⋮┆----------------------------------------
          497┆ require(_amount > 0, "MarginVault: invalid collateral amount");
            ⋮┆----------------------------------------
          505┆ require(
          506┆     (_vault.collateralAssets[_index] == _collateralAsset) ||
          507┆         (_vault.collateralAssets[_index] == address(0)),
          508┆     "MarginVault: invalid collateral token position"
          509┆ );
            ⋮┆----------------------------------------
          530┆ require(
          531┆     (_index < _vault.collateralAssets.length) &&                 
  (_vault.collateralAssets[_index] == _collateralAsset),                        
          532┆     "MarginVault: collateral token address mismatch"
          533┆ );
            ⋮┆----------------------------------------
          686┆ require(_args.actionType == ActionType.OpenVault, "Actions: can  
  only parse arguments for open vault actions");                                
            ⋮┆----------------------------------------
          687┆ require(_args.owner != address(0), "Actions: cannot open vault   
  for an invalid account");                                                     
            ⋮┆----------------------------------------
          698┆ require(_args.actionType == ActionType.MintShortOption, "Actions:
  can only parse arguments for mint actions");                                  
            ⋮┆----------------------------------------
          699┆ require(_args.owner != address(0), "Actions: cannot mint from an 
  invalid account");                                                            
            ⋮┆----------------------------------------
          718┆ require(_args.actionType == ActionType.BurnShortOption, "Actions:
  can only parse arguments for burn actions");                                  
            ⋮┆----------------------------------------
          719┆ require(_args.owner != address(0), "Actions: cannot burn from an 
  invalid account");                                                            
            ⋮┆----------------------------------------
          738┆ require(
          739┆     (_args.actionType == ActionType.DepositLongOption) ||        
  (_args.actionType == ActionType.DepositCollateral),                           
          740┆     "Actions: can only parse arguments for deposit actions"
          741┆ );
            ⋮┆----------------------------------------
          742┆ require(_args.owner != address(0), "Actions: cannot deposit to an
  invalid account");                                                            
            ⋮┆----------------------------------------
          761┆ require(
          762┆     (_args.actionType == ActionType.WithdrawLongOption) ||       
  (_args.actionType == ActionType.WithdrawCollateral),                          
          763┆     "Actions: can only parse arguments for withdraw actions"
          764┆ );
            ⋮┆----------------------------------------
          765┆ require(_args.owner != address(0), "Actions: cannot withdraw from
  an invalid account");                                                         
            ⋮┆----------------------------------------
          766┆ require(_args.secondAddress != address(0), "Actions: cannot      
  withdraw to an invalid account");                                             
            ⋮┆----------------------------------------
          785┆ require(_args.actionType == ActionType.Redeem, "Actions: can only
  parse arguments for redeem actions");                                         
            ⋮┆----------------------------------------
          786┆ require(_args.secondAddress != address(0), "Actions: cannot      
  redeem to an invalid account");                                               
            ⋮┆----------------------------------------
          797┆ require(
          798┆     _args.actionType == ActionType.SettleVault,
          799┆     "Actions: can only parse arguments for settle vault actions"
          800┆ );
            ⋮┆----------------------------------------
          801┆ require(_args.owner != address(0), "Actions: cannot settle vault 
  for an invalid account");                                                     
            ⋮┆----------------------------------------
          802┆ require(_args.secondAddress != address(0), "Actions: cannot      
  withdraw payout to an invalid account");                                      
            ⋮┆----------------------------------------
          813┆ require(_args.actionType == ActionType.Call, "Actions: can only  
  parse arguments for call actions");                                           
            ⋮┆----------------------------------------
          814┆ require(_args.secondAddress != address(0), "Actions: target      
  address cannot be address(0)");                                               
            ⋮┆----------------------------------------
         1160┆ require(msg.sender == fullPauser, "Controller: sender is not     
  fullPauser");                                                                 
            ⋮┆----------------------------------------
         1169┆ require(msg.sender == partialPauser, "Controller: sender is not  
  partialPauser");                                                              
            ⋮┆----------------------------------------
         1191┆ require(_isCalleeWhitelisted(_callee), "Controller: callee is not
  a whitelisted address");                                                      
            ⋮┆----------------------------------------
         1201┆ require(!systemPartiallyPaused, "Controller: system is partially 
  paused");                                                                     
            ⋮┆----------------------------------------
         1208┆ require(!systemFullyPaused, "Controller: system is fully         
  paused");                                                                     
            ⋮┆----------------------------------------
         1217┆ require(
         1218┆     (_sender == _accountOwner) ||                                
  (operators[_accountOwner][_sender]),                                          
         1219┆     "Controller: msg.sender is not authorized to run action"
         1220┆ );
            ⋮┆----------------------------------------
         1229┆ require(_addressBook != address(0), "Controller: invalid         
  addressbook address");                                                        
            ⋮┆----------------------------------------
         1230┆ require(_owner != address(0), "Controller: invalid owner         
  address");                                                                    
            ⋮┆----------------------------------------
         1268┆ require(_fullPauser != address(0), "Controller: fullPauser cannot
  be set to address zero");                                                     
            ⋮┆----------------------------------------
         1281┆ require(_partialPauser != address(0), "Controller: partialPauser 
  cannot be set to address zero");                                              
            ⋮┆----------------------------------------
         1468┆ require(vaultOwner == action.owner, "Controller: can not run     
  actions for different owners");                                               
            ⋮┆----------------------------------------
         1469┆ require(vaultId == action.vaultId, "Controller: can not run      
  actions on different vaults");                                                
            ⋮┆----------------------------------------
         1512┆ require(isValidVault, "Controller: invalid final vault state");
            ⋮┆----------------------------------------
         1527┆ require(
         1528┆     _args.vaultId == accountVaultCounter[_args.owner],
         1529┆     "Controller: can not run actions on inexistent vault"
         1530┆ );
            ⋮┆----------------------------------------
         1545┆ require(_checkVaultId(_args.owner, _args.vaultId), "Controller:  
  invalid vault id");                                                           
            ⋮┆----------------------------------------
         1546┆ require(
         1547┆     (_args.from == msg.sender) || (_args.from == _args.owner),
         1548┆     "Controller: cannot deposit long otoken from this address"
         1549┆ );
            ⋮┆----------------------------------------
         1551┆ require(
         1552┆     whitelist.isWhitelistedOtoken(_args.asset),
         1553┆     "Controller: otoken is not whitelisted to be used as         
  collateral"                                                                   
         1554┆ );
            ⋮┆----------------------------------------
         1558┆ require(now < otoken.expiryTimestamp(), "Controller: otoken used 
  as collateral is already expired");                                           
            ⋮┆----------------------------------------
         1577┆ require(_checkVaultId(_args.owner, _args.vaultId), "Controller:  
  invalid vault id");                                                           
            ⋮┆----------------------------------------
         1581┆ require(now < otoken.expiryTimestamp(), "Controller: can not     
  withdraw an expired otoken");                                                 
            ⋮┆----------------------------------------
         1600┆ require(_checkVaultId(_args.owner, _args.vaultId), "Controller:  
  invalid vault id");                                                           
            ⋮┆----------------------------------------
         1601┆ require(
         1602┆     (_args.from == msg.sender) || (_args.from == _args.owner),
         1603┆     "Controller: cannot deposit collateral from this address"
         1604┆ );
            ⋮┆----------------------------------------
         1606┆ require(
         1607┆     whitelist.isWhitelistedCollateral(_args.asset),
         1608┆     "Controller: asset is not whitelisted to be used as          
  collateral"                                                                   
         1609┆ );
            ⋮┆----------------------------------------
         1628┆ require(_checkVaultId(_args.owner, _args.vaultId), "Controller:  
  invalid vault id");                                                           
            ⋮┆----------------------------------------
         1634┆ require(
         1635┆     now < otoken.expiryTimestamp(),
         1636┆     "Controller: can not withdraw collateral from a vault with an
  expired short otoken"                                                         
         1637┆ );
            ⋮┆----------------------------------------
         1657┆ require(_checkVaultId(_args.owner, _args.vaultId), "Controller:  
  invalid vault id");                                                           
            ⋮┆----------------------------------------
         1659┆ require(whitelist.isWhitelistedOtoken(_args.otoken), "Controller:
  otoken is not whitelisted to be minted");                                     
            ⋮┆----------------------------------------
         1663┆ require(now < otoken.expiryTimestamp(), "Controller: can not mint
  expired otoken");                                                             
            ⋮┆----------------------------------------
         1682┆ require(_checkVaultId(_args.owner, _args.vaultId), "Controller:  
  invalid vault id");                                                           
            ⋮┆----------------------------------------
         1683┆ require((_args.from == msg.sender) || (_args.from ==             
  _args.owner), "Controller: cannot burn from this address");                   
            ⋮┆----------------------------------------
         1687┆ require(now < otoken.expiryTimestamp(), "Controller: can not burn
  expired otoken");                                                             
            ⋮┆----------------------------------------
         1704┆ require(now > otoken.expiryTimestamp(), "Controller: can not     
  redeem un-expired otoken");                                                   
            ⋮┆----------------------------------------
         1706┆ require(isSettlementAllowed(_args.otoken), "Controller: asset    
  prices not finalized yet");                                                   
            ⋮┆----------------------------------------
         1723┆ require(_checkVaultId(_args.owner, _args.vaultId), "Controller:  
  invalid vault id");                                                           
            ⋮┆----------------------------------------
         1727┆ require(_isNotEmpty(vault.shortOtokens) ||                       
  _isNotEmpty(vault.longOtokens), "Can't settle vault with no otoken");         
            ⋮┆----------------------------------------
         1733┆ require(now > otoken.expiryTimestamp(), "Controller: can not     
  settle vault with un-expired otoken");                                        
            ⋮┆----------------------------------------
         1734┆ require(isSettlementAllowed(address(otoken)), "Controller: asset 
  prices not finalized yet");                                                   
            ⋮┆----------------------------------------
       solidity.performance.use-multiple-require                                
          Using multiple require statements is cheaper than using && multiple   
  check combinations.                                                           
          There are more advantages, such as easier to read code and better     
  coverage reports.                                                             
                                                                                
          415┆ require(
          416┆     (_index < _vault.shortOtokens.length) &&                     
  (_vault.shortOtokens[_index] == _shortOtoken),                                
          417┆     "MarginVault: short otoken address mismatch"
          418┆ );
            ⋮┆----------------------------------------
          472┆ require(
          473┆     (_index < _vault.longOtokens.length) &&                      
  (_vault.longOtokens[_index] == _longOtoken),                                  
          474┆     "MarginVault: long otoken address mismatch"
          475┆ );
            ⋮┆----------------------------------------
          530┆ require(
          531┆     (_index < _vault.collateralAssets.length) &&                 
  (_vault.collateralAssets[_index] == _collateralAsset),                        
          532┆     "MarginVault: collateral token address mismatch"
          533┆ );
            ⋮┆----------------------------------------
       solidity.performance.use-nested-if                                       
          Using nested is cheaper than using && multiple check combinations.    
  There are more                                                                
          advantages, such as easier to read code and better coverage reports.  
                                                                                
          387┆ if ((_index >= _vault.shortOtokens.length) && ((_index >=        
  _vault.shortAmounts.length))) {                                               
          388┆     _vault.shortOtokens.push(_shortOtoken);
          389┆     _vault.shortAmounts.push(_amount);
          390┆ } else {
          391┆     require(
          392┆         (_vault.shortOtokens[_index] == _shortOtoken) ||         
  (_vault.shortOtokens[_index] == address(0)),                                  
          393┆         "MarginVault: invalid short otoken position"
          394┆     );
          395┆ 
          396┆     _vault.shortAmounts[_index] =                                
  _vault.shortAmounts[_index].add(_amount);                                     
             [hid 2 additional lines, adjust with --max-lines-per-finding] 
          444┆ if ((_index >= _vault.longOtokens.length) && ((_index >=         
  _vault.longAmounts.length))) {                                                
          445┆     _vault.longOtokens.push(_longOtoken);
          446┆     _vault.longAmounts.push(_amount);
          447┆ } else {
          448┆     require(
          449┆         (_vault.longOtokens[_index] == _longOtoken) ||           
  (_vault.longOtokens[_index] == address(0)),                                   
          450┆         "MarginVault: invalid long otoken position"
          451┆     );
          452┆ 
          453┆     _vault.longAmounts[_index] =                                 
  _vault.longAmounts[_index].add(_amount);                                      
             [hid 2 additional lines, adjust with --max-lines-per-finding] 
          501┆ if ((_index >= _vault.collateralAssets.length) && ((_index >=    
  _vault.collateralAmounts.length))) {                                          
          502┆     _vault.collateralAssets.push(_collateralAsset);
          503┆     _vault.collateralAmounts.push(_amount);
          504┆ } else {
          505┆     require(
          506┆         (_vault.collateralAssets[_index] == _collateralAsset) ||
          507┆             (_vault.collateralAssets[_index] == address(0)),
          508┆         "MarginVault: invalid collateral token position"
          509┆     );
          510┆ 
             [hid 3 additional lines, adjust with --max-lines-per-finding] 
         1461┆ if (
         1462┆     (actionType != Actions.ActionType.SettleVault) &&
         1463┆     (actionType != Actions.ActionType.Redeem) &&
         1464┆     (actionType != Actions.ActionType.Call)
         1465┆ ) {
         1466┆     // check if this action is manipulating the same vault as all
  other actions, if a vault has already been updated                            
         1467┆     if (vaultUpdated) {
         1468┆         require(vaultOwner == action.owner, "Controller: can not 
  run actions for different owners");                                           
         1469┆         require(vaultId == action.vaultId, "Controller: can not  
  run actions on different vaults");                                            
         1470┆     }
             [hid 4 additional lines, adjust with --max-lines-per-finding] 
       solidity.performance.use-prefix-increment-not-postfix                    
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
                                                                                
         1457┆ for (uint256 i = 0; i < _actions.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
           34┆ require(initializing || isConstructor() || !initialized,         
  "Contract instance has already been initialized");                            
            ⋮┆----------------------------------------
          152┆ require(newOwner != address(0), "Ownable: new owner is the zero  
  address");                                                                    
            ⋮┆----------------------------------------
          269┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          383┆ require(_amount > 0, "MarginVault: invalid short otoken amount");
            ⋮┆----------------------------------------
          391┆ require(
          392┆     (_vault.shortOtokens[_index] == _shortOtoken) ||             
  (_vault.shortOtokens[_index] == address(0)),                                  
          393┆     "MarginVault: invalid short otoken position"
          394┆ );
            ⋮┆----------------------------------------
          415┆ require(
          416┆     (_index < _vault.shortOtokens.length) &&                     
  (_vault.shortOtokens[_index] == _shortOtoken),                                
          417┆     "MarginVault: short otoken address mismatch"
          418┆ );
            ⋮┆----------------------------------------
          440┆ require(_amount > 0, "MarginVault: invalid long otoken amount");
            ⋮┆----------------------------------------
          448┆ require(
          449┆     (_vault.longOtokens[_index] == _longOtoken) ||               
  (_vault.longOtokens[_index] == address(0)),                                   
          450┆     "MarginVault: invalid long otoken position"
          451┆ );
            ⋮┆----------------------------------------
          472┆ require(
          473┆     (_index < _vault.longOtokens.length) &&                      
  (_vault.longOtokens[_index] == _longOtoken),                                  
          474┆     "MarginVault: long otoken address mismatch"
          475┆ );
            ⋮┆----------------------------------------
          497┆ require(_amount > 0, "MarginVault: invalid collateral amount");
            ⋮┆----------------------------------------
          505┆ require(
          506┆     (_vault.collateralAssets[_index] == _collateralAsset) ||
          507┆         (_vault.collateralAssets[_index] == address(0)),
          508┆     "MarginVault: invalid collateral token position"
          509┆ );
            ⋮┆----------------------------------------
          530┆ require(
          531┆     (_index < _vault.collateralAssets.length) &&                 
  (_vault.collateralAssets[_index] == _collateralAsset),                        
          532┆     "MarginVault: collateral token address mismatch"
          533┆ );
            ⋮┆----------------------------------------
          686┆ require(_args.actionType == ActionType.OpenVault, "Actions: can  
  only parse arguments for open vault actions");                                
            ⋮┆----------------------------------------
          687┆ require(_args.owner != address(0), "Actions: cannot open vault   
  for an invalid account");                                                     
            ⋮┆----------------------------------------
          698┆ require(_args.actionType == ActionType.MintShortOption, "Actions:
  can only parse arguments for mint actions");                                  
            ⋮┆----------------------------------------
          699┆ require(_args.owner != address(0), "Actions: cannot mint from an 
  invalid account");                                                            
            ⋮┆----------------------------------------
          718┆ require(_args.actionType == ActionType.BurnShortOption, "Actions:
  can only parse arguments for burn actions");                                  
            ⋮┆----------------------------------------
          719┆ require(_args.owner != address(0), "Actions: cannot burn from an 
  invalid account");                                                            
            ⋮┆----------------------------------------
          738┆ require(
          739┆     (_args.actionType == ActionType.DepositLongOption) ||        
  (_args.actionType == ActionType.DepositCollateral),                           
          740┆     "Actions: can only parse arguments for deposit actions"
          741┆ );
            ⋮┆----------------------------------------
          742┆ require(_args.owner != address(0), "Actions: cannot deposit to an
  invalid account");                                                            
            ⋮┆----------------------------------------
          761┆ require(
          762┆     (_args.actionType == ActionType.WithdrawLongOption) ||       
  (_args.actionType == ActionType.WithdrawCollateral),                          
          763┆     "Actions: can only parse arguments for withdraw actions"
          764┆ );
            ⋮┆----------------------------------------
          765┆ require(_args.owner != address(0), "Actions: cannot withdraw from
  an invalid account");                                                         
            ⋮┆----------------------------------------
          766┆ require(_args.secondAddress != address(0), "Actions: cannot      
  withdraw to an invalid account");                                             
            ⋮┆----------------------------------------
          785┆ require(_args.actionType == ActionType.Redeem, "Actions: can only
  parse arguments for redeem actions");                                         
            ⋮┆----------------------------------------
          786┆ require(_args.secondAddress != address(0), "Actions: cannot      
  redeem to an invalid account");                                               
            ⋮┆----------------------------------------
          797┆ require(
          798┆     _args.actionType == ActionType.SettleVault,
          799┆     "Actions: can only parse arguments for settle vault actions"
          800┆ );
            ⋮┆----------------------------------------
          801┆ require(_args.owner != address(0), "Actions: cannot settle vault 
  for an invalid account");                                                     
            ⋮┆----------------------------------------
          802┆ require(_args.secondAddress != address(0), "Actions: cannot      
  withdraw payout to an invalid account");                                      
            ⋮┆----------------------------------------
          813┆ require(_args.actionType == ActionType.Call, "Actions: can only  
  parse arguments for call actions");                                           
            ⋮┆----------------------------------------
          814┆ require(_args.secondAddress != address(0), "Actions: target      
  address cannot be address(0)");                                               
            ⋮┆----------------------------------------
         1160┆ require(msg.sender == fullPauser, "Controller: sender is not     
  fullPauser");                                                                 
            ⋮┆----------------------------------------
         1169┆ require(msg.sender == partialPauser, "Controller: sender is not  
  partialPauser");                                                              
            ⋮┆----------------------------------------
         1191┆ require(_isCalleeWhitelisted(_callee), "Controller: callee is not
  a whitelisted address");                                                      
            ⋮┆----------------------------------------
         1201┆ require(!systemPartiallyPaused, "Controller: system is partially 
  paused");                                                                     
            ⋮┆----------------------------------------
         1208┆ require(!systemFullyPaused, "Controller: system is fully         
  paused");                                                                     
            ⋮┆----------------------------------------
         1217┆ require(
         1218┆     (_sender == _accountOwner) ||                                
  (operators[_accountOwner][_sender]),                                          
         1219┆     "Controller: msg.sender is not authorized to run action"
         1220┆ );
            ⋮┆----------------------------------------
         1229┆ require(_addressBook != address(0), "Controller: invalid         
  addressbook address");                                                        
            ⋮┆----------------------------------------
         1230┆ require(_owner != address(0), "Controller: invalid owner         
  address");                                                                    
            ⋮┆----------------------------------------
         1268┆ require(_fullPauser != address(0), "Controller: fullPauser cannot
  be set to address zero");                                                     
            ⋮┆----------------------------------------
         1281┆ require(_partialPauser != address(0), "Controller: partialPauser 
  cannot be set to address zero");                                              
            ⋮┆----------------------------------------
         1468┆ require(vaultOwner == action.owner, "Controller: can not run     
  actions for different owners");                                               
            ⋮┆----------------------------------------
         1469┆ require(vaultId == action.vaultId, "Controller: can not run      
  actions on different vaults");                                                
            ⋮┆----------------------------------------
         1512┆ require(isValidVault, "Controller: invalid final vault state");
            ⋮┆----------------------------------------
         1527┆ require(
         1528┆     _args.vaultId == accountVaultCounter[_args.owner],
         1529┆     "Controller: can not run actions on inexistent vault"
         1530┆ );
            ⋮┆----------------------------------------
         1546┆ require(
         1547┆     (_args.from == msg.sender) || (_args.from == _args.owner),
         1548┆     "Controller: cannot deposit long otoken from this address"
         1549┆ );
            ⋮┆----------------------------------------
         1551┆ require(
         1552┆     whitelist.isWhitelistedOtoken(_args.asset),
         1553┆     "Controller: otoken is not whitelisted to be used as         
  collateral"                                                                   
         1554┆ );
            ⋮┆----------------------------------------
         1558┆ require(now < otoken.expiryTimestamp(), "Controller: otoken used 
  as collateral is already expired");                                           
            ⋮┆----------------------------------------
         1581┆ require(now < otoken.expiryTimestamp(), "Controller: can not     
  withdraw an expired otoken");                                                 
            ⋮┆----------------------------------------
         1601┆ require(
         1602┆     (_args.from == msg.sender) || (_args.from == _args.owner),
         1603┆     "Controller: cannot deposit collateral from this address"
         1604┆ );
            ⋮┆----------------------------------------
         1606┆ require(
         1607┆     whitelist.isWhitelistedCollateral(_args.asset),
         1608┆     "Controller: asset is not whitelisted to be used as          
  collateral"                                                                   
         1609┆ );
            ⋮┆----------------------------------------
         1634┆ require(
         1635┆     now < otoken.expiryTimestamp(),
         1636┆     "Controller: can not withdraw collateral from a vault with an
  expired short otoken"                                                         
         1637┆ );
            ⋮┆----------------------------------------
         1659┆ require(whitelist.isWhitelistedOtoken(_args.otoken), "Controller:
  otoken is not whitelisted to be minted");                                     
            ⋮┆----------------------------------------
         1663┆ require(now < otoken.expiryTimestamp(), "Controller: can not mint
  expired otoken");                                                             
            ⋮┆----------------------------------------
         1683┆ require((_args.from == msg.sender) || (_args.from ==             
  _args.owner), "Controller: cannot burn from this address");                   
            ⋮┆----------------------------------------
         1687┆ require(now < otoken.expiryTimestamp(), "Controller: can not burn
  expired otoken");                                                             
            ⋮┆----------------------------------------
         1704┆ require(now > otoken.expiryTimestamp(), "Controller: can not     
  redeem un-expired otoken");                                                   
            ⋮┆----------------------------------------
         1706┆ require(isSettlementAllowed(_args.otoken), "Controller: asset    
  prices not finalized yet");                                                   
            ⋮┆----------------------------------------
         1727┆ require(_isNotEmpty(vault.shortOtokens) ||                       
  _isNotEmpty(vault.longOtokens), "Can't settle vault with no otoken");         
            ⋮┆----------------------------------------
         1733┆ require(now > otoken.expiryTimestamp(), "Controller: can not     
  settle vault with un-expired otoken");                                        
            ⋮┆----------------------------------------
         1734┆ require(isSettlementAllowed(address(otoken)), "Controller: asset 
  prices not finalized yet");                                                   

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 140 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
