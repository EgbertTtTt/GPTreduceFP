METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 22 Code Findings │
└──────────────────┘
                           
    /sb/CENNZnetBridge.sol 
       solidity.best-practice.use-ownable2step                                  
          By demanding that the receiver of the owner permissions actively      
  accept via a contract call                                                    
          of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the 
  contract ownership                                                            
          from accidentally being transferred  to an address that cannot handle 
  it.                                                                           
                                                                                
          107┆ contract CENNZnetBridge is Ownable {
            ⋮┆----------------------------------------
       solidity.performance.array-length-outside-loop                           
          Caching the array length outside a loop saves reading it on each      
  iteration, as long as the                                                     
          array's length is not changed during the loop.                        
                                                                                
          159┆ for (uint i; i < _validators.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.unnecessary-checked-arithmetic-in-loop              
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
                                                                                
          159┆ for (uint i; i < _validators.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
           63┆ require(owner() == _msgSender(), "Ownable: caller is not the     
  owner");                                                                      
            ⋮┆----------------------------------------
           84┆ require(newOwner != address(0), "Ownable: new owner is the zero  
  address");                                                                    
            ⋮┆----------------------------------------
          141┆ require(active, "bridge inactive");
            ⋮┆----------------------------------------
          143┆ require(!eventIds[eventId], "eventId replayed");
            ⋮┆----------------------------------------
          144┆ require(msg.value >= verificationFee || msg.sender ==            
  address(this), "must supply verification fee");                               
            ⋮┆----------------------------------------
          146┆ require(validatorSetId <= activeValidatorSetId, "future validator
  set");                                                                        
            ⋮┆----------------------------------------
          147┆ require(activeValidatorSetId - validatorSetId <= proofTTL,       
  "expired proof");                                                             
            ⋮┆----------------------------------------
          152┆ require(_validators.length > 0, "invalid validator set");
            ⋮┆----------------------------------------
          163┆ require(_validators[i] == ecrecover(digest, proof.v[i],          
  proof.r[i], proof.s[i]), "signature invalid");                                
            ⋮┆----------------------------------------
          172┆ require(witnessCount >= acceptanceTreshold, "not enough          
  signatures");                                                                 
            ⋮┆----------------------------------------
          188┆ require(newValidators.length > 0, "empty validator set");
            ⋮┆----------------------------------------
          189┆ require(newValidatorSetId > activeValidatorSetId , "validator set
  id replayed");                                                                
            ⋮┆----------------------------------------
          201┆ require(sent, "Failed to send Ether");
            ⋮┆----------------------------------------
          210┆ require(_validators.length > 0, "empty validator set");
            ⋮┆----------------------------------------
          211┆ require(validatorSetId >= activeValidatorSetId, "set is          
  historic");                                                                   
            ⋮┆----------------------------------------
          219┆ require(_validators.length > 0, "empty validator set");
            ⋮┆----------------------------------------
          220┆ require(validatorSetId + proofTTL > activeValidatorSetId, "set is
  inactive");                                                                   
            ⋮┆----------------------------------------
       solidity.performance.use-prefix-increment-not-postfix                    
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
                                                                                
          159┆ for (uint i; i < _validators.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
           84┆ require(newOwner != address(0), "Ownable: new owner is the zero  
  address");                                                                    

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 22 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
