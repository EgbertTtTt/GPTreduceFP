METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                   
                   
┌─────────────────┐
│ 9 Code Findings │
└─────────────────┘
                 
    /sb/code.sol 
       solidity.best-practice.use-ownable2step                                  
          By demanding that the receiver of the owner permissions actively      
  accept via a contract call                                                    
          of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the 
  contract ownership                                                            
          from accidentally being transferred  to an address that cannot handle 
  it.                                                                           
                                                                                
          161┆ contract MintableToken is ApprovalContract, Ownable {
            ⋮┆----------------------------------------
       solidity.performance.array-length-outside-loop                           
          Caching the array length outside a loop saves reading it on each      
  iteration, as long as the                                                     
          array's length is not changed during the loop.                        
                                                                                
          318┆ for (uint i = 0; i < recipients.length; i++) {
            ⋮┆----------------------------------------
          334┆ for (uint i = 0; i < _address.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.unnecessary-checked-arithmetic-in-loop              
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
                                                                                
          318┆ for (uint i = 0; i < recipients.length; i++) {
            ⋮┆----------------------------------------
          334┆ for (uint i = 0; i < _address.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-multiple-require                                
          Using multiple require statements is cheaper than using && multiple   
  check combinations.                                                           
          There are more advantages, such as easier to read code and better     
  coverage reports.                                                             
                                                                                
          211┆ require(
          212┆     _address != address(0) &&
          213┆     _amount > 0 &&
          214┆     _start < _end &&
          215┆     vestingMembers[_address].totalSum == 0 &&
          216┆     balances[msg.sender] > _amount
          217┆ );
            ⋮┆----------------------------------------
          329┆ require(
          330┆     _address.length == _amount.length &&
          331┆     _address.length == _start.length &&
          332┆     _address.length == _end.length
          333┆ );
            ⋮┆----------------------------------------
       solidity.performance.use-prefix-increment-not-postfix                    
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
                                                                                
          318┆ for (uint i = 0; i < recipients.length; i++) {
            ⋮┆----------------------------------------
          334┆ for (uint i = 0; i < _address.length; i++) {

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 9 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
