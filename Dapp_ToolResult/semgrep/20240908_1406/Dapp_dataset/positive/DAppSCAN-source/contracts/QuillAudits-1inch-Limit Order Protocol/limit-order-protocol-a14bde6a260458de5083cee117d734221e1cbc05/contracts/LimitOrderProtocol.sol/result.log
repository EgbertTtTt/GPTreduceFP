METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 96 Code Findings │
└──────────────────┘
                               
    /sb/LimitOrderProtocol.sol 
       solidity.best-practice.use-abi-encodecall-instead-of-encodewithselector  
          To guarantee arguments type safety it is recommended to use           
  `abi.encodeCall` instead of                                                   
          `abi.encodeWithSelector`.                                             
                                                                                
          904┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.transfer.selector, to, value));                  
            ⋮┆----------------------------------------
          908┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.transferFrom.selector, from, to, value));        
            ⋮┆----------------------------------------
          926┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.approve.selector, spender, value));              
            ⋮┆----------------------------------------
          931┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.approve.selector, spender, newAllowance));       
            ⋮┆----------------------------------------
          936┆ _callOptionalReturn(token,                                       
  abi.encodeWithSelector(token.approve.selector, spender, newAllowance));       
            ⋮┆----------------------------------------
         1758┆ bytes memory result =                                            
  maker.uncheckedFunctionStaticCall(abi.encodeWithSelector(IERC1271.isValidSigna
  ture.selector, orderHash, signature), "LOP: isValidSignature ... [0m          
            [shortened a long line from output, adjust with                     
  --max-chars-per-line]                                                         
            ⋮┆----------------------------------------
       solidity.performance.array-length-outside-loop                           
          Caching the array length outside a loop saves reading it on each      
  iteration, as long as the                                                     
          array's length is not changed during the loop.                        
                                                                                
         1153┆ require(result.length == 32, "PH: invalid call result");
            ⋮┆----------------------------------------
         1167┆ require(result.length == 32, "PH: invalid call result");
            ⋮┆----------------------------------------
         1475┆ for (uint i = 0; i < orderHashes.length; i++) {
            ⋮┆----------------------------------------
         1505┆ if (success && result.length > 0) {
            ⋮┆----------------------------------------
       solidity.performance.non-payable-constructor      
          Consider making costructor payable to save gas.
                                                         
          685┆ constructor(address _immutableOwner) {
          686┆     immutableOwner = _immutableOwner;
          687┆ }
            ⋮┆----------------------------------------
       solidity.performance.state-variable-read-in-a-loop                       
          Replace state variable reads and writes within loops with local       
  variable reads and writes.                                                    
                                                                                
         1476┆ results[i] = _remaining[orderHashes[i]];
            ⋮┆----------------------------------------
       solidity.performance.unnecessary-checked-arithmetic-in-loop              
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
                                                                                
         1151┆ for (uint i = 0; i < targets.length; i++) {
            ⋮┆----------------------------------------
         1165┆ for (uint i = 0; i < targets.length; i++) {
            ⋮┆----------------------------------------
         1475┆ for (uint i = 0; i < orderHashes.length; i++) {
            ⋮┆----------------------------------------
         1502┆ for (uint i = 0; i < targets.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
           88┆ require(c >= a, "SafeMath: addition overflow");
            ⋮┆----------------------------------------
          103┆ require(b <= a, "SafeMath: subtraction overflow");
            ⋮┆----------------------------------------
          120┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          137┆ require(b > 0, "SafeMath: division by zero");
            ⋮┆----------------------------------------
          154┆ require(b > 0, "SafeMath: modulo by zero");
            ⋮┆----------------------------------------
          376┆ require(address(this).balance >= value, "UA: insufficient        
  balance");                                                                    
            ⋮┆----------------------------------------
          461┆ require(oracle.latestTimestamp() + _ORACLE_EXPIRATION_TIME >     
  block.timestamp, "CC: stale data");                                           
            ⋮┆----------------------------------------
          475┆ require(oracle1.latestTimestamp() + _ORACLE_EXPIRATION_TIME >    
  block.timestamp, "CC: stale data O1");                                        
            ⋮┆----------------------------------------
          477┆ require(oracle2.latestTimestamp() + _ORACLE_EXPIRATION_TIME >    
  block.timestamp, "CC: stale data O2");                                        
            ⋮┆----------------------------------------
          681┆ require(msg.sender == immutableOwner, "IO: Access denied");
            ⋮┆----------------------------------------
          693┆ require(ERC1155Proxy.func_733NCGU.selector ==                    
  bytes4(uint32(IERC20.transferFrom.selector) + 4), "ERC1155Proxy: bad          
  selector");                                                                   
            ⋮┆----------------------------------------
          753┆ require(address(this).balance >= amount, "Address: insufficient  
  balance");                                                                    
            ⋮┆----------------------------------------
          757┆ require(success, "Address: unable to send value, recipient may   
  have reverted");                                                              
            ⋮┆----------------------------------------
          814┆ require(address(this).balance >= value, "Address: insufficient   
  balance for call");                                                           
            ⋮┆----------------------------------------
          815┆ require(isContract(target), "Address: call to non-contract");
            ⋮┆----------------------------------------
          839┆ require(isContract(target), "Address: static call to             
  non-contract");                                                               
            ⋮┆----------------------------------------
          863┆ require(isContract(target), "Address: delegate call to           
  non-contract");                                                               
            ⋮┆----------------------------------------
          923┆ require((value == 0) || (token.allowance(address(this), spender) 
  == 0),                                                                        
          924┆     "SafeERC20: approve from non-zero to non-zero allowance"
          925┆ );
            ⋮┆----------------------------------------
          953┆ require(abi.decode(returndata, (bool)), "SafeERC20: ERC20        
  operation did not succeed");                                                  
            ⋮┆----------------------------------------
          963┆ require(ERC20Proxy.func_50BkM4K.selector ==                      
  bytes4(uint32(IERC20.transferFrom.selector) + 1), "ERC20Proxy: bad selector");
            ⋮┆----------------------------------------
         1102┆ require(ERC721Proxy.func_40aVqeY.selector ==                     
  bytes4(uint32(IERC20.transferFrom.selector) + 2), "ERC20Proxy: bad selector");
            ⋮┆----------------------------------------
         1103┆ require(ERC721Proxy.func_20xtkDI.selector ==                     
  bytes4(uint32(IERC20.transferFrom.selector) + 3), "ERC20Proxy: bad selector");
            ⋮┆----------------------------------------
         1150┆ require(targets.length == data.length, "PH: input array size     
  mismatch");                                                                   
            ⋮┆----------------------------------------
         1153┆ require(result.length == 32, "PH: invalid call result");
            ⋮┆----------------------------------------
         1164┆ require(targets.length == data.length, "PH: input array size     
  mismatch");                                                                   
            ⋮┆----------------------------------------
         1167┆ require(result.length == 32, "PH: invalid call result");
            ⋮┆----------------------------------------
         1180┆ require(result.length == 32, "PH: invalid call result");
            ⋮┆----------------------------------------
         1189┆ require(result.length == 32, "PH: invalid call result");
            ⋮┆----------------------------------------
         1198┆ require(result.length == 32, "PH: invalid call result");
            ⋮┆----------------------------------------
         1489┆ require(result.length == 32, "LOP: invalid predicate return");
            ⋮┆----------------------------------------
         1500┆ require(targets.length == data.length, "LOP: array size          
  mismatch");                                                                   
            ⋮┆----------------------------------------
         1517┆ require(order.makerAssetData.decodeAddress(_FROM_INDEX) ==       
  msg.sender, "LOP: Access denied");                                            
            ⋮┆----------------------------------------
         1564┆ require(expiration == 0 || block.timestamp <= expiration, "LOP:  
  order expired");  // solhint-disable-line not-rely-on-time                    
            ⋮┆----------------------------------------
         1572┆ require(invalidator & invalidatorBit == 0, "LOP: already         
  filled");                                                                     
            ⋮┆----------------------------------------
         1591┆ revert("LOP: one of amounts should be 0");
            ⋮┆----------------------------------------
         1594┆ require(makingAmount > 0 && takingAmount > 0, "LOP: can't swap 0 
  amount");                                                                     
            ⋮┆----------------------------------------
         1595┆ require(makingAmount <= orderMakerAmount, "LOP: making amount    
  exceeded");                                                                   
            ⋮┆----------------------------------------
         1596┆ require(takingAmount <= orderTakerAmount, "LOP: taking amount    
  exceeded");                                                                   
            ⋮┆----------------------------------------
         1661┆ require(_remaining[orderHash] == 0, "LOP: reentrancy detected");
            ⋮┆----------------------------------------
         1668┆ require(checkPredicate(order), "LOP: predicate returned false");
            ⋮┆----------------------------------------
         1673┆ revert("LOP: only one amount should be 0");
            ⋮┆----------------------------------------
         1677┆ require(takingAmount <= thresholdAmount, "LOP: taking amount too 
  high");                                                                       
            ⋮┆----------------------------------------
         1681┆ require(makingAmount >= thresholdAmount, "LOP: making amount too 
  low");                                                                        
            ⋮┆----------------------------------------
         1684┆ require(makingAmount > 0 && takingAmount > 0, "LOP: can't swap 0 
  amount");                                                                     
            ⋮┆----------------------------------------
         1749┆ require(makerAssetData.length >= 100, "LOP: bad                  
  makerAssetData.length");                                                      
            ⋮┆----------------------------------------
         1750┆ require(takerAssetData.length >= 100, "LOP: bad                  
  takerAssetData.length");                                                      
            ⋮┆----------------------------------------
         1753┆ require(makerSelector >= IERC20.transferFrom.selector &&         
  makerSelector <= _MAX_SELECTOR, "LOP: bad makerAssetData.selector");          
            ⋮┆----------------------------------------
         1754┆ require(takerSelector >= IERC20.transferFrom.selector &&         
  takerSelector <= _MAX_SELECTOR, "LOP: bad takerAssetData.selector");          
            ⋮┆----------------------------------------
         1759┆ require(result.length == 32 && abi.decode(result, (bytes4)) ==   
  IERC1271.isValidSignature.selector, "LOP: bad signature");                    
            ⋮┆----------------------------------------
         1767┆ require(orderTakerAddress == msg.sender, "LOP: private order");
            ⋮┆----------------------------------------
         1776┆ require(makerAsset != address(0) && makerAsset !=                
  0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE, "LOP: raw ETH is not supported"); 
            ⋮┆----------------------------------------
         1781┆ require(abi.decode(result, (bool)), "LOP: makerAsset.call bad    
  result");                                                                     
            ⋮┆----------------------------------------
         1792┆ require(takerAsset != address(0) && takerAsset !=                
  0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE, "LOP: raw ETH is not supported"); 
            ⋮┆----------------------------------------
         1797┆ require(abi.decode(result, (bool)), "LOP: takerAsset.call bad    
  result");                                                                     
            ⋮┆----------------------------------------
         1808┆ require(result.length == 32, "LOP: invalid getMakerAmount ret");
            ⋮┆----------------------------------------
         1818┆ require(result.length == 32, "LOP: invalid getTakerAmount ret");
            ⋮┆----------------------------------------
       solidity.performance.use-multiple-require                                
          Using multiple require statements is cheaper than using && multiple   
  check combinations.                                                           
          There are more advantages, such as easier to read code and better     
  coverage reports.                                                             
                                                                                
         1594┆ require(makingAmount > 0 && takingAmount > 0, "LOP: can't swap 0 
  amount");                                                                     
            ⋮┆----------------------------------------
         1684┆ require(makingAmount > 0 && takingAmount > 0, "LOP: can't swap 0 
  amount");                                                                     
            ⋮┆----------------------------------------
         1753┆ require(makerSelector >= IERC20.transferFrom.selector &&         
  makerSelector <= _MAX_SELECTOR, "LOP: bad makerAssetData.selector");          
            ⋮┆----------------------------------------
         1754┆ require(takerSelector >= IERC20.transferFrom.selector &&         
  takerSelector <= _MAX_SELECTOR, "LOP: bad takerAssetData.selector");          
            ⋮┆----------------------------------------
         1759┆ require(result.length == 32 && abi.decode(result, (bytes4)) ==   
  IERC1271.isValidSignature.selector, "LOP: bad signature");                    
            ⋮┆----------------------------------------
         1776┆ require(makerAsset != address(0) && makerAsset !=                
  0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE, "LOP: raw ETH is not supported"); 
            ⋮┆----------------------------------------
         1792┆ require(takerAsset != address(0) && takerAsset !=                
  0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE, "LOP: raw ETH is not supported"); 
            ⋮┆----------------------------------------
       solidity.performance.use-nested-if                                       
          Using nested is cheaper than using && multiple check combinations.    
  There are more                                                                
          advantages, such as easier to read code and better coverage reports.  
                                                                                
         1345┆ if (v != 27 && v != 28) {
         1346┆     return address(0);
         1347┆ }
            ⋮┆----------------------------------------
         1505┆ if (success && result.length > 0) {
         1506┆     success = abi.decode(result, (bool));
         1507┆ }
            ⋮┆----------------------------------------
         1579┆ if (takingAmount == 0 && makingAmount == 0) {
         1580┆     // Two zeros means whole order
         1581┆     makingAmount = orderMakerAmount;
         1582┆     takingAmount = orderTakerAmount;
         1583┆ }
         1584┆ else if (takingAmount == 0) {
         1585┆     takingAmount =                                               
  (makingAmount.mul(orderTakerAmount).add(orderMakerAmount).sub(1)).div(orderMak
  erAmount);                                                                    
         1586┆ }
         1587┆ else if (makingAmount == 0) {
         1588┆     makingAmount =                                               
  takingAmount.mul(orderMakerAmount).div(orderTakerAmount);                     
             [hid 4 additional lines, adjust with --max-lines-per-finding] 
         1757┆ if ((signature.length != 65 && signature.length != 64) ||        
  SilentECDSA.recover(orderHash, signature) != maker) {                         
         1758┆     bytes memory result =                                        
  maker.uncheckedFunctionStaticCall(abi.encodeWithSelector(IERC1271.isValidSigna
  ture.selector, orderHash, signature), "LOP: isValidSigna ... [0m              
         1759┆     require(result.length == 32 && abi.decode(result, (bytes4))  
  == IERC1271.isValidSignature.selector, "LOP: bad signature");                 
         1760┆ }
            [shortened a long line from output, adjust with                     
  --max-chars-per-line]                                                         
            ⋮┆----------------------------------------
         1802┆ if (order.getMakerAmount.length == 0 && takerAmount ==           
  order.takerAssetData.decodeUint256(_AMOUNT_INDEX)) {                          
         1803┆     // On empty order.getMakerAmount calldata only whole fills   
  are allowed                                                                   
         1804┆     return order.makerAssetData.decodeUint256(_AMOUNT_INDEX);
         1805┆ }
            ⋮┆----------------------------------------
         1813┆ if (order.getTakerAmount.length == 0 && makerAmount ==           
  order.makerAssetData.decodeUint256(_AMOUNT_INDEX)) {                          
         1814┆     // On empty order.getTakerAmount calldata only whole fills   
  are allowed                                                                   
         1815┆     return order.takerAssetData.decodeUint256(_AMOUNT_INDEX);
         1816┆ }
            ⋮┆----------------------------------------
       solidity.performance.use-prefix-increment-not-postfix                    
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
                                                                                
         1151┆ for (uint i = 0; i < targets.length; i++) {
            ⋮┆----------------------------------------
         1165┆ for (uint i = 0; i < targets.length; i++) {
            ⋮┆----------------------------------------
         1475┆ for (uint i = 0; i < orderHashes.length; i++) {
            ⋮┆----------------------------------------
         1502┆ for (uint i = 0; i < targets.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
          120┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          757┆ require(success, "Address: unable to send value, recipient may   
  have reverted");                                                              
            ⋮┆----------------------------------------
          814┆ require(address(this).balance >= value, "Address: insufficient   
  balance for call");                                                           
            ⋮┆----------------------------------------
          839┆ require(isContract(target), "Address: static call to             
  non-contract");                                                               
            ⋮┆----------------------------------------
          863┆ require(isContract(target), "Address: delegate call to           
  non-contract");                                                               
            ⋮┆----------------------------------------
          923┆ require((value == 0) || (token.allowance(address(this), spender) 

Ran 48 rules on 1 file: 96 findings.
  == 0),                                                                        
          924┆     "SafeERC20: approve from non-zero to non-zero allowance"
          925┆ );
            ⋮┆----------------------------------------
          953┆ require(abi.decode(returndata, (bool)), "SafeERC20: ERC20        
  operation did not succeed");                                                  


A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
