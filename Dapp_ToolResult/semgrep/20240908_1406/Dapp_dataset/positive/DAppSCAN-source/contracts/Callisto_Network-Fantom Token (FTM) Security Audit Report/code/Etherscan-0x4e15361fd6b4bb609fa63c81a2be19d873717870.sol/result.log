METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 34 Code Findings │
└──────────────────┘
                                                                 
    /sb/Etherscan-0x4e15361fd6b4bb609fa63c81a2be19d873717870.sol 
       solidity.performance.array-length-outside-loop                           
          Caching the array length outside a loop saves reading it on each      
  iteration, as long as the                                                     
          array's length is not changed during the loop.                        
                                                                                
          425┆ for (uint i; i < _addresses.length; i++) {
            ⋮┆----------------------------------------
          464┆ for (uint i; i < _accounts.length; i++) {
            ⋮┆----------------------------------------
          476┆ for (uint i; i < _accounts.length; i++) {
            ⋮┆----------------------------------------
          591┆ for (uint j; j < _addresses.length; j++) {
            ⋮┆----------------------------------------
       solidity.performance.non-payable-constructor      
          Consider making costructor payable to save gas.
                                                         
           60┆ constructor() public {
           61┆     owner = msg.sender;
           62┆     isAdmin[owner] = true;
           63┆ }
            ⋮┆----------------------------------------
          102┆ constructor() public {
          103┆     wallet = owner;
          104┆ }
            ⋮┆----------------------------------------
          292┆ constructor() public checkDateOrder() {
          293┆     require(now < dateMainStart);
          294┆ }
            ⋮┆----------------------------------------
          396┆ constructor() public {}
            ⋮┆----------------------------------------
       solidity.performance.unnecessary-checked-arithmetic-in-loop              
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
                                                                                
          210┆ for (uint i; i < LOCK_SLOTS; i++) {
            ⋮┆----------------------------------------
          244┆ for (uint i; i < LOCK_SLOTS; i++) {
            ⋮┆----------------------------------------
          263┆ for (uint i; i < LOCK_SLOTS; i++) {
            ⋮┆----------------------------------------
          425┆ for (uint i; i < _addresses.length; i++) {
            ⋮┆----------------------------------------
          464┆ for (uint i; i < _accounts.length; i++) {
            ⋮┆----------------------------------------
          476┆ for (uint i; i < _accounts.length; i++) {
            ⋮┆----------------------------------------
          591┆ for (uint j; j < _addresses.length; j++) {
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
          202┆ require(_term > now, "lock term must be in the future");
            ⋮┆----------------------------------------
          220┆ require(idx != 9999, "registerLockedTokens: no available slot    
  found");                                                                      
            ⋮┆----------------------------------------
          485┆ require(_tokens <= availableToMint(), "not enough tokens         
  available to mint");                                                          
            ⋮┆----------------------------------------
          486┆ require(_term == 0 || _term > now, "either without lock term, or 
  lock term must be in the future");                                            
            ⋮┆----------------------------------------
       solidity.performance.use-multiple-require                                
          Using multiple require statements is cheaper than using && multiple   
  check combinations.                                                           
          There are more advantages, such as easier to read code and better     
  coverage reports.                                                             
                                                                                
          299┆ require(now < _unixts && now < dateMainStart);
            ⋮┆----------------------------------------
          305┆ require(now < _unixts && now < dateMainEnd);
            ⋮┆----------------------------------------
          558┆ require(_tokens > 0 && _tokens <=                                
  unlockedTokensInternal(msg.sender));                                          
            ⋮┆----------------------------------------
       solidity.performance.use-nested-if                                       
          Using nested is cheaper than using && multiple check combinations.    
  There are more                                                                
          advantages, such as easier to read code and better coverage reports.  
                                                                                
          313┆ if (now > dateMainStart && now <= dateMainStart + 1 days) return 
  true;                                                                         
            ⋮┆----------------------------------------
          318┆ if (now > dateMainStart && now < dateMainEnd) return true;
            ⋮┆----------------------------------------
       solidity.performance.use-prefix-increment-not-postfix                    
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
                                                                                
          210┆ for (uint i; i < LOCK_SLOTS; i++) {
            ⋮┆----------------------------------------
          244┆ for (uint i; i < LOCK_SLOTS; i++) {
            ⋮┆----------------------------------------
          263┆ for (uint i; i < LOCK_SLOTS; i++) {
            ⋮┆----------------------------------------
          425┆ for (uint i; i < _addresses.length; i++) {
            ⋮┆----------------------------------------
          464┆ for (uint i; i < _accounts.length; i++) {
            ⋮┆----------------------------------------
          476┆ for (uint i; i < _accounts.length; i++) {
            ⋮┆----------------------------------------
          591┆ for (uint j; j < _addresses.length; j++) {
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
          220┆ require(idx != 9999, "registerLockedTokens: no available slot    
  found");                                                                      
            ⋮┆----------------------------------------
          485┆ require(_tokens <= availableToMint(), "not enough tokens         
  available to mint");                                                          
            ⋮┆----------------------------------------
          486┆ require(_term == 0 || _term > now, "either without lock term, or 
  lock term must be in the future");                                            

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 34 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
