METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 94 Code Findings │
└──────────────────┘
                     
    /sb/ACOToken.sol 
       solidity.best-practice.use-abi-encodecall-instead-of-encodewithselector  
          To guarantee arguments type safety it is recommended to use           
  `abi.encodeCall` instead of                                                   
          `abi.encodeWithSelector`.                                             
                                                                                
         1776┆ (bool success, bytes memory returndata) =                        
  token.call(abi.encodeWithSelector(_transferSelector, recipient, amount));     
            ⋮┆----------------------------------------
         1788┆ (bool success, bytes memory returndata) =                        
  token.call(abi.encodeWithSelector(_transferFromSelector, sender, recipient,   
  amount));                                                                     
            ⋮┆----------------------------------------
       solidity.performance.array-length-outside-loop                           
          Caching the array length outside a loop saves reading it on each      
  iteration, as long as the                                                     
          array's length is not changed during the loop.                        
                                                                                
         1395┆ for (uint256 i = 0; i < accounts.length; ++i) {
            ⋮┆----------------------------------------
         1636┆ for (uint256 i = startIndex; i < yearBytes.length; i++) {
            ⋮┆----------------------------------------
       solidity.performance.state-variable-read-in-a-loop                       
          Replace state variable reads and writes within loops with local       
  variable reads and writes.                                                    
                                                                                
         1383┆ tokenAmount = _exerciseAccount(_collateralOwners[i], tokenAmount,
  exerciseAccount);                                                             
            ⋮┆----------------------------------------
         1701┆ if (representativeAt == -1 && (temp % 10 != 0 || count ==        
  uint256(strikeAssetDecimals))) {                                              
            ⋮┆----------------------------------------
         1706┆ if (count == uint256(strikeAssetDecimals)) {
            ⋮┆----------------------------------------
       solidity.performance.unnecessary-checked-arithmetic-in-loop              
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
                                                                                
         1395┆ for (uint256 i = 0; i < accounts.length; ++i) {
            ⋮┆----------------------------------------
         1636┆ for (uint256 i = startIndex; i < yearBytes.length; i++) {
            ⋮┆----------------------------------------
         1723┆ for (uint256 i = 0; i < digits; ++i) {
            ⋮┆----------------------------------------
       solidity.performance.use-custom-error-not-require                        
          Consider using custom errors as they are more gas efficient while     
  allowing developers  to                                                       
          describe the error in detail using NatSpec.                           
                                                                                
           30┆ require(c >= a, "SafeMath: addition overflow");
            ⋮┆----------------------------------------
           82┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          295┆ require(sender != address(0), "ERC20::_transferAction: Invalid   
  sender");                                                                     
            ⋮┆----------------------------------------
          296┆ require(recipient != address(0), "ERC20::_transferAction: Invalid
  recipient");                                                                  
            ⋮┆----------------------------------------
          305┆ require(owner != address(0), "ERC20::_approveAction: Invalid     
  owner");                                                                      
            ⋮┆----------------------------------------
          306┆ require(spender != address(0), "ERC20::_approveAction: Invalid   
  spender");                                                                    
            ⋮┆----------------------------------------
          314┆ require(account != address(0), "ERC20::_mintAction: Invalid      
  account");                                                                    
            ⋮┆----------------------------------------
          323┆ require(account != address(0), "ERC20::_burnAction: Invalid      
  account");                                                                    
            ⋮┆----------------------------------------
          382┆ require(address(this).balance >= amount, "Address: insufficient  
  balance");                                                                    
            ⋮┆----------------------------------------
          386┆ require(success, "Address: unable to send value, recipient may   
  have reverted");                                                              
            ⋮┆----------------------------------------
          863┆ require(_notExpired(), "ACOToken::Expired");
            ⋮┆----------------------------------------
          871┆ require(_notEntered, "ACOToken::Reentry");
            ⋮┆----------------------------------------
          898┆ require(underlying == address(0) && strikeAsset == address(0) && 
  strikePrice == 0, "ACOToken::init: Already initialized");                     
            ⋮┆----------------------------------------
          900┆ require(_expiryTime > now, "ACOToken::init: Invalid expiry");
            ⋮┆----------------------------------------
          901┆ require(_strikePrice > 0, "ACOToken::init: Invalid strike        
  price");                                                                      
            ⋮┆----------------------------------------
          902┆ require(_underlying != _strikeAsset, "ACOToken::init: Same       
  assets");                                                                     
            ⋮┆----------------------------------------
          903┆ require(_acoFee <= 500, "ACOToken::init: Invalid ACO fee"); //   
  Maximum is 0.5%                                                               
            ⋮┆----------------------------------------
          904┆ require(_isEther(_underlying) || _underlying.isContract(),       
  "ACOToken::init: Invalid underlying");                                        
            ⋮┆----------------------------------------
          905┆ require(_isEther(_strikeAsset) || _strikeAsset.isContract(),     
  "ACOToken::init: Invalid strike asset");                                      
            ⋮┆----------------------------------------
         1092┆ require(_isEther(collateral()), "ACOToken::mintPayable: Invalid  
  call");                                                                       
            ⋮┆----------------------------------------
         1103┆ require(_isEther(collateral()), "ACOToken::mintToPayable: Invalid
  call");                                                                       
            ⋮┆----------------------------------------
         1114┆ require(!_isEther(_collateral), "ACOToken::mint: Invalid call");
            ⋮┆----------------------------------------
         1129┆ require(!_isEther(_collateral), "ACOToken::mintTo: Invalid       
  call");                                                                       
            ⋮┆----------------------------------------
         1173┆ require(tokenData[account].amount <= allowance(account,          
  msg.sender), "ACOToken::redeemFrom: No allowance");                           
            ⋮┆----------------------------------------
         1250┆ require(!_notExpired(), "ACOToken::_clear: Token not expired     
  yet");                                                                        
            ⋮┆----------------------------------------
         1251┆ require(!_accountHasCollateral(account), "ACOToken::_clear: Must 
  call the redeem method");                                                     
            ⋮┆----------------------------------------
         1262┆ require(_accountHasCollateral(account),                          
  "ACOToken::_redeemCollateral: No collateral available");                      
            ⋮┆----------------------------------------
         1263┆ require(tokenAmount > 0, "ACOToken::_redeemCollateral: Invalid   
  token amount");                                                               
            ⋮┆----------------------------------------
         1280┆ require(collateralAmount > 0, "ACOToken::_mintToken: Invalid     
  collateral amount");                                                          
            ⋮┆----------------------------------------
         1385┆ require(tokenAmount == 0, "ACOToken::_exerciseOwners: Invalid    
  remaining amount");                                                           
            ⋮┆----------------------------------------
         1401┆ require(tokenAmount == 0, "ACOToken::_exerciseAccounts: Invalid  
  remaining amount");                                                           
            ⋮┆----------------------------------------
         1448┆ require(tokenAmount > 0, "ACOToken::_validateAndBurn: Invalid    
  token amount");                                                               
            ⋮┆----------------------------------------
         1453┆ require(balanceOf(account) > tokenData[account].amount,          
  "ACOToken::_validateAndBurn: Tokens compromised");                            
            ⋮┆----------------------------------------
         1454┆ require(tokenAmount <=                                           
  balanceOf(account).sub(tokenData[account].amount),                            
  "ACOToken::_validateAndBurn: Token amount not available");                    
            ⋮┆----------------------------------------
         1462┆ require(msg.value == expectedAmount, "ACOToken::_validateAndBurn:
  Invalid ether amount");                                                       
            ⋮┆----------------------------------------
         1464┆ require(msg.value == 0, "ACOToken::_validateAndBurn: No ether    
  expected");                                                                   
            ⋮┆----------------------------------------
         1484┆ require(!_notExpired(), "ACOToken::_redeem: Token not expired    
  yet");                                                                        
            ⋮┆----------------------------------------
         1749┆ require(success, "ACOToken::_getAssetDecimals: Invalid asset     
  decimals");                                                                   
            ⋮┆----------------------------------------
         1764┆ require(success, "ACOToken::_getAssetSymbol: Invalid asset       
  symbol");                                                                     
            ⋮┆----------------------------------------
         1777┆ require(success && (returndata.length == 0 ||                    
  abi.decode(returndata, (bool))), "ACOToken::_transferERC20");                 
            ⋮┆----------------------------------------
         1789┆ require(success && (returndata.length == 0 ||                    
  abi.decode(returndata, (bool))), "ACOToken::_transferFromERC20");             
            ⋮┆----------------------------------------
       solidity.performance.use-multiple-require                                
          Using multiple require statements is cheaper than using && multiple   
  check combinations.                                                           
          There are more advantages, such as easier to read code and better     
  coverage reports.                                                             
                                                                                
          898┆ require(underlying == address(0) && strikeAsset == address(0) && 
  strikePrice == 0, "ACOToken::init: Already initialized");                     
            ⋮┆----------------------------------------
         1777┆ require(success && (returndata.length == 0 ||                    
  abi.decode(returndata, (bool))), "ACOToken::_transferERC20");                 
            ⋮┆----------------------------------------
         1789┆ require(success && (returndata.length == 0 ||                    
  abi.decode(returndata, (bool))), "ACOToken::_transferFromERC20");             
            ⋮┆----------------------------------------
       solidity.performance.use-nested-if                                       
          Using nested is cheaper than using && multiple check combinations.    
  There are more                                                                
          advantages, such as easier to read code and better coverage reports.  
                                                                                
          513┆ if (year >= 1970 && month > 0 && month <= 12) {
          514┆     uint daysInMonth = _getDaysInMonth(year, month);
          515┆     if (day > 0 && day <= daysInMonth) {
          516┆         valid = true;
          517┆     }
          518┆ }
            ⋮┆----------------------------------------
          515┆ if (day > 0 && day <= daysInMonth) {
          516┆     valid = true;
          517┆ }
            ⋮┆----------------------------------------
          522┆ if (hour < 24 && minute < 60 && second < 60) {
          523┆     valid = true;
          524┆ }
            ⋮┆----------------------------------------
         1701┆ if (representativeAt == -1 && (temp % 10 != 0 || count ==        
  uint256(strikeAssetDecimals))) {                                              
         1702┆     representativeAt = int256(digits);
         1703┆     number = temp;
         1704┆ }
            ⋮┆----------------------------------------
         1724┆ if (i > 0 && i == addPointAt) {
         1725┆     buffer[index--] = byte(".");
         1726┆ } else if (number == 0) {
         1727┆     buffer[index--] = byte("0");
         1728┆ } else {
         1729┆     // SWC-135-Code With No Effects: L1018
         1730┆     if (representativeAt <= int256(i)) {
         1731┆         buffer[index--] = byte(uint8(48 + number % 10));
         1732┆     }
         1733┆     number /= 10;
             [hid 1 additional lines, adjust with --max-lines-per-finding] 
       solidity.performance.use-prefix-increment-not-postfix                    
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
                                                                                
          706┆ digits++;
            ⋮┆----------------------------------------
         1636┆ for (uint256 i = startIndex; i < yearBytes.length; i++) {
            ⋮┆----------------------------------------
         1709┆ digits++;
            ⋮┆----------------------------------------
         1712┆ count++;
            ⋮┆----------------------------------------
         1718┆ digits++;
            ⋮┆----------------------------------------
       solidity.performance.use-short-revert-string                             
          Shortening revert strings to fit in 32 bytes will decrease gas costs  
  for deployment and  gas                                                       
          costs when the revert condition has been met.                         
                                                                                
           82┆ require(c / a == b, "SafeMath: multiplication overflow");
            ⋮┆----------------------------------------
          295┆ require(sender != address(0), "ERC20::_transferAction: Invalid   
  sender");                                                                     
            ⋮┆----------------------------------------
          296┆ require(recipient != address(0), "ERC20::_transferAction: Invalid
  recipient");                                                                  
            ⋮┆----------------------------------------
          305┆ require(owner != address(0), "ERC20::_approveAction: Invalid     
  owner");                                                                      
            ⋮┆----------------------------------------
          306┆ require(spender != address(0), "ERC20::_approveAction: Invalid   
  spender");                                                                    
            ⋮┆----------------------------------------
          314┆ require(account != address(0), "ERC20::_mintAction: Invalid      
  account");                                                                    
            ⋮┆----------------------------------------
          323┆ require(account != address(0), "ERC20::_burnAction: Invalid      
  account");                                                                    
            ⋮┆----------------------------------------
          386┆ require(success, "Address: unable to send value, recipient may   
  have reverted");                                                              
            ⋮┆----------------------------------------
          898┆ require(underlying == address(0) && strikeAsset == address(0) && 
  strikePrice == 0, "ACOToken::init: Already initialized");                     
            ⋮┆----------------------------------------
          901┆ require(_strikePrice > 0, "ACOToken::init: Invalid strike        
  price");                                                                      
            ⋮┆----------------------------------------
          904┆ require(_isEther(_underlying) || _underlying.isContract(),       
  "ACOToken::init: Invalid underlying");                                        
            ⋮┆----------------------------------------
          905┆ require(_isEther(_strikeAsset) || _strikeAsset.isContract(),     
  "ACOToken::init: Invalid strike asset");                                      
            ⋮┆----------------------------------------
         1092┆ require(_isEther(collateral()), "ACOToken::mintPayable: Invalid  
  call");                                                                       
            ⋮┆----------------------------------------
         1103┆ require(_isEther(collateral()), "ACOToken::mintToPayable: Invalid
  call");                                                                       
            ⋮┆----------------------------------------
         1173┆ require(tokenData[account].amount <= allowance(account,          
  msg.sender), "ACOToken::redeemFrom: No allowance");                           
            ⋮┆----------------------------------------
         1250┆ require(!_notExpired(), "ACOToken::_clear: Token not expired     
  yet");                                                                        
            ⋮┆----------------------------------------
         1251┆ require(!_accountHasCollateral(account), "ACOToken::_clear: Must 
  call the redeem method");                                                     
            ⋮┆----------------------------------------
         1262┆ require(_accountHasCollateral(account),                          
  "ACOToken::_redeemCollateral: No collateral available");                      
            ⋮┆----------------------------------------
         1263┆ require(tokenAmount > 0, "ACOToken::_redeemCollateral: Invalid   
  token amount");                                                               
            ⋮┆----------------------------------------
         1280┆ require(collateralAmount > 0, "ACOToken::_mintToken: Invalid     
  collateral amount");                                                          
            ⋮┆----------------------------------------
         1385┆ require(tokenAmount == 0, "ACOToken::_exerciseOwners: Invalid    
  remaining amount");                                                           
            ⋮┆----------------------------------------
         1401┆ require(tokenAmount == 0, "ACOToken::_exerciseAccounts: Invalid  
  remaining amount");                                                           
            ⋮┆----------------------------------------
         1448┆ require(tokenAmount > 0, "ACOToken::_validateAndBurn: Invalid    
                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 94 findings.
  token amount");                                                               
            ⋮┆----------------------------------------
         1453┆ require(balanceOf(account) > tokenData[account].amount,          
  "ACOToken::_validateAndBurn: Tokens compromised");                            
            ⋮┆----------------------------------------
         1454┆ require(tokenAmount <=                                           
  balanceOf(account).sub(tokenData[account].amount),                            
  "ACOToken::_validateAndBurn: Token amount not available");                    
            ⋮┆----------------------------------------
         1462┆ require(msg.value == expectedAmount, "ACOToken::_validateAndBurn:
  Invalid ether amount");                                                       
            ⋮┆----------------------------------------
         1464┆ require(msg.value == 0, "ACOToken::_validateAndBurn: No ether    
  expected");                                                                   
            ⋮┆----------------------------------------
         1484┆ require(!_notExpired(), "ACOToken::_redeem: Token not expired    
  yet");                                                                        
            ⋮┆----------------------------------------
         1749┆ require(success, "ACOToken::_getAssetDecimals: Invalid asset     
  decimals");                                                                   
            ⋮┆----------------------------------------
         1764┆ require(success, "ACOToken::_getAssetSymbol: Invalid asset       
  symbol");                                                                     


A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
