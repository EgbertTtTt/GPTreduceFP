'solc --version' running
'solc /sb/DescendingPriceERC20Auction.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/sb' running
Compilation warnings/errors on /sb/DescendingPriceERC20Auction.sol:
/sb/DescendingPriceERC20Auction.sol:23:3: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
  function Ownable() public {
  ^ (Relevant source part starts here and spans across multiple lines).


ERC20Auction.transferWinnings(address,uint256) (../../sb/DescendingPriceERC20Auction.sol#404-413) ignores return value by erc20Contract.transfer(recipient,tokenAmount) (../../sb/DescendingPriceERC20Auction.sol#412)
ERC20Auction.escrowERC20Tokens(address,address,uint256) (../../sb/DescendingPriceERC20Auction.sol#418-423) ignores return value by erc20Contract.transferFrom(auctionSeller,this,tokenAmount) (../../sb/DescendingPriceERC20Auction.sol#422)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-transfer

DescendingPriceAuction.getCurrentPrice(uint256) (../../sb/DescendingPriceERC20Auction.sol#261-281) performs a multiplication on the result of a division:
	- priceDecrease = numberOfBlocksElapsed.mul(priceDifference.div(blockDifference)) (../../sb/DescendingPriceERC20Auction.sol#278)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply

DescendingPriceAuction.setAuctionPricing(uint256,uint256,uint256,uint256) (../../sb/DescendingPriceERC20Auction.sol#287-297) contains a tautology or contradiction:
	- require(bool)(startPrice > 0 && priceFloor < startPrice && priceFloor >= 0 && duration > 0) (../../sb/DescendingPriceERC20Auction.sol#288)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#tautology-or-contradiction

Pragma version^0.4.23 (../../sb/DescendingPriceERC20Auction.sol#1) allows old versions
solc-0.4.26 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Parameter Whitelistable.inWhitelist(address)._address (../../sb/DescendingPriceERC20Auction.sol#318) is not in mixedCase
Parameter Whitelistable.addToWhitelist(address)._address (../../sb/DescendingPriceERC20Auction.sol#328) is not in mixedCase
Parameter Whitelistable.removeFromWhitelist(address)._address (../../sb/DescendingPriceERC20Auction.sol#345) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Reentrancy in DescendingPriceERC20Auction.createAuction(uint256,uint256,uint256,address,uint256) (../../sb/DescendingPriceERC20Auction.sol#452-463):
	External calls:
	- setAuctionPricing(startPrice,priceFloor,duration,auctionId) (../../sb/DescendingPriceERC20Auction.sol#460)
		- msg.sender.transfer(msg.value.sub(feeAmount)) (../../sb/DescendingPriceERC20Auction.sol#198)
	State variables written after the call(s):
	- setAuctionAsset(tokenAddress,tokenAmount,auctionId) (../../sb/DescendingPriceERC20Auction.sol#461)
		- auctionIdToAmount[auctionId] = tokenAmount (../../sb/DescendingPriceERC20Auction.sol#400)
	- setAuctionAsset(tokenAddress,tokenAmount,auctionId) (../../sb/DescendingPriceERC20Auction.sol#461)
		- auctionIdToERC20Address[auctionId] = tokenAddress (../../sb/DescendingPriceERC20Auction.sol#399)
Reentrancy in DescendingPriceAuction.setAuctionPricing(uint256,uint256,uint256,uint256) (../../sb/DescendingPriceERC20Auction.sol#287-297):
	External calls:
	- requiresFee(startPrice.div(50)) (../../sb/DescendingPriceERC20Auction.sol#287)
		- msg.sender.transfer(msg.value.sub(feeAmount)) (../../sb/DescendingPriceERC20Auction.sol#198)
	State variables written after the call(s):
	- auctionIdToAcceptingBids[auctionId] = true (../../sb/DescendingPriceERC20Auction.sol#296)
	- auctionIdToPriceFloor[auctionId] = priceFloor (../../sb/DescendingPriceERC20Auction.sol#294)
	- auctionIdToPriceFloorBlock[auctionId] = block.number.add(duration) (../../sb/DescendingPriceERC20Auction.sol#295)
	- auctionIdToStartBlock[auctionId] = block.number (../../sb/DescendingPriceERC20Auction.sol#292)
	- auctionIdToStartPrice[auctionId] = startPrice (../../sb/DescendingPriceERC20Auction.sol#293)
Reentrancy in FeeCollector.withdrawFees() (../../sb/DescendingPriceERC20Auction.sol#204-209):
	External calls:
	- owner.transfer(feeAmountWithdrawn) (../../sb/DescendingPriceERC20Auction.sol#207)
	Event emitted after the call(s):
	- FeesWithdrawn(owner,feeAmountWithdrawn) (../../sb/DescendingPriceERC20Auction.sol#208)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-4
/sb/DescendingPriceERC20Auction.sol analyzed (11 contracts with 93 detectors), 12 result(s) found
