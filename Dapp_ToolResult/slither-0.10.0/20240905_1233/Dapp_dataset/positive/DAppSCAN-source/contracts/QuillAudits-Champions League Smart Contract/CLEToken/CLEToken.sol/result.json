{
    "errors": [],
    "fails": [],
    "findings": [
        {
            "confidence": "Medium",
            "contract": "CLEToken",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Champions League Smart Contract/CLEToken/CLEToken.sol",
            "function": "_transfer",
            "impact": "High",
            "line": 1052,
            "line_end": 1096,
            "message": "Reentrancy in CLEToken._transfer(address,address,uint256) (CLEToken.sol#1052-1096):\n\tExternal calls:\n\t- swapAndLiquify(contractTokenBalance) (CLEToken.sol#1083)\n\t\t- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,address(this),block.timestamp) (CLEToken.sol#1144-1151)\n\t\t- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (CLEToken.sol#1130-1136)\n\tExternal calls sending eth:\n\t- swapAndLiquify(contractTokenBalance) (CLEToken.sol#1083)\n\t\t- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,address(this),block.timestamp) (CLEToken.sol#1144-1151)\n\tState variables written after the call(s):\n\t- _tokenTransfer(from,to,amount,takeFee) (CLEToken.sol#1095)\n\t\t- _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity) (CLEToken.sol#991)\n\t\t- _rOwned[_communityWalletAddress] = _rOwned[_communityWalletAddress].add(rCommunity) (CLEToken.sol#999)\n\t\t- _rOwned[sender] = _rOwned[sender].sub(rAmount) (CLEToken.sol#1187)\n\t\t- _rOwned[sender] = _rOwned[sender].sub(rAmount) (CLEToken.sol#1177)\n\t\t- _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount) (CLEToken.sol#1178)\n\t\t- _rOwned[sender] = _rOwned[sender].sub(rAmount) (CLEToken.sol#890)\n\t\t- _rOwned[sender] = _rOwned[sender].sub(rAmount) (CLEToken.sol#1199)\n\t\t- _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount) (CLEToken.sol#1200)\n\t\t- _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount) (CLEToken.sol#1189)\n\t\t- _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount) (CLEToken.sol#892)\n\tCLEToken._rOwned (CLEToken.sol#710) can be used in cross function reentrancies:\n\t- CLEToken._getCurrentSupply() (CLEToken.sol#976-986)\n\t- CLEToken._takeCommunity(uint256) (CLEToken.sol#996-1002)\n\t- CLEToken._takeLiquidity(uint256) (CLEToken.sol#988-994)\n\t- CLEToken._transferBothExcluded(address,address,uint256) (CLEToken.sol#887-897)\n\t- CLEToken._transferFromExcluded(address,address,uint256) (CLEToken.sol#1196-1205)\n\t- CLEToken._transferStandard(address,address,uint256) (CLEToken.sol#1175-1183)\n\t- CLEToken._transferToExcluded(address,address,uint256) (CLEToken.sol#1185-1194)\n\t- CLEToken.balanceOf(address) (CLEToken.sol#795-798)\n\t- CLEToken.constructor() (CLEToken.sol#761-777)\n\t- CLEToken.deliver(uint256) (CLEToken.sol#838-845)\n\t- CLEToken.excludeFromReward(address) (CLEToken.sol#864-872)\n\t- _tokenTransfer(from,to,amount,takeFee) (CLEToken.sol#1095)\n\t\t- _rTotal = _rTotal.sub(rFee) (CLEToken.sol#944)\n\tCLEToken._rTotal (CLEToken.sol#723) can be used in cross function reentrancies:\n\t- CLEToken._getCurrentSupply() (CLEToken.sol#976-986)\n\t- CLEToken._reflectFee(uint256,uint256) (CLEToken.sol#943-946)\n\t- CLEToken.constructor() (CLEToken.sol#761-777)\n\t- CLEToken.deliver(uint256) (CLEToken.sol#838-845)\n\t- CLEToken.tokenFromReflection(uint256) (CLEToken.sol#858-862)\n\t- _tokenTransfer(from,to,amount,takeFee) (CLEToken.sol#1095)\n\t\t- _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity) (CLEToken.sol#993)\n\t\t- _tOwned[_communityWalletAddress] = _tOwned[_communityWalletAddress].add(rCommunity) (CLEToken.sol#1001)\n\t\t- _tOwned[sender] = _tOwned[sender].sub(tAmount) (CLEToken.sol#889)\n\t\t- _tOwned[sender] = _tOwned[sender].sub(tAmount) (CLEToken.sol#1198)\n\t\t- _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount) (CLEToken.sol#1188)\n\t\t- _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount) (CLEToken.sol#891)\n\tCLEToken._tOwned (CLEToken.sol#711) can be used in cross function reentrancies:\n\t- CLEToken._getCurrentSupply() (CLEToken.sol#976-986)\n\t- CLEToken._takeCommunity(uint256) (CLEToken.sol#996-1002)\n\t- CLEToken._takeLiquidity(uint256) (CLEToken.sol#988-994)\n\t- CLEToken._transferBothExcluded(address,address,uint256) (CLEToken.sol#887-897)\n\t- CLEToken._transferFromExcluded(address,address,uint256) (CLEToken.sol#1196-1205)\n\t- CLEToken._transferToExcluded(address,address,uint256) (CLEToken.sol#1185-1194)\n\t- CLEToken.balanceOf(address) (CLEToken.sol#795-798)\n\t- CLEToken.excludeFromReward(address) (CLEToken.sol#864-872)\n\t- CLEToken.includeInReward(address) (CLEToken.sol#874-885)\n",
            "name": "reentrancy-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "CLEToken",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Champions League Smart Contract/CLEToken/CLEToken.sol",
            "function": "addLiquidity",
            "impact": "Medium",
            "line": 1139,
            "line_end": 1152,
            "message": "CLEToken.addLiquidity(uint256,uint256) (CLEToken.sol#1139-1152) ignores return value by uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,address(this),block.timestamp) (CLEToken.sol#1144-1151)\n",
            "name": "unused-return",
            "check": "FP"
        },
        {
            "confidence": "High",
            "contract": "Ownable",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Champions League Smart Contract/CLEToken/CLEToken.sol",
            "function": "owner",
            "impact": "Low",
            "line": 805,
            "message": "CLEToken.allowance(address,address).owner (CLEToken.sol#805) shadows:\n\t- Ownable.owner() (CLEToken.sol#449-451) (function)\n",
            "name": "shadowing-local",
            "check": "FP"
        },
        {
            "confidence": "High",
            "contract": "Ownable",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Champions League Smart Contract/CLEToken/CLEToken.sol",
            "function": "owner",
            "impact": "Low",
            "line": 1044,
            "message": "CLEToken._approve(address,address,uint256).owner (CLEToken.sol#1044) shadows:\n\t- Ownable.owner() (CLEToken.sol#449-451) (function)\n",
            "name": "shadowing-local",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "CLEToken",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Champions League Smart Contract/CLEToken/CLEToken.sol",
            "function": "setTaxFeePercent",
            "impact": "Low",
            "line": 907,
            "line_end": 909,
            "message": "CLEToken.setTaxFeePercent(uint256) (CLEToken.sol#907-909) should emit an event for: \n\t- _taxFee = taxFee (CLEToken.sol#908) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "CLEToken",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Champions League Smart Contract/CLEToken/CLEToken.sol",
            "function": "setCommunityFeePercent",
            "impact": "Low",
            "line": 911,
            "line_end": 913,
            "message": "CLEToken.setCommunityFeePercent(uint256) (CLEToken.sol#911-913) should emit an event for: \n\t- _communityFee = communityFee (CLEToken.sol#912) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "CLEToken",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Champions League Smart Contract/CLEToken/CLEToken.sol",
            "function": "setLiquidityFeePercent",
            "impact": "Low",
            "line": 915,
            "line_end": 917,
            "message": "CLEToken.setLiquidityFeePercent(uint256) (CLEToken.sol#915-917) should emit an event for: \n\t- _liquidityFee = liquidityFee (CLEToken.sol#916) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "CLEToken",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Champions League Smart Contract/CLEToken/CLEToken.sol",
            "function": "setMaxTxPercent",
            "impact": "Low",
            "line": 919,
            "line_end": 923,
            "message": "CLEToken.setMaxTxPercent(uint256) (CLEToken.sol#919-923) should emit an event for: \n\t- _maxTxAmount = _tTotal.mul(maxTxPercent).div(10 ** 2) (CLEToken.sol#920-922) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "CLEToken",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Champions League Smart Contract/CLEToken/CLEToken.sol",
            "function": "swapAndLiquify",
            "impact": "Low",
            "line": 1098,
            "line_end": 1119,
            "message": "Reentrancy in CLEToken.swapAndLiquify(uint256) (CLEToken.sol#1098-1119):\n\tExternal calls:\n\t- swapTokensForEth(half) (CLEToken.sol#1110)\n\t\t- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (CLEToken.sol#1130-1136)\n\t- addLiquidity(otherHalf,newBalance) (CLEToken.sol#1116)\n\t\t- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,address(this),block.timestamp) (CLEToken.sol#1144-1151)\n\tExternal calls sending eth:\n\t- addLiquidity(otherHalf,newBalance) (CLEToken.sol#1116)\n\t\t- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,address(this),block.timestamp) (CLEToken.sol#1144-1151)\n\tState variables written after the call(s):\n\t- addLiquidity(otherHalf,newBalance) (CLEToken.sol#1116)\n\t\t- _allowances[owner][spender] = amount (CLEToken.sol#1048)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "CLEToken",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Champions League Smart Contract/CLEToken/CLEToken.sol",
            "function": "_transfer",
            "impact": "Low",
            "line": 1052,
            "line_end": 1096,
            "message": "Reentrancy in CLEToken._transfer(address,address,uint256) (CLEToken.sol#1052-1096):\n\tExternal calls:\n\t- swapAndLiquify(contractTokenBalance) (CLEToken.sol#1083)\n\t\t- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,address(this),block.timestamp) (CLEToken.sol#1144-1151)\n\t\t- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (CLEToken.sol#1130-1136)\n\tExternal calls sending eth:\n\t- swapAndLiquify(contractTokenBalance) (CLEToken.sol#1083)\n\t\t- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,address(this),block.timestamp) (CLEToken.sol#1144-1151)\n\tState variables written after the call(s):\n\t- _tokenTransfer(from,to,amount,takeFee) (CLEToken.sol#1095)\n\t\t- _communityFee = _previousCommunityFee (CLEToken.sol#1036)\n\t\t- _communityFee = 0 (CLEToken.sol#1030)\n\t- _tokenTransfer(from,to,amount,takeFee) (CLEToken.sol#1095)\n\t\t- _liquidityFee = _previousLiquidityFee (CLEToken.sol#1037)\n\t\t- _liquidityFee = 0 (CLEToken.sol#1031)\n\t- _tokenTransfer(from,to,amount,takeFee) (CLEToken.sol#1095)\n\t\t- _previousCommunityFee = _communityFee (CLEToken.sol#1026)\n\t- _tokenTransfer(from,to,amount,takeFee) (CLEToken.sol#1095)\n\t\t- _previousLiquidityFee = _liquidityFee (CLEToken.sol#1027)\n\t- _tokenTransfer(from,to,amount,takeFee) (CLEToken.sol#1095)\n\t\t- _previousTaxFee = _taxFee (CLEToken.sol#1025)\n\t- _tokenTransfer(from,to,amount,takeFee) (CLEToken.sol#1095)\n\t\t- _tFeeTotal = _tFeeTotal.add(tFee) (CLEToken.sol#945)\n\t- _tokenTransfer(from,to,amount,takeFee) (CLEToken.sol#1095)\n\t\t- _taxFee = _previousTaxFee (CLEToken.sol#1035)\n\t\t- _taxFee = 0 (CLEToken.sol#1029)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "CLEToken",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Champions League Smart Contract/CLEToken/CLEToken.sol",
            "function": "transferFrom",
            "impact": "Low",
            "line": 814,
            "line_end": 818,
            "message": "Reentrancy in CLEToken.transferFrom(address,address,uint256) (CLEToken.sol#814-818):\n\tExternal calls:\n\t- _transfer(sender,recipient,amount) (CLEToken.sol#815)\n\t\t- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,address(this),block.timestamp) (CLEToken.sol#1144-1151)\n\t\t- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (CLEToken.sol#1130-1136)\n\tExternal calls sending eth:\n\t- _transfer(sender,recipient,amount) (CLEToken.sol#815)\n\t\t- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,address(this),block.timestamp) (CLEToken.sol#1144-1151)\n\tState variables written after the call(s):\n\t- _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,BEP20: transfer amount exceeds allowance)) (CLEToken.sol#816)\n\t\t- _allowances[owner][spender] = amount (CLEToken.sol#1048)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "CLEToken",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Champions League Smart Contract/CLEToken/CLEToken.sol",
            "function": "transferFrom",
            "impact": "Low",
            "line": 814,
            "line_end": 818,
            "message": "Reentrancy in CLEToken.transferFrom(address,address,uint256) (CLEToken.sol#814-818):\n\tExternal calls:\n\t- _transfer(sender,recipient,amount) (CLEToken.sol#815)\n\t\t- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,address(this),block.timestamp) (CLEToken.sol#1144-1151)\n\t\t- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (CLEToken.sol#1130-1136)\n\tExternal calls sending eth:\n\t- _transfer(sender,recipient,amount) (CLEToken.sol#815)\n\t\t- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,address(this),block.timestamp) (CLEToken.sol#1144-1151)\n\tEvent emitted after the call(s):\n\t- Approval(owner,spender,amount) (CLEToken.sol#1049)\n\t\t- _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,BEP20: transfer amount exceeds allowance)) (CLEToken.sol#816)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "CLEToken",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Champions League Smart Contract/CLEToken/CLEToken.sol",
            "function": "_transfer",
            "impact": "Low",
            "line": 1052,
            "line_end": 1096,
            "message": "Reentrancy in CLEToken._transfer(address,address,uint256) (CLEToken.sol#1052-1096):\n\tExternal calls:\n\t- swapAndLiquify(contractTokenBalance) (CLEToken.sol#1083)\n\t\t- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,address(this),block.timestamp) (CLEToken.sol#1144-1151)\n\t\t- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (CLEToken.sol#1130-1136)\n\tExternal calls sending eth:\n\t- swapAndLiquify(contractTokenBalance) (CLEToken.sol#1083)\n\t\t- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,address(this),block.timestamp) (CLEToken.sol#1144-1151)\n\tEvent emitted after the call(s):\n\t- Transfer(sender,recipient,tTransferAmount) (CLEToken.sol#1182)\n\t\t- _tokenTransfer(from,to,amount,takeFee) (CLEToken.sol#1095)\n\t- Transfer(sender,recipient,tTransferAmount) (CLEToken.sol#1204)\n\t\t- _tokenTransfer(from,to,amount,takeFee) (CLEToken.sol#1095)\n\t- Transfer(sender,recipient,tTransferAmount) (CLEToken.sol#1193)\n\t\t- _tokenTransfer(from,to,amount,takeFee) (CLEToken.sol#1095)\n\t- Transfer(sender,recipient,tTransferAmount) (CLEToken.sol#896)\n\t\t- _tokenTransfer(from,to,amount,takeFee) (CLEToken.sol#1095)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "CLEToken",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Champions League Smart Contract/CLEToken/CLEToken.sol",
            "function": "swapAndLiquify",
            "impact": "Low",
            "line": 1098,
            "line_end": 1119,
            "message": "Reentrancy in CLEToken.swapAndLiquify(uint256) (CLEToken.sol#1098-1119):\n\tExternal calls:\n\t- swapTokensForEth(half) (CLEToken.sol#1110)\n\t\t- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (CLEToken.sol#1130-1136)\n\t- addLiquidity(otherHalf,newBalance) (CLEToken.sol#1116)\n\t\t- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,address(this),block.timestamp) (CLEToken.sol#1144-1151)\n\tExternal calls sending eth:\n\t- addLiquidity(otherHalf,newBalance) (CLEToken.sol#1116)\n\t\t- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,address(this),block.timestamp) (CLEToken.sol#1144-1151)\n\tEvent emitted after the call(s):\n\t- Approval(owner,spender,amount) (CLEToken.sol#1049)\n\t\t- addLiquidity(otherHalf,newBalance) (CLEToken.sol#1116)\n\t- SwapAndLiquify(half,newBalance,otherHalf) (CLEToken.sol#1118)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Ownable",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Champions League Smart Contract/CLEToken/CLEToken.sol",
            "function": "unlock",
            "impact": "Low",
            "line": 496,
            "line_end": 501,
            "message": "Ownable.unlock() (CLEToken.sol#496-501) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(now > _lockTime,Contract is locked until 7 days) (CLEToken.sol#498)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "CLEToken",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Champions League Smart Contract/CLEToken/CLEToken.sol",
            "function": "includeInReward",
            "impact": "Informational",
            "line": 874,
            "line_end": 885,
            "message": "CLEToken.includeInReward(address) (CLEToken.sol#874-885) has costly operations inside a loop:\n\t- _excluded.pop() (CLEToken.sol#881)\n",
            "name": "costly-loop",
            "check": "FP"
        },
        {
            "confidence": "High",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Champions League Smart Contract/CLEToken/CLEToken.sol",
            "impact": "Informational",
            "line": 723,
            "message": "CLEToken._rTotal (CLEToken.sol#723) is set pre-construction with a non-constant function or state variable:\n\t- (MAX - (MAX % _tTotal))\n",
            "name": "function-init-state",
            "check": "FP"
        },
        {
            "confidence": "High",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Champions League Smart Contract/CLEToken/CLEToken.sol",
            "impact": "Informational",
            "line": 736,
            "message": "CLEToken._previousLiquidityFee (CLEToken.sol#736) is set pre-construction with a non-constant function or state variable:\n\t- _liquidityFee\n",
            "name": "function-init-state",
            "check": "FP"
        },
        {
            "confidence": "High",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Champions League Smart Contract/CLEToken/CLEToken.sol",
            "impact": "Informational",
            "line": 734,
            "message": "CLEToken._previousCommunityFee (CLEToken.sol#734) is set pre-construction with a non-constant function or state variable:\n\t- _communityFee\n",
            "name": "function-init-state",
            "check": "FP"
        },
        {
            "confidence": "High",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Champions League Smart Contract/CLEToken/CLEToken.sol",
            "impact": "Informational",
            "line": 731,
            "message": "CLEToken._previousTaxFee (CLEToken.sol#731) is set pre-construction with a non-constant function or state variable:\n\t- _taxFee\n",
            "name": "function-init-state",
            "check": "FP"
        }
    ],
    "infos": [],
    "parser": {
        "id": "slither-0.10.0",
        "mode": "solidity",
        "version": "2024/04/30"
    }
}