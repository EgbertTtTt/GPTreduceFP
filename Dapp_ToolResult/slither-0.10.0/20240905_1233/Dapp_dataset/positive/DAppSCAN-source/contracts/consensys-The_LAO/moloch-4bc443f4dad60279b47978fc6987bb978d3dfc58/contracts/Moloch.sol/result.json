{
    "errors": [],
    "fails": [],
    "findings": [
        {
            "confidence": "Medium",
            "contract": "GuildBank",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/consensys-The_LAO/moloch-4bc443f4dad60279b47978fc6987bb978d3dfc58/contracts/Moloch.sol",
            "function": "withdraw",
            "impact": "Low",
            "line": 121,
            "line_end": 128,
            "message": "GuildBank.withdraw(address,uint256,uint256,IERC20[]) (Moloch.sol#121-128) has external calls inside a loop: amount = fairShare(approvedTokens[i].balanceOf(address(this)),shares,totalShares) (Moloch.sol#123)\n",
            "name": "calls-loop",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "GuildBank",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/consensys-The_LAO/moloch-4bc443f4dad60279b47978fc6987bb978d3dfc58/contracts/Moloch.sol",
            "function": "withdraw",
            "impact": "Low",
            "line": 121,
            "line_end": 128,
            "message": "GuildBank.withdraw(address,uint256,uint256,IERC20[]) (Moloch.sol#121-128) has external calls inside a loop: require(bool)(approvedTokens[i].transfer(receiver,amount)) (Moloch.sol#125)\n",
            "name": "calls-loop",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Moloch",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/consensys-The_LAO/moloch-4bc443f4dad60279b47978fc6987bb978d3dfc58/contracts/Moloch.sol",
            "function": "submitProposal",
            "impact": "Low",
            "line": 324,
            "line_end": 347,
            "message": "Reentrancy in Moloch.submitProposal(address,uint256,uint256,uint256,address,uint256,address,string) (Moloch.sol#324-347):\n\tExternal calls:\n\t- require(bool,string)(IERC20(tributeToken).transferFrom(msg.sender,address(this),tributeOffered),tribute token transfer failed) (Moloch.sol#341)\n\tState variables written after the call(s):\n\t- _submitProposal(applicant,sharesRequested,lootRequested,tributeOffered,tributeToken,paymentRequested,paymentToken,details,flags) (Moloch.sol#345)\n\t\t- proposalCount += 1 (Moloch.sol#406)\n\t- _submitProposal(applicant,sharesRequested,lootRequested,tributeOffered,tributeToken,paymentRequested,paymentToken,details,flags) (Moloch.sol#345)\n\t\t- proposals[proposalCount] = proposal (Moloch.sol#403)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Moloch",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/consensys-The_LAO/moloch-4bc443f4dad60279b47978fc6987bb978d3dfc58/contracts/Moloch.sol",
            "function": "sponsorProposal",
            "impact": "Low",
            "line": 409,
            "line_end": 448,
            "message": "Reentrancy in Moloch.sponsorProposal(uint256) (Moloch.sol#409-448):\n\tExternal calls:\n\t- require(bool,string)(depositToken.transferFrom(msg.sender,address(this),proposalDeposit),proposal deposit token transfer failed) (Moloch.sol#411)\n\tState variables written after the call(s):\n\t- proposalQueue.push(proposalId) (Moloch.sol#446)\n\t- proposal.startingPeriod = startingPeriod (Moloch.sol#438)\n\t- proposal.sponsor = memberAddress (Moloch.sol#441)\n\t- proposal.flags[0] = true (Moloch.sol#443)\n\t- proposedToKick[proposal.applicant] = true (Moloch.sol#429)\n\t- proposedToWhitelist[address(proposal.tributeToken)] = true (Moloch.sol#424)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "GuildBank",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/consensys-The_LAO/moloch-4bc443f4dad60279b47978fc6987bb978d3dfc58/contracts/Moloch.sol",
            "function": "withdraw",
            "impact": "Low",
            "line": 121,
            "line_end": 128,
            "message": "Reentrancy in GuildBank.withdraw(address,uint256,uint256,IERC20[]) (Moloch.sol#121-128):\n\tExternal calls:\n\t- require(bool)(approvedTokens[i].transfer(receiver,amount)) (Moloch.sol#125)\n\tEvent emitted after the call(s):\n\t- Withdrawal(receiver,address(approvedTokens[i]),amount) (Moloch.sol#124)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Moloch",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/consensys-The_LAO/moloch-4bc443f4dad60279b47978fc6987bb978d3dfc58/contracts/Moloch.sol",
            "function": "canBailout",
            "impact": "Low",
            "line": 803,
            "line_end": 814,
            "message": "Moloch.canBailout(address) (Moloch.sol#803-814) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- getCurrentPeriod() >= bailoutWaitStartingPeriod.add(votingPeriodLength).add(gracePeriodLength).add(bailoutWait) (Moloch.sol#813)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Moloch",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/consensys-The_LAO/moloch-4bc443f4dad60279b47978fc6987bb978d3dfc58/contracts/Moloch.sol",
            "function": "sponsorProposal",
            "impact": "Low",
            "line": 409,
            "line_end": 448,
            "message": "Moloch.sponsorProposal(uint256) (Moloch.sol#409-448) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(proposal.proposer != address(0),proposal must have been proposed) (Moloch.sol#415)\n\t- require(bool,string)(! proposal.flags[0],proposal has already been sponsored) (Moloch.sol#416)\n\t- require(bool,string)(! proposal.flags[3],proposal has been cancelled) (Moloch.sol#417)\n\t- require(bool,string)(members[proposal.applicant].jailed == 0,proposal applicant must not be jailed) (Moloch.sol#418)\n\t- require(bool,string)(! tokenWhitelist[address(proposal.tributeToken)],cannot already have whitelisted the token) (Moloch.sol#422)\n\t- require(bool,string)(! proposedToWhitelist[address(proposal.tributeToken)],already proposed to whitelist) (Moloch.sol#423)\n\t- require(bool,string)(! proposedToKick[proposal.applicant],already proposed to kick) (Moloch.sol#428)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Moloch",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/consensys-The_LAO/moloch-4bc443f4dad60279b47978fc6987bb978d3dfc58/contracts/Moloch.sol",
            "function": "hasVotingPeriodExpired",
            "impact": "Low",
            "line": 816,
            "line_end": 818,
            "message": "Moloch.hasVotingPeriodExpired(uint256) (Moloch.sol#816-818) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- getCurrentPeriod() >= startingPeriod.add(votingPeriodLength) (Moloch.sol#817)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Moloch",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/consensys-The_LAO/moloch-4bc443f4dad60279b47978fc6987bb978d3dfc58/contracts/Moloch.sol",
            "function": "_didPass",
            "impact": "Low",
            "line": 621,
            "line_end": 655,
            "message": "Moloch._didPass(uint256) (Moloch.sol#621-655) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- didPass = proposal.yesVotes > proposal.noVotes (Moloch.sol#624)\n\t- getCurrentPeriod() >= proposal.startingPeriod.add(votingPeriodLength).add(gracePeriodLength).add(emergencyProcessingWait) (Moloch.sol#628)\n\t- proposal.startingPeriod < proposals[proposalQueue[lastEmergencyProposalIndex]].startingPeriod.add(emergencyProcessingWait) (Moloch.sol#637)\n\t- (totalShares.add(totalLoot)).mul(dilutionBound) < proposal.maxTotalSharesAndLootAtYesVote (Moloch.sol#643)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Moloch",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/consensys-The_LAO/moloch-4bc443f4dad60279b47978fc6987bb978d3dfc58/contracts/Moloch.sol",
            "function": "max",
            "impact": "Low",
            "line": 781,
            "line_end": 783,
            "message": "Moloch.max(uint256,uint256) (Moloch.sol#781-783) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- x >= y (Moloch.sol#782)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Moloch",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/consensys-The_LAO/moloch-4bc443f4dad60279b47978fc6987bb978d3dfc58/contracts/Moloch.sol",
            "function": "processProposal",
            "impact": "Low",
            "line": 487,
            "line_end": 562,
            "message": "Moloch.processProposal(uint256) (Moloch.sol#487-562) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- ! emergencyProcessing && proposal.paymentToken != IERC20(0) && proposal.paymentRequested > proposal.paymentToken.balanceOf(address(guildBank)) (Moloch.sol#505)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Moloch",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/consensys-The_LAO/moloch-4bc443f4dad60279b47978fc6987bb978d3dfc58/contracts/Moloch.sol",
            "function": "submitVote",
            "impact": "Low",
            "line": 450,
            "line_end": 485,
            "message": "Moloch.submitVote(uint256,uint8) (Moloch.sol#450-485) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(getCurrentPeriod() >= proposal.startingPeriod,voting period has not started) (Moloch.sol#460)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Moloch",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/consensys-The_LAO/moloch-4bc443f4dad60279b47978fc6987bb978d3dfc58/contracts/Moloch.sol",
            "function": "_validateProposalForProcessing",
            "impact": "Low",
            "line": 657,
            "line_end": 664,
            "message": "Moloch._validateProposalForProcessing(uint256) (Moloch.sol#657-664) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(getCurrentPeriod() >= proposal.startingPeriod.add(votingPeriodLength).add(gracePeriodLength),proposal is not ready to be processed) (Moloch.sol#661)\n\t- require(bool,string)(proposal.flags[1] == false,proposal has already been processed) (Moloch.sol#662)\n\t- require(bool,string)(proposalIndex == 0 || proposals[proposalQueue[proposalIndex.sub(1)]].flags[1],previous proposal must be processed) (Moloch.sol#663)\n",
            "name": "timestamp",
            "check": "FP"
        }
    ],
    "infos": [],
    "parser": {
        "id": "slither-0.10.0",
        "mode": "solidity",
        "version": "2024/04/30"
    }
}