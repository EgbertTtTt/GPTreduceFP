{
    "errors": [],
    "fails": [],
    "findings": [
        {
            "confidence": "Medium",
            "contract": "MasterChef",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-SushiSwap/sushiswap-180bc9b642bba79c1ee4a63f71a3a0d36e64aa63/contracts/MasterChef.sol",
            "function": "safeSushiTransfer",
            "impact": "High",
            "line": 1692,
            "line_end": 1699,
            "message": "MasterChef.safeSushiTransfer(address,uint256) (MasterChef.sol#1692-1699) ignores return value by sushi.transfer(_to,sushiBal) (MasterChef.sol#1695)\n",
            "name": "unchecked-transfer",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MasterChef",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-SushiSwap/sushiswap-180bc9b642bba79c1ee4a63f71a3a0d36e64aa63/contracts/MasterChef.sol",
            "function": "safeSushiTransfer",
            "impact": "High",
            "line": 1692,
            "line_end": 1699,
            "message": "MasterChef.safeSushiTransfer(address,uint256) (MasterChef.sol#1692-1699) ignores return value by sushi.transfer(_to,_amount) (MasterChef.sol#1697)\n",
            "name": "unchecked-transfer",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MasterChef",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-SushiSwap/sushiswap-180bc9b642bba79c1ee4a63f71a3a0d36e64aa63/contracts/MasterChef.sol",
            "function": "add",
            "impact": "Medium",
            "line": 1557,
            "line_end": 1569,
            "message": "Reentrancy in MasterChef.add(uint256,IERC20,bool) (MasterChef.sol#1557-1569):\n\tExternal calls:\n\t- massUpdatePools() (MasterChef.sol#1559)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (MasterChef.sol#1645)\n\t\t- sushi.mint(address(this),sushiReward) (MasterChef.sol#1646)\n\tState variables written after the call(s):\n\t- poolInfo.push(PoolInfo({lpToken:_lpToken,allocPoint:_allocPoint,lastRewardBlock:lastRewardBlock,accSushiPerShare:0})) (MasterChef.sol#1563-1568)\n\tMasterChef.poolInfo (MasterChef.sol#1524) can be used in cross function reentrancies:\n\t- MasterChef.add(uint256,IERC20,bool) (MasterChef.sol#1557-1569)\n\t- MasterChef.deposit(uint256,uint256) (MasterChef.sol#1652-1664)\n\t- MasterChef.emergencyWithdraw(uint256) (MasterChef.sol#1682-1689)\n\t- MasterChef.massUpdatePools() (MasterChef.sol#1625-1630)\n\t- MasterChef.migrate(uint256) (MasterChef.sol#1586-1595)\n\t- MasterChef.pendingSushi(uint256,address) (MasterChef.sol#1611-1622)\n\t- MasterChef.poolInfo (MasterChef.sol#1524)\n\t- MasterChef.poolLength() (MasterChef.sol#1550-1552)\n\t- MasterChef.set(uint256,uint256,bool) (MasterChef.sol#1572-1578)\n\t- MasterChef.updatePool(uint256) (MasterChef.sol#1633-1649)\n\t- MasterChef.withdraw(uint256,uint256) (MasterChef.sol#1668-1679)\n\t- totalAllocPoint = totalAllocPoint.add(_allocPoint) (MasterChef.sol#1562)\n\tMasterChef.totalAllocPoint (MasterChef.sol#1528) can be used in cross function reentrancies:\n\t- MasterChef.add(uint256,IERC20,bool) (MasterChef.sol#1557-1569)\n\t- MasterChef.pendingSushi(uint256,address) (MasterChef.sol#1611-1622)\n\t- MasterChef.set(uint256,uint256,bool) (MasterChef.sol#1572-1578)\n\t- MasterChef.totalAllocPoint (MasterChef.sol#1528)\n\t- MasterChef.updatePool(uint256) (MasterChef.sol#1633-1649)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MasterChef",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-SushiSwap/sushiswap-180bc9b642bba79c1ee4a63f71a3a0d36e64aa63/contracts/MasterChef.sol",
            "function": "deposit",
            "impact": "Medium",
            "line": 1652,
            "line_end": 1664,
            "message": "Reentrancy in MasterChef.deposit(uint256,uint256) (MasterChef.sol#1652-1664):\n\tExternal calls:\n\t- updatePool(_pid) (MasterChef.sol#1655)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (MasterChef.sol#1645)\n\t\t- sushi.mint(address(this),sushiReward) (MasterChef.sol#1646)\n\t- safeSushiTransfer(msg.sender,pending) (MasterChef.sol#1658)\n\t\t- sushi.transfer(_to,sushiBal) (MasterChef.sol#1695)\n\t\t- sushi.transfer(_to,_amount) (MasterChef.sol#1697)\n\t- pool.lpToken.safeTransferFrom(address(msg.sender),address(this),_amount) (MasterChef.sol#1660)\n\tState variables written after the call(s):\n\t- user.amount = user.amount.add(_amount) (MasterChef.sol#1661)\n\tMasterChef.userInfo (MasterChef.sol#1526) can be used in cross function reentrancies:\n\t- MasterChef.deposit(uint256,uint256) (MasterChef.sol#1652-1664)\n\t- MasterChef.emergencyWithdraw(uint256) (MasterChef.sol#1682-1689)\n\t- MasterChef.pendingSushi(uint256,address) (MasterChef.sol#1611-1622)\n\t- MasterChef.userInfo (MasterChef.sol#1526)\n\t- MasterChef.withdraw(uint256,uint256) (MasterChef.sol#1668-1679)\n\t- user.rewardDebt = user.amount.mul(pool.accSushiPerShare).div(1e12) (MasterChef.sol#1662)\n\tMasterChef.userInfo (MasterChef.sol#1526) can be used in cross function reentrancies:\n\t- MasterChef.deposit(uint256,uint256) (MasterChef.sol#1652-1664)\n\t- MasterChef.emergencyWithdraw(uint256) (MasterChef.sol#1682-1689)\n\t- MasterChef.pendingSushi(uint256,address) (MasterChef.sol#1611-1622)\n\t- MasterChef.userInfo (MasterChef.sol#1526)\n\t- MasterChef.withdraw(uint256,uint256) (MasterChef.sol#1668-1679)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MasterChef",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-SushiSwap/sushiswap-180bc9b642bba79c1ee4a63f71a3a0d36e64aa63/contracts/MasterChef.sol",
            "function": "set",
            "impact": "Medium",
            "line": 1572,
            "line_end": 1578,
            "message": "Reentrancy in MasterChef.set(uint256,uint256,bool) (MasterChef.sol#1572-1578):\n\tExternal calls:\n\t- massUpdatePools() (MasterChef.sol#1574)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (MasterChef.sol#1645)\n\t\t- sushi.mint(address(this),sushiReward) (MasterChef.sol#1646)\n\tState variables written after the call(s):\n\t- poolInfo[_pid].allocPoint = _allocPoint (MasterChef.sol#1577)\n\tMasterChef.poolInfo (MasterChef.sol#1524) can be used in cross function reentrancies:\n\t- MasterChef.add(uint256,IERC20,bool) (MasterChef.sol#1557-1569)\n\t- MasterChef.deposit(uint256,uint256) (MasterChef.sol#1652-1664)\n\t- MasterChef.emergencyWithdraw(uint256) (MasterChef.sol#1682-1689)\n\t- MasterChef.massUpdatePools() (MasterChef.sol#1625-1630)\n\t- MasterChef.migrate(uint256) (MasterChef.sol#1586-1595)\n\t- MasterChef.pendingSushi(uint256,address) (MasterChef.sol#1611-1622)\n\t- MasterChef.poolInfo (MasterChef.sol#1524)\n\t- MasterChef.poolLength() (MasterChef.sol#1550-1552)\n\t- MasterChef.set(uint256,uint256,bool) (MasterChef.sol#1572-1578)\n\t- MasterChef.updatePool(uint256) (MasterChef.sol#1633-1649)\n\t- MasterChef.withdraw(uint256,uint256) (MasterChef.sol#1668-1679)\n\t- totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint) (MasterChef.sol#1576)\n\tMasterChef.totalAllocPoint (MasterChef.sol#1528) can be used in cross function reentrancies:\n\t- MasterChef.add(uint256,IERC20,bool) (MasterChef.sol#1557-1569)\n\t- MasterChef.pendingSushi(uint256,address) (MasterChef.sol#1611-1622)\n\t- MasterChef.set(uint256,uint256,bool) (MasterChef.sol#1572-1578)\n\t- MasterChef.totalAllocPoint (MasterChef.sol#1528)\n\t- MasterChef.updatePool(uint256) (MasterChef.sol#1633-1649)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MasterChef",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-SushiSwap/sushiswap-180bc9b642bba79c1ee4a63f71a3a0d36e64aa63/contracts/MasterChef.sol",
            "function": "withdraw",
            "impact": "Medium",
            "line": 1668,
            "line_end": 1679,
            "message": "Reentrancy in MasterChef.withdraw(uint256,uint256) (MasterChef.sol#1668-1679):\n\tExternal calls:\n\t- updatePool(_pid) (MasterChef.sol#1672)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (MasterChef.sol#1645)\n\t\t- sushi.mint(address(this),sushiReward) (MasterChef.sol#1646)\n\t- safeSushiTransfer(msg.sender,pending) (MasterChef.sol#1674)\n\t\t- sushi.transfer(_to,sushiBal) (MasterChef.sol#1695)\n\t\t- sushi.transfer(_to,_amount) (MasterChef.sol#1697)\n\tState variables written after the call(s):\n\t- user.amount = user.amount.sub(_amount) (MasterChef.sol#1675)\n\tMasterChef.userInfo (MasterChef.sol#1526) can be used in cross function reentrancies:\n\t- MasterChef.deposit(uint256,uint256) (MasterChef.sol#1652-1664)\n\t- MasterChef.emergencyWithdraw(uint256) (MasterChef.sol#1682-1689)\n\t- MasterChef.pendingSushi(uint256,address) (MasterChef.sol#1611-1622)\n\t- MasterChef.userInfo (MasterChef.sol#1526)\n\t- MasterChef.withdraw(uint256,uint256) (MasterChef.sol#1668-1679)\n\t- user.rewardDebt = user.amount.mul(pool.accSushiPerShare).div(1e12) (MasterChef.sol#1676)\n\tMasterChef.userInfo (MasterChef.sol#1526) can be used in cross function reentrancies:\n\t- MasterChef.deposit(uint256,uint256) (MasterChef.sol#1652-1664)\n\t- MasterChef.emergencyWithdraw(uint256) (MasterChef.sol#1682-1689)\n\t- MasterChef.pendingSushi(uint256,address) (MasterChef.sol#1611-1622)\n\t- MasterChef.userInfo (MasterChef.sol#1526)\n\t- MasterChef.withdraw(uint256,uint256) (MasterChef.sol#1668-1679)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MasterChef",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-SushiSwap/sushiswap-180bc9b642bba79c1ee4a63f71a3a0d36e64aa63/contracts/MasterChef.sol",
            "function": "migrate",
            "impact": "Medium",
            "line": 1586,
            "line_end": 1595,
            "message": "Reentrancy in MasterChef.migrate(uint256) (MasterChef.sol#1586-1595):\n\tExternal calls:\n\t- lpToken.safeApprove(address(migrator),bal) (MasterChef.sol#1591)\n\t- newLpToken = migrator.migrate(lpToken) (MasterChef.sol#1592)\n\tState variables written after the call(s):\n\t- pool.lpToken = newLpToken (MasterChef.sol#1594)\n\tMasterChef.poolInfo (MasterChef.sol#1524) can be used in cross function reentrancies:\n\t- MasterChef.add(uint256,IERC20,bool) (MasterChef.sol#1557-1569)\n\t- MasterChef.deposit(uint256,uint256) (MasterChef.sol#1652-1664)\n\t- MasterChef.emergencyWithdraw(uint256) (MasterChef.sol#1682-1689)\n\t- MasterChef.massUpdatePools() (MasterChef.sol#1625-1630)\n\t- MasterChef.migrate(uint256) (MasterChef.sol#1586-1595)\n\t- MasterChef.pendingSushi(uint256,address) (MasterChef.sol#1611-1622)\n\t- MasterChef.poolInfo (MasterChef.sol#1524)\n\t- MasterChef.poolLength() (MasterChef.sol#1550-1552)\n\t- MasterChef.set(uint256,uint256,bool) (MasterChef.sol#1572-1578)\n\t- MasterChef.updatePool(uint256) (MasterChef.sol#1633-1649)\n\t- MasterChef.withdraw(uint256,uint256) (MasterChef.sol#1668-1679)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MasterChef",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-SushiSwap/sushiswap-180bc9b642bba79c1ee4a63f71a3a0d36e64aa63/contracts/MasterChef.sol",
            "function": "emergencyWithdraw",
            "impact": "Medium",
            "line": 1682,
            "line_end": 1689,
            "message": "Reentrancy in MasterChef.emergencyWithdraw(uint256) (MasterChef.sol#1682-1689):\n\tExternal calls:\n\t- pool.lpToken.safeTransfer(address(msg.sender),user.amount) (MasterChef.sol#1685)\n\tState variables written after the call(s):\n\t- user.amount = 0 (MasterChef.sol#1687)\n\tMasterChef.userInfo (MasterChef.sol#1526) can be used in cross function reentrancies:\n\t- MasterChef.deposit(uint256,uint256) (MasterChef.sol#1652-1664)\n\t- MasterChef.emergencyWithdraw(uint256) (MasterChef.sol#1682-1689)\n\t- MasterChef.pendingSushi(uint256,address) (MasterChef.sol#1611-1622)\n\t- MasterChef.userInfo (MasterChef.sol#1526)\n\t- MasterChef.withdraw(uint256,uint256) (MasterChef.sol#1668-1679)\n\t- user.rewardDebt = 0 (MasterChef.sol#1688)\n\tMasterChef.userInfo (MasterChef.sol#1526) can be used in cross function reentrancies:\n\t- MasterChef.deposit(uint256,uint256) (MasterChef.sol#1652-1664)\n\t- MasterChef.emergencyWithdraw(uint256) (MasterChef.sol#1682-1689)\n\t- MasterChef.pendingSushi(uint256,address) (MasterChef.sol#1611-1622)\n\t- MasterChef.userInfo (MasterChef.sol#1526)\n\t- MasterChef.withdraw(uint256,uint256) (MasterChef.sol#1668-1679)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MasterChef",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-SushiSwap/sushiswap-180bc9b642bba79c1ee4a63f71a3a0d36e64aa63/contracts/MasterChef.sol",
            "function": "updatePool",
            "impact": "Medium",
            "line": 1633,
            "line_end": 1649,
            "message": "Reentrancy in MasterChef.updatePool(uint256) (MasterChef.sol#1633-1649):\n\tExternal calls:\n\t- sushi.mint(devaddr,sushiReward.div(10)) (MasterChef.sol#1645)\n\t- sushi.mint(address(this),sushiReward) (MasterChef.sol#1646)\n\tState variables written after the call(s):\n\t- pool.accSushiPerShare = pool.accSushiPerShare.add(sushiReward.mul(1e12).div(lpSupply)) (MasterChef.sol#1647)\n\tMasterChef.poolInfo (MasterChef.sol#1524) can be used in cross function reentrancies:\n\t- MasterChef.add(uint256,IERC20,bool) (MasterChef.sol#1557-1569)\n\t- MasterChef.deposit(uint256,uint256) (MasterChef.sol#1652-1664)\n\t- MasterChef.emergencyWithdraw(uint256) (MasterChef.sol#1682-1689)\n\t- MasterChef.massUpdatePools() (MasterChef.sol#1625-1630)\n\t- MasterChef.migrate(uint256) (MasterChef.sol#1586-1595)\n\t- MasterChef.pendingSushi(uint256,address) (MasterChef.sol#1611-1622)\n\t- MasterChef.poolInfo (MasterChef.sol#1524)\n\t- MasterChef.poolLength() (MasterChef.sol#1550-1552)\n\t- MasterChef.set(uint256,uint256,bool) (MasterChef.sol#1572-1578)\n\t- MasterChef.updatePool(uint256) (MasterChef.sol#1633-1649)\n\t- MasterChef.withdraw(uint256,uint256) (MasterChef.sol#1668-1679)\n\t- pool.lastRewardBlock = block.number (MasterChef.sol#1648)\n\tMasterChef.poolInfo (MasterChef.sol#1524) can be used in cross function reentrancies:\n\t- MasterChef.add(uint256,IERC20,bool) (MasterChef.sol#1557-1569)\n\t- MasterChef.deposit(uint256,uint256) (MasterChef.sol#1652-1664)\n\t- MasterChef.emergencyWithdraw(uint256) (MasterChef.sol#1682-1689)\n\t- MasterChef.massUpdatePools() (MasterChef.sol#1625-1630)\n\t- MasterChef.migrate(uint256) (MasterChef.sol#1586-1595)\n\t- MasterChef.pendingSushi(uint256,address) (MasterChef.sol#1611-1622)\n\t- MasterChef.poolInfo (MasterChef.sol#1524)\n\t- MasterChef.poolLength() (MasterChef.sol#1550-1552)\n\t- MasterChef.set(uint256,uint256,bool) (MasterChef.sol#1572-1578)\n\t- MasterChef.updatePool(uint256) (MasterChef.sol#1633-1649)\n\t- MasterChef.withdraw(uint256,uint256) (MasterChef.sol#1668-1679)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MasterChef",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-SushiSwap/sushiswap-180bc9b642bba79c1ee4a63f71a3a0d36e64aa63/contracts/MasterChef.sol",
            "function": "add",
            "impact": "Low",
            "line": 1557,
            "line_end": 1569,
            "message": "MasterChef.add(uint256,IERC20,bool) (MasterChef.sol#1557-1569) should emit an event for: \n\t- totalAllocPoint = totalAllocPoint.add(_allocPoint) (MasterChef.sol#1562) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MasterChef",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-SushiSwap/sushiswap-180bc9b642bba79c1ee4a63f71a3a0d36e64aa63/contracts/MasterChef.sol",
            "function": "set",
            "impact": "Low",
            "line": 1572,
            "line_end": 1578,
            "message": "MasterChef.set(uint256,uint256,bool) (MasterChef.sol#1572-1578) should emit an event for: \n\t- totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint) (MasterChef.sol#1576) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MasterChef",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-SushiSwap/sushiswap-180bc9b642bba79c1ee4a63f71a3a0d36e64aa63/contracts/MasterChef.sol",
            "function": "updatePool",
            "impact": "Low",
            "line": 1633,
            "line_end": 1649,
            "message": "MasterChef.updatePool(uint256) (MasterChef.sol#1633-1649) has external calls inside a loop: sushi.mint(address(this),sushiReward) (MasterChef.sol#1646)\n",
            "name": "calls-loop",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MasterChef",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-SushiSwap/sushiswap-180bc9b642bba79c1ee4a63f71a3a0d36e64aa63/contracts/MasterChef.sol",
            "function": "updatePool",
            "impact": "Low",
            "line": 1633,
            "line_end": 1649,
            "message": "MasterChef.updatePool(uint256) (MasterChef.sol#1633-1649) has external calls inside a loop: lpSupply = pool.lpToken.balanceOf(address(this)) (MasterChef.sol#1638)\n",
            "name": "calls-loop",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MasterChef",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-SushiSwap/sushiswap-180bc9b642bba79c1ee4a63f71a3a0d36e64aa63/contracts/MasterChef.sol",
            "function": "updatePool",
            "impact": "Low",
            "line": 1633,
            "line_end": 1649,
            "message": "MasterChef.updatePool(uint256) (MasterChef.sol#1633-1649) has external calls inside a loop: sushi.mint(devaddr,sushiReward.div(10)) (MasterChef.sol#1645)\n",
            "name": "calls-loop",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MasterChef",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-SushiSwap/sushiswap-180bc9b642bba79c1ee4a63f71a3a0d36e64aa63/contracts/MasterChef.sol",
            "function": "withdraw",
            "impact": "Low",
            "line": 1668,
            "line_end": 1679,
            "message": "Reentrancy in MasterChef.withdraw(uint256,uint256) (MasterChef.sol#1668-1679):\n\tExternal calls:\n\t- updatePool(_pid) (MasterChef.sol#1672)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (MasterChef.sol#1645)\n\t\t- sushi.mint(address(this),sushiReward) (MasterChef.sol#1646)\n\t- safeSushiTransfer(msg.sender,pending) (MasterChef.sol#1674)\n\t\t- sushi.transfer(_to,sushiBal) (MasterChef.sol#1695)\n\t\t- sushi.transfer(_to,_amount) (MasterChef.sol#1697)\n\t- pool.lpToken.safeTransfer(address(msg.sender),_amount) (MasterChef.sol#1677)\n\tEvent emitted after the call(s):\n\t- Withdraw(msg.sender,_pid,_amount) (MasterChef.sol#1678)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MasterChef",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-SushiSwap/sushiswap-180bc9b642bba79c1ee4a63f71a3a0d36e64aa63/contracts/MasterChef.sol",
            "function": "emergencyWithdraw",
            "impact": "Low",
            "line": 1682,
            "line_end": 1689,
            "message": "Reentrancy in MasterChef.emergencyWithdraw(uint256) (MasterChef.sol#1682-1689):\n\tExternal calls:\n\t- pool.lpToken.safeTransfer(address(msg.sender),user.amount) (MasterChef.sol#1685)\n\tEvent emitted after the call(s):\n\t- EmergencyWithdraw(msg.sender,_pid,user.amount) (MasterChef.sol#1686)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MasterChef",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-SushiSwap/sushiswap-180bc9b642bba79c1ee4a63f71a3a0d36e64aa63/contracts/MasterChef.sol",
            "function": "deposit",
            "impact": "Low",
            "line": 1652,
            "line_end": 1664,
            "message": "Reentrancy in MasterChef.deposit(uint256,uint256) (MasterChef.sol#1652-1664):\n\tExternal calls:\n\t- updatePool(_pid) (MasterChef.sol#1655)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (MasterChef.sol#1645)\n\t\t- sushi.mint(address(this),sushiReward) (MasterChef.sol#1646)\n\t- safeSushiTransfer(msg.sender,pending) (MasterChef.sol#1658)\n\t\t- sushi.transfer(_to,sushiBal) (MasterChef.sol#1695)\n\t\t- sushi.transfer(_to,_amount) (MasterChef.sol#1697)\n\t- pool.lpToken.safeTransferFrom(address(msg.sender),address(this),_amount) (MasterChef.sol#1660)\n\tEvent emitted after the call(s):\n\t- Deposit(msg.sender,_pid,_amount) (MasterChef.sol#1663)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "SushiToken",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-SushiSwap/sushiswap-180bc9b642bba79c1ee4a63f71a3a0d36e64aa63/contracts/MasterChef.sol",
            "function": "delegateBySig",
            "impact": "Low",
            "line": 1295,
            "line_end": 1336,
            "message": "SushiToken.delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32) (MasterChef.sol#1295-1336) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(now <= expiry,SUSHI::delegateBySig: signature expired) (MasterChef.sol#1334)\n",
            "name": "timestamp",
            "check": "FP"
        }
    ],
    "infos": [],
    "parser": {
        "id": "slither-0.10.0",
        "mode": "solidity",
        "version": "2024/04/30"
    }
}