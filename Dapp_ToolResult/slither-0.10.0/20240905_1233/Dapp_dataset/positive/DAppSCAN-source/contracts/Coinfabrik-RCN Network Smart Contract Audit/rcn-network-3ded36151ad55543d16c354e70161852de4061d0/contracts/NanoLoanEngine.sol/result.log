'solc --version' running
'solc /sb/NanoLoanEngine.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/sb' running
Compilation warnings/errors on /sb/NanoLoanEngine.sol:
/sb/NanoLoanEngine.sol:12:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function Ownable() public {
    ^ (Relevant source part starts here and spans across multiple lines).
/sb/NanoLoanEngine.sol:343:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function NanoLoanEngine(Token _rcn) public {
    ^ (Relevant source part starts here and spans across multiple lines).
/sb/NanoLoanEngine.sol:412:9: Warning: Use of the "var" keyword is deprecated.
        var loan = Loan(Status.initial, _oracleContract, _borrower, 0x0, msg.sender, 0x0, _amount, 0, 0, 0, 0, _interestRate,
        ^------^
/sb/NanoLoanEngine.sol:78:9: Warning: Invoking events without "emit" prefix is deprecated.
        NewSymbol(currency, ticker, decimals);
        ^-----------------------------------^
/sb/NanoLoanEngine.sol:79:28: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        bytes32 currency = keccak256(ticker, decimals);
                           ^-------------------------^
/sb/NanoLoanEngine.sol:415:9: Warning: Invoking events without "emit" prefix is deprecated.
        CreatedLoan(index, _borrower, msg.sender);
        ^---------------------------------------^
/sb/NanoLoanEngine.sol:471:9: Warning: Invoking events without "emit" prefix is deprecated.
        ApprovedBy(index, msg.sender);
        ^---------------------------^
/sb/NanoLoanEngine.sol:519:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(0x0, loan.lender, index);
        ^-------------------------------^
/sb/NanoLoanEngine.sol:522:9: Warning: Invoking events without "emit" prefix is deprecated.
        Lent(index, loan.lender, cosigner);
        ^--------------------------------^
/sb/NanoLoanEngine.sol:560:9: Warning: Invoking events without "emit" prefix is deprecated.
        DestroyedBy(index, msg.sender);
        ^----------------------------^
/sb/NanoLoanEngine.sol:566:13: Warning: Invoking events without "emit" prefix is deprecated.
            Transfer(loan.lender, 0x0, index);
            ^-------------------------------^
/sb/NanoLoanEngine.sol:594:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(loan.lender, to, index);
        ^------------------------------^
/sb/NanoLoanEngine.sol:624:9: Warning: Invoking events without "emit" prefix is deprecated.
        Approval(msg.sender, to, index);
        ^-----------------------------^
/sb/NanoLoanEngine.sol:775:9: Warning: Invoking events without "emit" prefix is deprecated.
        PartialPayment(index, msg.sender, _from, toPay);
        ^---------------------------------------------^
/sb/NanoLoanEngine.sol:780:13: Warning: Invoking events without "emit" prefix is deprecated.
            TotalPayment(index);
            ^-----------------^
/sb/NanoLoanEngine.sol:786:13: Warning: Invoking events without "emit" prefix is deprecated.
            Transfer(loan.lender, 0x0, index);
            ^-------------------------------^
/sb/NanoLoanEngine.sol:29:5: Warning: No visibility specified. Defaulting to "public". 
    function transfer(address _to, uint _value) returns (bool success);
    ^-----------------------------------------------------------------^
/sb/NanoLoanEngine.sol:30:5: Warning: No visibility specified. Defaulting to "public". 
    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);
    ^---------------------------------------------------------------------------------------^
/sb/NanoLoanEngine.sol:31:5: Warning: No visibility specified. Defaulting to "public". 
    function allowance(address _owner, address _spender) constant returns (uint256 remaining);
    ^----------------------------------------------------------------------------------------^
/sb/NanoLoanEngine.sol:32:5: Warning: No visibility specified. Defaulting to "public". 
    function approve(address _spender, uint256 _value) returns (bool success);
    ^------------------------------------------------------------------------^
/sb/NanoLoanEngine.sol:34:5: Warning: No visibility specified. Defaulting to "public". 
    function balanceOf(address _owner) constant returns (uint256 balance);
    ^--------------------------------------------------------------------^
/sb/NanoLoanEngine.sol:59:5: Warning: No visibility specified. Defaulting to "public". 
    function url() constant returns (string);
    ^---------------------------------------^
/sb/NanoLoanEngine.sol:67:5: Warning: No visibility specified. Defaulting to "public". 
    function getRate(bytes32 symbol, bytes data) constant returns (uint256);
    ^----------------------------------------------------------------------^
/sb/NanoLoanEngine.sol:87:5: Warning: No visibility specified. Defaulting to "public". 
    function decimals(bytes32 symbol) constant returns (uint8) {
    ^ (Relevant source part starts here and spans across multiple lines).
/sb/NanoLoanEngine.sol:94:5: Warning: No visibility specified. Defaulting to "public". 
    function supported(bytes32 symbol) constant returns (bool) {
    ^ (Relevant source part starts here and spans across multiple lines).
/sb/NanoLoanEngine.sol:178:5: Warning: No visibility specified. Defaulting to "public". 
    function getTotalLoans() constant returns (uint256);
    ^--------------------------------------------------^
/sb/NanoLoanEngine.sol:179:5: Warning: No visibility specified. Defaulting to "public". 
    function getOracle(uint index) constant returns (Oracle);
    ^-------------------------------------------------------^
/sb/NanoLoanEngine.sol:180:5: Warning: No visibility specified. Defaulting to "public". 
    function getBorrower(uint index) constant returns (address);
    ^----------------------------------------------------------^
/sb/NanoLoanEngine.sol:181:5: Warning: No visibility specified. Defaulting to "public". 
    function getCosigner(uint index) constant returns (address);
    ^----------------------------------------------------------^
/sb/NanoLoanEngine.sol:182:5: Warning: No visibility specified. Defaulting to "public". 
    function ownerOf(uint256) constant returns (address owner);
    ^---------------------------------------------------------^
/sb/NanoLoanEngine.sol:183:5: Warning: No visibility specified. Defaulting to "public". 
    function getCreator(uint index) constant returns (address);
    ^---------------------------------------------------------^
/sb/NanoLoanEngine.sol:184:5: Warning: No visibility specified. Defaulting to "public". 
    function getAmount(uint index) constant returns (uint256);
    ^--------------------------------------------------------^
/sb/NanoLoanEngine.sol:185:5: Warning: No visibility specified. Defaulting to "public". 
    function getPaid(uint index) constant returns (uint256);
    ^------------------------------------------------------^
/sb/NanoLoanEngine.sol:186:5: Warning: No visibility specified. Defaulting to "public". 
    function getDueTime(uint index) constant returns (uint256);
    ^---------------------------------------------------------^
/sb/NanoLoanEngine.sol:187:5: Warning: No visibility specified. Defaulting to "public". 
    function getApprobation(uint index, address _address) constant returns (bool);
    ^----------------------------------------------------------------------------^
/sb/NanoLoanEngine.sol:188:5: Warning: No visibility specified. Defaulting to "public". 
    function getStatus(uint index) constant returns (Status);
    ^-------------------------------------------------------^
/sb/NanoLoanEngine.sol:189:5: Warning: No visibility specified. Defaulting to "public". 
    function isApproved(uint index) constant returns (bool);
    ^------------------------------------------------------^
/sb/NanoLoanEngine.sol:218:5: Warning: No visibility specified. Defaulting to "public". 
    function url() constant returns (string);
    ^---------------------------------------^
/sb/NanoLoanEngine.sol:225:5: Warning: No visibility specified. Defaulting to "public". 
    function cost(address engine, uint256 index, bytes data, bytes oracleData) constant returns (uint256);
    ^----------------------------------------------------------------------------------------------------^
/sb/NanoLoanEngine.sol:247:4: Warning: No visibility specified. Defaulting to "public". 
   function name() constant returns (string _name);
   ^----------------------------------------------^
/sb/NanoLoanEngine.sol:248:4: Warning: No visibility specified. Defaulting to "public". 
   function symbol() constant returns (string _symbol);
   ^--------------------------------------------------^
/sb/NanoLoanEngine.sol:249:4: Warning: No visibility specified. Defaulting to "public". 
   function totalSupply() constant returns (uint256 _totalSupply);
   ^-------------------------------------------------------------^
/sb/NanoLoanEngine.sol:250:4: Warning: No visibility specified. Defaulting to "public". 
   function balanceOf(address _owner) constant returns (uint _balance);
   ^------------------------------------------------------------------^
/sb/NanoLoanEngine.sol:252:4: Warning: No visibility specified. Defaulting to "public". 
   function ownerOf(uint256) constant returns (address owner);
   ^---------------------------------------------------------^
/sb/NanoLoanEngine.sol:268:5: Warning: No visibility specified. Defaulting to "public". 
    function name() constant returns (string _name) {
    ^ (Relevant source part starts here and spans across multiple lines).
/sb/NanoLoanEngine.sol:272:5: Warning: No visibility specified. Defaulting to "public". 
    function symbol() constant returns (string _symbol) {
    ^ (Relevant source part starts here and spans across multiple lines).
/sb/NanoLoanEngine.sol:276:5: Warning: No visibility specified. Defaulting to "public". 
    function totalSupply() constant returns (uint _totalSupply) {
    ^ (Relevant source part starts here and spans across multiple lines).
/sb/NanoLoanEngine.sol:280:5: Warning: No visibility specified. Defaulting to "public". 
    function balanceOf(address _owner) constant returns (uint _balance) {
    ^ (Relevant source part starts here and spans across multiple lines).
/sb/NanoLoanEngine.sol:284:5: Warning: No visibility specified. Defaulting to "public". 
    function tokenOfOwnerByIndex(address _owner, uint256 _index) constant returns (uint tokenId) {
    ^ (Relevant source part starts here and spans across multiple lines).
/sb/NanoLoanEngine.sol:400:5: Warning: No visibility specified. Defaulting to "public". 
    function createLoan(Oracle _oracleContract, address _borrower, bytes32 _currency, uint256 _amount, uint256 _interestRate,
    ^ (Relevant source part starts here and spans across multiple lines).
/sb/NanoLoanEngine.sol:424:5: Warning: No visibility specified. Defaulting to "public". 
    function ownerOf(uint256 index) constant returns (address owner) { owner = loans[index].lender; }
    ^-----------------------------------------------------------------------------------------------^
/sb/NanoLoanEngine.sol:425:5: Warning: No visibility specified. Defaulting to "public". 
    function getTotalLoans() constant returns (uint256) { return loans.length; }
    ^--------------------------------------------------------------------------^
/sb/NanoLoanEngine.sol:426:5: Warning: No visibility specified. Defaulting to "public". 
    function getOracle(uint index) constant returns (Oracle) { return loans[index].oracle; }
    ^--------------------------------------------------------------------------------------^
/sb/NanoLoanEngine.sol:427:5: Warning: No visibility specified. Defaulting to "public". 
    function getBorrower(uint index) constant returns (address) { return loans[index].borrower; }
    ^-------------------------------------------------------------------------------------------^
/sb/NanoLoanEngine.sol:428:5: Warning: No visibility specified. Defaulting to "public". 
    function getCosigner(uint index) constant returns (address) { return loans[index].cosigner; }
    ^-------------------------------------------------------------------------------------------^
/sb/NanoLoanEngine.sol:429:5: Warning: No visibility specified. Defaulting to "public". 
    function getCreator(uint index) constant returns (address) { return loans[index].creator; }
    ^-----------------------------------------------------------------------------------------^
/sb/NanoLoanEngine.sol:430:5: Warning: No visibility specified. Defaulting to "public". 
    function getAmount(uint index) constant returns (uint256) { return loans[index].amount; }
    ^---------------------------------------------------------------------------------------^
/sb/NanoLoanEngine.sol:431:5: Warning: No visibility specified. Defaulting to "public". 
    function getPunitoryInterest(uint index) constant returns (uint256) { return loans[index].punitoryInterest; }
    ^-----------------------------------------------------------------------------------------------------------^
/sb/NanoLoanEngine.sol:432:5: Warning: No visibility specified. Defaulting to "public". 
    function getInterestTimestamp(uint index) constant returns (uint256) { return loans[index].interestTimestamp; }
    ^-------------------------------------------------------------------------------------------------------------^
/sb/NanoLoanEngine.sol:433:5: Warning: No visibility specified. Defaulting to "public". 
    function getPaid(uint index) constant returns (uint256) { return loans[index].paid; }
    ^-----------------------------------------------------------------------------------^
/sb/NanoLoanEngine.sol:434:5: Warning: No visibility specified. Defaulting to "public". 
    function getInterestRate(uint index) constant returns (uint256) { return loans[index].interestRate; }
    ^---------------------------------------------------------------------------------------------------^
/sb/NanoLoanEngine.sol:435:5: Warning: No visibility specified. Defaulting to "public". 
    function getInterestRatePunitory(uint index) constant returns (uint256) { return loans[index].interestRatePunitory; }
    ^-------------------------------------------------------------------------------------------------------------------^
/sb/NanoLoanEngine.sol:436:5: Warning: No visibility specified. Defaulting to "public". 
    function getDueTime(uint index) constant returns (uint256) { return loans[index].dueTime; }
    ^-----------------------------------------------------------------------------------------^
/sb/NanoLoanEngine.sol:437:5: Warning: No visibility specified. Defaulting to "public". 
    function getDuesIn(uint index) constant returns (uint256) { return loans[index].duesIn; }
    ^---------------------------------------------------------------------------------------^
/sb/NanoLoanEngine.sol:438:5: Warning: No visibility specified. Defaulting to "public". 
    function getCancelableAt(uint index) constant returns (uint256) { return loans[index].cancelableAt; }
    ^---------------------------------------------------------------------------------------------------^
/sb/NanoLoanEngine.sol:439:5: Warning: No visibility specified. Defaulting to "public". 
    function getApprobation(uint index, address _address) constant returns (bool) { return loans[index].approbations[_address]; }
    ^---------------------------------------------------------------------------------------------------------------------------^
/sb/NanoLoanEngine.sol:440:5: Warning: No visibility specified. Defaulting to "public". 
    function getStatus(uint index) constant returns (Status) { return loans[index].status; }
    ^--------------------------------------------------------------------------------------^
/sb/NanoLoanEngine.sol:441:5: Warning: No visibility specified. Defaulting to "public". 
    function getLenderBalance(uint index) constant returns (uint256) { return loans[index].lenderBalance; }
    ^-----------------------------------------------------------------------------------------------------^
/sb/NanoLoanEngine.sol:442:5: Warning: No visibility specified. Defaulting to "public". 
    function getApprovedTransfer(uint index) constant returns (address) {return loans[index].approvedTransfer; }
    ^----------------------------------------------------------------------------------------------------------^
/sb/NanoLoanEngine.sol:443:5: Warning: No visibility specified. Defaulting to "public". 
    function getCurrency(uint index) constant returns (bytes32) { return loans[index].currency; }
    ^-------------------------------------------------------------------------------------------^
/sb/NanoLoanEngine.sol:444:5: Warning: No visibility specified. Defaulting to "public". 
    function getExpirationRequest(uint index) constant returns (uint256) { return loans[index].expirationRequest; }
    ^-------------------------------------------------------------------------------------------------------------^
/sb/NanoLoanEngine.sol:445:5: Warning: No visibility specified. Defaulting to "public". 
    function getInterest(uint index) constant returns (uint256) { return loans[index].interest; }
    ^-------------------------------------------------------------------------------------------^
/sb/NanoLoanEngine.sol:452:5: Warning: No visibility specified. Defaulting to "public". 
    function isApproved(uint index) constant returns (bool) {
    ^ (Relevant source part starts here and spans across multiple lines).
/sb/NanoLoanEngine.sol:101:5: Warning: Function state mutability can be restricted to pure
    function safeAdd(uint256 x, uint256 y) internal returns(uint256) {
    ^ (Relevant source part starts here and spans across multiple lines).
/sb/NanoLoanEngine.sol:107:5: Warning: Function state mutability can be restricted to pure
    function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {
    ^ (Relevant source part starts here and spans across multiple lines).
/sb/NanoLoanEngine.sol:113:5: Warning: Function state mutability can be restricted to pure
    function safeMult(uint256 x, uint256 y) internal returns(uint256) {
    ^ (Relevant source part starts here and spans across multiple lines).
/sb/NanoLoanEngine.sol:119:5: Warning: Function state mutability can be restricted to pure
    function min(uint256 a, uint256 b) internal returns(uint256) {
    ^ (Relevant source part starts here and spans across multiple lines).
/sb/NanoLoanEngine.sol:127:5: Warning: Function state mutability can be restricted to pure
    function max(uint256 a, uint256 b) internal returns(uint256) {
    ^ (Relevant source part starts here and spans across multiple lines).
/sb/NanoLoanEngine.sol:638:9: Warning: Function declared as view, but this expression (potentially) modifies the state and thus requires non-payable (the default) or payable.
        addInterest(index);
        ^----------------^
/sb/NanoLoanEngine.sol:639:16: Warning: Function declared as view, but this expression (potentially) modifies the state and thus requires non-payable (the default) or payable.
        return getRawPendingAmount(loan);
               ^-----------------------^
/sb/NanoLoanEngine.sol:661:33: Warning: Function declared as view, but this expression (potentially) modifies the state and thus requires non-payable (the default) or payable.
            interest = safeMult(safeMult(100000, amount), timeDelta) / interestRate;
                                ^----------------------^
/sb/NanoLoanEngine.sol:661:24: Warning: Function declared as view, but this expression (potentially) modifies the state and thus requires non-payable (the default) or payable.
            interest = safeMult(safeMult(100000, amount), timeDelta) / interestRate;
                       ^-------------------------------------------^
/sb/NanoLoanEngine.sol:662:25: Warning: Function declared as view, but this expression (potentially) modifies the state and thus requires non-payable (the default) or payable.
            realDelta = safeMult(interest, interestRate) / (amount * 100000);
                        ^------------------------------^
/sb/NanoLoanEngine.sol:806:5: Warning: Function state mutability can be restricted to view
    function getRate(Loan loan, bytes data) internal returns (uint256) {
    ^ (Relevant source part starts here and spans across multiple lines).


NanoLoanEngine (../../sb/NanoLoanEngine.sol#261-882) has incorrect ERC721 function interface:ERC721.approve(address,uint256) (../../sb/NanoLoanEngine.sol#253)
NanoLoanEngine (../../sb/NanoLoanEngine.sol#261-882) has incorrect ERC721 function interface:NanoLoanEngine.approve(address,uint256) (../../sb/NanoLoanEngine.sol#620-626)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-erc721-interface

NanoLoanEngine.calculateInterest(uint256,uint256,uint256) (../../sb/NanoLoanEngine.sol#656-664) uses a dangerous strict equality:
	- amount == 0 (../../sb/NanoLoanEngine.sol#657)
NanoLoanEngine.cosign(uint256,uint256) (../../sb/NanoLoanEngine.sol#535-543) uses a dangerous strict equality:
	- require(bool)(loan.status == Status.lent && (loan.dueTime - loan.duesIn) == block.timestamp) (../../sb/NanoLoanEngine.sol#537)
NanoLoanEngine.pay(uint256,uint256,address,bytes) (../../sb/NanoLoanEngine.sol#769-796) uses a dangerous strict equality:
	- getRawPendingAmount(loan) == 0 (../../sb/NanoLoanEngine.sol#779)
RpSafeMath.safeMult(uint256,uint256) (../../sb/NanoLoanEngine.sol#113-117) uses a dangerous strict equality:
	- assert(bool)((x == 0) || (z / x == y)) (../../sb/NanoLoanEngine.sol#115)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities

Reentrancy in NanoLoanEngine.lend(uint256,bytes,Cosigner,bytes) (../../sb/NanoLoanEngine.sol#490-525):
	External calls:
	- rate = getRate(loan,oracleData) (../../sb/NanoLoanEngine.sol#505)
		- loan.oracle.getRate(loan.currency,data) (../../sb/NanoLoanEngine.sol#810)
	State variables written after the call(s):
	- loan.cosigner = address(uint256(cosigner) + 2) (../../sb/NanoLoanEngine.sol#511)
	NanoLoanEngine.loans (../../sb/NanoLoanEngine.sol#377) can be used in cross function reentrancies:
	- NanoLoanEngine.addInterest(uint256) (../../sb/NanoLoanEngine.sol#738-741)
	- NanoLoanEngine.approve(address,uint256) (../../sb/NanoLoanEngine.sol#620-626)
	- NanoLoanEngine.approveLoan(uint256) (../../sb/NanoLoanEngine.sol#467-473)
	- NanoLoanEngine.cosign(uint256,uint256) (../../sb/NanoLoanEngine.sol#535-543)
	- NanoLoanEngine.createLoan(Oracle,address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256) (../../sb/NanoLoanEngine.sol#400-422)
	- NanoLoanEngine.destroy(uint256) (../../sb/NanoLoanEngine.sol#556-571)
	- NanoLoanEngine.getAmount(uint256) (../../sb/NanoLoanEngine.sol#430)
	- NanoLoanEngine.getApprobation(uint256,address) (../../sb/NanoLoanEngine.sol#439)
	- NanoLoanEngine.getApprovedTransfer(uint256) (../../sb/NanoLoanEngine.sol#442)
	- NanoLoanEngine.getBorrower(uint256) (../../sb/NanoLoanEngine.sol#427)
	- NanoLoanEngine.getCancelableAt(uint256) (../../sb/NanoLoanEngine.sol#438)
	- NanoLoanEngine.getCosigner(uint256) (../../sb/NanoLoanEngine.sol#428)
	- NanoLoanEngine.getCreator(uint256) (../../sb/NanoLoanEngine.sol#429)
	- NanoLoanEngine.getCurrency(uint256) (../../sb/NanoLoanEngine.sol#443)
	- NanoLoanEngine.getDueTime(uint256) (../../sb/NanoLoanEngine.sol#436)
	- NanoLoanEngine.getDuesIn(uint256) (../../sb/NanoLoanEngine.sol#437)
	- NanoLoanEngine.getExpirationRequest(uint256) (../../sb/NanoLoanEngine.sol#444)
	- NanoLoanEngine.getInterest(uint256) (../../sb/NanoLoanEngine.sol#445)
	- NanoLoanEngine.getInterestRate(uint256) (../../sb/NanoLoanEngine.sol#434)
	- NanoLoanEngine.getInterestRatePunitory(uint256) (../../sb/NanoLoanEngine.sol#435)
	- NanoLoanEngine.getInterestTimestamp(uint256) (../../sb/NanoLoanEngine.sol#432)
	- NanoLoanEngine.getLenderBalance(uint256) (../../sb/NanoLoanEngine.sol#441)
	- NanoLoanEngine.getOracle(uint256) (../../sb/NanoLoanEngine.sol#426)
	- NanoLoanEngine.getPaid(uint256) (../../sb/NanoLoanEngine.sol#433)
	- NanoLoanEngine.getPendingAmount(uint256) (../../sb/NanoLoanEngine.sol#636-640)
	- NanoLoanEngine.getPunitoryInterest(uint256) (../../sb/NanoLoanEngine.sol#431)
	- NanoLoanEngine.getStatus(uint256) (../../sb/NanoLoanEngine.sol#440)
	- NanoLoanEngine.getTotalLoans() (../../sb/NanoLoanEngine.sol#425)
	- NanoLoanEngine.isApproved(uint256) (../../sb/NanoLoanEngine.sol#452-455)
	- NanoLoanEngine.lend(uint256,bytes,Cosigner,bytes) (../../sb/NanoLoanEngine.sol#490-525)
	- NanoLoanEngine.ownerOf(uint256) (../../sb/NanoLoanEngine.sol#424)
	- NanoLoanEngine.pay(uint256,uint256,address,bytes) (../../sb/NanoLoanEngine.sol#769-796)
	- NanoLoanEngine.tokenOfOwnerByIndex(address,uint256) (../../sb/NanoLoanEngine.sol#284-307)
	- NanoLoanEngine.tokensOfOwner(address) (../../sb/NanoLoanEngine.sol#309-331)
	- NanoLoanEngine.transfer(address,uint256) (../../sb/NanoLoanEngine.sol#582-597)
	- NanoLoanEngine.withdrawal(uint256,address,uint256) (../../sb/NanoLoanEngine.sol#831-838)
	- NanoLoanEngine.withdrawalList(uint256[],address) (../../sb/NanoLoanEngine.sol#858-874)
	- NanoLoanEngine.withdrawalRange(uint256,uint256,address) (../../sb/NanoLoanEngine.sol#840-856)
Reentrancy in NanoLoanEngine.pay(uint256,uint256,address,bytes) (../../sb/NanoLoanEngine.sol#769-796):
	External calls:
	- rate = getRate(loan,oracleData) (../../sb/NanoLoanEngine.sol#789)
		- loan.oracle.getRate(loan.currency,data) (../../sb/NanoLoanEngine.sol#810)
	- require(bool)(rcn.transferFrom(msg.sender,this,transferValue)) (../../sb/NanoLoanEngine.sol#792)
	State variables written after the call(s):
	- loan.lenderBalance = safeAdd(transferValue,loan.lenderBalance) (../../sb/NanoLoanEngine.sol#793)
	NanoLoanEngine.loans (../../sb/NanoLoanEngine.sol#377) can be used in cross function reentrancies:
	- NanoLoanEngine.addInterest(uint256) (../../sb/NanoLoanEngine.sol#738-741)
	- NanoLoanEngine.approve(address,uint256) (../../sb/NanoLoanEngine.sol#620-626)
	- NanoLoanEngine.approveLoan(uint256) (../../sb/NanoLoanEngine.sol#467-473)
	- NanoLoanEngine.cosign(uint256,uint256) (../../sb/NanoLoanEngine.sol#535-543)
	- NanoLoanEngine.createLoan(Oracle,address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256) (../../sb/NanoLoanEngine.sol#400-422)
	- NanoLoanEngine.destroy(uint256) (../../sb/NanoLoanEngine.sol#556-571)
	- NanoLoanEngine.getAmount(uint256) (../../sb/NanoLoanEngine.sol#430)
	- NanoLoanEngine.getApprobation(uint256,address) (../../sb/NanoLoanEngine.sol#439)
	- NanoLoanEngine.getApprovedTransfer(uint256) (../../sb/NanoLoanEngine.sol#442)
	- NanoLoanEngine.getBorrower(uint256) (../../sb/NanoLoanEngine.sol#427)
	- NanoLoanEngine.getCancelableAt(uint256) (../../sb/NanoLoanEngine.sol#438)
	- NanoLoanEngine.getCosigner(uint256) (../../sb/NanoLoanEngine.sol#428)
	- NanoLoanEngine.getCreator(uint256) (../../sb/NanoLoanEngine.sol#429)
	- NanoLoanEngine.getCurrency(uint256) (../../sb/NanoLoanEngine.sol#443)
	- NanoLoanEngine.getDueTime(uint256) (../../sb/NanoLoanEngine.sol#436)
	- NanoLoanEngine.getDuesIn(uint256) (../../sb/NanoLoanEngine.sol#437)
	- NanoLoanEngine.getExpirationRequest(uint256) (../../sb/NanoLoanEngine.sol#444)
	- NanoLoanEngine.getInterest(uint256) (../../sb/NanoLoanEngine.sol#445)
	- NanoLoanEngine.getInterestRate(uint256) (../../sb/NanoLoanEngine.sol#434)
	- NanoLoanEngine.getInterestRatePunitory(uint256) (../../sb/NanoLoanEngine.sol#435)
	- NanoLoanEngine.getInterestTimestamp(uint256) (../../sb/NanoLoanEngine.sol#432)
	- NanoLoanEngine.getLenderBalance(uint256) (../../sb/NanoLoanEngine.sol#441)
	- NanoLoanEngine.getOracle(uint256) (../../sb/NanoLoanEngine.sol#426)
	- NanoLoanEngine.getPaid(uint256) (../../sb/NanoLoanEngine.sol#433)
	- NanoLoanEngine.getPendingAmount(uint256) (../../sb/NanoLoanEngine.sol#636-640)
	- NanoLoanEngine.getPunitoryInterest(uint256) (../../sb/NanoLoanEngine.sol#431)
	- NanoLoanEngine.getStatus(uint256) (../../sb/NanoLoanEngine.sol#440)
	- NanoLoanEngine.getTotalLoans() (../../sb/NanoLoanEngine.sol#425)
	- NanoLoanEngine.isApproved(uint256) (../../sb/NanoLoanEngine.sol#452-455)
	- NanoLoanEngine.lend(uint256,bytes,Cosigner,bytes) (../../sb/NanoLoanEngine.sol#490-525)
	- NanoLoanEngine.ownerOf(uint256) (../../sb/NanoLoanEngine.sol#424)
	- NanoLoanEngine.pay(uint256,uint256,address,bytes) (../../sb/NanoLoanEngine.sol#769-796)
	- NanoLoanEngine.tokenOfOwnerByIndex(address,uint256) (../../sb/NanoLoanEngine.sol#284-307)
	- NanoLoanEngine.tokensOfOwner(address) (../../sb/NanoLoanEngine.sol#309-331)
	- NanoLoanEngine.transfer(address,uint256) (../../sb/NanoLoanEngine.sol#582-597)
	- NanoLoanEngine.withdrawal(uint256,address,uint256) (../../sb/NanoLoanEngine.sol#831-838)
	- NanoLoanEngine.withdrawalList(uint256[],address) (../../sb/NanoLoanEngine.sol#858-874)
	- NanoLoanEngine.withdrawalRange(uint256,uint256,address) (../../sb/NanoLoanEngine.sol#840-856)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1

NanoLoanEngine.VERSION (../../sb/NanoLoanEngine.sol#262) shadows:
	- Engine.VERSION (../../sb/NanoLoanEngine.sol#168)
NanoLoanEngine.VERSION_NAME (../../sb/NanoLoanEngine.sol#263) shadows:
	- Engine.VERSION_NAME (../../sb/NanoLoanEngine.sol#169)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variable-shadowing-from-abstract-contracts

NanoLoanEngine.internalAddInterest(NanoLoanEngine.Loan,uint256).newTimestamp (../../sb/NanoLoanEngine.sol#679) is a local variable never initialized
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-local-variables

Oracle.addCurrency(string,uint8).decimals (../../sb/NanoLoanEngine.sol#77) shadows:
	- Oracle.decimals(bytes32) (../../sb/NanoLoanEngine.sol#87-89) (function)
NanoLoanEngine.ownerOf(uint256).owner (../../sb/NanoLoanEngine.sol#424) shadows:
	- Ownable.owner (../../sb/NanoLoanEngine.sol#5) (state variable)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing

Ownable.transferTo(address) (../../sb/NanoLoanEngine.sol#21-25) should emit an event for: 
	- owner = _to (../../sb/NanoLoanEngine.sol#23) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-access-control

Variable 'Oracle.addCurrency(string,uint8).currency (../../sb/NanoLoanEngine.sol#79)' in Oracle.addCurrency(string,uint8) (../../sb/NanoLoanEngine.sol#77-82) potentially used before declaration: NewSymbol(currency,ticker,decimals) (../../sb/NanoLoanEngine.sol#78)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#pre-declaration-usage-of-local-variables

Reentrancy in NanoLoanEngine.lend(uint256,bytes,Cosigner,bytes) (../../sb/NanoLoanEngine.sol#490-525):
	External calls:
	- rate = getRate(loan,oracleData) (../../sb/NanoLoanEngine.sol#505)
		- loan.oracle.getRate(loan.currency,data) (../../sb/NanoLoanEngine.sol#810)
	- require(bool)(cosigner.requestCosign(this,index,cosignerData,oracleData)) (../../sb/NanoLoanEngine.sol#512)
	- require(bool)(rcn.transferFrom(msg.sender,loan.borrower,safeMult(loan.amount,rate))) (../../sb/NanoLoanEngine.sol#516)
	State variables written after the call(s):
	- activeLoans += 1 (../../sb/NanoLoanEngine.sol#520)
	- lendersBalance[loan.lender] += 1 (../../sb/NanoLoanEngine.sol#521)
Reentrancy in NanoLoanEngine.pay(uint256,uint256,address,bytes) (../../sb/NanoLoanEngine.sol#769-796):
	External calls:
	- rate = getRate(loan,oracleData) (../../sb/NanoLoanEngine.sol#789)
		- loan.oracle.getRate(loan.currency,data) (../../sb/NanoLoanEngine.sol#810)
	State variables written after the call(s):
	- lockTokens(rcn,transferValue) (../../sb/NanoLoanEngine.sol#791)
		- lockedTokens[token] = safeAdd(lockedTokens[token],amount) (../../sb/NanoLoanEngine.sol#143)
Reentrancy in NanoLoanEngine.withdrawal(uint256,address,uint256) (../../sb/NanoLoanEngine.sol#831-838):
	External calls:
	- require(bool)(rcn.transfer(to,amount)) (../../sb/NanoLoanEngine.sol#835)
	State variables written after the call(s):
	- unlockTokens(rcn,amount) (../../sb/NanoLoanEngine.sol#836)
		- lockedTokens[token] = safeSubtract(lockedTokens[token],amount) (../../sb/NanoLoanEngine.sol#150)
Reentrancy in NanoLoanEngine.withdrawalList(uint256[],address) (../../sb/NanoLoanEngine.sol#858-874):
	External calls:
	- require(bool)(rcn.transfer(to,totalWithdraw)) (../../sb/NanoLoanEngine.sol#870)
	State variables written after the call(s):
	- unlockTokens(rcn,totalWithdraw) (../../sb/NanoLoanEngine.sol#871)
		- lockedTokens[token] = safeSubtract(lockedTokens[token],amount) (../../sb/NanoLoanEngine.sol#150)
Reentrancy in NanoLoanEngine.withdrawalRange(uint256,uint256,address) (../../sb/NanoLoanEngine.sol#840-856):
	External calls:
	- require(bool)(rcn.transfer(to,totalWithdraw)) (../../sb/NanoLoanEngine.sol#852)
	State variables written after the call(s):
	- unlockTokens(rcn,totalWithdraw) (../../sb/NanoLoanEngine.sol#853)
		- lockedTokens[token] = safeSubtract(lockedTokens[token],amount) (../../sb/NanoLoanEngine.sol#150)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

Reentrancy in NanoLoanEngine.lend(uint256,bytes,Cosigner,bytes) (../../sb/NanoLoanEngine.sol#490-525):
	External calls:
	- rate = getRate(loan,oracleData) (../../sb/NanoLoanEngine.sol#505)
		- loan.oracle.getRate(loan.currency,data) (../../sb/NanoLoanEngine.sol#810)
	- require(bool)(cosigner.requestCosign(this,index,cosignerData,oracleData)) (../../sb/NanoLoanEngine.sol#512)
	- require(bool)(rcn.transferFrom(msg.sender,loan.borrower,safeMult(loan.amount,rate))) (../../sb/NanoLoanEngine.sol#516)
	Event emitted after the call(s):
	- Lent(index,loan.lender,cosigner) (../../sb/NanoLoanEngine.sol#522)
	- Transfer(0x0,loan.lender,index) (../../sb/NanoLoanEngine.sol#519)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

NanoLoanEngine.createLoan(Oracle,address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256) (../../sb/NanoLoanEngine.sol#400-422) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(_expirationRequest > block.timestamp) (../../sb/NanoLoanEngine.sol#410)
NanoLoanEngine.lend(uint256,bytes,Cosigner,bytes) (../../sb/NanoLoanEngine.sol#490-525) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(loan.status == Status.initial) (../../sb/NanoLoanEngine.sol#493)
	- require(bool)(block.timestamp <= loan.expirationRequest) (../../sb/NanoLoanEngine.sol#495)
	- loan.cancelableAt > 0 (../../sb/NanoLoanEngine.sol#502)
	- require(bool)(loan.cosigner == address(cosigner)) (../../sb/NanoLoanEngine.sol#513)
	- require(bool)(rcn.transferFrom(msg.sender,loan.borrower,safeMult(loan.amount,rate))) (../../sb/NanoLoanEngine.sol#516)
NanoLoanEngine.cosign(uint256,uint256) (../../sb/NanoLoanEngine.sol#535-543) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(loan.status == Status.lent && (loan.dueTime - loan.duesIn) == block.timestamp) (../../sb/NanoLoanEngine.sol#537)
NanoLoanEngine.calculateInterest(uint256,uint256,uint256) (../../sb/NanoLoanEngine.sol#656-664) uses timestamp for comparisons
	Dangerous comparisons:
	- amount == 0 (../../sb/NanoLoanEngine.sol#657)
NanoLoanEngine.internalAddInterest(NanoLoanEngine.Loan,uint256) (../../sb/NanoLoanEngine.sol#674-719) uses timestamp for comparisons
	Dangerous comparisons:
	- timestamp > loan.interestTimestamp (../../sb/NanoLoanEngine.sol#675)
	- endNonPunitory > loan.interestTimestamp (../../sb/NanoLoanEngine.sol#687)
	- timestamp > loan.dueTime (../../sb/NanoLoanEngine.sol#701)
	- newInterest != loan.interest || newPunitoryInterest != loan.punitoryInterest (../../sb/NanoLoanEngine.sol#713)
NanoLoanEngine.addInterestUpTo(NanoLoanEngine.Loan,uint256) (../../sb/NanoLoanEngine.sol#726-731) uses timestamp for comparisons
	Dangerous comparisons:
	- timestamp <= block.timestamp (../../sb/NanoLoanEngine.sol#728)
NanoLoanEngine.pay(uint256,uint256,address,bytes) (../../sb/NanoLoanEngine.sol#769-796) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(loan.status == Status.lent) (../../sb/NanoLoanEngine.sol#772)
	- getRawPendingAmount(loan) == 0 (../../sb/NanoLoanEngine.sol#779)
	- require(bool)(rcn.transferFrom(msg.sender,this,transferValue)) (../../sb/NanoLoanEngine.sol#792)
NanoLoanEngine.getRate(NanoLoanEngine.Loan,bytes) (../../sb/NanoLoanEngine.sol#806-812) uses timestamp for comparisons
	Dangerous comparisons:
	- loan.oracle == address(0) (../../sb/NanoLoanEngine.sol#807)
NanoLoanEngine.withdrawal(uint256,address,uint256) (../../sb/NanoLoanEngine.sol#831-838) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(msg.sender == loan.lender) (../../sb/NanoLoanEngine.sol#833)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

Pragma version^0.4.15 (../../sb/NanoLoanEngine.sol#1) allows old versions
solc-0.4.26 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Parameter Ownable.transferTo(address)._to (../../sb/NanoLoanEngine.sol#21) is not in mixedCase
Variable Engine.VERSION (../../sb/NanoLoanEngine.sol#168) is not in mixedCase
Variable Engine.VERSION_NAME (../../sb/NanoLoanEngine.sol#169) is not in mixedCase
Parameter NanoLoanEngine.balanceOf(address)._owner (../../sb/NanoLoanEngine.sol#280) is not in mixedCase
Parameter NanoLoanEngine.tokenOfOwnerByIndex(address,uint256)._owner (../../sb/NanoLoanEngine.sol#284) is not in mixedCase
Parameter NanoLoanEngine.tokenOfOwnerByIndex(address,uint256)._index (../../sb/NanoLoanEngine.sol#284) is not in mixedCase
Parameter NanoLoanEngine.tokensOfOwner(address)._owner (../../sb/NanoLoanEngine.sol#309) is not in mixedCase
Parameter NanoLoanEngine.createLoan(Oracle,address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256)._oracleContract (../../sb/NanoLoanEngine.sol#400) is not in mixedCase
Parameter NanoLoanEngine.createLoan(Oracle,address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256)._borrower (../../sb/NanoLoanEngine.sol#400) is not in mixedCase
Parameter NanoLoanEngine.createLoan(Oracle,address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256)._currency (../../sb/NanoLoanEngine.sol#400) is not in mixedCase
Parameter NanoLoanEngine.createLoan(Oracle,address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256)._amount (../../sb/NanoLoanEngine.sol#400) is not in mixedCase
Parameter NanoLoanEngine.createLoan(Oracle,address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256)._interestRate (../../sb/NanoLoanEngine.sol#400) is not in mixedCase
Parameter NanoLoanEngine.createLoan(Oracle,address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256)._interestRatePunitory (../../sb/NanoLoanEngine.sol#401) is not in mixedCase
Parameter NanoLoanEngine.createLoan(Oracle,address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256)._duesIn (../../sb/NanoLoanEngine.sol#401) is not in mixedCase
Parameter NanoLoanEngine.createLoan(Oracle,address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256)._cancelableAt (../../sb/NanoLoanEngine.sol#401) is not in mixedCase
Parameter NanoLoanEngine.createLoan(Oracle,address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256)._expirationRequest (../../sb/NanoLoanEngine.sol#401) is not in mixedCase
Parameter NanoLoanEngine.getApprobation(uint256,address)._address (../../sb/NanoLoanEngine.sol#439) is not in mixedCase
Parameter NanoLoanEngine.takeOwnership(uint256)._index (../../sb/NanoLoanEngine.sol#605) is not in mixedCase
Parameter NanoLoanEngine.pay(uint256,uint256,address,bytes)._amount (../../sb/NanoLoanEngine.sol#769) is not in mixedCase
Parameter NanoLoanEngine.pay(uint256,uint256,address,bytes)._from (../../sb/NanoLoanEngine.sol#769) is not in mixedCase
Parameter NanoLoanEngine.setDeprecated(bool)._deprecated (../../sb/NanoLoanEngine.sol#879) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

NanoLoanEngine.calculateInterest(uint256,uint256,uint256) (../../sb/NanoLoanEngine.sol#656-664) uses literals with too many digits:
	- interest = safeMult(safeMult(100000,amount),timeDelta) / interestRate (../../sb/NanoLoanEngine.sol#661)
NanoLoanEngine.calculateInterest(uint256,uint256,uint256) (../../sb/NanoLoanEngine.sol#656-664) uses literals with too many digits:
	- realDelta = safeMult(interest,interestRate) / (amount * 100000) (../../sb/NanoLoanEngine.sol#662)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits

Oracle (../../sb/NanoLoanEngine.sol#43-97) does not implement functions:
	- Oracle.getRate(bytes32,bytes) (../../sb/NanoLoanEngine.sol#67)
	- Oracle.url() (../../sb/NanoLoanEngine.sol#59)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unimplemented-functions

getRate(bytes32,bytes) should be declared external:
	- Oracle.getRate(bytes32,bytes) (../../sb/NanoLoanEngine.sol#67)
addCurrency(string,uint8) should be declared external:
	- Oracle.addCurrency(string,uint8) (../../sb/NanoLoanEngine.sol#77-82)
cost(address,uint256,bytes,bytes) should be declared external:
	- Cosigner.cost(address,uint256,bytes,bytes) (../../sb/NanoLoanEngine.sol#225)
requestCosign(Engine,uint256,bytes,bytes) should be declared external:
	- Cosigner.requestCosign(Engine,uint256,bytes,bytes) (../../sb/NanoLoanEngine.sol#234)
claim(address,uint256,bytes) should be declared external:
	- Cosigner.claim(address,uint256,bytes) (../../sb/NanoLoanEngine.sol#242)
lend(uint256,bytes,Cosigner,bytes) should be declared external:
	- NanoLoanEngine.lend(uint256,bytes,Cosigner,bytes) (../../sb/NanoLoanEngine.sol#490-525)
pay(uint256,uint256,address,bytes) should be declared external:
	- NanoLoanEngine.pay(uint256,uint256,address,bytes) (../../sb/NanoLoanEngine.sol#769-796)
withdrawalList(uint256[],address) should be declared external:
	- NanoLoanEngine.withdrawalList(uint256[],address) (../../sb/NanoLoanEngine.sol#858-874)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external
/sb/NanoLoanEngine.sol analyzed (9 contracts with 93 detectors), 64 result(s) found
