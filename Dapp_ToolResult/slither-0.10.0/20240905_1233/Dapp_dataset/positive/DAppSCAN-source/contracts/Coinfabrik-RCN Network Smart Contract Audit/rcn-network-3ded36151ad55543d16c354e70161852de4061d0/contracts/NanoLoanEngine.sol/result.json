{
    "errors": [],
    "fails": [],
    "findings": [
        {
            "confidence": "Medium",
            "contract": "NanoLoanEngine",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Coinfabrik-RCN Network Smart Contract Audit/rcn-network-3ded36151ad55543d16c354e70161852de4061d0/contracts/NanoLoanEngine.sol",
            "function": "pay",
            "impact": "Medium",
            "line": 769,
            "line_end": 796,
            "message": "Reentrancy in NanoLoanEngine.pay(uint256,uint256,address,bytes) (NanoLoanEngine.sol#769-796):\n\tExternal calls:\n\t- rate = getRate(loan,oracleData) (NanoLoanEngine.sol#789)\n\t\t- loan.oracle.getRate(loan.currency,data) (NanoLoanEngine.sol#810)\n\t- require(bool)(rcn.transferFrom(msg.sender,this,transferValue)) (NanoLoanEngine.sol#792)\n\tState variables written after the call(s):\n\t- loan.lenderBalance = safeAdd(transferValue,loan.lenderBalance) (NanoLoanEngine.sol#793)\n\tNanoLoanEngine.loans (NanoLoanEngine.sol#377) can be used in cross function reentrancies:\n\t- NanoLoanEngine.addInterest(uint256) (NanoLoanEngine.sol#738-741)\n\t- NanoLoanEngine.approve(address,uint256) (NanoLoanEngine.sol#620-626)\n\t- NanoLoanEngine.approveLoan(uint256) (NanoLoanEngine.sol#467-473)\n\t- NanoLoanEngine.cosign(uint256,uint256) (NanoLoanEngine.sol#535-543)\n\t- NanoLoanEngine.createLoan(Oracle,address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256) (NanoLoanEngine.sol#400-422)\n\t- NanoLoanEngine.destroy(uint256) (NanoLoanEngine.sol#556-571)\n\t- NanoLoanEngine.getAmount(uint256) (NanoLoanEngine.sol#430)\n\t- NanoLoanEngine.getApprobation(uint256,address) (NanoLoanEngine.sol#439)\n\t- NanoLoanEngine.getApprovedTransfer(uint256) (NanoLoanEngine.sol#442)\n\t- NanoLoanEngine.getBorrower(uint256) (NanoLoanEngine.sol#427)\n\t- NanoLoanEngine.getCancelableAt(uint256) (NanoLoanEngine.sol#438)\n\t- NanoLoanEngine.getCosigner(uint256) (NanoLoanEngine.sol#428)\n\t- NanoLoanEngine.getCreator(uint256) (NanoLoanEngine.sol#429)\n\t- NanoLoanEngine.getCurrency(uint256) (NanoLoanEngine.sol#443)\n\t- NanoLoanEngine.getDueTime(uint256) (NanoLoanEngine.sol#436)\n\t- NanoLoanEngine.getDuesIn(uint256) (NanoLoanEngine.sol#437)\n\t- NanoLoanEngine.getExpirationRequest(uint256) (NanoLoanEngine.sol#444)\n\t- NanoLoanEngine.getInterest(uint256) (NanoLoanEngine.sol#445)\n\t- NanoLoanEngine.getInterestRate(uint256) (NanoLoanEngine.sol#434)\n\t- NanoLoanEngine.getInterestRatePunitory(uint256) (NanoLoanEngine.sol#435)\n\t- NanoLoanEngine.getInterestTimestamp(uint256) (NanoLoanEngine.sol#432)\n\t- NanoLoanEngine.getLenderBalance(uint256) (NanoLoanEngine.sol#441)\n\t- NanoLoanEngine.getOracle(uint256) (NanoLoanEngine.sol#426)\n\t- NanoLoanEngine.getPaid(uint256) (NanoLoanEngine.sol#433)\n\t- NanoLoanEngine.getPendingAmount(uint256) (NanoLoanEngine.sol#636-640)\n\t- NanoLoanEngine.getPunitoryInterest(uint256) (NanoLoanEngine.sol#431)\n\t- NanoLoanEngine.getStatus(uint256) (NanoLoanEngine.sol#440)\n\t- NanoLoanEngine.getTotalLoans() (NanoLoanEngine.sol#425)\n\t- NanoLoanEngine.isApproved(uint256) (NanoLoanEngine.sol#452-455)\n\t- NanoLoanEngine.lend(uint256,bytes,Cosigner,bytes) (NanoLoanEngine.sol#490-525)\n\t- NanoLoanEngine.ownerOf(uint256) (NanoLoanEngine.sol#424)\n\t- NanoLoanEngine.pay(uint256,uint256,address,bytes) (NanoLoanEngine.sol#769-796)\n\t- NanoLoanEngine.tokenOfOwnerByIndex(address,uint256) (NanoLoanEngine.sol#284-307)\n\t- NanoLoanEngine.tokensOfOwner(address) (NanoLoanEngine.sol#309-331)\n\t- NanoLoanEngine.transfer(address,uint256) (NanoLoanEngine.sol#582-597)\n\t- NanoLoanEngine.withdrawal(uint256,address,uint256) (NanoLoanEngine.sol#831-838)\n\t- NanoLoanEngine.withdrawalList(uint256[],address) (NanoLoanEngine.sol#858-874)\n\t- NanoLoanEngine.withdrawalRange(uint256,uint256,address) (NanoLoanEngine.sol#840-856)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "NanoLoanEngine",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Coinfabrik-RCN Network Smart Contract Audit/rcn-network-3ded36151ad55543d16c354e70161852de4061d0/contracts/NanoLoanEngine.sol",
            "function": "lend",
            "impact": "Medium",
            "line": 490,
            "line_end": 525,
            "message": "Reentrancy in NanoLoanEngine.lend(uint256,bytes,Cosigner,bytes) (NanoLoanEngine.sol#490-525):\n\tExternal calls:\n\t- rate = getRate(loan,oracleData) (NanoLoanEngine.sol#505)\n\t\t- loan.oracle.getRate(loan.currency,data) (NanoLoanEngine.sol#810)\n\tState variables written after the call(s):\n\t- loan.cosigner = address(uint256(cosigner) + 2) (NanoLoanEngine.sol#511)\n\tNanoLoanEngine.loans (NanoLoanEngine.sol#377) can be used in cross function reentrancies:\n\t- NanoLoanEngine.addInterest(uint256) (NanoLoanEngine.sol#738-741)\n\t- NanoLoanEngine.approve(address,uint256) (NanoLoanEngine.sol#620-626)\n\t- NanoLoanEngine.approveLoan(uint256) (NanoLoanEngine.sol#467-473)\n\t- NanoLoanEngine.cosign(uint256,uint256) (NanoLoanEngine.sol#535-543)\n\t- NanoLoanEngine.createLoan(Oracle,address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256) (NanoLoanEngine.sol#400-422)\n\t- NanoLoanEngine.destroy(uint256) (NanoLoanEngine.sol#556-571)\n\t- NanoLoanEngine.getAmount(uint256) (NanoLoanEngine.sol#430)\n\t- NanoLoanEngine.getApprobation(uint256,address) (NanoLoanEngine.sol#439)\n\t- NanoLoanEngine.getApprovedTransfer(uint256) (NanoLoanEngine.sol#442)\n\t- NanoLoanEngine.getBorrower(uint256) (NanoLoanEngine.sol#427)\n\t- NanoLoanEngine.getCancelableAt(uint256) (NanoLoanEngine.sol#438)\n\t- NanoLoanEngine.getCosigner(uint256) (NanoLoanEngine.sol#428)\n\t- NanoLoanEngine.getCreator(uint256) (NanoLoanEngine.sol#429)\n\t- NanoLoanEngine.getCurrency(uint256) (NanoLoanEngine.sol#443)\n\t- NanoLoanEngine.getDueTime(uint256) (NanoLoanEngine.sol#436)\n\t- NanoLoanEngine.getDuesIn(uint256) (NanoLoanEngine.sol#437)\n\t- NanoLoanEngine.getExpirationRequest(uint256) (NanoLoanEngine.sol#444)\n\t- NanoLoanEngine.getInterest(uint256) (NanoLoanEngine.sol#445)\n\t- NanoLoanEngine.getInterestRate(uint256) (NanoLoanEngine.sol#434)\n\t- NanoLoanEngine.getInterestRatePunitory(uint256) (NanoLoanEngine.sol#435)\n\t- NanoLoanEngine.getInterestTimestamp(uint256) (NanoLoanEngine.sol#432)\n\t- NanoLoanEngine.getLenderBalance(uint256) (NanoLoanEngine.sol#441)\n\t- NanoLoanEngine.getOracle(uint256) (NanoLoanEngine.sol#426)\n\t- NanoLoanEngine.getPaid(uint256) (NanoLoanEngine.sol#433)\n\t- NanoLoanEngine.getPendingAmount(uint256) (NanoLoanEngine.sol#636-640)\n\t- NanoLoanEngine.getPunitoryInterest(uint256) (NanoLoanEngine.sol#431)\n\t- NanoLoanEngine.getStatus(uint256) (NanoLoanEngine.sol#440)\n\t- NanoLoanEngine.getTotalLoans() (NanoLoanEngine.sol#425)\n\t- NanoLoanEngine.isApproved(uint256) (NanoLoanEngine.sol#452-455)\n\t- NanoLoanEngine.lend(uint256,bytes,Cosigner,bytes) (NanoLoanEngine.sol#490-525)\n\t- NanoLoanEngine.ownerOf(uint256) (NanoLoanEngine.sol#424)\n\t- NanoLoanEngine.pay(uint256,uint256,address,bytes) (NanoLoanEngine.sol#769-796)\n\t- NanoLoanEngine.tokenOfOwnerByIndex(address,uint256) (NanoLoanEngine.sol#284-307)\n\t- NanoLoanEngine.tokensOfOwner(address) (NanoLoanEngine.sol#309-331)\n\t- NanoLoanEngine.transfer(address,uint256) (NanoLoanEngine.sol#582-597)\n\t- NanoLoanEngine.withdrawal(uint256,address,uint256) (NanoLoanEngine.sol#831-838)\n\t- NanoLoanEngine.withdrawalList(uint256[],address) (NanoLoanEngine.sol#858-874)\n\t- NanoLoanEngine.withdrawalRange(uint256,uint256,address) (NanoLoanEngine.sol#840-856)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "High",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Coinfabrik-RCN Network Smart Contract Audit/rcn-network-3ded36151ad55543d16c354e70161852de4061d0/contracts/NanoLoanEngine.sol",
            "impact": "Medium",
            "line": 263,
            "message": "NanoLoanEngine.VERSION_NAME (NanoLoanEngine.sol#263) shadows:\n\t- Engine.VERSION_NAME (NanoLoanEngine.sol#169)\n",
            "name": "shadowing-abstract",
            "check": "FP"
        },
        {
            "confidence": "High",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Coinfabrik-RCN Network Smart Contract Audit/rcn-network-3ded36151ad55543d16c354e70161852de4061d0/contracts/NanoLoanEngine.sol",
            "impact": "Medium",
            "line": 262,
            "message": "NanoLoanEngine.VERSION (NanoLoanEngine.sol#262) shadows:\n\t- Engine.VERSION (NanoLoanEngine.sol#168)\n",
            "name": "shadowing-abstract",
            "check": "FP"
        },
        {
            "confidence": "High",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Coinfabrik-RCN Network Smart Contract Audit/rcn-network-3ded36151ad55543d16c354e70161852de4061d0/contracts/NanoLoanEngine.sol",
            "impact": "Low",
            "line": 424,
            "message": "NanoLoanEngine.ownerOf(uint256).owner (NanoLoanEngine.sol#424) shadows:\n\t- Ownable.owner (NanoLoanEngine.sol#5) (state variable)\n",
            "name": "shadowing-local",
            "check": "FP"
        },
        {
            "confidence": "High",
            "contract": "Oracle",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Coinfabrik-RCN Network Smart Contract Audit/rcn-network-3ded36151ad55543d16c354e70161852de4061d0/contracts/NanoLoanEngine.sol",
            "function": "decimals",
            "impact": "Low",
            "line": 77,
            "message": "Oracle.addCurrency(string,uint8).decimals (NanoLoanEngine.sol#77) shadows:\n\t- Oracle.decimals(bytes32) (NanoLoanEngine.sol#87-89) (function)\n",
            "name": "shadowing-local",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "NanoLoanEngine",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Coinfabrik-RCN Network Smart Contract Audit/rcn-network-3ded36151ad55543d16c354e70161852de4061d0/contracts/NanoLoanEngine.sol",
            "function": "lend",
            "impact": "Low",
            "line": 490,
            "line_end": 525,
            "message": "Reentrancy in NanoLoanEngine.lend(uint256,bytes,Cosigner,bytes) (NanoLoanEngine.sol#490-525):\n\tExternal calls:\n\t- rate = getRate(loan,oracleData) (NanoLoanEngine.sol#505)\n\t\t- loan.oracle.getRate(loan.currency,data) (NanoLoanEngine.sol#810)\n\t- require(bool)(cosigner.requestCosign(this,index,cosignerData,oracleData)) (NanoLoanEngine.sol#512)\n\t- require(bool)(rcn.transferFrom(msg.sender,loan.borrower,safeMult(loan.amount,rate))) (NanoLoanEngine.sol#516)\n\tState variables written after the call(s):\n\t- activeLoans += 1 (NanoLoanEngine.sol#520)\n\t- lendersBalance[loan.lender] += 1 (NanoLoanEngine.sol#521)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "NanoLoanEngine",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Coinfabrik-RCN Network Smart Contract Audit/rcn-network-3ded36151ad55543d16c354e70161852de4061d0/contracts/NanoLoanEngine.sol",
            "function": "withdrawal",
            "impact": "Low",
            "line": 831,
            "line_end": 838,
            "message": "Reentrancy in NanoLoanEngine.withdrawal(uint256,address,uint256) (NanoLoanEngine.sol#831-838):\n\tExternal calls:\n\t- require(bool)(rcn.transfer(to,amount)) (NanoLoanEngine.sol#835)\n\tState variables written after the call(s):\n\t- unlockTokens(rcn,amount) (NanoLoanEngine.sol#836)\n\t\t- lockedTokens[token] = safeSubtract(lockedTokens[token],amount) (NanoLoanEngine.sol#150)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "NanoLoanEngine",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Coinfabrik-RCN Network Smart Contract Audit/rcn-network-3ded36151ad55543d16c354e70161852de4061d0/contracts/NanoLoanEngine.sol",
            "function": "withdrawalRange",
            "impact": "Low",
            "line": 840,
            "line_end": 856,
            "message": "Reentrancy in NanoLoanEngine.withdrawalRange(uint256,uint256,address) (NanoLoanEngine.sol#840-856):\n\tExternal calls:\n\t- require(bool)(rcn.transfer(to,totalWithdraw)) (NanoLoanEngine.sol#852)\n\tState variables written after the call(s):\n\t- unlockTokens(rcn,totalWithdraw) (NanoLoanEngine.sol#853)\n\t\t- lockedTokens[token] = safeSubtract(lockedTokens[token],amount) (NanoLoanEngine.sol#150)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "NanoLoanEngine",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Coinfabrik-RCN Network Smart Contract Audit/rcn-network-3ded36151ad55543d16c354e70161852de4061d0/contracts/NanoLoanEngine.sol",
            "function": "pay",
            "impact": "Low",
            "line": 769,
            "line_end": 796,
            "message": "Reentrancy in NanoLoanEngine.pay(uint256,uint256,address,bytes) (NanoLoanEngine.sol#769-796):\n\tExternal calls:\n\t- rate = getRate(loan,oracleData) (NanoLoanEngine.sol#789)\n\t\t- loan.oracle.getRate(loan.currency,data) (NanoLoanEngine.sol#810)\n\tState variables written after the call(s):\n\t- lockTokens(rcn,transferValue) (NanoLoanEngine.sol#791)\n\t\t- lockedTokens[token] = safeAdd(lockedTokens[token],amount) (NanoLoanEngine.sol#143)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "NanoLoanEngine",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Coinfabrik-RCN Network Smart Contract Audit/rcn-network-3ded36151ad55543d16c354e70161852de4061d0/contracts/NanoLoanEngine.sol",
            "function": "withdrawalList",
            "impact": "Low",
            "line": 858,
            "line_end": 874,
            "message": "Reentrancy in NanoLoanEngine.withdrawalList(uint256[],address) (NanoLoanEngine.sol#858-874):\n\tExternal calls:\n\t- require(bool)(rcn.transfer(to,totalWithdraw)) (NanoLoanEngine.sol#870)\n\tState variables written after the call(s):\n\t- unlockTokens(rcn,totalWithdraw) (NanoLoanEngine.sol#871)\n\t\t- lockedTokens[token] = safeSubtract(lockedTokens[token],amount) (NanoLoanEngine.sol#150)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "NanoLoanEngine",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Coinfabrik-RCN Network Smart Contract Audit/rcn-network-3ded36151ad55543d16c354e70161852de4061d0/contracts/NanoLoanEngine.sol",
            "function": "lend",
            "impact": "Low",
            "line": 490,
            "line_end": 525,
            "message": "Reentrancy in NanoLoanEngine.lend(uint256,bytes,Cosigner,bytes) (NanoLoanEngine.sol#490-525):\n\tExternal calls:\n\t- rate = getRate(loan,oracleData) (NanoLoanEngine.sol#505)\n\t\t- loan.oracle.getRate(loan.currency,data) (NanoLoanEngine.sol#810)\n\t- require(bool)(cosigner.requestCosign(this,index,cosignerData,oracleData)) (NanoLoanEngine.sol#512)\n\t- require(bool)(rcn.transferFrom(msg.sender,loan.borrower,safeMult(loan.amount,rate))) (NanoLoanEngine.sol#516)\n\tEvent emitted after the call(s):\n\t- Lent(index,loan.lender,cosigner) (NanoLoanEngine.sol#522)\n\t- Transfer(0x0,loan.lender,index) (NanoLoanEngine.sol#519)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "NanoLoanEngine",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Coinfabrik-RCN Network Smart Contract Audit/rcn-network-3ded36151ad55543d16c354e70161852de4061d0/contracts/NanoLoanEngine.sol",
            "function": "calculateInterest",
            "impact": "Low",
            "line": 656,
            "line_end": 664,
            "message": "NanoLoanEngine.calculateInterest(uint256,uint256,uint256) (NanoLoanEngine.sol#656-664) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- amount == 0 (NanoLoanEngine.sol#657)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "NanoLoanEngine",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Coinfabrik-RCN Network Smart Contract Audit/rcn-network-3ded36151ad55543d16c354e70161852de4061d0/contracts/NanoLoanEngine.sol",
            "function": "addInterestUpTo",
            "impact": "Low",
            "line": 726,
            "line_end": 731,
            "message": "NanoLoanEngine.addInterestUpTo(NanoLoanEngine.Loan,uint256) (NanoLoanEngine.sol#726-731) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- timestamp <= block.timestamp (NanoLoanEngine.sol#728)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "NanoLoanEngine",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Coinfabrik-RCN Network Smart Contract Audit/rcn-network-3ded36151ad55543d16c354e70161852de4061d0/contracts/NanoLoanEngine.sol",
            "function": "withdrawal",
            "impact": "Low",
            "line": 831,
            "line_end": 838,
            "message": "NanoLoanEngine.withdrawal(uint256,address,uint256) (NanoLoanEngine.sol#831-838) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(msg.sender == loan.lender) (NanoLoanEngine.sol#833)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "NanoLoanEngine",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Coinfabrik-RCN Network Smart Contract Audit/rcn-network-3ded36151ad55543d16c354e70161852de4061d0/contracts/NanoLoanEngine.sol",
            "function": "cosign",
            "impact": "Low",
            "line": 535,
            "line_end": 543,
            "message": "NanoLoanEngine.cosign(uint256,uint256) (NanoLoanEngine.sol#535-543) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(loan.status == Status.lent && (loan.dueTime - loan.duesIn) == block.timestamp) (NanoLoanEngine.sol#537)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "NanoLoanEngine",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Coinfabrik-RCN Network Smart Contract Audit/rcn-network-3ded36151ad55543d16c354e70161852de4061d0/contracts/NanoLoanEngine.sol",
            "function": "createLoan",
            "impact": "Low",
            "line": 400,
            "line_end": 422,
            "message": "NanoLoanEngine.createLoan(Oracle,address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256) (NanoLoanEngine.sol#400-422) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(_expirationRequest > block.timestamp) (NanoLoanEngine.sol#410)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "NanoLoanEngine",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Coinfabrik-RCN Network Smart Contract Audit/rcn-network-3ded36151ad55543d16c354e70161852de4061d0/contracts/NanoLoanEngine.sol",
            "function": "pay",
            "impact": "Low",
            "line": 769,
            "line_end": 796,
            "message": "NanoLoanEngine.pay(uint256,uint256,address,bytes) (NanoLoanEngine.sol#769-796) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(loan.status == Status.lent) (NanoLoanEngine.sol#772)\n\t- getRawPendingAmount(loan) == 0 (NanoLoanEngine.sol#779)\n\t- require(bool)(rcn.transferFrom(msg.sender,this,transferValue)) (NanoLoanEngine.sol#792)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "NanoLoanEngine",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Coinfabrik-RCN Network Smart Contract Audit/rcn-network-3ded36151ad55543d16c354e70161852de4061d0/contracts/NanoLoanEngine.sol",
            "function": "lend",
            "impact": "Low",
            "line": 490,
            "line_end": 525,
            "message": "NanoLoanEngine.lend(uint256,bytes,Cosigner,bytes) (NanoLoanEngine.sol#490-525) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(loan.status == Status.initial) (NanoLoanEngine.sol#493)\n\t- require(bool)(block.timestamp <= loan.expirationRequest) (NanoLoanEngine.sol#495)\n\t- loan.cancelableAt > 0 (NanoLoanEngine.sol#502)\n\t- require(bool)(loan.cosigner == address(cosigner)) (NanoLoanEngine.sol#513)\n\t- require(bool)(rcn.transferFrom(msg.sender,loan.borrower,safeMult(loan.amount,rate))) (NanoLoanEngine.sol#516)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "NanoLoanEngine",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Coinfabrik-RCN Network Smart Contract Audit/rcn-network-3ded36151ad55543d16c354e70161852de4061d0/contracts/NanoLoanEngine.sol",
            "function": "internalAddInterest",
            "impact": "Low",
            "line": 674,
            "line_end": 719,
            "message": "NanoLoanEngine.internalAddInterest(NanoLoanEngine.Loan,uint256) (NanoLoanEngine.sol#674-719) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- timestamp > loan.interestTimestamp (NanoLoanEngine.sol#675)\n\t- endNonPunitory > loan.interestTimestamp (NanoLoanEngine.sol#687)\n\t- timestamp > loan.dueTime (NanoLoanEngine.sol#701)\n\t- newInterest != loan.interest || newPunitoryInterest != loan.punitoryInterest (NanoLoanEngine.sol#713)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "NanoLoanEngine",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Coinfabrik-RCN Network Smart Contract Audit/rcn-network-3ded36151ad55543d16c354e70161852de4061d0/contracts/NanoLoanEngine.sol",
            "function": "getRate",
            "impact": "Low",
            "line": 806,
            "line_end": 812,
            "message": "NanoLoanEngine.getRate(NanoLoanEngine.Loan,bytes) (NanoLoanEngine.sol#806-812) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- loan.oracle == address(0) (NanoLoanEngine.sol#807)\n",
            "name": "timestamp",
            "check": "FP"
        }
    ],
    "infos": [],
    "parser": {
        "id": "slither-0.10.0",
        "mode": "solidity",
        "version": "2024/04/30"
    }
}