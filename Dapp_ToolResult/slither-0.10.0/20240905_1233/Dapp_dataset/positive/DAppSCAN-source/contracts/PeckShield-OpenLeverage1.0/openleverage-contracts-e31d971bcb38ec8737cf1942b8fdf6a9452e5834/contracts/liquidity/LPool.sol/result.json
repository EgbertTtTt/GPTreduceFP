{
    "errors": [],
    "fails": [],
    "findings": [
        {
            "confidence": "Medium",
            "contract": "LPool",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-OpenLeverage1.0/openleverage-contracts-e31d971bcb38ec8737cf1942b8fdf6a9452e5834/contracts/liquidity/LPool.sol",
            "function": "doTransferOut",
            "impact": "High",
            "line": 1779,
            "line_end": 1786,
            "message": "LPool.doTransferOut(address,uint256,bool) (LPool.sol#1779-1786) sends eth to arbitrary user\n\tDangerous calls:\n\t- to.transfer(amount) (LPool.sol#1782)\n",
            "name": "arbitrary-send-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "LPool",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-OpenLeverage1.0/openleverage-contracts-e31d971bcb38ec8737cf1942b8fdf6a9452e5834/contracts/liquidity/LPool.sol",
            "function": "repayBorrowFresh",
            "impact": "High",
            "line": 2370,
            "line_end": 2428,
            "message": "Reentrancy in LPool.repayBorrowFresh(address,address,uint256,bool) (LPool.sol#2370-2428):\n\tExternal calls:\n\t- (ControllerInterface(controller)).repayBorrowAllowed(address(this),payer,borrower,repayAmount,isEnd) (LPool.sol#2372)\n\t- vars.actualRepayAmount = doTransferIn(payer,vars.repayAmount,false) (LPool.sol#2397)\n\t\t- IWETH(underlying).deposit{value: msg.value}() (LPool.sol#1760)\n\t\t- IERC20(underlying).transferFrom(from,address(this),amount) (LPool.sol#1762)\n\tExternal calls sending eth:\n\t- vars.actualRepayAmount = doTransferIn(payer,vars.repayAmount,false) (LPool.sol#2397)\n\t\t- IWETH(underlying).deposit{value: msg.value}() (LPool.sol#1760)\n\tState variables written after the call(s):\n\t- accountBorrows[borrower].principal = vars.accountBorrowsNew (LPool.sol#2418)\n\tLPoolStorage.accountBorrows (LPool.sol#99) can be used in cross function reentrancies:\n\t- LPool.borrowBalanceStored(address) (LPool.sol#1947-1949)\n\t- LPool.borrowBalanceStoredInternalWithBorrowerIndex(address,uint256) (LPool.sol#1965-1995)\n\t- accountBorrows[borrower].interestIndex = borrowIndex (LPool.sol#2419)\n\tLPoolStorage.accountBorrows (LPool.sol#99) can be used in cross function reentrancies:\n\t- LPool.borrowBalanceStored(address) (LPool.sol#1947-1949)\n\t- LPool.borrowBalanceStoredInternalWithBorrowerIndex(address,uint256) (LPool.sol#1965-1995)\n",
            "name": "reentrancy-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "LPool",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-OpenLeverage1.0/openleverage-contracts-e31d971bcb38ec8737cf1942b8fdf6a9452e5834/contracts/liquidity/LPool.sol",
            "function": "borrowFresh",
            "impact": "High",
            "line": 2312,
            "line_end": 2352,
            "message": "Reentrancy in LPool.borrowFresh(address,address,uint256) (LPool.sol#2312-2352):\n\tExternal calls:\n\t- (ControllerInterface(controller)).borrowAllowed(address(this),borrower,payee,borrowAmount) (LPool.sol#2314)\n\t- doTransferOut(payee,borrowAmount,false) (LPool.sol#2341)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (LPool.sol#1250)\n\t\t- IWETH(underlying).withdraw(amount) (LPool.sol#1781)\n\t\t- IERC20(underlying).safeTransfer(to,amount) (LPool.sol#1784)\n\t\t- (success,returndata) = target.call{value: value}(data) (LPool.sol#1118)\n\tExternal calls sending eth:\n\t- doTransferOut(payee,borrowAmount,false) (LPool.sol#2341)\n\t\t- to.transfer(amount) (LPool.sol#1782)\n\t\t- (success,returndata) = target.call{value: value}(data) (LPool.sol#1118)\n\tState variables written after the call(s):\n\t- accountBorrows[borrower].principal = vars.accountBorrowsNew (LPool.sol#2344)\n\tLPoolStorage.accountBorrows (LPool.sol#99) can be used in cross function reentrancies:\n\t- LPool.borrowBalanceStored(address) (LPool.sol#1947-1949)\n\t- LPool.borrowBalanceStoredInternalWithBorrowerIndex(address,uint256) (LPool.sol#1965-1995)\n\t- accountBorrows[borrower].interestIndex = borrowIndex (LPool.sol#2345)\n\tLPoolStorage.accountBorrows (LPool.sol#99) can be used in cross function reentrancies:\n\t- LPool.borrowBalanceStored(address) (LPool.sol#1947-1949)\n\t- LPool.borrowBalanceStoredInternalWithBorrowerIndex(address,uint256) (LPool.sol#1965-1995)\n\t- totalBorrows = vars.totalBorrowsNew (LPool.sol#2346)\n\tLPoolStorage.totalBorrows (LPool.sol#67) can be used in cross function reentrancies:\n\t- LPool.accrueInterest() (LPool.sol#2087-2151)\n\t- LPool.availableForBorrow() (LPool.sol#1788-1802)\n\t- LPool.borrowRatePerBlock() (LPool.sol#1843-1845)\n\t- LPool.calCurrentBorrowIndex() (LPool.sol#2061-2080)\n\t- LPool.exchangeRateStoredInternal() (LPool.sol#2021-2051)\n\t- LPool.supplyRatePerBlock() (LPool.sol#1851-1853)\n\t- LPoolStorage.totalBorrows (LPool.sol#67)\n\t- LPool.totalBorrowsCurrent() (LPool.sol#1896-1933)\n",
            "name": "reentrancy-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "LPool",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-OpenLeverage1.0/openleverage-contracts-e31d971bcb38ec8737cf1942b8fdf6a9452e5834/contracts/liquidity/LPool.sol",
            "function": "mintFresh",
            "impact": "High",
            "line": 2169,
            "line_end": 2216,
            "message": "Reentrancy in LPool.mintFresh(address,uint256) (LPool.sol#2169-2216):\n\tExternal calls:\n\t- vars.actualMintAmount = doTransferIn(minter,mintAmount,true) (LPool.sol#2182)\n\t\t- IWETH(underlying).deposit{value: msg.value}() (LPool.sol#1760)\n\t\t- IERC20(underlying).transferFrom(from,address(this),amount) (LPool.sol#1762)\n\t- (ControllerInterface(controller)).mintAllowed(address(this),minter,vars.mintTokens) (LPool.sol#2193)\n\tExternal calls sending eth:\n\t- vars.actualMintAmount = doTransferIn(minter,mintAmount,true) (LPool.sol#2182)\n\t\t- IWETH(underlying).deposit{value: msg.value}() (LPool.sol#1760)\n\tState variables written after the call(s):\n\t- totalSupply = vars.totalSupplyNew (LPool.sol#2206)\n\tLPoolStorage.totalSupply (LPool.sol#28) can be used in cross function reentrancies:\n\t- LPool.exchangeRateStoredInternal() (LPool.sol#2021-2051)\n\t- LPoolStorage.totalSupply (LPool.sol#28)\n",
            "name": "reentrancy-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "LPool",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-OpenLeverage1.0/openleverage-contracts-e31d971bcb38ec8737cf1942b8fdf6a9452e5834/contracts/liquidity/LPool.sol",
            "function": "redeemFresh",
            "impact": "High",
            "line": 2235,
            "line_end": 2298,
            "message": "Reentrancy in LPool.redeemFresh(address,uint256,uint256) (LPool.sol#2235-2298):\n\tExternal calls:\n\t- (ControllerInterface(controller)).redeemAllowed(address(this),redeemer,vars.redeemTokens) (LPool.sol#2268)\n\t- doTransferOut(redeemer,vars.redeemAmount,true) (LPool.sol#2288)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (LPool.sol#1250)\n\t\t- IWETH(underlying).withdraw(amount) (LPool.sol#1781)\n\t\t- IERC20(underlying).safeTransfer(to,amount) (LPool.sol#1784)\n\t\t- (success,returndata) = target.call{value: value}(data) (LPool.sol#1118)\n\tExternal calls sending eth:\n\t- doTransferOut(redeemer,vars.redeemAmount,true) (LPool.sol#2288)\n\t\t- to.transfer(amount) (LPool.sol#1782)\n\t\t- (success,returndata) = target.call{value: value}(data) (LPool.sol#1118)\n\tState variables written after the call(s):\n\t- accountTokens[redeemer] = vars.accountTokensNew (LPool.sol#2291)\n\tLPoolStorage.accountTokens (LPool.sol#32) can be used in cross function reentrancies:\n\t- LPool.balanceOf(address) (LPool.sol#1654-1656)\n\t- LPool.balanceOfUnderlying(address) (LPool.sol#1664-1669)\n\t- LPool.getAccountSnapshot(address) (LPool.sol#1811-1829)\n\t- totalSupply = vars.totalSupplyNew (LPool.sol#2290)\n\tLPoolStorage.totalSupply (LPool.sol#28) can be used in cross function reentrancies:\n\t- LPool.exchangeRateStoredInternal() (LPool.sol#2021-2051)\n\t- LPoolStorage.totalSupply (LPool.sol#28)\n",
            "name": "reentrancy-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "LPool",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-OpenLeverage1.0/openleverage-contracts-e31d971bcb38ec8737cf1942b8fdf6a9452e5834/contracts/liquidity/LPool.sol",
            "function": "addReserves",
            "impact": "High",
            "line": 2467,
            "line_end": 2475,
            "message": "Reentrancy in LPool.addReserves(uint256) (LPool.sol#2467-2475):\n\tExternal calls:\n\t- actualAddAmount = doTransferIn(msg.sender,addAmount,true) (LPool.sol#2471)\n\t\t- IWETH(underlying).deposit{value: msg.value}() (LPool.sol#1760)\n\t\t- IERC20(underlying).transferFrom(from,address(this),amount) (LPool.sol#1762)\n\tExternal calls sending eth:\n\t- actualAddAmount = doTransferIn(msg.sender,addAmount,true) (LPool.sol#2471)\n\t\t- IWETH(underlying).deposit{value: msg.value}() (LPool.sol#1760)\n\tState variables written after the call(s):\n\t- totalReserves = totalReservesNew (LPool.sol#2473)\n\tLPoolStorage.totalReserves (LPool.sol#75) can be used in cross function reentrancies:\n\t- LPool.accrueInterest() (LPool.sol#2087-2151)\n\t- LPool.addReserves(uint256) (LPool.sol#2467-2475)\n\t- LPool.availableForBorrow() (LPool.sol#1788-1802)\n\t- LPool.borrowRatePerBlock() (LPool.sol#1843-1845)\n\t- LPool.calCurrentBorrowIndex() (LPool.sol#2061-2080)\n\t- LPool.exchangeRateStoredInternal() (LPool.sol#2021-2051)\n\t- LPool.reduceReserves(address,uint256) (LPool.sol#2477-2484)\n\t- LPool.supplyRatePerBlock() (LPool.sol#1851-1853)\n\t- LPool.totalBorrowsCurrent() (LPool.sol#1896-1933)\n\t- LPoolStorage.totalReserves (LPool.sol#75)\n",
            "name": "reentrancy-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "LPool",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-OpenLeverage1.0/openleverage-contracts-e31d971bcb38ec8737cf1942b8fdf6a9452e5834/contracts/liquidity/LPool.sol",
            "function": "doTransferIn",
            "impact": "High",
            "line": 1757,
            "line_end": 1768,
            "message": "LPool.doTransferIn(address,uint256,bool) (LPool.sol#1757-1768) ignores return value by IERC20(underlying).transferFrom(from,address(this),amount) (LPool.sol#1762)\n",
            "name": "unchecked-transfer",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "LPool",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-OpenLeverage1.0/openleverage-contracts-e31d971bcb38ec8737cf1942b8fdf6a9452e5834/contracts/liquidity/LPool.sol",
            "function": "initialize",
            "impact": "Medium",
            "line": 1503,
            "line_end": 1550,
            "message": "LPool.initialize(address,bool,address,uint256,uint256,uint256,uint256,uint256,string,string,uint8) (LPool.sol#1503-1550) ignores return value by IERC20(underlying).totalSupply() (LPool.sol#1549)\n",
            "name": "unused-return",
            "check": "FP"
        },
        {
            "confidence": "High",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-OpenLeverage1.0/openleverage-contracts-e31d971bcb38ec8737cf1942b8fdf6a9452e5834/contracts/liquidity/LPool.sol",
            "impact": "Low",
            "line": 1940,
            "message": "LPool.borrowBalanceCurrent(address).borrowIndex (LPool.sol#1940) shadows:\n\t- LPoolStorage.borrowIndex (LPool.sol#62) (state variable)\n",
            "name": "shadowing-local",
            "check": "FP"
        },
        {
            "confidence": "High",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-OpenLeverage1.0/openleverage-contracts-e31d971bcb38ec8737cf1942b8fdf6a9452e5834/contracts/liquidity/LPool.sol",
            "impact": "Low",
            "line": 1965,
            "message": "LPool.borrowBalanceStoredInternalWithBorrowerIndex(address,uint256).borrowIndex (LPool.sol#1965) shadows:\n\t- LPoolStorage.borrowIndex (LPool.sol#62) (state variable)\n",
            "name": "shadowing-local",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "LPool",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-OpenLeverage1.0/openleverage-contracts-e31d971bcb38ec8737cf1942b8fdf6a9452e5834/contracts/liquidity/LPool.sol",
            "function": "initialize",
            "impact": "Low",
            "line": 1503,
            "line_end": 1550,
            "message": "LPool.initialize(address,bool,address,uint256,uint256,uint256,uint256,uint256,string,string,uint8) (LPool.sol#1503-1550) should emit an event for: \n\t- initialExchangeRateMantissa = initialExchangeRateMantissa_ (LPool.sol#1521) \n\t- baseRatePerBlock = baseRatePerBlock_ (LPool.sol#1527) \n\t- multiplierPerBlock = multiplierPerBlock_ (LPool.sol#1528) \n\t- jumpMultiplierPerBlock = jumpMultiplierPerBlock_ (LPool.sol#1529) \n\t- kink = kink_ (LPool.sol#1530) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "LPool",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-OpenLeverage1.0/openleverage-contracts-e31d971bcb38ec8737cf1942b8fdf6a9452e5834/contracts/liquidity/LPool.sol",
            "function": "setBorrowCapFactorMantissa",
            "impact": "Low",
            "line": 2444,
            "line_end": 2446,
            "message": "LPool.setBorrowCapFactorMantissa(uint256) (LPool.sol#2444-2446) should emit an event for: \n\t- borrowCapFactorMantissa = newBorrowCapFactorMantissa (LPool.sol#2445) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "LPool",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-OpenLeverage1.0/openleverage-contracts-e31d971bcb38ec8737cf1942b8fdf6a9452e5834/contracts/liquidity/LPool.sol",
            "function": "mintFresh",
            "impact": "Low",
            "line": 2169,
            "line_end": 2216,
            "message": "Reentrancy in LPool.mintFresh(address,uint256) (LPool.sol#2169-2216):\n\tExternal calls:\n\t- vars.actualMintAmount = doTransferIn(minter,mintAmount,true) (LPool.sol#2182)\n\t\t- IWETH(underlying).deposit{value: msg.value}() (LPool.sol#1760)\n\t\t- IERC20(underlying).transferFrom(from,address(this),amount) (LPool.sol#1762)\n\t- (ControllerInterface(controller)).mintAllowed(address(this),minter,vars.mintTokens) (LPool.sol#2193)\n\tExternal calls sending eth:\n\t- vars.actualMintAmount = doTransferIn(minter,mintAmount,true) (LPool.sol#2182)\n\t\t- IWETH(underlying).deposit{value: msg.value}() (LPool.sol#1760)\n\tState variables written after the call(s):\n\t- accountTokens[minter] = vars.accountTokensNew (LPool.sol#2207)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "LPool",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-OpenLeverage1.0/openleverage-contracts-e31d971bcb38ec8737cf1942b8fdf6a9452e5834/contracts/liquidity/LPool.sol",
            "function": "repayBorrowFresh",
            "impact": "Low",
            "line": 2370,
            "line_end": 2428,
            "message": "Reentrancy in LPool.repayBorrowFresh(address,address,uint256,bool) (LPool.sol#2370-2428):\n\tExternal calls:\n\t- (ControllerInterface(controller)).repayBorrowAllowed(address(this),payer,borrower,repayAmount,isEnd) (LPool.sol#2372)\n\t- vars.actualRepayAmount = doTransferIn(payer,vars.repayAmount,false) (LPool.sol#2397)\n\t\t- IWETH(underlying).deposit{value: msg.value}() (LPool.sol#1760)\n\t\t- IERC20(underlying).transferFrom(from,address(this),amount) (LPool.sol#1762)\n\tExternal calls sending eth:\n\t- vars.actualRepayAmount = doTransferIn(payer,vars.repayAmount,false) (LPool.sol#2397)\n\t\t- IWETH(underlying).deposit{value: msg.value}() (LPool.sol#1760)\n\tState variables written after the call(s):\n\t- totalBorrows = vars.totalBorrowsNew (LPool.sol#2420)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "LPool",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-OpenLeverage1.0/openleverage-contracts-e31d971bcb38ec8737cf1942b8fdf6a9452e5834/contracts/liquidity/LPool.sol",
            "function": "transferTokens",
            "impact": "Low",
            "line": 1561,
            "line_end": 1601,
            "message": "Reentrancy in LPool.transferTokens(address,address,address,uint256) (LPool.sol#1561-1601):\n\tExternal calls:\n\t- (ControllerInterface(controller)).transferAllowed(address(this),src,dst,tokens) (LPool.sol#1566)\n\tState variables written after the call(s):\n\t- accountTokens[src] = srcTokensNew (LPool.sol#1591)\n\t- accountTokens[dst] = dstTokensNew (LPool.sol#1592)\n\t- transferAllowances[src][spender] = allowanceNew (LPool.sol#1596)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "LPool",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-OpenLeverage1.0/openleverage-contracts-e31d971bcb38ec8737cf1942b8fdf6a9452e5834/contracts/liquidity/LPool.sol",
            "function": "reduceReserves",
            "impact": "Low",
            "line": 2477,
            "line_end": 2484,
            "message": "Reentrancy in LPool.reduceReserves(address,uint256) (LPool.sol#2477-2484):\n\tExternal calls:\n\t- doTransferOut(to,reduceAmount,true) (LPool.sol#2482)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (LPool.sol#1250)\n\t\t- IWETH(underlying).withdraw(amount) (LPool.sol#1781)\n\t\t- IERC20(underlying).safeTransfer(to,amount) (LPool.sol#1784)\n\t\t- (success,returndata) = target.call{value: value}(data) (LPool.sol#1118)\n\tExternal calls sending eth:\n\t- doTransferOut(to,reduceAmount,true) (LPool.sol#2482)\n\t\t- to.transfer(amount) (LPool.sol#1782)\n\t\t- (success,returndata) = target.call{value: value}(data) (LPool.sol#1118)\n\tEvent emitted after the call(s):\n\t- ReservesReduced(to,reduceAmount,totalReservesNew) (LPool.sol#2483)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "LPool",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-OpenLeverage1.0/openleverage-contracts-e31d971bcb38ec8737cf1942b8fdf6a9452e5834/contracts/liquidity/LPool.sol",
            "function": "addReserves",
            "impact": "Low",
            "line": 2467,
            "line_end": 2475,
            "message": "Reentrancy in LPool.addReserves(uint256) (LPool.sol#2467-2475):\n\tExternal calls:\n\t- actualAddAmount = doTransferIn(msg.sender,addAmount,true) (LPool.sol#2471)\n\t\t- IWETH(underlying).deposit{value: msg.value}() (LPool.sol#1760)\n\t\t- IERC20(underlying).transferFrom(from,address(this),amount) (LPool.sol#1762)\n\tExternal calls sending eth:\n\t- actualAddAmount = doTransferIn(msg.sender,addAmount,true) (LPool.sol#2471)\n\t\t- IWETH(underlying).deposit{value: msg.value}() (LPool.sol#1760)\n\tEvent emitted after the call(s):\n\t- ReservesAdded(msg.sender,actualAddAmount,totalReservesNew) (LPool.sol#2474)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "LPool",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-OpenLeverage1.0/openleverage-contracts-e31d971bcb38ec8737cf1942b8fdf6a9452e5834/contracts/liquidity/LPool.sol",
            "function": "borrowFresh",
            "impact": "Informational",
            "line": 2312,
            "line_end": 2352,
            "message": "Reentrancy in LPool.borrowFresh(address,address,uint256) (LPool.sol#2312-2352):\n\tExternal calls:\n\t- doTransferOut(payee,borrowAmount,false) (LPool.sol#2341)\n\t\t- to.transfer(amount) (LPool.sol#1782)\n\tExternal calls sending eth:\n\t- doTransferOut(payee,borrowAmount,false) (LPool.sol#2341)\n\t\t- to.transfer(amount) (LPool.sol#1782)\n\t\t- (success,returndata) = target.call{value: value}(data) (LPool.sol#1118)\n\tState variables written after the call(s):\n\t- accountBorrows[borrower].principal = vars.accountBorrowsNew (LPool.sol#2344)\n\t- accountBorrows[borrower].interestIndex = borrowIndex (LPool.sol#2345)\n\t- totalBorrows = vars.totalBorrowsNew (LPool.sol#2346)\n\tEvent emitted after the call(s):\n\t- Borrow(borrower,payee,borrowAmount,vars.accountBorrowsNew,vars.totalBorrowsNew) (LPool.sol#2349)\n",
            "name": "reentrancy-unlimited-gas",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "LPool",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-OpenLeverage1.0/openleverage-contracts-e31d971bcb38ec8737cf1942b8fdf6a9452e5834/contracts/liquidity/LPool.sol",
            "function": "reduceReserves",
            "impact": "Informational",
            "line": 2477,
            "line_end": 2484,
            "message": "Reentrancy in LPool.reduceReserves(address,uint256) (LPool.sol#2477-2484):\n\tExternal calls:\n\t- doTransferOut(to,reduceAmount,true) (LPool.sol#2482)\n\t\t- to.transfer(amount) (LPool.sol#1782)\n\tExternal calls sending eth:\n\t- doTransferOut(to,reduceAmount,true) (LPool.sol#2482)\n\t\t- to.transfer(amount) (LPool.sol#1782)\n\t\t- (success,returndata) = target.call{value: value}(data) (LPool.sol#1118)\n\tEvent emitted after the call(s):\n\t- ReservesReduced(to,reduceAmount,totalReservesNew) (LPool.sol#2483)\n",
            "name": "reentrancy-unlimited-gas",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "LPool",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-OpenLeverage1.0/openleverage-contracts-e31d971bcb38ec8737cf1942b8fdf6a9452e5834/contracts/liquidity/LPool.sol",
            "function": "redeemFresh",
            "impact": "Informational",
            "line": 2235,
            "line_end": 2298,
            "message": "Reentrancy in LPool.redeemFresh(address,uint256,uint256) (LPool.sol#2235-2298):\n\tExternal calls:\n\t- doTransferOut(redeemer,vars.redeemAmount,true) (LPool.sol#2288)\n\t\t- to.transfer(amount) (LPool.sol#1782)\n\tExternal calls sending eth:\n\t- doTransferOut(redeemer,vars.redeemAmount,true) (LPool.sol#2288)\n\t\t- to.transfer(amount) (LPool.sol#1782)\n\t\t- (success,returndata) = target.call{value: value}(data) (LPool.sol#1118)\n\tState variables written after the call(s):\n\t- accountTokens[redeemer] = vars.accountTokensNew (LPool.sol#2291)\n\t- totalSupply = vars.totalSupplyNew (LPool.sol#2290)\n\tEvent emitted after the call(s):\n\t- Redeem(redeemer,vars.redeemAmount,vars.redeemTokens) (LPool.sol#2295)\n\t- Transfer(redeemer,address(this),vars.redeemTokens) (LPool.sol#2294)\n",
            "name": "reentrancy-unlimited-gas",
            "check": "FP"
        },
        {
            "confidence": "High",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-OpenLeverage1.0/openleverage-contracts-e31d971bcb38ec8737cf1942b8fdf6a9452e5834/contracts/liquidity/LPool.sol",
            "impact": "Informational",
            "line": 549,
            "message": "Exponential.mantissaOne (LPool.sol#549) is never used in LPool (LPool.sol#1488-2491)\n",
            "name": "unused-state",
            "check": "FP"
        }
    ],
    "infos": [],
    "parser": {
        "id": "slither-0.10.0",
        "mode": "solidity",
        "version": "2024/04/30"
    }
}