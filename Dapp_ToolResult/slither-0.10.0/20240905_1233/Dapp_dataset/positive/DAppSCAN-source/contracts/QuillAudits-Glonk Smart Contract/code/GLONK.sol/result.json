{
    "errors": [],
    "fails": [],
    "findings": [
        {
            "confidence": "Medium",
            "contract": "GLONK",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Glonk Smart Contract/code/GLONK.sol",
            "function": "_transfer",
            "impact": "High",
            "line": 716,
            "line_end": 760,
            "message": "Reentrancy in GLONK._transfer(address,address,uint256) (GLONK.sol#716-760):\n\tExternal calls:\n\t- swapAndLiquify(contractTokenBalance) (GLONK.sol#747)\n\t\t- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (GLONK.sol#808-815)\n\t\t- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (GLONK.sol#794-800)\n\tExternal calls sending eth:\n\t- swapAndLiquify(contractTokenBalance) (GLONK.sol#747)\n\t\t- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (GLONK.sol#808-815)\n\tState variables written after the call(s):\n\t- _tokenTransfer(from,to,amount,takeFee) (GLONK.sol#759)\n\t\t- _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity) (GLONK.sol#672)\n\t\t- _rOwned[sender] = _rOwned[sender].sub(rAmount) (GLONK.sol#841)\n\t\t- _rOwned[sender] = _rOwned[sender].sub(rAmount) (GLONK.sol#850)\n\t\t- _rOwned[sender] = _rOwned[sender].sub(rAmount) (GLONK.sol#861)\n\t\t- _rOwned[sender] = _rOwned[sender].sub(rAmount) (GLONK.sol#588)\n\t\t- _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount) (GLONK.sol#842)\n\t\t- _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount) (GLONK.sol#862)\n\t\t- _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount) (GLONK.sol#852)\n\t\t- _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount) (GLONK.sol#590)\n\tGLONK._rOwned (GLONK.sol#413) can be used in cross function reentrancies:\n\t- GLONK._getCurrentSupply() (GLONK.sol#657-667)\n\t- GLONK._takeLiquidity(uint256) (GLONK.sol#669-675)\n\t- GLONK._transferBothExcluded(address,address,uint256) (GLONK.sol#585-594)\n\t- GLONK._transferFromExcluded(address,address,uint256) (GLONK.sol#858-866)\n\t- GLONK._transferStandard(address,address,uint256) (GLONK.sol#839-846)\n\t- GLONK._transferToExcluded(address,address,uint256) (GLONK.sol#848-856)\n\t- GLONK.balanceOf(address) (GLONK.sol#494-497)\n\t- GLONK.constructor() (GLONK.sol#460-476)\n\t- GLONK.deliver(uint256) (GLONK.sol#537-544)\n\t- GLONK.excludeFromReward(address) (GLONK.sol#563-571)\n\t- _tokenTransfer(from,to,amount,takeFee) (GLONK.sol#759)\n\t\t- _rTotal = _rTotal.sub(rFee) (GLONK.sol#627)\n\tGLONK._rTotal (GLONK.sol#424) can be used in cross function reentrancies:\n\t- GLONK._getCurrentSupply() (GLONK.sol#657-667)\n\t- GLONK._reflectFee(uint256,uint256) (GLONK.sol#626-629)\n\t- GLONK.constructor() (GLONK.sol#460-476)\n\t- GLONK.deliver(uint256) (GLONK.sol#537-544)\n\t- GLONK.tokenFromReflection(uint256) (GLONK.sol#557-561)\n\t- _tokenTransfer(from,to,amount,takeFee) (GLONK.sol#759)\n\t\t- _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity) (GLONK.sol#674)\n\t\t- _tOwned[sender] = _tOwned[sender].sub(tAmount) (GLONK.sol#587)\n\t\t- _tOwned[sender] = _tOwned[sender].sub(tAmount) (GLONK.sol#860)\n\t\t- _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount) (GLONK.sol#851)\n\t\t- _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount) (GLONK.sol#589)\n\tGLONK._tOwned (GLONK.sol#414) can be used in cross function reentrancies:\n\t- GLONK._getCurrentSupply() (GLONK.sol#657-667)\n\t- GLONK._takeLiquidity(uint256) (GLONK.sol#669-675)\n\t- GLONK._transferBothExcluded(address,address,uint256) (GLONK.sol#585-594)\n\t- GLONK._transferFromExcluded(address,address,uint256) (GLONK.sol#858-866)\n\t- GLONK._transferToExcluded(address,address,uint256) (GLONK.sol#848-856)\n\t- GLONK.balanceOf(address) (GLONK.sol#494-497)\n\t- GLONK.excludeFromReward(address) (GLONK.sol#563-571)\n\t- GLONK.includeInReward(address) (GLONK.sol#573-584)\n",
            "name": "reentrancy-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "GLONK",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Glonk Smart Contract/code/GLONK.sol",
            "function": "addLiquidity",
            "impact": "Medium",
            "line": 803,
            "line_end": 816,
            "message": "GLONK.addLiquidity(uint256,uint256) (GLONK.sol#803-816) ignores return value by uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (GLONK.sol#808-815)\n",
            "name": "unused-return",
            "check": "FP"
        },
        {
            "confidence": "High",
            "contract": "Ownable",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Glonk Smart Contract/code/GLONK.sol",
            "function": "owner",
            "impact": "Low",
            "line": 504,
            "message": "GLONK.allowance(address,address).owner (GLONK.sol#504) shadows:\n\t- Ownable.owner() (GLONK.sol#164-166) (function)\n",
            "name": "shadowing-local",
            "check": "FP"
        },
        {
            "confidence": "High",
            "contract": "Ownable",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Glonk Smart Contract/code/GLONK.sol",
            "function": "owner",
            "impact": "Low",
            "line": 708,
            "message": "GLONK._approve(address,address,uint256).owner (GLONK.sol#708) shadows:\n\t- Ownable.owner() (GLONK.sol#164-166) (function)\n",
            "name": "shadowing-local",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "GLONK",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Glonk Smart Contract/code/GLONK.sol",
            "function": "setLiquidityFeePercent",
            "impact": "Low",
            "line": 608,
            "line_end": 610,
            "message": "GLONK.setLiquidityFeePercent(uint256) (GLONK.sol#608-610) should emit an event for: \n\t- _liquidityFee = liquidityFee (GLONK.sol#609) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "GLONK",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Glonk Smart Contract/code/GLONK.sol",
            "function": "setMaxTxPercent",
            "impact": "Low",
            "line": 612,
            "line_end": 616,
            "message": "GLONK.setMaxTxPercent(uint256) (GLONK.sol#612-616) should emit an event for: \n\t- _maxTxAmount = _tTotal.mul(maxTxPercent).div(10 ** 2) (GLONK.sol#613-615) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "GLONK",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Glonk Smart Contract/code/GLONK.sol",
            "function": "setTaxFeePercent",
            "impact": "Low",
            "line": 604,
            "line_end": 606,
            "message": "GLONK.setTaxFeePercent(uint256) (GLONK.sol#604-606) should emit an event for: \n\t- _taxFee = taxFee (GLONK.sol#605) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "GLONK",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Glonk Smart Contract/code/GLONK.sol",
            "function": "transferFrom",
            "impact": "Low",
            "line": 513,
            "line_end": 517,
            "message": "Reentrancy in GLONK.transferFrom(address,address,uint256) (GLONK.sol#513-517):\n\tExternal calls:\n\t- _transfer(sender,recipient,amount) (GLONK.sol#514)\n\t\t- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (GLONK.sol#808-815)\n\t\t- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (GLONK.sol#794-800)\n\tExternal calls sending eth:\n\t- _transfer(sender,recipient,amount) (GLONK.sol#514)\n\t\t- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (GLONK.sol#808-815)\n\tState variables written after the call(s):\n\t- _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,ERC20: transfer amount exceeds allowance)) (GLONK.sol#515)\n\t\t- _allowances[owner][spender] = amount (GLONK.sol#712)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "GLONK",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Glonk Smart Contract/code/GLONK.sol",
            "function": "_transfer",
            "impact": "Low",
            "line": 716,
            "line_end": 760,
            "message": "Reentrancy in GLONK._transfer(address,address,uint256) (GLONK.sol#716-760):\n\tExternal calls:\n\t- swapAndLiquify(contractTokenBalance) (GLONK.sol#747)\n\t\t- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (GLONK.sol#808-815)\n\t\t- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (GLONK.sol#794-800)\n\tExternal calls sending eth:\n\t- swapAndLiquify(contractTokenBalance) (GLONK.sol#747)\n\t\t- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (GLONK.sol#808-815)\n\tState variables written after the call(s):\n\t- _tokenTransfer(from,to,amount,takeFee) (GLONK.sol#759)\n\t\t- _liquidityFee = _previousLiquidityFee (GLONK.sol#701)\n\t\t- _liquidityFee = 0 (GLONK.sol#696)\n\t- _tokenTransfer(from,to,amount,takeFee) (GLONK.sol#759)\n\t\t- _previousLiquidityFee = _liquidityFee (GLONK.sol#693)\n\t- _tokenTransfer(from,to,amount,takeFee) (GLONK.sol#759)\n\t\t- _previousTaxFee = _taxFee (GLONK.sol#692)\n\t- _tokenTransfer(from,to,amount,takeFee) (GLONK.sol#759)\n\t\t- _tFeeTotal = _tFeeTotal.add(tFee) (GLONK.sol#628)\n\t- _tokenTransfer(from,to,amount,takeFee) (GLONK.sol#759)\n\t\t- _taxFee = _previousTaxFee (GLONK.sol#700)\n\t\t- _taxFee = 0 (GLONK.sol#695)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "GLONK",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Glonk Smart Contract/code/GLONK.sol",
            "function": "swapAndLiquify",
            "impact": "Low",
            "line": 762,
            "line_end": 783,
            "message": "Reentrancy in GLONK.swapAndLiquify(uint256) (GLONK.sol#762-783):\n\tExternal calls:\n\t- swapTokensForEth(half) (GLONK.sol#774)\n\t\t- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (GLONK.sol#794-800)\n\t- addLiquidity(otherHalf,newBalance) (GLONK.sol#780)\n\t\t- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (GLONK.sol#808-815)\n\tExternal calls sending eth:\n\t- addLiquidity(otherHalf,newBalance) (GLONK.sol#780)\n\t\t- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (GLONK.sol#808-815)\n\tState variables written after the call(s):\n\t- addLiquidity(otherHalf,newBalance) (GLONK.sol#780)\n\t\t- _allowances[owner][spender] = amount (GLONK.sol#712)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "GLONK",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Glonk Smart Contract/code/GLONK.sol",
            "function": "_transfer",
            "impact": "Low",
            "line": 716,
            "line_end": 760,
            "message": "Reentrancy in GLONK._transfer(address,address,uint256) (GLONK.sol#716-760):\n\tExternal calls:\n\t- swapAndLiquify(contractTokenBalance) (GLONK.sol#747)\n\t\t- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (GLONK.sol#808-815)\n\t\t- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (GLONK.sol#794-800)\n\tExternal calls sending eth:\n\t- swapAndLiquify(contractTokenBalance) (GLONK.sol#747)\n\t\t- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (GLONK.sol#808-815)\n\tEvent emitted after the call(s):\n\t- Transfer(sender,recipient,tTransferAmount) (GLONK.sol#845)\n\t\t- _tokenTransfer(from,to,amount,takeFee) (GLONK.sol#759)\n\t- Transfer(sender,recipient,tTransferAmount) (GLONK.sol#855)\n\t\t- _tokenTransfer(from,to,amount,takeFee) (GLONK.sol#759)\n\t- Transfer(sender,recipient,tTransferAmount) (GLONK.sol#865)\n\t\t- _tokenTransfer(from,to,amount,takeFee) (GLONK.sol#759)\n\t- Transfer(sender,recipient,tTransferAmount) (GLONK.sol#593)\n\t\t- _tokenTransfer(from,to,amount,takeFee) (GLONK.sol#759)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "GLONK",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Glonk Smart Contract/code/GLONK.sol",
            "function": "swapAndLiquify",
            "impact": "Low",
            "line": 762,
            "line_end": 783,
            "message": "Reentrancy in GLONK.swapAndLiquify(uint256) (GLONK.sol#762-783):\n\tExternal calls:\n\t- swapTokensForEth(half) (GLONK.sol#774)\n\t\t- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (GLONK.sol#794-800)\n\t- addLiquidity(otherHalf,newBalance) (GLONK.sol#780)\n\t\t- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (GLONK.sol#808-815)\n\tExternal calls sending eth:\n\t- addLiquidity(otherHalf,newBalance) (GLONK.sol#780)\n\t\t- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (GLONK.sol#808-815)\n\tEvent emitted after the call(s):\n\t- Approval(owner,spender,amount) (GLONK.sol#713)\n\t\t- addLiquidity(otherHalf,newBalance) (GLONK.sol#780)\n\t- SwapAndLiquify(half,newBalance,otherHalf) (GLONK.sol#782)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "GLONK",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Glonk Smart Contract/code/GLONK.sol",
            "function": "transferFrom",
            "impact": "Low",
            "line": 513,
            "line_end": 517,
            "message": "Reentrancy in GLONK.transferFrom(address,address,uint256) (GLONK.sol#513-517):\n\tExternal calls:\n\t- _transfer(sender,recipient,amount) (GLONK.sol#514)\n\t\t- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (GLONK.sol#808-815)\n\t\t- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (GLONK.sol#794-800)\n\tExternal calls sending eth:\n\t- _transfer(sender,recipient,amount) (GLONK.sol#514)\n\t\t- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (GLONK.sol#808-815)\n\tEvent emitted after the call(s):\n\t- Approval(owner,spender,amount) (GLONK.sol#713)\n\t\t- _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,ERC20: transfer amount exceeds allowance)) (GLONK.sol#515)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Ownable",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Glonk Smart Contract/code/GLONK.sol",
            "function": "unlock",
            "impact": "Low",
            "line": 195,
            "line_end": 200,
            "message": "Ownable.unlock() (GLONK.sol#195-200) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(now > _lockTime,Contract is locked until 7 days) (GLONK.sol#197)\n",
            "name": "timestamp",
            "check": "TP"
        },
        {
            "confidence": "High",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Glonk Smart Contract/code/GLONK.sol",
            "impact": "Informational",
            "line": 2,
            "message": "Different versions of Solidity are used:\n\t- Version used: ['>=0.5.0', '>=0.6.2', '^0.6.12']\n\t- >=0.5.0 (GLONK.sol#2)\n\t- >=0.5.0 (GLONK.sol#3)\n\t- >=0.6.2 (GLONK.sol#4)\n\t- >=0.6.2 (GLONK.sol#5)\n\t- ^0.6.12 (GLONK.sol#1)\n",
            "name": "pragma",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "GLONK",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Glonk Smart Contract/code/GLONK.sol",
            "function": "includeInReward",
            "impact": "Informational",
            "line": 573,
            "line_end": 584,
            "message": "GLONK.includeInReward(address) (GLONK.sol#573-584) has costly operations inside a loop:\n\t- _excluded.pop() (GLONK.sol#580)\n",
            "name": "costly-loop",
            "check": "FP"
        },
        {
            "confidence": "High",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Glonk Smart Contract/code/GLONK.sol",
            "impact": "Informational",
            "line": 424,
            "message": "GLONK._rTotal (GLONK.sol#424) is set pre-construction with a non-constant function or state variable:\n\t- (MAX - (MAX % _tTotal))\n",
            "name": "function-init-state",
            "check": "FP"
        },
        {
            "confidence": "High",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Glonk Smart Contract/code/GLONK.sol",
            "impact": "Informational",
            "line": 432,
            "message": "GLONK._previousTaxFee (GLONK.sol#432) is set pre-construction with a non-constant function or state variable:\n\t- _taxFee\n",
            "name": "function-init-state",
            "check": "FP"
        },
        {
            "confidence": "High",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Glonk Smart Contract/code/GLONK.sol",
            "impact": "Informational",
            "line": 435,
            "message": "GLONK._previousLiquidityFee (GLONK.sol#435) is set pre-construction with a non-constant function or state variable:\n\t- _liquidityFee\n",
            "name": "function-init-state",
            "check": "FP"
        }
    ],
    "infos": [],
    "parser": {
        "id": "slither-0.10.0",
        "mode": "solidity",
        "version": "2024/04/30"
    }
}