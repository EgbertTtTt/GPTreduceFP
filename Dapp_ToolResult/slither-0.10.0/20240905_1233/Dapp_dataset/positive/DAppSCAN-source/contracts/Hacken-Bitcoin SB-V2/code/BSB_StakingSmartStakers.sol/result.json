{
    "errors": [],
    "fails": [],
    "findings": [
        {
            "confidence": "Medium",
            "contract": "BSB_StakingSmartStakers",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Hacken-Bitcoin SB-V2/code/BSB_StakingSmartStakers.sol",
            "function": "transferAnyERC20Tokens",
            "impact": "High",
            "line": 778,
            "line_end": 782,
            "message": "BSB_StakingSmartStakers.transferAnyERC20Tokens(address,address,uint256) (BSB_StakingSmartStakers.sol#778-782) ignores return value by Token(_tokenAddr).transfer(_to,_amount) (BSB_StakingSmartStakers.sol#780)\n",
            "name": "unchecked-transfer",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "BSB_StakingSmartStakers",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Hacken-Bitcoin SB-V2/code/BSB_StakingSmartStakers.sol",
            "function": "deposit",
            "impact": "Medium",
            "line": 565,
            "line_end": 603,
            "message": "Reentrancy in BSB_StakingSmartStakers.deposit(uint256) (BSB_StakingSmartStakers.sol#565-603):\n\tExternal calls:\n\t- require(bool,string)(Token(tokenDepositAddress).transferFrom(msg.sender,address(this),amountToStake),Insufficient Token Allowance) (BSB_StakingSmartStakers.sol#570)\n\t- require(bool,string)(updateAccount(msg.sender,true,false),Error updating account) (BSB_StakingSmartStakers.sol#573)\n\t\t- require(bool,string)(Token(tokenDepositAddress).transfer(account,toSend),Could not transfer tokens.) (BSB_StakingSmartStakers.sol#449)\n\t\t- require(bool,string)(Token(tokenDepositAddress).transfer(account,toSend),Could not transfer tokens.) (BSB_StakingSmartStakers.sol#493)\n\tState variables written after the call(s):\n\t- require(bool,string)(updateAccount(msg.sender,true,false),Error updating account) (BSB_StakingSmartStakers.sol#573)\n\t\t- depositedTokens[account] = depositedTokens[account].add(pendingDivs) (BSB_StakingSmartStakers.sol#458)\n\tBSB_StakingSmartStakers.depositedTokens (BSB_StakingSmartStakers.sol#351) can be used in cross function reentrancies:\n\t- BSB_StakingSmartStakers.deposit(uint256) (BSB_StakingSmartStakers.sol#565-603)\n\t- BSB_StakingSmartStakers.depositedTokens (BSB_StakingSmartStakers.sol#351)\n\t- BSB_StakingSmartStakers.end() (BSB_StakingSmartStakers.sol#387-404)\n\t- BSB_StakingSmartStakers.getClaimableAmount(address) (BSB_StakingSmartStakers.sol#784-815)\n\t- BSB_StakingSmartStakers.getMaxAmountWithdrawable(address) (BSB_StakingSmartStakers.sol#608-651)\n\t- BSB_StakingSmartStakers.getOnlyPendingRewards(address) (BSB_StakingSmartStakers.sol#537-559)\n\t- BSB_StakingSmartStakers.getPendingRewards(address) (BSB_StakingSmartStakers.sol#511-535)\n\t- BSB_StakingSmartStakers.getStakersList(uint256,uint256) (BSB_StakingSmartStakers.sol#754-773)\n\t- BSB_StakingSmartStakers.updateAccount(address,bool,bool) (BSB_StakingSmartStakers.sol#428-501)\n\t- BSB_StakingSmartStakers.withdraw(uint256) (BSB_StakingSmartStakers.sol#685-710)\n\t- BSB_StakingSmartStakers.withdraw2(uint256) (BSB_StakingSmartStakers.sol#656-680)\n\t- require(bool,string)(updateAccount(msg.sender,true,false),Error updating account) (BSB_StakingSmartStakers.sol#573)\n\t\t- lastClaimedTime[account] = block.timestamp (BSB_StakingSmartStakers.sol#499)\n\tBSB_StakingSmartStakers.lastClaimedTime (BSB_StakingSmartStakers.sol#355) can be used in cross function reentrancies:\n\t- BSB_StakingSmartStakers.claimDivs() (BSB_StakingSmartStakers.sol#747-752)\n\t- BSB_StakingSmartStakers.getOnlyPendingRewards(address) (BSB_StakingSmartStakers.sol#537-559)\n\t- BSB_StakingSmartStakers.getPendingRewards(address) (BSB_StakingSmartStakers.sol#511-535)\n\t- BSB_StakingSmartStakers.getStakersList(uint256,uint256) (BSB_StakingSmartStakers.sol#754-773)\n\t- BSB_StakingSmartStakers.getTimeToClaim(address) (BSB_StakingSmartStakers.sol#737-745)\n\t- BSB_StakingSmartStakers.lastClaimedTime (BSB_StakingSmartStakers.sol#355)\n\t- BSB_StakingSmartStakers.updateAccount(address,bool,bool) (BSB_StakingSmartStakers.sol#428-501)\n\t- require(bool,string)(updateAccount(msg.sender,true,false),Error updating account) (BSB_StakingSmartStakers.sol#573)\n\t\t- rewardEnded[account] = rewardEnded[account].sub(toSend) (BSB_StakingSmartStakers.sol#448)\n\tBSB_StakingSmartStakers.rewardEnded (BSB_StakingSmartStakers.sol#359) can be used in cross function reentrancies:\n\t- BSB_StakingSmartStakers.end() (BSB_StakingSmartStakers.sol#387-404)\n\t- BSB_StakingSmartStakers.getPendingRewards(address) (BSB_StakingSmartStakers.sol#511-535)\n\t- BSB_StakingSmartStakers.rewardEnded (BSB_StakingSmartStakers.sol#359)\n\t- BSB_StakingSmartStakers.updateAccount(address,bool,bool) (BSB_StakingSmartStakers.sol#428-501)\n\t- require(bool,string)(updateAccount(msg.sender,true,false),Error updating account) (BSB_StakingSmartStakers.sol#573)\n\t\t- totalClaimedRewards = totalClaimedRewards.add(toSend) (BSB_StakingSmartStakers.sol#451)\n\t\t- totalClaimedRewards = totalClaimedRewards.add(pendingDivs) (BSB_StakingSmartStakers.sol#468)\n\t\t- totalClaimedRewards = totalClaimedRewards.add(toSend) (BSB_StakingSmartStakers.sol#495)\n\tBSB_StakingSmartStakers.totalClaimedRewards (BSB_StakingSmartStakers.sol#345) can be used in cross function reentrancies:\n\t- BSB_StakingSmartStakers.getRewardsLeft() (BSB_StakingSmartStakers.sol#406-426)\n\t- BSB_StakingSmartStakers.totalClaimedRewards (BSB_StakingSmartStakers.sol#345)\n\t- BSB_StakingSmartStakers.updateAccount(address,bool,bool) (BSB_StakingSmartStakers.sol#428-501)\n\t- require(bool,string)(updateAccount(msg.sender,true,false),Error updating account) (BSB_StakingSmartStakers.sol#573)\n\t\t- unclaimed[account] = 0 (BSB_StakingSmartStakers.sol#460)\n\t\t- unclaimed[account] = pendingDivs (BSB_StakingSmartStakers.sol#470)\n\t\t- unclaimed[account] = unclaimed[account].add(toUnclaimed).sub(subUnclaimed) (BSB_StakingSmartStakers.sol#492)\n\tBSB_StakingSmartStakers.unclaimed (BSB_StakingSmartStakers.sol#378) can be used in cross function reentrancies:\n\t- BSB_StakingSmartStakers.end() (BSB_StakingSmartStakers.sol#387-404)\n\t- BSB_StakingSmartStakers.getPendingRewards(address) (BSB_StakingSmartStakers.sol#511-535)\n\t- BSB_StakingSmartStakers.unclaimed (BSB_StakingSmartStakers.sol#378)\n\t- BSB_StakingSmartStakers.updateAccount(address,bool,bool) (BSB_StakingSmartStakers.sol#428-501)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "BSB_StakingSmartStakers",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Hacken-Bitcoin SB-V2/code/BSB_StakingSmartStakers.sol",
            "function": "updateAccount",
            "impact": "Medium",
            "line": 428,
            "line_end": 501,
            "message": "Reentrancy in BSB_StakingSmartStakers.updateAccount(address,bool,bool) (BSB_StakingSmartStakers.sol#428-501):\n\tExternal calls:\n\t- require(bool,string)(Token(tokenDepositAddress).transfer(account,toSend),Could not transfer tokens.) (BSB_StakingSmartStakers.sol#449)\n\t- require(bool,string)(Token(tokenDepositAddress).transfer(account,toSend),Could not transfer tokens.) (BSB_StakingSmartStakers.sol#493)\n\tState variables written after the call(s):\n\t- lastClaimedTime[account] = block.timestamp (BSB_StakingSmartStakers.sol#499)\n\tBSB_StakingSmartStakers.lastClaimedTime (BSB_StakingSmartStakers.sol#355) can be used in cross function reentrancies:\n\t- BSB_StakingSmartStakers.claimDivs() (BSB_StakingSmartStakers.sol#747-752)\n\t- BSB_StakingSmartStakers.getOnlyPendingRewards(address) (BSB_StakingSmartStakers.sol#537-559)\n\t- BSB_StakingSmartStakers.getPendingRewards(address) (BSB_StakingSmartStakers.sol#511-535)\n\t- BSB_StakingSmartStakers.getStakersList(uint256,uint256) (BSB_StakingSmartStakers.sol#754-773)\n\t- BSB_StakingSmartStakers.getTimeToClaim(address) (BSB_StakingSmartStakers.sol#737-745)\n\t- BSB_StakingSmartStakers.lastClaimedTime (BSB_StakingSmartStakers.sol#355)\n\t- BSB_StakingSmartStakers.updateAccount(address,bool,bool) (BSB_StakingSmartStakers.sol#428-501)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "BSB_StakingSmartStakers",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Hacken-Bitcoin SB-V2/code/BSB_StakingSmartStakers.sol",
            "function": "deposit",
            "impact": "Medium",
            "line": 565,
            "line_end": 603,
            "message": "Reentrancy in BSB_StakingSmartStakers.deposit(uint256) (BSB_StakingSmartStakers.sol#565-603):\n\tExternal calls:\n\t- require(bool,string)(Token(tokenDepositAddress).transferFrom(msg.sender,address(this),amountToStake),Insufficient Token Allowance) (BSB_StakingSmartStakers.sol#570)\n\t- require(bool,string)(updateAccount(msg.sender,true,false),Error updating account) (BSB_StakingSmartStakers.sol#573)\n\t\t- require(bool,string)(Token(tokenDepositAddress).transfer(account,toSend),Could not transfer tokens.) (BSB_StakingSmartStakers.sol#449)\n\t\t- require(bool,string)(Token(tokenDepositAddress).transfer(account,toSend),Could not transfer tokens.) (BSB_StakingSmartStakers.sol#493)\n\t- require(bool,string)(Token(tokenDepositAddress).transfer(owner,fee),Could not transfer deposit fee.) (BSB_StakingSmartStakers.sol#578)\n\tState variables written after the call(s):\n\t- alreadyProgUnstaked[msg.sender] = 0 (BSB_StakingSmartStakers.sol#599)\n\tBSB_StakingSmartStakers.alreadyProgUnstaked (BSB_StakingSmartStakers.sol#364) can be used in cross function reentrancies:\n\t- BSB_StakingSmartStakers.alreadyProgUnstaked (BSB_StakingSmartStakers.sol#364)\n\t- BSB_StakingSmartStakers.deposit(uint256) (BSB_StakingSmartStakers.sol#565-603)\n\t- BSB_StakingSmartStakers.end() (BSB_StakingSmartStakers.sol#387-404)\n\t- BSB_StakingSmartStakers.getAPY(address) (BSB_StakingSmartStakers.sol#503-509)\n\t- BSB_StakingSmartStakers.getMaxAmountWithdrawable(address) (BSB_StakingSmartStakers.sol#608-651)\n\t- BSB_StakingSmartStakers.getTimeToWithdraw(address) (BSB_StakingSmartStakers.sol#712-735)\n\t- BSB_StakingSmartStakers.withdraw(uint256) (BSB_StakingSmartStakers.sol#685-710)\n\t- BSB_StakingSmartStakers.withdraw2(uint256) (BSB_StakingSmartStakers.sol#656-680)\n\t- availablePoolSize = availablePoolSize.sub(amountAfterFee) (BSB_StakingSmartStakers.sol#584)\n\tBSB_StakingSmartStakers.availablePoolSize (BSB_StakingSmartStakers.sol#338) can be used in cross function reentrancies:\n\t- BSB_StakingSmartStakers.availablePoolSize (BSB_StakingSmartStakers.sol#338)\n\t- BSB_StakingSmartStakers.deposit(uint256) (BSB_StakingSmartStakers.sol#565-603)\n\t- BSB_StakingSmartStakers.updateAccount(address,bool,bool) (BSB_StakingSmartStakers.sol#428-501)\n\t- BSB_StakingSmartStakers.withdraw(uint256) (BSB_StakingSmartStakers.sol#685-710)\n\t- BSB_StakingSmartStakers.withdraw2(uint256) (BSB_StakingSmartStakers.sol#656-680)\n\t- depositedTokens[msg.sender] = depositedTokens[msg.sender].add(amountAfterFee) (BSB_StakingSmartStakers.sol#580)\n\tBSB_StakingSmartStakers.depositedTokens (BSB_StakingSmartStakers.sol#351) can be used in cross function reentrancies:\n\t- BSB_StakingSmartStakers.deposit(uint256) (BSB_StakingSmartStakers.sol#565-603)\n\t- BSB_StakingSmartStakers.depositedTokens (BSB_StakingSmartStakers.sol#351)\n\t- BSB_StakingSmartStakers.end() (BSB_StakingSmartStakers.sol#387-404)\n\t- BSB_StakingSmartStakers.getClaimableAmount(address) (BSB_StakingSmartStakers.sol#784-815)\n\t- BSB_StakingSmartStakers.getMaxAmountWithdrawable(address) (BSB_StakingSmartStakers.sol#608-651)\n\t- BSB_StakingSmartStakers.getOnlyPendingRewards(address) (BSB_StakingSmartStakers.sol#537-559)\n\t- BSB_StakingSmartStakers.getPendingRewards(address) (BSB_StakingSmartStakers.sol#511-535)\n\t- BSB_StakingSmartStakers.getStakersList(uint256,uint256) (BSB_StakingSmartStakers.sol#754-773)\n\t- BSB_StakingSmartStakers.updateAccount(address,bool,bool) (BSB_StakingSmartStakers.sol#428-501)\n\t- BSB_StakingSmartStakers.withdraw(uint256) (BSB_StakingSmartStakers.sol#685-710)\n\t- BSB_StakingSmartStakers.withdraw2(uint256) (BSB_StakingSmartStakers.sol#656-680)\n\t- firstTime[msg.sender] = block.timestamp (BSB_StakingSmartStakers.sol#589)\n\tBSB_StakingSmartStakers.firstTime (BSB_StakingSmartStakers.sol#354) can be used in cross function reentrancies:\n\t- BSB_StakingSmartStakers.deposit(uint256) (BSB_StakingSmartStakers.sol#565-603)\n\t- BSB_StakingSmartStakers.firstTime (BSB_StakingSmartStakers.sol#354)\n\t- BSB_StakingSmartStakers.getAPY(address) (BSB_StakingSmartStakers.sol#503-509)\n\t- BSB_StakingSmartStakers.withdraw2(uint256) (BSB_StakingSmartStakers.sol#656-680)\n\t- firstTime[msg.sender] = block.timestamp (BSB_StakingSmartStakers.sol#596)\n\tBSB_StakingSmartStakers.firstTime (BSB_StakingSmartStakers.sol#354) can be used in cross function reentrancies:\n\t- BSB_StakingSmartStakers.deposit(uint256) (BSB_StakingSmartStakers.sol#565-603)\n\t- BSB_StakingSmartStakers.firstTime (BSB_StakingSmartStakers.sol#354)\n\t- BSB_StakingSmartStakers.getAPY(address) (BSB_StakingSmartStakers.sol#503-509)\n\t- BSB_StakingSmartStakers.withdraw2(uint256) (BSB_StakingSmartStakers.sol#656-680)\n\t- maxDepositedTokens[msg.sender] = depositedTokens[msg.sender] (BSB_StakingSmartStakers.sol#582)\n\tBSB_StakingSmartStakers.maxDepositedTokens (BSB_StakingSmartStakers.sol#352) can be used in cross function reentrancies:\n\t- BSB_StakingSmartStakers.deposit(uint256) (BSB_StakingSmartStakers.sol#565-603)\n\t- BSB_StakingSmartStakers.getClaimableAmount(address) (BSB_StakingSmartStakers.sol#784-815)\n\t- BSB_StakingSmartStakers.maxDepositedTokens (BSB_StakingSmartStakers.sol#352)\n\t- BSB_StakingSmartStakers.updateAccount(address,bool,bool) (BSB_StakingSmartStakers.sol#428-501)\n\t- totalDeposited = totalDeposited.add(amountAfterFee) (BSB_StakingSmartStakers.sol#585)\n\tBSB_StakingSmartStakers.totalDeposited (BSB_StakingSmartStakers.sol#346) can be used in cross function reentrancies:\n\t- BSB_StakingSmartStakers.deposit(uint256) (BSB_StakingSmartStakers.sol#565-603)\n\t- BSB_StakingSmartStakers.totalDeposited (BSB_StakingSmartStakers.sol#346)\n\t- BSB_StakingSmartStakers.updateAccount(address,bool,bool) (BSB_StakingSmartStakers.sol#428-501)\n\t- BSB_StakingSmartStakers.withdraw(uint256) (BSB_StakingSmartStakers.sol#685-710)\n\t- BSB_StakingSmartStakers.withdraw2(uint256) (BSB_StakingSmartStakers.sol#656-680)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "BSB_StakingSmartStakers",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Hacken-Bitcoin SB-V2/code/BSB_StakingSmartStakers.sol",
            "function": "withdraw",
            "impact": "Medium",
            "line": 685,
            "line_end": 710,
            "message": "Reentrancy in BSB_StakingSmartStakers.withdraw(uint256) (BSB_StakingSmartStakers.sol#685-710):\n\tExternal calls:\n\t- updateAccount(msg.sender,false,true) (BSB_StakingSmartStakers.sol#695)\n\t\t- require(bool,string)(Token(tokenDepositAddress).transfer(account,toSend),Could not transfer tokens.) (BSB_StakingSmartStakers.sol#449)\n\t\t- require(bool,string)(Token(tokenDepositAddress).transfer(account,toSend),Could not transfer tokens.) (BSB_StakingSmartStakers.sol#493)\n\t- require(bool,string)(Token(tokenDepositAddress).transfer(owner,fee),Could not transfer withdraw fee.) (BSB_StakingSmartStakers.sol#700)\n\t- require(bool,string)(Token(tokenDepositAddress).transfer(msg.sender,amountAfterFee),Could not transfer tokens.) (BSB_StakingSmartStakers.sol#701)\n\tState variables written after the call(s):\n\t- availablePoolSize = availablePoolSize.add(amountToWithdraw) (BSB_StakingSmartStakers.sol#704)\n\tBSB_StakingSmartStakers.availablePoolSize (BSB_StakingSmartStakers.sol#338) can be used in cross function reentrancies:\n\t- BSB_StakingSmartStakers.availablePoolSize (BSB_StakingSmartStakers.sol#338)\n\t- BSB_StakingSmartStakers.deposit(uint256) (BSB_StakingSmartStakers.sol#565-603)\n\t- BSB_StakingSmartStakers.updateAccount(address,bool,bool) (BSB_StakingSmartStakers.sol#428-501)\n\t- BSB_StakingSmartStakers.withdraw(uint256) (BSB_StakingSmartStakers.sol#685-710)\n\t- BSB_StakingSmartStakers.withdraw2(uint256) (BSB_StakingSmartStakers.sol#656-680)\n\t- depositedTokens[msg.sender] = depositedTokens[msg.sender].sub(amountToWithdraw) (BSB_StakingSmartStakers.sol#703)\n\tBSB_StakingSmartStakers.depositedTokens (BSB_StakingSmartStakers.sol#351) can be used in cross function reentrancies:\n\t- BSB_StakingSmartStakers.deposit(uint256) (BSB_StakingSmartStakers.sol#565-603)\n\t- BSB_StakingSmartStakers.depositedTokens (BSB_StakingSmartStakers.sol#351)\n\t- BSB_StakingSmartStakers.end() (BSB_StakingSmartStakers.sol#387-404)\n\t- BSB_StakingSmartStakers.getClaimableAmount(address) (BSB_StakingSmartStakers.sol#784-815)\n\t- BSB_StakingSmartStakers.getMaxAmountWithdrawable(address) (BSB_StakingSmartStakers.sol#608-651)\n\t- BSB_StakingSmartStakers.getOnlyPendingRewards(address) (BSB_StakingSmartStakers.sol#537-559)\n\t- BSB_StakingSmartStakers.getPendingRewards(address) (BSB_StakingSmartStakers.sol#511-535)\n\t- BSB_StakingSmartStakers.getStakersList(uint256,uint256) (BSB_StakingSmartStakers.sol#754-773)\n\t- BSB_StakingSmartStakers.updateAccount(address,bool,bool) (BSB_StakingSmartStakers.sol#428-501)\n\t- BSB_StakingSmartStakers.withdraw(uint256) (BSB_StakingSmartStakers.sol#685-710)\n\t- BSB_StakingSmartStakers.withdraw2(uint256) (BSB_StakingSmartStakers.sol#656-680)\n\t- totalDeposited = totalDeposited.sub(amountToWithdraw) (BSB_StakingSmartStakers.sol#705)\n\tBSB_StakingSmartStakers.totalDeposited (BSB_StakingSmartStakers.sol#346) can be used in cross function reentrancies:\n\t- BSB_StakingSmartStakers.deposit(uint256) (BSB_StakingSmartStakers.sol#565-603)\n\t- BSB_StakingSmartStakers.totalDeposited (BSB_StakingSmartStakers.sol#346)\n\t- BSB_StakingSmartStakers.updateAccount(address,bool,bool) (BSB_StakingSmartStakers.sol#428-501)\n\t- BSB_StakingSmartStakers.withdraw(uint256) (BSB_StakingSmartStakers.sol#685-710)\n\t- BSB_StakingSmartStakers.withdraw2(uint256) (BSB_StakingSmartStakers.sol#656-680)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "BSB_StakingSmartStakers",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Hacken-Bitcoin SB-V2/code/BSB_StakingSmartStakers.sol",
            "function": "withdraw2",
            "impact": "Medium",
            "line": 656,
            "line_end": 680,
            "message": "Reentrancy in BSB_StakingSmartStakers.withdraw2(uint256) (BSB_StakingSmartStakers.sol#656-680):\n\tExternal calls:\n\t- updateAccount(msg.sender,false,true) (BSB_StakingSmartStakers.sol#666)\n\t\t- require(bool,string)(Token(tokenDepositAddress).transfer(account,toSend),Could not transfer tokens.) (BSB_StakingSmartStakers.sol#449)\n\t\t- require(bool,string)(Token(tokenDepositAddress).transfer(account,toSend),Could not transfer tokens.) (BSB_StakingSmartStakers.sol#493)\n\t- require(bool,string)(Token(tokenDepositAddress).transfer(owner,fee),Could not transfer withdraw fee.) (BSB_StakingSmartStakers.sol#668)\n\t- require(bool,string)(Token(tokenDepositAddress).transfer(msg.sender,amountAfterFee),Could not transfer tokens.) (BSB_StakingSmartStakers.sol#669)\n\tState variables written after the call(s):\n\t- availablePoolSize = availablePoolSize.add(amountToWithdraw) (BSB_StakingSmartStakers.sol#672)\n\tBSB_StakingSmartStakers.availablePoolSize (BSB_StakingSmartStakers.sol#338) can be used in cross function reentrancies:\n\t- BSB_StakingSmartStakers.availablePoolSize (BSB_StakingSmartStakers.sol#338)\n\t- BSB_StakingSmartStakers.deposit(uint256) (BSB_StakingSmartStakers.sol#565-603)\n\t- BSB_StakingSmartStakers.updateAccount(address,bool,bool) (BSB_StakingSmartStakers.sol#428-501)\n\t- BSB_StakingSmartStakers.withdraw(uint256) (BSB_StakingSmartStakers.sol#685-710)\n\t- BSB_StakingSmartStakers.withdraw2(uint256) (BSB_StakingSmartStakers.sol#656-680)\n\t- depositedTokens[msg.sender] = depositedTokens[msg.sender].sub(amountToWithdraw) (BSB_StakingSmartStakers.sol#671)\n\tBSB_StakingSmartStakers.depositedTokens (BSB_StakingSmartStakers.sol#351) can be used in cross function reentrancies:\n\t- BSB_StakingSmartStakers.deposit(uint256) (BSB_StakingSmartStakers.sol#565-603)\n\t- BSB_StakingSmartStakers.depositedTokens (BSB_StakingSmartStakers.sol#351)\n\t- BSB_StakingSmartStakers.end() (BSB_StakingSmartStakers.sol#387-404)\n\t- BSB_StakingSmartStakers.getClaimableAmount(address) (BSB_StakingSmartStakers.sol#784-815)\n\t- BSB_StakingSmartStakers.getMaxAmountWithdrawable(address) (BSB_StakingSmartStakers.sol#608-651)\n\t- BSB_StakingSmartStakers.getOnlyPendingRewards(address) (BSB_StakingSmartStakers.sol#537-559)\n\t- BSB_StakingSmartStakers.getPendingRewards(address) (BSB_StakingSmartStakers.sol#511-535)\n\t- BSB_StakingSmartStakers.getStakersList(uint256,uint256) (BSB_StakingSmartStakers.sol#754-773)\n\t- BSB_StakingSmartStakers.updateAccount(address,bool,bool) (BSB_StakingSmartStakers.sol#428-501)\n\t- BSB_StakingSmartStakers.withdraw(uint256) (BSB_StakingSmartStakers.sol#685-710)\n\t- BSB_StakingSmartStakers.withdraw2(uint256) (BSB_StakingSmartStakers.sol#656-680)\n\t- firstTime[msg.sender] = 0 (BSB_StakingSmartStakers.sol#677)\n\tBSB_StakingSmartStakers.firstTime (BSB_StakingSmartStakers.sol#354) can be used in cross function reentrancies:\n\t- BSB_StakingSmartStakers.deposit(uint256) (BSB_StakingSmartStakers.sol#565-603)\n\t- BSB_StakingSmartStakers.firstTime (BSB_StakingSmartStakers.sol#354)\n\t- BSB_StakingSmartStakers.getAPY(address) (BSB_StakingSmartStakers.sol#503-509)\n\t- BSB_StakingSmartStakers.withdraw2(uint256) (BSB_StakingSmartStakers.sol#656-680)\n\t- totalDeposited = totalDeposited.sub(amountToWithdraw) (BSB_StakingSmartStakers.sol#673)\n\tBSB_StakingSmartStakers.totalDeposited (BSB_StakingSmartStakers.sol#346) can be used in cross function reentrancies:\n\t- BSB_StakingSmartStakers.deposit(uint256) (BSB_StakingSmartStakers.sol#565-603)\n\t- BSB_StakingSmartStakers.totalDeposited (BSB_StakingSmartStakers.sol#346)\n\t- BSB_StakingSmartStakers.updateAccount(address,bool,bool) (BSB_StakingSmartStakers.sol#428-501)\n\t- BSB_StakingSmartStakers.withdraw(uint256) (BSB_StakingSmartStakers.sol#685-710)\n\t- BSB_StakingSmartStakers.withdraw2(uint256) (BSB_StakingSmartStakers.sol#656-680)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "BSB_StakingSmartStakers",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Hacken-Bitcoin SB-V2/code/BSB_StakingSmartStakers.sol",
            "function": "withdraw2",
            "impact": "Medium",
            "line": 656,
            "line_end": 680,
            "message": "BSB_StakingSmartStakers.withdraw2(uint256) (BSB_StakingSmartStakers.sol#656-680) ignores return value by holders.remove(msg.sender) (BSB_StakingSmartStakers.sol#676)\n",
            "name": "unused-return",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "BSB_StakingSmartStakers",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Hacken-Bitcoin SB-V2/code/BSB_StakingSmartStakers.sol",
            "function": "deposit",
            "impact": "Medium",
            "line": 565,
            "line_end": 603,
            "message": "BSB_StakingSmartStakers.deposit(uint256) (BSB_StakingSmartStakers.sol#565-603) ignores return value by holders.add(msg.sender) (BSB_StakingSmartStakers.sol#588)\n",
            "name": "unused-return",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "BSB_StakingSmartStakers",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Hacken-Bitcoin SB-V2/code/BSB_StakingSmartStakers.sol",
            "function": "deposit",
            "impact": "Low",
            "line": 565,
            "line_end": 603,
            "message": "BSB_StakingSmartStakers.deposit(uint256) (BSB_StakingSmartStakers.sol#565-603) should emit an event for: \n\t- availablePoolSize = availablePoolSize.sub(amountAfterFee) (BSB_StakingSmartStakers.sol#584) \n\t- totalDeposited = totalDeposited.add(amountAfterFee) (BSB_StakingSmartStakers.sol#585) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "BSB_StakingSmartStakers",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Hacken-Bitcoin SB-V2/code/BSB_StakingSmartStakers.sol",
            "function": "withdraw2",
            "impact": "Low",
            "line": 656,
            "line_end": 680,
            "message": "BSB_StakingSmartStakers.withdraw2(uint256) (BSB_StakingSmartStakers.sol#656-680) should emit an event for: \n\t- availablePoolSize = availablePoolSize.add(amountToWithdraw) (BSB_StakingSmartStakers.sol#672) \n\t- totalDeposited = totalDeposited.sub(amountToWithdraw) (BSB_StakingSmartStakers.sol#673) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "BSB_StakingSmartStakers",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Hacken-Bitcoin SB-V2/code/BSB_StakingSmartStakers.sol",
            "function": "withdraw",
            "impact": "Low",
            "line": 685,
            "line_end": 710,
            "message": "BSB_StakingSmartStakers.withdraw(uint256) (BSB_StakingSmartStakers.sol#685-710) should emit an event for: \n\t- availablePoolSize = availablePoolSize.add(amountToWithdraw) (BSB_StakingSmartStakers.sol#704) \n\t- totalDeposited = totalDeposited.sub(amountToWithdraw) (BSB_StakingSmartStakers.sol#705) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "BSB_StakingSmartStakers",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Hacken-Bitcoin SB-V2/code/BSB_StakingSmartStakers.sol",
            "function": "updateAccount",
            "impact": "Low",
            "line": 428,
            "line_end": 501,
            "message": "Reentrancy in BSB_StakingSmartStakers.updateAccount(address,bool,bool) (BSB_StakingSmartStakers.sol#428-501):\n\tExternal calls:\n\t- require(bool,string)(Token(tokenDepositAddress).transfer(account,toSend),Could not transfer tokens.) (BSB_StakingSmartStakers.sol#493)\n\tState variables written after the call(s):\n\t- totalClaimedRewards = totalClaimedRewards.add(toSend) (BSB_StakingSmartStakers.sol#495)\n\t- totalEarnedTokens[account] = totalEarnedTokens[account].add(toSend) (BSB_StakingSmartStakers.sol#494)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "BSB_StakingSmartStakers",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Hacken-Bitcoin SB-V2/code/BSB_StakingSmartStakers.sol",
            "function": "deposit",
            "impact": "Low",
            "line": 565,
            "line_end": 603,
            "message": "Reentrancy in BSB_StakingSmartStakers.deposit(uint256) (BSB_StakingSmartStakers.sol#565-603):\n\tExternal calls:\n\t- require(bool,string)(Token(tokenDepositAddress).transferFrom(msg.sender,address(this),amountToStake),Insufficient Token Allowance) (BSB_StakingSmartStakers.sol#570)\n\t- require(bool,string)(updateAccount(msg.sender,true,false),Error updating account) (BSB_StakingSmartStakers.sol#573)\n\t\t- require(bool,string)(Token(tokenDepositAddress).transfer(account,toSend),Could not transfer tokens.) (BSB_StakingSmartStakers.sol#449)\n\t\t- require(bool,string)(Token(tokenDepositAddress).transfer(account,toSend),Could not transfer tokens.) (BSB_StakingSmartStakers.sol#493)\n\t- require(bool,string)(Token(tokenDepositAddress).transfer(owner,fee),Could not transfer deposit fee.) (BSB_StakingSmartStakers.sol#578)\n\tState variables written after the call(s):\n\t- amountPerInterval[msg.sender] = 0 (BSB_StakingSmartStakers.sol#594)\n\t- stakingTime[msg.sender] = block.timestamp (BSB_StakingSmartStakers.sol#601)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "BSB_StakingSmartStakers",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Hacken-Bitcoin SB-V2/code/BSB_StakingSmartStakers.sol",
            "function": "updateAccount",
            "impact": "Low",
            "line": 428,
            "line_end": 501,
            "message": "Reentrancy in BSB_StakingSmartStakers.updateAccount(address,bool,bool) (BSB_StakingSmartStakers.sol#428-501):\n\tExternal calls:\n\t- require(bool,string)(Token(tokenDepositAddress).transfer(account,toSend),Could not transfer tokens.) (BSB_StakingSmartStakers.sol#449)\n\tState variables written after the call(s):\n\t- totalClaimedRewards = totalClaimedRewards.add(toSend) (BSB_StakingSmartStakers.sol#451)\n\t- totalEarnedTokens[account] = totalEarnedTokens[account].add(toSend) (BSB_StakingSmartStakers.sol#450)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "BSB_StakingSmartStakers",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Hacken-Bitcoin SB-V2/code/BSB_StakingSmartStakers.sol",
            "function": "withdraw",
            "impact": "Low",
            "line": 685,
            "line_end": 710,
            "message": "Reentrancy in BSB_StakingSmartStakers.withdraw(uint256) (BSB_StakingSmartStakers.sol#685-710):\n\tExternal calls:\n\t- updateAccount(msg.sender,false,true) (BSB_StakingSmartStakers.sol#695)\n\t\t- require(bool,string)(Token(tokenDepositAddress).transfer(account,toSend),Could not transfer tokens.) (BSB_StakingSmartStakers.sol#449)\n\t\t- require(bool,string)(Token(tokenDepositAddress).transfer(account,toSend),Could not transfer tokens.) (BSB_StakingSmartStakers.sol#493)\n\t- require(bool,string)(Token(tokenDepositAddress).transfer(owner,fee),Could not transfer withdraw fee.) (BSB_StakingSmartStakers.sol#700)\n\t- require(bool,string)(Token(tokenDepositAddress).transfer(msg.sender,amountAfterFee),Could not transfer tokens.) (BSB_StakingSmartStakers.sol#701)\n\tState variables written after the call(s):\n\t- progressiveTime[msg.sender] = block.timestamp (BSB_StakingSmartStakers.sol#707)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "BSB_StakingSmartStakers",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Hacken-Bitcoin SB-V2/code/BSB_StakingSmartStakers.sol",
            "function": "getRewardsLeft",
            "impact": "Low",
            "line": 406,
            "line_end": 426,
            "message": "BSB_StakingSmartStakers.getRewardsLeft() (BSB_StakingSmartStakers.sol#406-426) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- totalRewards > totalClaimedRewards.add(totalPending) (BSB_StakingSmartStakers.sol#417)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "BSB_StakingSmartStakers",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Hacken-Bitcoin SB-V2/code/BSB_StakingSmartStakers.sol",
            "function": "deposit",
            "impact": "Low",
            "line": 565,
            "line_end": 603,
            "message": "BSB_StakingSmartStakers.deposit(uint256) (BSB_StakingSmartStakers.sol#565-603) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(amountAfterFee <= availablePoolSize,No space available) (BSB_StakingSmartStakers.sol#577)\n\t- depositedTokens[msg.sender] > maxDepositedTokens[msg.sender] (BSB_StakingSmartStakers.sol#581)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "BSB_StakingSmartStakers",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Hacken-Bitcoin SB-V2/code/BSB_StakingSmartStakers.sol",
            "function": "getPendingRewards",
            "impact": "Low",
            "line": 511,
            "line_end": 535,
            "message": "BSB_StakingSmartStakers.getPendingRewards(address) (BSB_StakingSmartStakers.sol#511-535) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- depositedTokens[_holder] == 0 && unclaimed[_holder] == 0 && ! ended (BSB_StakingSmartStakers.sol#513)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "BSB_StakingSmartStakers",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Hacken-Bitcoin SB-V2/code/BSB_StakingSmartStakers.sol",
            "function": "getAPY",
            "impact": "Low",
            "line": 503,
            "line_end": 509,
            "message": "BSB_StakingSmartStakers.getAPY(address) (BSB_StakingSmartStakers.sol#503-509) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp.sub(firstTime[_staker]) > unstakeTime && alreadyProgUnstaked[_staker] == 0 && ! ended (BSB_StakingSmartStakers.sol#505)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "BSB_StakingSmartStakers",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Hacken-Bitcoin SB-V2/code/BSB_StakingSmartStakers.sol",
            "function": "getClaimableAmount",
            "impact": "Low",
            "line": 784,
            "line_end": 815,
            "message": "BSB_StakingSmartStakers.getClaimableAmount(address) (BSB_StakingSmartStakers.sol#784-815) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- depositedTokens[account].mul(percent_claim).div(100) < pendingDivs (BSB_StakingSmartStakers.sol#788)\n\t- pendingDivs > 0 (BSB_StakingSmartStakers.sol#792)\n\t- depositedTokens[account] == 0 (BSB_StakingSmartStakers.sol#794)\n\t- maxDepositedTokens[account].mul(percent_claim).div(100) > pendingDivs (BSB_StakingSmartStakers.sol#796)\n\t- depositedTokens[account] == 0 (BSB_StakingSmartStakers.sol#804)\n\t- maxDepositedTokens[account].mul(percent_claim).div(100) > pendingDivs (BSB_StakingSmartStakers.sol#806)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "BSB_StakingSmartStakers",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Hacken-Bitcoin SB-V2/code/BSB_StakingSmartStakers.sol",
            "function": "updateAccount",
            "impact": "Low",
            "line": 428,
            "line_end": 501,
            "message": "BSB_StakingSmartStakers.updateAccount(address,bool,bool) (BSB_StakingSmartStakers.sol#428-501) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- depositedTokens[account].mul(percent_claim).div(100) < pendingDivs (BSB_StakingSmartStakers.sol#432)\n\t- pendingDivs > 0 (BSB_StakingSmartStakers.sol#436)\n\t- depositedTokens[account] == 0 (BSB_StakingSmartStakers.sol#440)\n\t- maxDepositedTokens[account].mul(percent_claim).div(100) > pendingDivs (BSB_StakingSmartStakers.sol#442)\n\t- require(bool,string)(Token(tokenDepositAddress).transfer(account,toSend),Could not transfer tokens.) (BSB_StakingSmartStakers.sol#449)\n\t- require(bool,string)(pendingDivs <= availablePoolSize,No spot available) (BSB_StakingSmartStakers.sol#457)\n\t- depositedTokens[account] > maxDepositedTokens[account] (BSB_StakingSmartStakers.sol#462)\n\t- depositedTokens[account] == 0 (BSB_StakingSmartStakers.sol#473)\n\t- maxDepositedTokens[account].mul(percent_claim).div(100) > pendingDivs (BSB_StakingSmartStakers.sol#475)\n\t- toSend > pendingWithoutUnclaimed (BSB_StakingSmartStakers.sol#484)\n\t- require(bool,string)(Token(tokenDepositAddress).transfer(account,toSend),Could not transfer tokens.) (BSB_StakingSmartStakers.sol#493)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "BSB_StakingSmartStakers",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Hacken-Bitcoin SB-V2/code/BSB_StakingSmartStakers.sol",
            "function": "withdraw2",
            "impact": "Low",
            "line": 656,
            "line_end": 680,
            "message": "BSB_StakingSmartStakers.withdraw2(uint256) (BSB_StakingSmartStakers.sol#656-680) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- holders.contains(msg.sender) && depositedTokens[msg.sender] == 0 && getPendingRewards(msg.sender) == 0 (BSB_StakingSmartStakers.sol#675)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "BSB_StakingSmartStakers",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Hacken-Bitcoin SB-V2/code/BSB_StakingSmartStakers.sol",
            "function": "getOnlyPendingRewards",
            "impact": "Low",
            "line": 537,
            "line_end": 559,
            "message": "BSB_StakingSmartStakers.getOnlyPendingRewards(address) (BSB_StakingSmartStakers.sol#537-559) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- depositedTokens[_holder] == 0 || ended (BSB_StakingSmartStakers.sol#539)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "BSB_StakingSmartStakers",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Hacken-Bitcoin SB-V2/code/BSB_StakingSmartStakers.sol",
            "function": "getTimeToWithdraw",
            "impact": "Low",
            "line": 712,
            "line_end": 735,
            "message": "BSB_StakingSmartStakers.getTimeToWithdraw(address) (BSB_StakingSmartStakers.sol#712-735) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp <= _time.add(unstakeTime) (BSB_StakingSmartStakers.sol#719)\n\t- block.timestamp < _time.add(duration_interval.mul(i)) (BSB_StakingSmartStakers.sol#727)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "BSB_StakingSmartStakers",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Hacken-Bitcoin SB-V2/code/BSB_StakingSmartStakers.sol",
            "function": "getTimeToClaim",
            "impact": "Low",
            "line": 737,
            "line_end": 745,
            "message": "BSB_StakingSmartStakers.getTimeToClaim(address) (BSB_StakingSmartStakers.sol#737-745) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- lastClaimedTime[_staker].add(claimTime) > block.timestamp (BSB_StakingSmartStakers.sol#740)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "BSB_StakingSmartStakers",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Hacken-Bitcoin SB-V2/code/BSB_StakingSmartStakers.sol",
            "function": "withdraw",
            "impact": "Low",
            "line": 685,
            "line_end": 710,
            "message": "BSB_StakingSmartStakers.withdraw(uint256) (BSB_StakingSmartStakers.sol#685-710) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(depositedTokens[msg.sender].div(number_intervals) >= amountToWithdraw,Invalid amount to withdraw) (BSB_StakingSmartStakers.sol#689)\n\t- require(bool,string)(block.timestamp.sub(stakingTime[msg.sender]) > unstakeTime || ended,You recently staked, please wait before withdrawing.) (BSB_StakingSmartStakers.sol#691)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "BSB_StakingSmartStakers",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Hacken-Bitcoin SB-V2/code/BSB_StakingSmartStakers.sol",
            "function": "getMaxAmountWithdrawable",
            "impact": "Low",
            "line": 608,
            "line_end": 651,
            "message": "BSB_StakingSmartStakers.getMaxAmountWithdrawable(address) (BSB_StakingSmartStakers.sol#608-651) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp.sub(stakingTime[msg.sender]) < unstakeTime && ! ended && alreadyProgUnstaked[_staker] == 0 (BSB_StakingSmartStakers.sol#610)\n\t- block.timestamp.sub(stakingTime[msg.sender]) > unstakeTime (BSB_StakingSmartStakers.sol#614)\n\t- block.timestamp < _time.add(duration_interval) (BSB_StakingSmartStakers.sol#621)\n\t- _numIntervals == 0 (BSB_StakingSmartStakers.sol#628)\n\t- _numIntervals > number_intervals (BSB_StakingSmartStakers.sol#636)\n\t- _numIntervals.mul(amountPerInterval[_staker]) > alreadyProgUnstaked[_staker] (BSB_StakingSmartStakers.sol#640)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "BSB_StakingSmartStakers",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Hacken-Bitcoin SB-V2/code/BSB_StakingSmartStakers.sol",
            "function": "claimDivs",
            "impact": "Low",
            "line": 747,
            "line_end": 752,
            "message": "BSB_StakingSmartStakers.claimDivs() (BSB_StakingSmartStakers.sol#747-752) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(block.timestamp.sub(lastClaimedTime[msg.sender]) > claimTime,Not yet) (BSB_StakingSmartStakers.sol#749)\n",
            "name": "timestamp",
            "check": "FP"
        }
    ],
    "infos": [],
    "parser": {
        "id": "slither-0.10.0",
        "mode": "solidity",
        "version": "2024/04/30"
    }
}