{
    "errors": [],
    "fails": [],
    "findings": [
        {
            "confidence": "Medium",
            "contract": "LimitOrderProtocol",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-1inch-Limit Order Protocol/limit-order-protocol-a14bde6a260458de5083cee117d734221e1cbc05/contracts/LimitOrderProtocol.sol",
            "function": "fillOrderTo",
            "impact": "High",
            "line": 1640,
            "line_end": 1706,
            "message": "Reentrancy in LimitOrderProtocol.fillOrderTo(LimitOrderProtocol.Order,bytes,uint256,uint256,uint256,address) (LimitOrderProtocol.sol#1640-1706):\n\tExternal calls:\n\t- _permit(order.permit) (LimitOrderProtocol.sol#1660)\n\t\t- (success,returndata) = target.call{value: value}(data) (LimitOrderProtocol.sol#381)\n\t\t- token.uncheckedFunctionCall(abi.encodePacked(IERC20Permit.permit.selector,permit),LOP: permit failed) (LimitOrderProtocol.sol#1710)\n\tExternal calls sending eth:\n\t- _permit(order.permit) (LimitOrderProtocol.sol#1660)\n\t\t- (success,returndata) = target.call{value: value}(data) (LimitOrderProtocol.sol#381)\n\tState variables written after the call(s):\n\t- _remaining[orderHash] = remainingMakerAmount + 1 (LimitOrderProtocol.sol#1688)\n\tLimitOrderProtocol._remaining (LimitOrderProtocol.sol#1453) can be used in cross function reentrancies:\n\t- LimitOrderProtocol.cancelOrder(LimitOrderProtocol.Order) (LimitOrderProtocol.sol#1516-1522)\n\t- LimitOrderProtocol.fillOrderTo(LimitOrderProtocol.Order,bytes,uint256,uint256,uint256,address) (LimitOrderProtocol.sol#1640-1706)\n\t- LimitOrderProtocol.remaining(bytes32) (LimitOrderProtocol.sol#1462-1464)\n\t- LimitOrderProtocol.remainingRaw(bytes32) (LimitOrderProtocol.sol#1468-1470)\n\t- LimitOrderProtocol.remainingsRaw(bytes32[]) (LimitOrderProtocol.sol#1473-1478)\n",
            "name": "reentrancy-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "LimitOrderProtocol",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-1inch-Limit Order Protocol/limit-order-protocol-a14bde6a260458de5083cee117d734221e1cbc05/contracts/LimitOrderProtocol.sol",
            "function": "_permit",
            "impact": "Medium",
            "line": 1708,
            "line_end": 1711,
            "message": "LimitOrderProtocol._permit(bytes) (LimitOrderProtocol.sol#1708-1711) ignores return value by token.uncheckedFunctionCall(abi.encodePacked(IERC20Permit.permit.selector,permit),LOP: permit failed) (LimitOrderProtocol.sol#1710)\n",
            "name": "unused-return",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "LimitOrderProtocol",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-1inch-Limit Order Protocol/limit-order-protocol-a14bde6a260458de5083cee117d734221e1cbc05/contracts/LimitOrderProtocol.sol",
            "function": "simulateCalls",
            "impact": "Low",
            "line": 1499,
            "line_end": 1513,
            "message": "LimitOrderProtocol.simulateCalls(address[],bytes[]) (LimitOrderProtocol.sol#1499-1513) has external calls inside a loop: (success,result) = targets[i].call(data[i]) (LimitOrderProtocol.sol#1504)\n",
            "name": "calls-loop",
            "check": "TP"
        },
        {
            "confidence": "Medium",
            "contract": "LimitOrderProtocol",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-1inch-Limit Order Protocol/limit-order-protocol-a14bde6a260458de5083cee117d734221e1cbc05/contracts/LimitOrderProtocol.sol",
            "function": "fillOrderRFQTo",
            "impact": "Low",
            "line": 1555,
            "line_end": 1608,
            "message": "Reentrancy in LimitOrderProtocol.fillOrderRFQTo(LimitOrderProtocol.OrderRFQ,bytes,uint256,uint256,address) (LimitOrderProtocol.sol#1555-1608):\n\tExternal calls:\n\t- _callMakerAssetTransferFrom(order.makerAsset,order.makerAssetData,target,makingAmount) (LimitOrderProtocol.sol#1603)\n\t\t- (success,returndata) = target.call{value: value}(data) (LimitOrderProtocol.sol#381)\n\t\t- result = makerAsset.uncheckedFunctionCall(makerAssetData,LOP: makerAsset.call failed) (LimitOrderProtocol.sol#1779)\n\t- _callTakerAssetTransferFrom(order.takerAsset,order.takerAssetData,takingAmount) (LimitOrderProtocol.sol#1604)\n\t\t- (success,returndata) = target.call{value: value}(data) (LimitOrderProtocol.sol#381)\n\t\t- result = takerAsset.uncheckedFunctionCall(takerAssetData,LOP: takerAsset.call failed) (LimitOrderProtocol.sol#1795)\n\tExternal calls sending eth:\n\t- _callMakerAssetTransferFrom(order.makerAsset,order.makerAssetData,target,makingAmount) (LimitOrderProtocol.sol#1603)\n\t\t- (success,returndata) = target.call{value: value}(data) (LimitOrderProtocol.sol#381)\n\t- _callTakerAssetTransferFrom(order.takerAsset,order.takerAssetData,takingAmount) (LimitOrderProtocol.sol#1604)\n\t\t- (success,returndata) = target.call{value: value}(data) (LimitOrderProtocol.sol#381)\n\tEvent emitted after the call(s):\n\t- OrderFilledRFQ(orderHash,makingAmount) (LimitOrderProtocol.sol#1606)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "LimitOrderProtocol",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-1inch-Limit Order Protocol/limit-order-protocol-a14bde6a260458de5083cee117d734221e1cbc05/contracts/LimitOrderProtocol.sol",
            "function": "fillOrderToWithPermit",
            "impact": "Low",
            "line": 1626,
            "line_end": 1637,
            "message": "Reentrancy in LimitOrderProtocol.fillOrderToWithPermit(LimitOrderProtocol.Order,bytes,uint256,uint256,uint256,address,bytes) (LimitOrderProtocol.sol#1626-1637):\n\tExternal calls:\n\t- _permit(permit) (LimitOrderProtocol.sol#1635)\n\t\t- (success,returndata) = target.call{value: value}(data) (LimitOrderProtocol.sol#381)\n\t\t- token.uncheckedFunctionCall(abi.encodePacked(IERC20Permit.permit.selector,permit),LOP: permit failed) (LimitOrderProtocol.sol#1710)\n\t- fillOrderTo(order,signature,makingAmount,takingAmount,thresholdAmount,target) (LimitOrderProtocol.sol#1636)\n\t\t- (success,returndata) = target.call{value: value}(data) (LimitOrderProtocol.sol#381)\n\t\t- token.uncheckedFunctionCall(abi.encodePacked(IERC20Permit.permit.selector,permit),LOP: permit failed) (LimitOrderProtocol.sol#1710)\n\t\t- result = takerAsset.uncheckedFunctionCall(takerAssetData,LOP: takerAsset.call failed) (LimitOrderProtocol.sol#1795)\n\t\t- result = makerAsset.uncheckedFunctionCall(makerAssetData,LOP: makerAsset.call failed) (LimitOrderProtocol.sol#1779)\n\t\t- InteractiveMaker(order.makerAssetData.decodeAddress(_FROM_INDEX)).notifyFillOrder(order.makerAsset,order.takerAsset,makingAmount,takingAmount,order.interaction) (LimitOrderProtocol.sol#1698-1699)\n\tExternal calls sending eth:\n\t- _permit(permit) (LimitOrderProtocol.sol#1635)\n\t\t- (success,returndata) = target.call{value: value}(data) (LimitOrderProtocol.sol#381)\n\t- fillOrderTo(order,signature,makingAmount,takingAmount,thresholdAmount,target) (LimitOrderProtocol.sol#1636)\n\t\t- (success,returndata) = target.call{value: value}(data) (LimitOrderProtocol.sol#381)\n\tEvent emitted after the call(s):\n\t- OrderFilled(msg.sender,orderHash,remainingMakerAmount) (LimitOrderProtocol.sol#1689)\n\t\t- fillOrderTo(order,signature,makingAmount,takingAmount,thresholdAmount,target) (LimitOrderProtocol.sol#1636)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "LimitOrderProtocol",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-1inch-Limit Order Protocol/limit-order-protocol-a14bde6a260458de5083cee117d734221e1cbc05/contracts/LimitOrderProtocol.sol",
            "function": "fillOrderTo",
            "impact": "Low",
            "line": 1640,
            "line_end": 1706,
            "message": "Reentrancy in LimitOrderProtocol.fillOrderTo(LimitOrderProtocol.Order,bytes,uint256,uint256,uint256,address) (LimitOrderProtocol.sol#1640-1706):\n\tExternal calls:\n\t- _permit(order.permit) (LimitOrderProtocol.sol#1660)\n\t\t- (success,returndata) = target.call{value: value}(data) (LimitOrderProtocol.sol#381)\n\t\t- token.uncheckedFunctionCall(abi.encodePacked(IERC20Permit.permit.selector,permit),LOP: permit failed) (LimitOrderProtocol.sol#1710)\n\tExternal calls sending eth:\n\t- _permit(order.permit) (LimitOrderProtocol.sol#1660)\n\t\t- (success,returndata) = target.call{value: value}(data) (LimitOrderProtocol.sol#381)\n\tEvent emitted after the call(s):\n\t- OrderFilled(msg.sender,orderHash,remainingMakerAmount) (LimitOrderProtocol.sol#1689)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "LimitOrderProtocol",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-1inch-Limit Order Protocol/limit-order-protocol-a14bde6a260458de5083cee117d734221e1cbc05/contracts/LimitOrderProtocol.sol",
            "function": "fillOrderRFQToWithPermit",
            "impact": "Low",
            "line": 1543,
            "line_end": 1553,
            "message": "Reentrancy in LimitOrderProtocol.fillOrderRFQToWithPermit(LimitOrderProtocol.OrderRFQ,bytes,uint256,uint256,address,bytes) (LimitOrderProtocol.sol#1543-1553):\n\tExternal calls:\n\t- _permit(permit) (LimitOrderProtocol.sol#1551)\n\t\t- (success,returndata) = target.call{value: value}(data) (LimitOrderProtocol.sol#381)\n\t\t- token.uncheckedFunctionCall(abi.encodePacked(IERC20Permit.permit.selector,permit),LOP: permit failed) (LimitOrderProtocol.sol#1710)\n\t- fillOrderRFQTo(order,signature,makingAmount,takingAmount,target) (LimitOrderProtocol.sol#1552)\n\t\t- (success,returndata) = target.call{value: value}(data) (LimitOrderProtocol.sol#381)\n\t\t- result = takerAsset.uncheckedFunctionCall(takerAssetData,LOP: takerAsset.call failed) (LimitOrderProtocol.sol#1795)\n\t\t- result = makerAsset.uncheckedFunctionCall(makerAssetData,LOP: makerAsset.call failed) (LimitOrderProtocol.sol#1779)\n\tExternal calls sending eth:\n\t- _permit(permit) (LimitOrderProtocol.sol#1551)\n\t\t- (success,returndata) = target.call{value: value}(data) (LimitOrderProtocol.sol#381)\n\t- fillOrderRFQTo(order,signature,makingAmount,takingAmount,target) (LimitOrderProtocol.sol#1552)\n\t\t- (success,returndata) = target.call{value: value}(data) (LimitOrderProtocol.sol#381)\n\tEvent emitted after the call(s):\n\t- OrderFilledRFQ(orderHash,makingAmount) (LimitOrderProtocol.sol#1606)\n\t\t- fillOrderRFQTo(order,signature,makingAmount,takingAmount,target) (LimitOrderProtocol.sol#1552)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "ChainlinkCalculator",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-1inch-Limit Order Protocol/limit-order-protocol-a14bde6a260458de5083cee117d734221e1cbc05/contracts/LimitOrderProtocol.sol",
            "function": "doublePrice",
            "impact": "Low",
            "line": 473,
            "line_end": 480,
            "message": "ChainlinkCalculator.doublePrice(AggregatorV3Interface,AggregatorV3Interface,uint256,uint256) (LimitOrderProtocol.sol#473-480) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(oracle1.latestTimestamp() + _ORACLE_EXPIRATION_TIME > block.timestamp,CC: stale data O1) (LimitOrderProtocol.sol#475)\n\t- require(bool,string)(oracle2.latestTimestamp() + _ORACLE_EXPIRATION_TIME > block.timestamp,CC: stale data O2) (LimitOrderProtocol.sol#477)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "ChainlinkCalculator",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-1inch-Limit Order Protocol/limit-order-protocol-a14bde6a260458de5083cee117d734221e1cbc05/contracts/LimitOrderProtocol.sol",
            "function": "singlePrice",
            "impact": "Low",
            "line": 459,
            "line_end": 469,
            "message": "ChainlinkCalculator.singlePrice(AggregatorV3Interface,uint256,uint256) (LimitOrderProtocol.sol#459-469) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(oracle.latestTimestamp() + _ORACLE_EXPIRATION_TIME > block.timestamp,CC: stale data) (LimitOrderProtocol.sol#461)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "LimitOrderProtocol",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-1inch-Limit Order Protocol/limit-order-protocol-a14bde6a260458de5083cee117d734221e1cbc05/contracts/LimitOrderProtocol.sol",
            "function": "fillOrderRFQTo",
            "impact": "Low",
            "line": 1555,
            "line_end": 1608,
            "message": "LimitOrderProtocol.fillOrderRFQTo(LimitOrderProtocol.OrderRFQ,bytes,uint256,uint256,address) (LimitOrderProtocol.sol#1555-1608) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(expiration == 0 || block.timestamp <= expiration,LOP: order expired) (LimitOrderProtocol.sol#1564)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "PredicateHelper",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-1inch-Limit Order Protocol/limit-order-protocol-a14bde6a260458de5083cee117d734221e1cbc05/contracts/LimitOrderProtocol.sol",
            "function": "timestampBelow",
            "impact": "Low",
            "line": 1204,
            "line_end": 1206,
            "message": "PredicateHelper.timestampBelow(uint256) (LimitOrderProtocol.sol#1204-1206) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp < time (LimitOrderProtocol.sol#1205)\n",
            "name": "timestamp",
            "check": "FP"
        }
    ],
    "infos": [],
    "parser": {
        "id": "slither-0.10.0",
        "mode": "solidity",
        "version": "2024/04/30"
    }
}