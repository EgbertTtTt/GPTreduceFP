'solc --version' running
'solc /sb/GNTPaymentChannels.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/sb' running
Compilation warnings/errors on /sb/GNTPaymentChannels.sol:
/sb/GNTPaymentChannels.sol:234:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function Gate(ERC20Basic _token, address _proxy) public {
    ^ (Relevant source part starts here and spans across multiple lines).
/sb/GNTPaymentChannels.sol:281:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function TokenProxy(ERC20Basic _token) public {
    ^ (Relevant source part starts here and spans across multiple lines).
/sb/GNTPaymentChannels.sol:362:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function GolemNetworkTokenBatching(ERC20Basic _gntToken) TokenProxy(_gntToken) public {
    ^ (Relevant source part starts here and spans across multiple lines).
/sb/GNTPaymentChannels.sol:423:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function GNTPaymentChannels(address _token, uint256 _close_delay)
    ^ (Relevant source part starts here and spans across multiple lines).
/sb/GNTPaymentChannels.sol:547:9: Warning: Use of the "var" keyword is deprecated.
        var amount = _value - ch.withdrawn;
        ^--------^
/sb/GNTPaymentChannels.sol:602:9: Warning: Use of the "var" keyword is deprecated.
        var amount = ch.deposited - ch.withdrawn;
        ^--------^
/sb/GNTPaymentChannels.sol:457:9: Warning: Variable is declared as a storage pointer. Use an explicit "storage" keyword to silence this warning.
        PaymentChannel ch = channels[_channel];
        ^---------------^
/sb/GNTPaymentChannels.sol:516:9: Warning: Variable is declared as a storage pointer. Use an explicit "storage" keyword to silence this warning.
        PaymentChannel ch = channels[channel];
        ^---------------^
/sb/GNTPaymentChannels.sol:526:9: Warning: Variable is declared as a storage pointer. Use an explicit "storage" keyword to silence this warning.
        PaymentChannel ch = channels[_channel];
        ^---------------^
/sb/GNTPaymentChannels.sol:545:9: Warning: Variable is declared as a storage pointer. Use an explicit "storage" keyword to silence this warning.
        PaymentChannel ch = channels[_channel];
        ^---------------^
/sb/GNTPaymentChannels.sol:559:9: Warning: Variable is declared as a storage pointer. Use an explicit "storage" keyword to silence this warning.
        PaymentChannel ch = channels[_channel];
        ^---------------^
/sb/GNTPaymentChannels.sol:588:9: Warning: Variable is declared as a storage pointer. Use an explicit "storage" keyword to silence this warning.
        PaymentChannel ch = channels[_channel];
        ^---------------^
/sb/GNTPaymentChannels.sol:601:9: Warning: Variable is declared as a storage pointer. Use an explicit "storage" keyword to silence this warning.
        PaymentChannel ch = channels[_channel];
        ^---------------^
/sb/GNTPaymentChannels.sol:99:5: Warning: Invoking events without "emit" prefix is deprecated.
    Transfer(msg.sender, _to, _value);
    ^-------------------------------^
/sb/GNTPaymentChannels.sol:152:5: Warning: Invoking events without "emit" prefix is deprecated.
    Transfer(_from, _to, _value);
    ^--------------------------^
/sb/GNTPaymentChannels.sol:168:5: Warning: Invoking events without "emit" prefix is deprecated.
    Approval(msg.sender, _spender, _value);
    ^------------------------------------^
/sb/GNTPaymentChannels.sol:194:5: Warning: Invoking events without "emit" prefix is deprecated.
    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    ^-----------------------------------------------------------^
/sb/GNTPaymentChannels.sol:215:5: Warning: Invoking events without "emit" prefix is deprecated.
    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    ^-----------------------------------------------------------^
/sb/GNTPaymentChannels.sol:302:9: Warning: Invoking events without "emit" prefix is deprecated.
        GateOpened(gate, user);
        ^--------------------^
/sb/GNTPaymentChannels.sol:322:9: Warning: Invoking events without "emit" prefix is deprecated.
        Minted(user, value);
        ^-----------------^
/sb/GNTPaymentChannels.sol:339:9: Warning: Invoking events without "emit" prefix is deprecated.
        Burned(user, _value);
        ^------------------^
/sb/GNTPaymentChannels.sol:380:13: Warning: Invoking events without "emit" prefix is deprecated.
            BatchTransfer(msg.sender, addr, v, closureTime);
            ^---------------------------------------------^
/sb/GNTPaymentChannels.sol:497:52: Warning: "sha3" has been deprecated in favour of "keccak256"
        return (channels[_ch].owner) == (ecrecover(sha3(_ch, _value), _v, _r, _s));
                                                   ^---------------^
/sb/GNTPaymentChannels.sol:497:52: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return (channels[_ch].owner) == (ecrecover(sha3(_ch, _value), _v, _r, _s));
                                                   ^---------------^
/sb/GNTPaymentChannels.sol:505:27: Warning: "sha3" has been deprecated in favour of "keccak256"
        bytes32 channel = sha3(id++);
                          ^--------^
/sb/GNTPaymentChannels.sol:505:27: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        bytes32 channel = sha3(id++);
                          ^--------^
/sb/GNTPaymentChannels.sol:505:27: Warning: The provided argument of type uint256 is not implicitly convertible to expected type bytes memory.
        bytes32 channel = sha3(id++);
                          ^--------^
/sb/GNTPaymentChannels.sol:507:9: Warning: Invoking events without "emit" prefix is deprecated.
        NewChannel(msg.sender, _receiver, channel); // event
        ^----------------------------------------^
/sb/GNTPaymentChannels.sol:519:9: Warning: Invoking events without "emit" prefix is deprecated.
        Fund(ch.receiver, channel, _value);
        ^--------------------------------^
/sb/GNTPaymentChannels.sol:533:13: Warning: Invoking events without "emit" prefix is deprecated.
            Fund(ch.receiver, _channel, _amount); // event
            ^----------------------------------^
/sb/GNTPaymentChannels.sol:561:9: Warning: Invoking events without "emit" prefix is deprecated.
        TimeLocked(ch.owner, ch.receiver, _channel);
        ^-----------------------------------------^
/sb/GNTPaymentChannels.sol:591:13: Warning: Invoking events without "emit" prefix is deprecated.
            Withdraw(ch.owner, ch.receiver);
            ^-----------------------------^
/sb/GNTPaymentChannels.sol:605:19: Warning: Invoking events without "emit" prefix is deprecated.
                { ForceClose(ch.owner, ch.receiver, _channel); }
                  ^-----------------------------------------^
/sb/GNTPaymentChannels.sol:607:19: Warning: Invoking events without "emit" prefix is deprecated.
                { Close(ch.owner, ch.receiver, _channel); }
                  ^------------------------------------^
/sb/GNTPaymentChannels.sol:495:5: Warning: No visibility specified. Defaulting to "public". 
    function isValidSig(bytes32 _ch, uint _value,
    ^ (Relevant source part starts here and spans across multiple lines).
/sb/GNTPaymentChannels.sol:511:5: Warning: No visibility specified. Defaulting to "public". 
    function onTokenReceived(address _from, uint _value, bytes _data) {
    ^ (Relevant source part starts here and spans across multiple lines).
/sb/GNTPaymentChannels.sol:524:5: Warning: No visibility specified. Defaulting to "public". 
    function fund(bytes32 _channel, uint256 _amount)
    ^ (Relevant source part starts here and spans across multiple lines).
/sb/GNTPaymentChannels.sol:482:5: Warning: Function state mutability can be restricted to view
    function isLocked(bytes32 _channel) public returns (bool) {
    ^ (Relevant source part starts here and spans across multiple lines).


TokenProxy.withdrawTo(uint256,address) (../../sb/GNTPaymentChannels.sol#329-340) ignores return value by TOKEN.transfer(_destination,_value) (../../sb/GNTPaymentChannels.sol#337)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-transfer

GNTPaymentChannels.isLocked(bytes32) (../../sb/GNTPaymentChannels.sol#482-484) uses a dangerous strict equality:
	- channels[_channel].locked_until == 0 (../../sb/GNTPaymentChannels.sol#483)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities

Reentrancy in GNTPaymentChannels._do_close(bytes32,bool) (../../sb/GNTPaymentChannels.sol#597-612):
	External calls:
	- token.transfer(ch.owner,amount) (../../sb/GNTPaymentChannels.sol#603)
	State variables written after the call(s):
	- delete channels[_channel] (../../sb/GNTPaymentChannels.sol#608)
	GNTPaymentChannels.channels (../../sb/GNTPaymentChannels.sol#413) can be used in cross function reentrancies:
	- GNTPaymentChannels._do_close(bytes32,bool) (../../sb/GNTPaymentChannels.sol#597-612)
	- GNTPaymentChannels._do_withdraw(bytes32,uint256) (../../sb/GNTPaymentChannels.sol#584-595)
	- GNTPaymentChannels.channels (../../sb/GNTPaymentChannels.sol#413)
	- GNTPaymentChannels.createChannel(address) (../../sb/GNTPaymentChannels.sol#503-508)
	- GNTPaymentChannels.forceClose(bytes32) (../../sb/GNTPaymentChannels.sol#575-580)
	- GNTPaymentChannels.fund(bytes32,uint256) (../../sb/GNTPaymentChannels.sol#524-537)
	- GNTPaymentChannels.getDeposited(bytes32) (../../sb/GNTPaymentChannels.sol#453-459)
	- GNTPaymentChannels.getOwner(bytes32) (../../sb/GNTPaymentChannels.sol#468-473)
	- GNTPaymentChannels.getReceiver(bytes32) (../../sb/GNTPaymentChannels.sol#475-480)
	- GNTPaymentChannels.getWithdrawn(bytes32) (../../sb/GNTPaymentChannels.sol#461-466)
	- GNTPaymentChannels.isLocked(bytes32) (../../sb/GNTPaymentChannels.sol#482-484)
	- GNTPaymentChannels.isTimeLocked(bytes32) (../../sb/GNTPaymentChannels.sol#486-488)
	- GNTPaymentChannels.isUnlocked(bytes32) (../../sb/GNTPaymentChannels.sol#490-493)
	- GNTPaymentChannels.isValidSig(bytes32,uint256,uint8,bytes32,bytes32) (../../sb/GNTPaymentChannels.sol#495-498)
	- GNTPaymentChannels.onTokenReceived(address,uint256,bytes) (../../sb/GNTPaymentChannels.sol#511-520)
	- GNTPaymentChannels.onlyOwner(bytes32) (../../sb/GNTPaymentChannels.sol#441-444)
	- GNTPaymentChannels.unlock(bytes32) (../../sb/GNTPaymentChannels.sol#556-562)
	- GNTPaymentChannels.withdraw(bytes32,uint256,uint8,bytes32,bytes32) (../../sb/GNTPaymentChannels.sol#540-552)
Reentrancy in GNTPaymentChannels._do_withdraw(bytes32,uint256) (../../sb/GNTPaymentChannels.sol#584-595):
	External calls:
	- token.transfer(ch.receiver,_amount) (../../sb/GNTPaymentChannels.sol#589)
	State variables written after the call(s):
	- ch.withdrawn += _amount (../../sb/GNTPaymentChannels.sol#590)
	GNTPaymentChannels.channels (../../sb/GNTPaymentChannels.sol#413) can be used in cross function reentrancies:
	- GNTPaymentChannels._do_close(bytes32,bool) (../../sb/GNTPaymentChannels.sol#597-612)
	- GNTPaymentChannels._do_withdraw(bytes32,uint256) (../../sb/GNTPaymentChannels.sol#584-595)
	- GNTPaymentChannels.channels (../../sb/GNTPaymentChannels.sol#413)
	- GNTPaymentChannels.createChannel(address) (../../sb/GNTPaymentChannels.sol#503-508)
	- GNTPaymentChannels.forceClose(bytes32) (../../sb/GNTPaymentChannels.sol#575-580)
	- GNTPaymentChannels.fund(bytes32,uint256) (../../sb/GNTPaymentChannels.sol#524-537)
	- GNTPaymentChannels.getDeposited(bytes32) (../../sb/GNTPaymentChannels.sol#453-459)
	- GNTPaymentChannels.getOwner(bytes32) (../../sb/GNTPaymentChannels.sol#468-473)
	- GNTPaymentChannels.getReceiver(bytes32) (../../sb/GNTPaymentChannels.sol#475-480)
	- GNTPaymentChannels.getWithdrawn(bytes32) (../../sb/GNTPaymentChannels.sol#461-466)
	- GNTPaymentChannels.isLocked(bytes32) (../../sb/GNTPaymentChannels.sol#482-484)
	- GNTPaymentChannels.isTimeLocked(bytes32) (../../sb/GNTPaymentChannels.sol#486-488)
	- GNTPaymentChannels.isUnlocked(bytes32) (../../sb/GNTPaymentChannels.sol#490-493)
	- GNTPaymentChannels.isValidSig(bytes32,uint256,uint8,bytes32,bytes32) (../../sb/GNTPaymentChannels.sol#495-498)
	- GNTPaymentChannels.onTokenReceived(address,uint256,bytes) (../../sb/GNTPaymentChannels.sol#511-520)
	- GNTPaymentChannels.onlyOwner(bytes32) (../../sb/GNTPaymentChannels.sol#441-444)
	- GNTPaymentChannels.unlock(bytes32) (../../sb/GNTPaymentChannels.sol#556-562)
	- GNTPaymentChannels.withdraw(bytes32,uint256,uint8,bytes32,bytes32) (../../sb/GNTPaymentChannels.sol#540-552)
Reentrancy in GNTPaymentChannels.fund(bytes32,uint256) (../../sb/GNTPaymentChannels.sol#524-537):
	External calls:
	- token.transferFrom(msg.sender,address(this),_amount) (../../sb/GNTPaymentChannels.sol#530)
	State variables written after the call(s):
	- ch.deposited += _amount (../../sb/GNTPaymentChannels.sol#531)
	GNTPaymentChannels.channels (../../sb/GNTPaymentChannels.sol#413) can be used in cross function reentrancies:
	- GNTPaymentChannels._do_close(bytes32,bool) (../../sb/GNTPaymentChannels.sol#597-612)
	- GNTPaymentChannels._do_withdraw(bytes32,uint256) (../../sb/GNTPaymentChannels.sol#584-595)
	- GNTPaymentChannels.channels (../../sb/GNTPaymentChannels.sol#413)
	- GNTPaymentChannels.createChannel(address) (../../sb/GNTPaymentChannels.sol#503-508)
	- GNTPaymentChannels.forceClose(bytes32) (../../sb/GNTPaymentChannels.sol#575-580)
	- GNTPaymentChannels.fund(bytes32,uint256) (../../sb/GNTPaymentChannels.sol#524-537)
	- GNTPaymentChannels.getDeposited(bytes32) (../../sb/GNTPaymentChannels.sol#453-459)
	- GNTPaymentChannels.getOwner(bytes32) (../../sb/GNTPaymentChannels.sol#468-473)
	- GNTPaymentChannels.getReceiver(bytes32) (../../sb/GNTPaymentChannels.sol#475-480)
	- GNTPaymentChannels.getWithdrawn(bytes32) (../../sb/GNTPaymentChannels.sol#461-466)
	- GNTPaymentChannels.isLocked(bytes32) (../../sb/GNTPaymentChannels.sol#482-484)
	- GNTPaymentChannels.isTimeLocked(bytes32) (../../sb/GNTPaymentChannels.sol#486-488)
	- GNTPaymentChannels.isUnlocked(bytes32) (../../sb/GNTPaymentChannels.sol#490-493)
	- GNTPaymentChannels.isValidSig(bytes32,uint256,uint8,bytes32,bytes32) (../../sb/GNTPaymentChannels.sol#495-498)
	- GNTPaymentChannels.onTokenReceived(address,uint256,bytes) (../../sb/GNTPaymentChannels.sol#511-520)
	- GNTPaymentChannels.onlyOwner(bytes32) (../../sb/GNTPaymentChannels.sol#441-444)
	- GNTPaymentChannels.unlock(bytes32) (../../sb/GNTPaymentChannels.sol#556-562)
	- GNTPaymentChannels.withdraw(bytes32,uint256,uint8,bytes32,bytes32) (../../sb/GNTPaymentChannels.sol#540-552)
	- ch.locked_until = 0 (../../sb/GNTPaymentChannels.sol#532)
	GNTPaymentChannels.channels (../../sb/GNTPaymentChannels.sol#413) can be used in cross function reentrancies:
	- GNTPaymentChannels._do_close(bytes32,bool) (../../sb/GNTPaymentChannels.sol#597-612)
	- GNTPaymentChannels._do_withdraw(bytes32,uint256) (../../sb/GNTPaymentChannels.sol#584-595)
	- GNTPaymentChannels.channels (../../sb/GNTPaymentChannels.sol#413)
	- GNTPaymentChannels.createChannel(address) (../../sb/GNTPaymentChannels.sol#503-508)
	- GNTPaymentChannels.forceClose(bytes32) (../../sb/GNTPaymentChannels.sol#575-580)
	- GNTPaymentChannels.fund(bytes32,uint256) (../../sb/GNTPaymentChannels.sol#524-537)
	- GNTPaymentChannels.getDeposited(bytes32) (../../sb/GNTPaymentChannels.sol#453-459)
	- GNTPaymentChannels.getOwner(bytes32) (../../sb/GNTPaymentChannels.sol#468-473)
	- GNTPaymentChannels.getReceiver(bytes32) (../../sb/GNTPaymentChannels.sol#475-480)
	- GNTPaymentChannels.getWithdrawn(bytes32) (../../sb/GNTPaymentChannels.sol#461-466)
	- GNTPaymentChannels.isLocked(bytes32) (../../sb/GNTPaymentChannels.sol#482-484)
	- GNTPaymentChannels.isTimeLocked(bytes32) (../../sb/GNTPaymentChannels.sol#486-488)
	- GNTPaymentChannels.isUnlocked(bytes32) (../../sb/GNTPaymentChannels.sol#490-493)
	- GNTPaymentChannels.isValidSig(bytes32,uint256,uint8,bytes32,bytes32) (../../sb/GNTPaymentChannels.sol#495-498)
	- GNTPaymentChannels.onTokenReceived(address,uint256,bytes) (../../sb/GNTPaymentChannels.sol#511-520)
	- GNTPaymentChannels.onlyOwner(bytes32) (../../sb/GNTPaymentChannels.sol#441-444)
	- GNTPaymentChannels.unlock(bytes32) (../../sb/GNTPaymentChannels.sol#556-562)
	- GNTPaymentChannels.withdraw(bytes32,uint256,uint8,bytes32,bytes32) (../../sb/GNTPaymentChannels.sol#540-552)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1

Gate.Gate(ERC20Basic,address)._proxy (../../sb/GNTPaymentChannels.sol#234) lacks a zero-check on :
		- PROXY = _proxy (../../sb/GNTPaymentChannels.sol#236)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

Reentrancy in TokenProxy.transferFromGate() (../../sb/GNTPaymentChannels.sol#305-323):
	External calls:
	- value = TOKEN.balanceOf(gate) (../../sb/GNTPaymentChannels.sol#313)
	- Gate(gate).transferToProxy(value) (../../sb/GNTPaymentChannels.sol#315)
	State variables written after the call(s):
	- balances[user] += value (../../sb/GNTPaymentChannels.sol#320)
	- totalSupply_ += value (../../sb/GNTPaymentChannels.sol#319)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

Reentrancy in GNTPaymentChannels._do_close(bytes32,bool) (../../sb/GNTPaymentChannels.sol#597-612):
	External calls:
	- token.transfer(ch.owner,amount) (../../sb/GNTPaymentChannels.sol#603)
	Event emitted after the call(s):
	- Close(ch.owner,ch.receiver,_channel) (../../sb/GNTPaymentChannels.sol#607)
	- ForceClose(ch.owner,ch.receiver,_channel) (../../sb/GNTPaymentChannels.sol#605)
Reentrancy in GNTPaymentChannels._do_withdraw(bytes32,uint256) (../../sb/GNTPaymentChannels.sol#584-595):
	External calls:
	- token.transfer(ch.receiver,_amount) (../../sb/GNTPaymentChannels.sol#589)
	Event emitted after the call(s):
	- Withdraw(ch.owner,ch.receiver) (../../sb/GNTPaymentChannels.sol#591)
Reentrancy in GNTPaymentChannels.fund(bytes32,uint256) (../../sb/GNTPaymentChannels.sol#524-537):
	External calls:
	- token.transferFrom(msg.sender,address(this),_amount) (../../sb/GNTPaymentChannels.sol#530)
	Event emitted after the call(s):
	- Fund(ch.receiver,_channel,_amount) (../../sb/GNTPaymentChannels.sol#533)
Reentrancy in TokenProxy.transferFromGate() (../../sb/GNTPaymentChannels.sol#305-323):
	External calls:
	- value = TOKEN.balanceOf(gate) (../../sb/GNTPaymentChannels.sol#313)
	- Gate(gate).transferToProxy(value) (../../sb/GNTPaymentChannels.sol#315)
	Event emitted after the call(s):
	- Minted(user,value) (../../sb/GNTPaymentChannels.sol#322)
Reentrancy in TokenProxy.withdrawTo(uint256,address) (../../sb/GNTPaymentChannels.sol#329-340):
	External calls:
	- TOKEN.transfer(_destination,_value) (../../sb/GNTPaymentChannels.sol#337)
	Event emitted after the call(s):
	- Burned(user,_value) (../../sb/GNTPaymentChannels.sol#339)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

GolemNetworkTokenBatching.batchTransfer(bytes32[],uint64) (../../sb/GNTPaymentChannels.sol#365-384) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(block.timestamp >= closureTime) (../../sb/GNTPaymentChannels.sol#366)
GNTPaymentChannels.isLocked(bytes32) (../../sb/GNTPaymentChannels.sol#482-484) uses timestamp for comparisons
	Dangerous comparisons:
	- channels[_channel].locked_until == 0 (../../sb/GNTPaymentChannels.sol#483)
GNTPaymentChannels.isTimeLocked(bytes32) (../../sb/GNTPaymentChannels.sol#486-488) uses timestamp for comparisons
	Dangerous comparisons:
	- channels[_channel].locked_until >= block.timestamp (../../sb/GNTPaymentChannels.sol#487)
GNTPaymentChannels.isUnlocked(bytes32) (../../sb/GNTPaymentChannels.sol#490-493) uses timestamp for comparisons
	Dangerous comparisons:
	- ((channels[_channel].locked_until != 0) && (channels[_channel].locked_until < block.timestamp)) (../../sb/GNTPaymentChannels.sol#491-492)
GNTPaymentChannels.isValidSig(bytes32,uint256,uint8,bytes32,bytes32) (../../sb/GNTPaymentChannels.sol#495-498) uses timestamp for comparisons
	Dangerous comparisons:
	- (channels[_ch].owner) == (ecrecover(bytes32,uint8,bytes32,bytes32)(sha3()(_ch,_value),_v,_r,_s)) (../../sb/GNTPaymentChannels.sol#497)
GNTPaymentChannels.forceClose(bytes32) (../../sb/GNTPaymentChannels.sol#575-580) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(msg.sender == channels[_channel].receiver) (../../sb/GNTPaymentChannels.sol#578)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

GNTPaymentChannels.onTokenReceived(address,uint256,bytes) (../../sb/GNTPaymentChannels.sol#511-520) uses assembly
	- INLINE ASM (../../sb/GNTPaymentChannels.sol#513-516)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage

SafeMath.div(uint256,uint256) (../../sb/GNTPaymentChannels.sol#44-49) is never used and should be removed
SafeMath.mul(uint256,uint256) (../../sb/GNTPaymentChannels.sol#32-39) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code

Deprecated standard detected (channels[_ch].owner) == (ecrecover(bytes32,uint8,bytes32,bytes32)(sha3()(_ch,_value),_v,_r,_s)) (../../sb/GNTPaymentChannels.sol#497):
	- Usage of "sha3()" should be replaced with "keccak256()"
Deprecated standard detected channel = sha3()(id ++) (../../sb/GNTPaymentChannels.sol#505):
	- Usage of "sha3()" should be replaced with "keccak256()"
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#deprecated-standards

Pragma version^0.4.16 (../../sb/GNTPaymentChannels.sol#1) allows old versions
solc-0.4.26 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Parameter BasicToken.transfer(address,uint256)._to (../../sb/GNTPaymentChannels.sol#92) is not in mixedCase
Parameter BasicToken.transfer(address,uint256)._value (../../sb/GNTPaymentChannels.sol#92) is not in mixedCase
Parameter BasicToken.balanceOf(address)._owner (../../sb/GNTPaymentChannels.sol#108) is not in mixedCase
Parameter StandardToken.transferFrom(address,address,uint256)._from (../../sb/GNTPaymentChannels.sol#144) is not in mixedCase
Parameter StandardToken.transferFrom(address,address,uint256)._to (../../sb/GNTPaymentChannels.sol#144) is not in mixedCase
Parameter StandardToken.transferFrom(address,address,uint256)._value (../../sb/GNTPaymentChannels.sol#144) is not in mixedCase
Parameter StandardToken.approve(address,uint256)._spender (../../sb/GNTPaymentChannels.sol#166) is not in mixedCase
Parameter StandardToken.approve(address,uint256)._value (../../sb/GNTPaymentChannels.sol#166) is not in mixedCase
Parameter StandardToken.allowance(address,address)._owner (../../sb/GNTPaymentChannels.sol#178) is not in mixedCase
Parameter StandardToken.allowance(address,address)._spender (../../sb/GNTPaymentChannels.sol#178) is not in mixedCase
Parameter StandardToken.increaseApproval(address,uint256)._spender (../../sb/GNTPaymentChannels.sol#192) is not in mixedCase
Parameter StandardToken.increaseApproval(address,uint256)._addedValue (../../sb/GNTPaymentChannels.sol#192) is not in mixedCase
Parameter StandardToken.decreaseApproval(address,uint256)._spender (../../sb/GNTPaymentChannels.sol#208) is not in mixedCase
Parameter StandardToken.decreaseApproval(address,uint256)._subtractedValue (../../sb/GNTPaymentChannels.sol#208) is not in mixedCase
Parameter Gate.transferToProxy(uint256)._value (../../sb/GNTPaymentChannels.sol#242) is not in mixedCase
Variable Gate.TOKEN (../../sb/GNTPaymentChannels.sol#230) is not in mixedCase
Variable Gate.PROXY (../../sb/GNTPaymentChannels.sol#231) is not in mixedCase
Parameter TokenProxy.getGateAddress(address)._user (../../sb/GNTPaymentChannels.sol#285) is not in mixedCase
Parameter TokenProxy.withdraw(uint256)._value (../../sb/GNTPaymentChannels.sol#325) is not in mixedCase
Parameter TokenProxy.withdrawTo(uint256,address)._value (../../sb/GNTPaymentChannels.sol#329) is not in mixedCase
Parameter TokenProxy.withdrawTo(uint256,address)._destination (../../sb/GNTPaymentChannels.sol#329) is not in mixedCase
Variable TokenProxy.TOKEN (../../sb/GNTPaymentChannels.sol#270) is not in mixedCase
Parameter GNTPaymentChannels.getDeposited(bytes32)._channel (../../sb/GNTPaymentChannels.sol#453) is not in mixedCase
Parameter GNTPaymentChannels.getWithdrawn(bytes32)._channel (../../sb/GNTPaymentChannels.sol#461) is not in mixedCase
Parameter GNTPaymentChannels.getOwner(bytes32)._channel (../../sb/GNTPaymentChannels.sol#468) is not in mixedCase
Parameter GNTPaymentChannels.getReceiver(bytes32)._channel (../../sb/GNTPaymentChannels.sol#475) is not in mixedCase
Parameter GNTPaymentChannels.isLocked(bytes32)._channel (../../sb/GNTPaymentChannels.sol#482) is not in mixedCase
Parameter GNTPaymentChannels.isTimeLocked(bytes32)._channel (../../sb/GNTPaymentChannels.sol#486) is not in mixedCase
Parameter GNTPaymentChannels.isUnlocked(bytes32)._channel (../../sb/GNTPaymentChannels.sol#490) is not in mixedCase
Parameter GNTPaymentChannels.isValidSig(bytes32,uint256,uint8,bytes32,bytes32)._ch (../../sb/GNTPaymentChannels.sol#495) is not in mixedCase
Parameter GNTPaymentChannels.isValidSig(bytes32,uint256,uint8,bytes32,bytes32)._value (../../sb/GNTPaymentChannels.sol#495) is not in mixedCase
Parameter GNTPaymentChannels.isValidSig(bytes32,uint256,uint8,bytes32,bytes32)._v (../../sb/GNTPaymentChannels.sol#496) is not in mixedCase
Parameter GNTPaymentChannels.isValidSig(bytes32,uint256,uint8,bytes32,bytes32)._r (../../sb/GNTPaymentChannels.sol#496) is not in mixedCase
Parameter GNTPaymentChannels.isValidSig(bytes32,uint256,uint8,bytes32,bytes32)._s (../../sb/GNTPaymentChannels.sol#496) is not in mixedCase
Parameter GNTPaymentChannels.createChannel(address)._receiver (../../sb/GNTPaymentChannels.sol#503) is not in mixedCase
Parameter GNTPaymentChannels.onTokenReceived(address,uint256,bytes)._from (../../sb/GNTPaymentChannels.sol#511) is not in mixedCase
Parameter GNTPaymentChannels.onTokenReceived(address,uint256,bytes)._value (../../sb/GNTPaymentChannels.sol#511) is not in mixedCase
Parameter GNTPaymentChannels.fund(bytes32,uint256)._channel (../../sb/GNTPaymentChannels.sol#524) is not in mixedCase
Parameter GNTPaymentChannels.fund(bytes32,uint256)._amount (../../sb/GNTPaymentChannels.sol#524) is not in mixedCase
Parameter GNTPaymentChannels.withdraw(bytes32,uint256,uint8,bytes32,bytes32)._channel (../../sb/GNTPaymentChannels.sol#540) is not in mixedCase
Parameter GNTPaymentChannels.withdraw(bytes32,uint256,uint8,bytes32,bytes32)._value (../../sb/GNTPaymentChannels.sol#540) is not in mixedCase
Parameter GNTPaymentChannels.withdraw(bytes32,uint256,uint8,bytes32,bytes32)._v (../../sb/GNTPaymentChannels.sol#541) is not in mixedCase
Parameter GNTPaymentChannels.withdraw(bytes32,uint256,uint8,bytes32,bytes32)._r (../../sb/GNTPaymentChannels.sol#541) is not in mixedCase
Parameter GNTPaymentChannels.withdraw(bytes32,uint256,uint8,bytes32,bytes32)._s (../../sb/GNTPaymentChannels.sol#541) is not in mixedCase
Parameter GNTPaymentChannels.unlock(bytes32)._channel (../../sb/GNTPaymentChannels.sol#556) is not in mixedCase
Parameter GNTPaymentChannels.close(bytes32)._channel (../../sb/GNTPaymentChannels.sol#565) is not in mixedCase
Parameter GNTPaymentChannels.forceClose(bytes32)._channel (../../sb/GNTPaymentChannels.sol#575) is not in mixedCase
Function GNTPaymentChannels._do_withdraw(bytes32,uint256) (../../sb/GNTPaymentChannels.sol#584-595) is not in mixedCase
Parameter GNTPaymentChannels._do_withdraw(bytes32,uint256)._channel (../../sb/GNTPaymentChannels.sol#584) is not in mixedCase
Parameter GNTPaymentChannels._do_withdraw(bytes32,uint256)._amount (../../sb/GNTPaymentChannels.sol#584) is not in mixedCase
Function GNTPaymentChannels._do_close(bytes32,bool) (../../sb/GNTPaymentChannels.sol#597-612) is not in mixedCase
Parameter GNTPaymentChannels._do_close(bytes32,bool)._channel (../../sb/GNTPaymentChannels.sol#597) is not in mixedCase
Variable GNTPaymentChannels.close_delay (../../sb/GNTPaymentChannels.sol#414) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

onTokenReceived(address,uint256,bytes) should be declared external:
	- GNTPaymentChannels.onTokenReceived(address,uint256,bytes) (../../sb/GNTPaymentChannels.sol#511-520)
	- ReceivingContract.onTokenReceived(address,uint256,bytes) (../../sb/GNTPaymentChannels.sol#8)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external
/sb/GNTPaymentChannels.sol analyzed (10 contracts with 93 detectors), 79 result(s) found
