'solc --version' running
'solc /sb/LibMath.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/sb' running

LibMathSigned.wln(int256) (../../sb/LibMath.sol#153-213) performs a multiplication on the result of a division:
	- m = (longer_fixed_1 * (x - a1_5)) / (x + a1_5) (../../sb/LibMath.sol#200)
	- r = r + 2 * m (../../sb/LibMath.sol#201)
LibMathSigned.wln(int256) (../../sb/LibMath.sol#153-213) performs a multiplication on the result of a division:
	- m = (longer_fixed_1 * (x - a1_5)) / (x + a1_5) (../../sb/LibMath.sol#200)
	- m2 = (m * m) / longer_fixed_1 (../../sb/LibMath.sol#202)
LibMathSigned.wln(int256) (../../sb/LibMath.sol#153-213) performs a multiplication on the result of a division:
	- m = (longer_fixed_1 * (x - a1_5)) / (x + a1_5) (../../sb/LibMath.sol#200)
	- m2 = (m * m) / longer_fixed_1 (../../sb/LibMath.sol#202)
	- m = (m * m2) / longer_fixed_1 (../../sb/LibMath.sol#205)
LibMathSigned.wln(int256) (../../sb/LibMath.sol#153-213) performs a multiplication on the result of a division:
	- m = (m * m2) / longer_fixed_1 (../../sb/LibMath.sol#205)
	- r = r + (2 * m) / int256(i) (../../sb/LibMath.sol#206)
LibMathSigned.wln(int256) (../../sb/LibMath.sol#153-213) performs a multiplication on the result of a division:
	- x = x * 10 (../../sb/LibMath.sol#161)
	- x = x / 10 (../../sb/LibMath.sol#165)
LibMathSigned.ceil(int256,int256) (../../sb/LibMath.sol#220-224) performs a multiplication on the result of a division:
	- (sub(add(x,m),1) / m) * m (../../sb/LibMath.sol#223)
LibMathUnsigned.ceil(uint256,uint256) (../../sb/LibMath.sol#302-305) performs a multiplication on the result of a division:
	- (sub(add(x,m),1) / m) * m (../../sb/LibMath.sol#304)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply

LibMathSigned.WAD() (../../sb/LibMath.sol#8-10) is never used and should be removed
LibMathSigned.add(int256,int256) (../../sb/LibMath.sol#60-65) is never used and should be removed
LibMathSigned.ceil(int256,int256) (../../sb/LibMath.sol#220-224) is never used and should be removed
LibMathSigned.div(int256,int256) (../../sb/LibMath.sol#38-45) is never used and should be removed
LibMathSigned.logBase(int256,int256) (../../sb/LibMath.sol#216-218) is never used and should be removed
LibMathSigned.max(int256,int256) (../../sb/LibMath.sol#94-96) is never used and should be removed
LibMathSigned.min(int256,int256) (../../sb/LibMath.sol#90-92) is never used and should be removed
LibMathSigned.mul(int256,int256) (../../sb/LibMath.sol#20-33) is never used and should be removed
LibMathSigned.neg(int256) (../../sb/LibMath.sol#13-15) is never used and should be removed
LibMathSigned.roundHalfUp(int256,int256) (../../sb/LibMath.sol#127-133) is never used and should be removed
LibMathSigned.sub(int256,int256) (../../sb/LibMath.sol#50-55) is never used and should be removed
LibMathSigned.toUint256(int256) (../../sb/LibMath.sol#98-101) is never used and should be removed
LibMathSigned.wdiv(int256,int256) (../../sb/LibMath.sol#72-78) is never used and should be removed
LibMathSigned.wfrac(int256,int256,int256) (../../sb/LibMath.sol#81-88) is never used and should be removed
LibMathSigned.wln(int256) (../../sb/LibMath.sol#153-213) is never used and should be removed
LibMathSigned.wmul(int256,int256) (../../sb/LibMath.sol#67-69) is never used and should be removed
LibMathSigned.wpowi(int256,int256) (../../sb/LibMath.sol#106-116) is never used and should be removed
LibMathUnsigned.WAD() (../../sb/LibMath.sol#231-233) is never used and should be removed
LibMathUnsigned.add(uint256,uint256) (../../sb/LibMath.sol#235-240) is never used and should be removed
LibMathUnsigned.ceil(uint256,uint256) (../../sb/LibMath.sol#302-305) is never used and should be removed
LibMathUnsigned.div(uint256,uint256) (../../sb/LibMath.sol#263-270) is never used and should be removed
LibMathUnsigned.max(uint256,uint256) (../../sb/LibMath.sol#288-290) is never used and should be removed
LibMathUnsigned.min(uint256,uint256) (../../sb/LibMath.sol#284-286) is never used and should be removed
LibMathUnsigned.mod(uint256,uint256) (../../sb/LibMath.sol#297-300) is never used and should be removed
LibMathUnsigned.mul(uint256,uint256) (../../sb/LibMath.sol#249-261) is never used and should be removed
LibMathUnsigned.sub(uint256,uint256) (../../sb/LibMath.sol#242-247) is never used and should be removed
LibMathUnsigned.toInt256(uint256) (../../sb/LibMath.sol#292-295) is never used and should be removed
LibMathUnsigned.wdiv(uint256,uint256) (../../sb/LibMath.sol#276-278) is never used and should be removed
LibMathUnsigned.wfrac(uint256,uint256,uint256) (../../sb/LibMath.sol#280-282) is never used and should be removed
LibMathUnsigned.wmul(uint256,uint256) (../../sb/LibMath.sol#272-274) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code

Pragma version^0.5.2 (../../sb/LibMath.sol#1) allows old versions
solc-0.5.17 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Function LibMathSigned.WAD() (../../sb/LibMath.sol#8-10) is not in mixedCase
Constant LibMathSigned.fixed_digits (../../sb/LibMath.sol#118) is not in UPPER_CASE_WITH_UNDERSCORES
Constant LibMathSigned.fixed_1 (../../sb/LibMath.sol#119) is not in UPPER_CASE_WITH_UNDERSCORES
Constant LibMathSigned.fixed_e (../../sb/LibMath.sol#120) is not in UPPER_CASE_WITH_UNDERSCORES
Constant LibMathSigned.longer_digits (../../sb/LibMath.sol#121) is not in UPPER_CASE_WITH_UNDERSCORES
Constant LibMathSigned.longer_fixed_log_e_1_5 (../../sb/LibMath.sol#122) is not in UPPER_CASE_WITH_UNDERSCORES
Constant LibMathSigned.longer_fixed_1 (../../sb/LibMath.sol#123) is not in UPPER_CASE_WITH_UNDERSCORES
Constant LibMathSigned.longer_fixed_log_e_10 (../../sb/LibMath.sol#124) is not in UPPER_CASE_WITH_UNDERSCORES
Function LibMathUnsigned.WAD() (../../sb/LibMath.sol#231-233) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

LibMathSigned.wln(int256) (../../sb/LibMath.sol#153-213) uses literals with too many digits:
	- require(bool,string)(x <= 10000000000000000000000000000000000000000,logE only accepts v <= 1e22 * 1e18) (../../sb/LibMath.sol#155)
LibMathSigned.slitherConstructorConstantVariables() (../../sb/LibMath.sol#4-225) uses literals with too many digits:
	- fixed_1 = 1000000000000000000 (../../sb/LibMath.sol#119)
LibMathSigned.slitherConstructorConstantVariables() (../../sb/LibMath.sol#4-225) uses literals with too many digits:
	- longer_fixed_1 = 1000000000000000000000000000000000000 (../../sb/LibMath.sol#123)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits
/sb/LibMath.sol analyzed (2 contracts with 93 detectors), 51 result(s) found
