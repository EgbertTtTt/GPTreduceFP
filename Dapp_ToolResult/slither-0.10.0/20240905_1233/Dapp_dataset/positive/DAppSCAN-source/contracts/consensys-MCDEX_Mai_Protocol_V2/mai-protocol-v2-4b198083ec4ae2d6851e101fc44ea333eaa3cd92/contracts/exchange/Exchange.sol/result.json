{
    "errors": [],
    "fails": [],
    "findings": [
        {
            "confidence": "Medium",
            "contract": "Exchange",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/consensys-MCDEX_Mai_Protocol_V2/mai-protocol-v2-4b198083ec4ae2d6851e101fc44ea333eaa3cd92/contracts/exchange/Exchange.sol",
            "function": "matchOrderWithAMM",
            "impact": "Medium",
            "line": 888,
            "line_end": 916,
            "message": "Reentrancy in Exchange.matchOrderWithAMM(LibOrder.OrderParam,address,uint256) (Exchange.sol#888-916):\n\tExternal calls:\n\t- takerOpened = amm.sellFromWhitelisted(takerOrderParam.trader,amount,price,takerOrderParam.getExpiredAt()) (Exchange.sol#904-909)\n\t- takerOpened = amm.buyFromWhitelisted(takerOrderParam.trader,amount,price,takerOrderParam.getExpiredAt()) (Exchange.sol#911)\n\tState variables written after the call(s):\n\t- filled[takerOrderHash] = filled[takerOrderHash].add(amount) (Exchange.sol#913)\n\tExchange.filled (Exchange.sol#797) can be used in cross function reentrancies:\n\t- Exchange.filled (Exchange.sol#797)\n\t- Exchange.matchOrderWithAMM(LibOrder.OrderParam,address,uint256) (Exchange.sol#888-916)\n\t- Exchange.matchOrders(LibOrder.OrderParam,LibOrder.OrderParam[],address,uint256[]) (Exchange.sol#809-856)\n\t- Exchange.validateOrderParam(IPerpetual,LibOrder.OrderParam) (Exchange.sol#930-945)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Exchange",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/consensys-MCDEX_Mai_Protocol_V2/mai-protocol-v2-4b198083ec4ae2d6851e101fc44ea333eaa3cd92/contracts/exchange/Exchange.sol",
            "function": "matchOrders",
            "impact": "Medium",
            "line": 809,
            "line_end": 856,
            "message": "Reentrancy in Exchange.matchOrders(LibOrder.OrderParam,LibOrder.OrderParam[],address,uint256[]) (Exchange.sol#809-856):\n\tExternal calls:\n\t- opened = fillOrder(perpetual,takerOrderParam,makerOrderParams[i],amounts[i]) (Exchange.sol#840)\n\t\t- takerOpened = perpetual.tradePosition(takerOrderParam.trader,takerOrderParam.side(),price,amount) (Exchange.sol#865)\n\t\t- perpetual.transferCashBalance(trader,msg.sender,fee.toUint256()) (Exchange.sol#949)\n\t\t- makerOpened = perpetual.tradePosition(makerOrderParam.trader,makerOrderParam.side(),price,amount) (Exchange.sol#866)\n\t\t- perpetual.transferCashBalance(msg.sender,trader,fee.neg().toUint256()) (Exchange.sol#951)\n\t\t- available = perpetual.availableMargin(guy) (Exchange.sol#980)\n\t\t- require(bool,string)(perpetual.isIMSafe(makerOrderParam.trader),maker margin) (Exchange.sol#878)\n\t\t- perpetual.transferCashBalance(guy,devAddress,fee.toUint256()) (Exchange.sol#983)\n\t\t- require(bool,string)(perpetual.isSafe(makerOrderParam.trader),maker unsafe) (Exchange.sol#880)\n\t\t- perpetual.transferCashBalance(devAddress,guy,fee.neg().toUint256()) (Exchange.sol#985)\n\t\t- require(bool,string)(perpetual.isSafe(devAddress),dev unsafe) (Exchange.sol#986)\n\tState variables written after the call(s):\n\t- filled[makerOrderHash] = makerFilledAmount.add(amounts[i]) (Exchange.sol#843)\n\tExchange.filled (Exchange.sol#797) can be used in cross function reentrancies:\n\t- Exchange.filled (Exchange.sol#797)\n\t- Exchange.matchOrderWithAMM(LibOrder.OrderParam,address,uint256) (Exchange.sol#888-916)\n\t- Exchange.matchOrders(LibOrder.OrderParam,LibOrder.OrderParam[],address,uint256[]) (Exchange.sol#809-856)\n\t- Exchange.validateOrderParam(IPerpetual,LibOrder.OrderParam) (Exchange.sol#930-945)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Exchange",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/consensys-MCDEX_Mai_Protocol_V2/mai-protocol-v2-4b198083ec4ae2d6851e101fc44ea333eaa3cd92/contracts/exchange/Exchange.sol",
            "function": "matchOrders",
            "impact": "Medium",
            "line": 809,
            "line_end": 856,
            "message": "Reentrancy in Exchange.matchOrders(LibOrder.OrderParam,LibOrder.OrderParam[],address,uint256[]) (Exchange.sol#809-856):\n\tExternal calls:\n\t- opened = fillOrder(perpetual,takerOrderParam,makerOrderParams[i],amounts[i]) (Exchange.sol#840)\n\t\t- takerOpened = perpetual.tradePosition(takerOrderParam.trader,takerOrderParam.side(),price,amount) (Exchange.sol#865)\n\t\t- perpetual.transferCashBalance(trader,msg.sender,fee.toUint256()) (Exchange.sol#949)\n\t\t- makerOpened = perpetual.tradePosition(makerOrderParam.trader,makerOrderParam.side(),price,amount) (Exchange.sol#866)\n\t\t- perpetual.transferCashBalance(msg.sender,trader,fee.neg().toUint256()) (Exchange.sol#951)\n\t\t- available = perpetual.availableMargin(guy) (Exchange.sol#980)\n\t\t- require(bool,string)(perpetual.isIMSafe(makerOrderParam.trader),maker margin) (Exchange.sol#878)\n\t\t- perpetual.transferCashBalance(guy,devAddress,fee.toUint256()) (Exchange.sol#983)\n\t\t- require(bool,string)(perpetual.isSafe(makerOrderParam.trader),maker unsafe) (Exchange.sol#880)\n\t\t- perpetual.transferCashBalance(devAddress,guy,fee.neg().toUint256()) (Exchange.sol#985)\n\t\t- require(bool,string)(perpetual.isSafe(devAddress),dev unsafe) (Exchange.sol#986)\n\t- require(bool,string)(perpetual.isIMSafe(takerOrderParam.trader),taker margin) (Exchange.sol#849)\n\t- require(bool,string)(perpetual.isSafe(takerOrderParam.trader),maker unsafe) (Exchange.sol#851)\n\t- require(bool,string)(perpetual.isSafe(msg.sender),broker unsafe) (Exchange.sol#853)\n\tState variables written after the call(s):\n\t- filled[takerOrderHash] = takerFilledAmount (Exchange.sol#855)\n\tExchange.filled (Exchange.sol#797) can be used in cross function reentrancies:\n\t- Exchange.filled (Exchange.sol#797)\n\t- Exchange.matchOrderWithAMM(LibOrder.OrderParam,address,uint256) (Exchange.sol#888-916)\n\t- Exchange.matchOrders(LibOrder.OrderParam,LibOrder.OrderParam[],address,uint256[]) (Exchange.sol#809-856)\n\t- Exchange.validateOrderParam(IPerpetual,LibOrder.OrderParam) (Exchange.sol#930-945)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Exchange",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/consensys-MCDEX_Mai_Protocol_V2/mai-protocol-v2-4b198083ec4ae2d6851e101fc44ea333eaa3cd92/contracts/exchange/Exchange.sol",
            "function": "fillOrder",
            "impact": "Low",
            "line": 858,
            "line_end": 886,
            "message": "Exchange.fillOrder(IPerpetual,LibOrder.OrderParam,LibOrder.OrderParam,uint256) (Exchange.sol#858-886) has external calls inside a loop: require(bool,string)(perpetual.isIMSafe(makerOrderParam.trader),maker margin) (Exchange.sol#878)\n",
            "name": "calls-loop",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Exchange",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/consensys-MCDEX_Mai_Protocol_V2/mai-protocol-v2-4b198083ec4ae2d6851e101fc44ea333eaa3cd92/contracts/exchange/Exchange.sol",
            "function": "claimTakerDevFee",
            "impact": "Low",
            "line": 990,
            "line_end": 999,
            "message": "Exchange.claimTakerDevFee(IPerpetual,address,uint256,uint256,uint256) (Exchange.sol#990-999) has external calls inside a loop: rate = perpetual.getGovernance().takerDevFeeRate (Exchange.sol#997)\n",
            "name": "calls-loop",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Exchange",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/consensys-MCDEX_Mai_Protocol_V2/mai-protocol-v2-4b198083ec4ae2d6851e101fc44ea333eaa3cd92/contracts/exchange/Exchange.sol",
            "function": "claimDevFee",
            "impact": "Low",
            "line": 964,
            "line_end": 988,
            "message": "Exchange.claimDevFee(IPerpetual,address,uint256,uint256,uint256,int256) (Exchange.sol#964-988) has external calls inside a loop: perpetual.transferCashBalance(devAddress,guy,fee.neg().toUint256()) (Exchange.sol#985)\n",
            "name": "calls-loop",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Exchange",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/consensys-MCDEX_Mai_Protocol_V2/mai-protocol-v2-4b198083ec4ae2d6851e101fc44ea333eaa3cd92/contracts/exchange/Exchange.sol",
            "function": "fillOrder",
            "impact": "Low",
            "line": 858,
            "line_end": 886,
            "message": "Exchange.fillOrder(IPerpetual,LibOrder.OrderParam,LibOrder.OrderParam,uint256) (Exchange.sol#858-886) has external calls inside a loop: makerOpened = perpetual.tradePosition(makerOrderParam.trader,makerOrderParam.side(),price,amount) (Exchange.sol#866)\n",
            "name": "calls-loop",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Exchange",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/consensys-MCDEX_Mai_Protocol_V2/mai-protocol-v2-4b198083ec4ae2d6851e101fc44ea333eaa3cd92/contracts/exchange/Exchange.sol",
            "function": "claimDevFee",
            "impact": "Low",
            "line": 964,
            "line_end": 988,
            "message": "Exchange.claimDevFee(IPerpetual,address,uint256,uint256,uint256,int256) (Exchange.sol#964-988) has external calls inside a loop: require(bool,string)(perpetual.isSafe(devAddress),dev unsafe) (Exchange.sol#986)\n",
            "name": "calls-loop",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Exchange",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/consensys-MCDEX_Mai_Protocol_V2/mai-protocol-v2-4b198083ec4ae2d6851e101fc44ea333eaa3cd92/contracts/exchange/Exchange.sol",
            "function": "fillOrder",
            "impact": "Low",
            "line": 858,
            "line_end": 886,
            "message": "Exchange.fillOrder(IPerpetual,LibOrder.OrderParam,LibOrder.OrderParam,uint256) (Exchange.sol#858-886) has external calls inside a loop: takerOpened = perpetual.tradePosition(takerOrderParam.trader,takerOrderParam.side(),price,amount) (Exchange.sol#865)\n",
            "name": "calls-loop",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Exchange",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/consensys-MCDEX_Mai_Protocol_V2/mai-protocol-v2-4b198083ec4ae2d6851e101fc44ea333eaa3cd92/contracts/exchange/Exchange.sol",
            "function": "claimMakerDevFee",
            "impact": "Low",
            "line": 1001,
            "line_end": 1010,
            "message": "Exchange.claimMakerDevFee(IPerpetual,address,uint256,uint256,uint256) (Exchange.sol#1001-1010) has external calls inside a loop: rate = perpetual.getGovernance().makerDevFeeRate (Exchange.sol#1008)\n",
            "name": "calls-loop",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Exchange",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/consensys-MCDEX_Mai_Protocol_V2/mai-protocol-v2-4b198083ec4ae2d6851e101fc44ea333eaa3cd92/contracts/exchange/Exchange.sol",
            "function": "claimDevFee",
            "impact": "Low",
            "line": 964,
            "line_end": 988,
            "message": "Exchange.claimDevFee(IPerpetual,address,uint256,uint256,uint256,int256) (Exchange.sol#964-988) has external calls inside a loop: perpetual.transferCashBalance(guy,devAddress,fee.toUint256()) (Exchange.sol#983)\n",
            "name": "calls-loop",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Exchange",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/consensys-MCDEX_Mai_Protocol_V2/mai-protocol-v2-4b198083ec4ae2d6851e101fc44ea333eaa3cd92/contracts/exchange/Exchange.sol",
            "function": "claimTradingFee",
            "impact": "Low",
            "line": 947,
            "line_end": 953,
            "message": "Exchange.claimTradingFee(IPerpetual,address,int256) (Exchange.sol#947-953) has external calls inside a loop: perpetual.transferCashBalance(trader,msg.sender,fee.toUint256()) (Exchange.sol#949)\n",
            "name": "calls-loop",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Exchange",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/consensys-MCDEX_Mai_Protocol_V2/mai-protocol-v2-4b198083ec4ae2d6851e101fc44ea333eaa3cd92/contracts/exchange/Exchange.sol",
            "function": "validateOrderParam",
            "impact": "Low",
            "line": 930,
            "line_end": 945,
            "message": "Exchange.validateOrderParam(IPerpetual,LibOrder.OrderParam) (Exchange.sol#930-945) has external calls inside a loop: broker = perpetual.currentBroker(orderParam.trader) (Exchange.sol#935)\n",
            "name": "calls-loop",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Exchange",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/consensys-MCDEX_Mai_Protocol_V2/mai-protocol-v2-4b198083ec4ae2d6851e101fc44ea333eaa3cd92/contracts/exchange/Exchange.sol",
            "function": "claimTradingFee",
            "impact": "Low",
            "line": 947,
            "line_end": 953,
            "message": "Exchange.claimTradingFee(IPerpetual,address,int256) (Exchange.sol#947-953) has external calls inside a loop: perpetual.transferCashBalance(msg.sender,trader,fee.neg().toUint256()) (Exchange.sol#951)\n",
            "name": "calls-loop",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Exchange",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/consensys-MCDEX_Mai_Protocol_V2/mai-protocol-v2-4b198083ec4ae2d6851e101fc44ea333eaa3cd92/contracts/exchange/Exchange.sol",
            "function": "claimDevFee",
            "impact": "Low",
            "line": 964,
            "line_end": 988,
            "message": "Exchange.claimDevFee(IPerpetual,address,uint256,uint256,uint256,int256) (Exchange.sol#964-988) has external calls inside a loop: devAddress = perpetual.devAddress() (Exchange.sol#978)\n",
            "name": "calls-loop",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Exchange",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/consensys-MCDEX_Mai_Protocol_V2/mai-protocol-v2-4b198083ec4ae2d6851e101fc44ea333eaa3cd92/contracts/exchange/Exchange.sol",
            "function": "fillOrder",
            "impact": "Low",
            "line": 858,
            "line_end": 886,
            "message": "Exchange.fillOrder(IPerpetual,LibOrder.OrderParam,LibOrder.OrderParam,uint256) (Exchange.sol#858-886) has external calls inside a loop: require(bool,string)(perpetual.isSafe(makerOrderParam.trader),maker unsafe) (Exchange.sol#880)\n",
            "name": "calls-loop",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Exchange",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/consensys-MCDEX_Mai_Protocol_V2/mai-protocol-v2-4b198083ec4ae2d6851e101fc44ea333eaa3cd92/contracts/exchange/Exchange.sol",
            "function": "claimDevFee",
            "impact": "Low",
            "line": 964,
            "line_end": 988,
            "message": "Exchange.claimDevFee(IPerpetual,address,uint256,uint256,uint256,int256) (Exchange.sol#964-988) has external calls inside a loop: available = perpetual.availableMargin(guy) (Exchange.sol#980)\n",
            "name": "calls-loop",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Exchange",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/consensys-MCDEX_Mai_Protocol_V2/mai-protocol-v2-4b198083ec4ae2d6851e101fc44ea333eaa3cd92/contracts/exchange/Exchange.sol",
            "function": "matchOrderWithAMM",
            "impact": "Low",
            "line": 888,
            "line_end": 916,
            "message": "Reentrancy in Exchange.matchOrderWithAMM(LibOrder.OrderParam,address,uint256) (Exchange.sol#888-916):\n\tExternal calls:\n\t- takerOpened = amm.sellFromWhitelisted(takerOrderParam.trader,amount,price,takerOrderParam.getExpiredAt()) (Exchange.sol#904-909)\n\t- takerOpened = amm.buyFromWhitelisted(takerOrderParam.trader,amount,price,takerOrderParam.getExpiredAt()) (Exchange.sol#911)\n\tEvent emitted after the call(s):\n\t- MatchWithAMM(_perpetual,takerOrderParam,amount) (Exchange.sol#915)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Exchange",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/consensys-MCDEX_Mai_Protocol_V2/mai-protocol-v2-4b198083ec4ae2d6851e101fc44ea333eaa3cd92/contracts/exchange/Exchange.sol",
            "function": "fillOrder",
            "impact": "Low",
            "line": 858,
            "line_end": 886,
            "message": "Reentrancy in Exchange.fillOrder(IPerpetual,LibOrder.OrderParam,LibOrder.OrderParam,uint256) (Exchange.sol#858-886):\n\tExternal calls:\n\t- takerOpened = perpetual.tradePosition(takerOrderParam.trader,takerOrderParam.side(),price,amount) (Exchange.sol#865)\n\t- makerOpened = perpetual.tradePosition(makerOrderParam.trader,makerOrderParam.side(),price,amount) (Exchange.sol#866)\n\t- claimTradingFee(perpetual,takerOrderParam.trader,takerTradingFee) (Exchange.sol#870)\n\t\t- perpetual.transferCashBalance(trader,msg.sender,fee.toUint256()) (Exchange.sol#949)\n\t\t- perpetual.transferCashBalance(msg.sender,trader,fee.neg().toUint256()) (Exchange.sol#951)\n\t- claimTradingFee(perpetual,makerOrderParam.trader,makerTradingFee) (Exchange.sol#872)\n\t\t- perpetual.transferCashBalance(trader,msg.sender,fee.toUint256()) (Exchange.sol#949)\n\t\t- perpetual.transferCashBalance(msg.sender,trader,fee.neg().toUint256()) (Exchange.sol#951)\n\t- claimTakerDevFee(perpetual,takerOrderParam.trader,price,takerOpened,amount.sub(takerOpened)) (Exchange.sol#875)\n\t\t- available = perpetual.availableMargin(guy) (Exchange.sol#980)\n\t\t- perpetual.transferCashBalance(guy,devAddress,fee.toUint256()) (Exchange.sol#983)\n\t\t- perpetual.transferCashBalance(devAddress,guy,fee.neg().toUint256()) (Exchange.sol#985)\n\t\t- require(bool,string)(perpetual.isSafe(devAddress),dev unsafe) (Exchange.sol#986)\n\t- claimMakerDevFee(perpetual,makerOrderParam.trader,price,makerOpened,amount.sub(makerOpened)) (Exchange.sol#876)\n\t\t- available = perpetual.availableMargin(guy) (Exchange.sol#980)\n\t\t- perpetual.transferCashBalance(guy,devAddress,fee.toUint256()) (Exchange.sol#983)\n\t\t- perpetual.transferCashBalance(devAddress,guy,fee.neg().toUint256()) (Exchange.sol#985)\n\t\t- require(bool,string)(perpetual.isSafe(devAddress),dev unsafe) (Exchange.sol#986)\n\t- require(bool,string)(perpetual.isIMSafe(makerOrderParam.trader),maker margin) (Exchange.sol#878)\n\t- require(bool,string)(perpetual.isSafe(makerOrderParam.trader),maker unsafe) (Exchange.sol#880)\n\tEvent emitted after the call(s):\n\t- MatchWithOrders(address(perpetual),takerOrderParam,makerOrderParam,amount) (Exchange.sol#883)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Exchange",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/consensys-MCDEX_Mai_Protocol_V2/mai-protocol-v2-4b198083ec4ae2d6851e101fc44ea333eaa3cd92/contracts/exchange/Exchange.sol",
            "function": "validateOrderParam",
            "impact": "Low",
            "line": 930,
            "line_end": 945,
            "message": "Exchange.validateOrderParam(IPerpetual,LibOrder.OrderParam) (Exchange.sol#930-945) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(orderParam.getExpiredAt() >= block.timestamp,order expired) (Exchange.sol#938)\n",
            "name": "timestamp",
            "check": "FP"
        }
    ],
    "infos": [],
    "parser": {
        "id": "slither-0.10.0",
        "mode": "solidity",
        "version": "2024/04/30"
    }
}