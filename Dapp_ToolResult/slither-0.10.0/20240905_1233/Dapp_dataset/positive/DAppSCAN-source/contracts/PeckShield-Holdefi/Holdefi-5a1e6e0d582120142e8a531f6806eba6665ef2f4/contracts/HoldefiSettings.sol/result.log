'solc --version' running
'solc /sb/HoldefiSettings.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/sb' running

Contract locking ether found:
	Contract HoldefiSettings (../../sb/HoldefiSettings.sol#375-876) has payable functions:
	 - HoldefiSettings.receive() (../../sb/HoldefiSettings.sol#492-494)
	But does not have a function to withdraw the ether
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#contracts-that-lock-ether

Reentrancy in HoldefiSettings.addMarket(address,uint256,uint256) (../../sb/HoldefiSettings.sol#661-680):
	External calls:
	- setBorrowRateInternal(market,borrowRate) (../../sb/HoldefiSettings.sol#676)
		- holdefiContract.beforeChangeBorrowRate(market) (../../sb/HoldefiSettings.sol#768)
	- setSuppliersShareRateInternal(market,suppliersShareRate) (../../sb/HoldefiSettings.sol#677)
		- holdefiContract.beforeChangeSupplyRate(market) (../../sb/HoldefiSettings.sol#797)
	State variables written after the call(s):
	- setSuppliersShareRateInternal(market,suppliersShareRate) (../../sb/HoldefiSettings.sol#677)
		- marketAssets[market].suppliersShareRate = newSuppliersShareRate (../../sb/HoldefiSettings.sol#806)
		- marketAssets[market].suppliersShareRateUpdateTime = currentTime (../../sb/HoldefiSettings.sol#807)
	HoldefiSettings.marketAssets (../../sb/HoldefiSettings.sol#437) can be used in cross function reentrancies:
	- HoldefiSettings.activateMarketInternal(address) (../../sb/HoldefiSettings.sol#743-746)
	- HoldefiSettings.addMarket(address,uint256,uint256) (../../sb/HoldefiSettings.sol#661-680)
	- HoldefiSettings.deactivateMarket(address) (../../sb/HoldefiSettings.sol#506-509)
	- HoldefiSettings.getInterests(address) (../../sb/HoldefiSettings.sol#549-568)
	- HoldefiSettings.marketAssets (../../sb/HoldefiSettings.sol#437)
	- HoldefiSettings.marketIsExist(address) (../../sb/HoldefiSettings.sol#478-481)
	- HoldefiSettings.removeMarket(address) (../../sb/HoldefiSettings.sol#685-709)
	- HoldefiSettings.resetPromotionRate(address) (../../sb/HoldefiSettings.sol#588-593)
	- HoldefiSettings.setBorrowRateInternal(address,uint256) (../../sb/HoldefiSettings.sol#755-775)
	- HoldefiSettings.setPromotionRate(address,uint256) (../../sb/HoldefiSettings.sol#575-583)
	- HoldefiSettings.setSuppliersShareRateInternal(address,uint256) (../../sb/HoldefiSettings.sol#778-808)
	- activateMarketInternal(market) (../../sb/HoldefiSettings.sol#679)
		- marketAssets[market].isActive = true (../../sb/HoldefiSettings.sol#744)
	HoldefiSettings.marketAssets (../../sb/HoldefiSettings.sol#437) can be used in cross function reentrancies:
	- HoldefiSettings.activateMarketInternal(address) (../../sb/HoldefiSettings.sol#743-746)
	- HoldefiSettings.addMarket(address,uint256,uint256) (../../sb/HoldefiSettings.sol#661-680)
	- HoldefiSettings.deactivateMarket(address) (../../sb/HoldefiSettings.sol#506-509)
	- HoldefiSettings.getInterests(address) (../../sb/HoldefiSettings.sol#549-568)
	- HoldefiSettings.marketAssets (../../sb/HoldefiSettings.sol#437)
	- HoldefiSettings.marketIsExist(address) (../../sb/HoldefiSettings.sol#478-481)
	- HoldefiSettings.removeMarket(address) (../../sb/HoldefiSettings.sol#685-709)
	- HoldefiSettings.resetPromotionRate(address) (../../sb/HoldefiSettings.sol#588-593)
	- HoldefiSettings.setBorrowRateInternal(address,uint256) (../../sb/HoldefiSettings.sol#755-775)
	- HoldefiSettings.setPromotionRate(address,uint256) (../../sb/HoldefiSettings.sol#575-583)
	- HoldefiSettings.setSuppliersShareRateInternal(address,uint256) (../../sb/HoldefiSettings.sol#778-808)
Reentrancy in HoldefiSettings.removeMarket(address) (../../sb/HoldefiSettings.sol#685-709):
	External calls:
	- holdefiContract.beforeChangeBorrowRate(market) (../../sb/HoldefiSettings.sol#689)
	State variables written after the call(s):
	- delete marketAssets[market] (../../sb/HoldefiSettings.sol#707)
	HoldefiSettings.marketAssets (../../sb/HoldefiSettings.sol#437) can be used in cross function reentrancies:
	- HoldefiSettings.activateMarketInternal(address) (../../sb/HoldefiSettings.sol#743-746)
	- HoldefiSettings.addMarket(address,uint256,uint256) (../../sb/HoldefiSettings.sol#661-680)
	- HoldefiSettings.deactivateMarket(address) (../../sb/HoldefiSettings.sol#506-509)
	- HoldefiSettings.getInterests(address) (../../sb/HoldefiSettings.sol#549-568)
	- HoldefiSettings.marketAssets (../../sb/HoldefiSettings.sol#437)
	- HoldefiSettings.marketIsExist(address) (../../sb/HoldefiSettings.sol#478-481)
	- HoldefiSettings.removeMarket(address) (../../sb/HoldefiSettings.sol#685-709)
	- HoldefiSettings.resetPromotionRate(address) (../../sb/HoldefiSettings.sol#588-593)
	- HoldefiSettings.setBorrowRateInternal(address,uint256) (../../sb/HoldefiSettings.sol#755-775)
	- HoldefiSettings.setPromotionRate(address,uint256) (../../sb/HoldefiSettings.sol#575-583)
	- HoldefiSettings.setSuppliersShareRateInternal(address,uint256) (../../sb/HoldefiSettings.sol#778-808)
Reentrancy in HoldefiSettings.setBorrowRateInternal(address,uint256) (../../sb/HoldefiSettings.sol#755-775):
	External calls:
	- holdefiContract.beforeChangeBorrowRate(market) (../../sb/HoldefiSettings.sol#768)
	State variables written after the call(s):
	- marketAssets[market].borrowRate = newBorrowRate (../../sb/HoldefiSettings.sol#773)
	HoldefiSettings.marketAssets (../../sb/HoldefiSettings.sol#437) can be used in cross function reentrancies:
	- HoldefiSettings.activateMarketInternal(address) (../../sb/HoldefiSettings.sol#743-746)
	- HoldefiSettings.addMarket(address,uint256,uint256) (../../sb/HoldefiSettings.sol#661-680)
	- HoldefiSettings.deactivateMarket(address) (../../sb/HoldefiSettings.sol#506-509)
	- HoldefiSettings.getInterests(address) (../../sb/HoldefiSettings.sol#549-568)
	- HoldefiSettings.marketAssets (../../sb/HoldefiSettings.sol#437)
	- HoldefiSettings.marketIsExist(address) (../../sb/HoldefiSettings.sol#478-481)
	- HoldefiSettings.removeMarket(address) (../../sb/HoldefiSettings.sol#685-709)
	- HoldefiSettings.resetPromotionRate(address) (../../sb/HoldefiSettings.sol#588-593)
	- HoldefiSettings.setBorrowRateInternal(address,uint256) (../../sb/HoldefiSettings.sol#755-775)
	- HoldefiSettings.setPromotionRate(address,uint256) (../../sb/HoldefiSettings.sol#575-583)
	- HoldefiSettings.setSuppliersShareRateInternal(address,uint256) (../../sb/HoldefiSettings.sol#778-808)
	- marketAssets[market].borrowRateUpdateTime = currentTime (../../sb/HoldefiSettings.sol#774)
	HoldefiSettings.marketAssets (../../sb/HoldefiSettings.sol#437) can be used in cross function reentrancies:
	- HoldefiSettings.activateMarketInternal(address) (../../sb/HoldefiSettings.sol#743-746)
	- HoldefiSettings.addMarket(address,uint256,uint256) (../../sb/HoldefiSettings.sol#661-680)
	- HoldefiSettings.deactivateMarket(address) (../../sb/HoldefiSettings.sol#506-509)
	- HoldefiSettings.getInterests(address) (../../sb/HoldefiSettings.sol#549-568)
	- HoldefiSettings.marketAssets (../../sb/HoldefiSettings.sol#437)
	- HoldefiSettings.marketIsExist(address) (../../sb/HoldefiSettings.sol#478-481)
	- HoldefiSettings.removeMarket(address) (../../sb/HoldefiSettings.sol#685-709)
	- HoldefiSettings.resetPromotionRate(address) (../../sb/HoldefiSettings.sol#588-593)
	- HoldefiSettings.setBorrowRateInternal(address,uint256) (../../sb/HoldefiSettings.sol#755-775)
	- HoldefiSettings.setPromotionRate(address,uint256) (../../sb/HoldefiSettings.sol#575-583)
	- HoldefiSettings.setSuppliersShareRateInternal(address,uint256) (../../sb/HoldefiSettings.sol#778-808)
Reentrancy in HoldefiSettings.setSuppliersShareRateInternal(address,uint256) (../../sb/HoldefiSettings.sol#778-808):
	External calls:
	- holdefiContract.beforeChangeSupplyRate(market) (../../sb/HoldefiSettings.sol#797)
	State variables written after the call(s):
	- marketAssets[market].suppliersShareRate = newSuppliersShareRate (../../sb/HoldefiSettings.sol#806)
	HoldefiSettings.marketAssets (../../sb/HoldefiSettings.sol#437) can be used in cross function reentrancies:
	- HoldefiSettings.activateMarketInternal(address) (../../sb/HoldefiSettings.sol#743-746)
	- HoldefiSettings.addMarket(address,uint256,uint256) (../../sb/HoldefiSettings.sol#661-680)
	- HoldefiSettings.deactivateMarket(address) (../../sb/HoldefiSettings.sol#506-509)
	- HoldefiSettings.getInterests(address) (../../sb/HoldefiSettings.sol#549-568)
	- HoldefiSettings.marketAssets (../../sb/HoldefiSettings.sol#437)
	- HoldefiSettings.marketIsExist(address) (../../sb/HoldefiSettings.sol#478-481)
	- HoldefiSettings.removeMarket(address) (../../sb/HoldefiSettings.sol#685-709)
	- HoldefiSettings.resetPromotionRate(address) (../../sb/HoldefiSettings.sol#588-593)
	- HoldefiSettings.setBorrowRateInternal(address,uint256) (../../sb/HoldefiSettings.sol#755-775)
	- HoldefiSettings.setPromotionRate(address,uint256) (../../sb/HoldefiSettings.sol#575-583)
	- HoldefiSettings.setSuppliersShareRateInternal(address,uint256) (../../sb/HoldefiSettings.sol#778-808)
	- marketAssets[market].suppliersShareRateUpdateTime = currentTime (../../sb/HoldefiSettings.sol#807)
	HoldefiSettings.marketAssets (../../sb/HoldefiSettings.sol#437) can be used in cross function reentrancies:
	- HoldefiSettings.activateMarketInternal(address) (../../sb/HoldefiSettings.sol#743-746)
	- HoldefiSettings.addMarket(address,uint256,uint256) (../../sb/HoldefiSettings.sol#661-680)
	- HoldefiSettings.deactivateMarket(address) (../../sb/HoldefiSettings.sol#506-509)
	- HoldefiSettings.getInterests(address) (../../sb/HoldefiSettings.sol#549-568)
	- HoldefiSettings.marketAssets (../../sb/HoldefiSettings.sol#437)
	- HoldefiSettings.marketIsExist(address) (../../sb/HoldefiSettings.sol#478-481)
	- HoldefiSettings.removeMarket(address) (../../sb/HoldefiSettings.sol#685-709)
	- HoldefiSettings.resetPromotionRate(address) (../../sb/HoldefiSettings.sol#588-593)
	- HoldefiSettings.setBorrowRateInternal(address,uint256) (../../sb/HoldefiSettings.sol#755-775)
	- HoldefiSettings.setPromotionRate(address,uint256) (../../sb/HoldefiSettings.sol#575-583)
	- HoldefiSettings.setSuppliersShareRateInternal(address,uint256) (../../sb/HoldefiSettings.sol#778-808)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1

HoldefiSettings.removeMarket(address).index (../../sb/HoldefiSettings.sol#692) is a local variable never initialized
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-local-variables

Reentrancy in HoldefiSettings.removeMarket(address) (../../sb/HoldefiSettings.sol#685-709):
	External calls:
	- holdefiContract.beforeChangeBorrowRate(market) (../../sb/HoldefiSettings.sol#689)
	State variables written after the call(s):
	- marketsList[i] = marketsList[i + 1] (../../sb/HoldefiSettings.sol#702)
	- marketsList.pop() (../../sb/HoldefiSettings.sol#706)
Reentrancy in HoldefiSettings.setPromotionRate(address,uint256) (../../sb/HoldefiSettings.sol#575-583):
	External calls:
	- holdefiContract.beforeChangeSupplyRate(market) (../../sb/HoldefiSettings.sol#578)
	- holdefiContract.reserveSettlement(market) (../../sb/HoldefiSettings.sol#579)
	State variables written after the call(s):
	- marketAssets[market].promotionRate = newPromotionRate (../../sb/HoldefiSettings.sol#582)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

Reentrancy in HoldefiSettings.addMarket(address,uint256,uint256) (../../sb/HoldefiSettings.sol#661-680):
	External calls:
	- setBorrowRateInternal(market,borrowRate) (../../sb/HoldefiSettings.sol#676)
		- holdefiContract.beforeChangeBorrowRate(market) (../../sb/HoldefiSettings.sol#768)
	- setSuppliersShareRateInternal(market,suppliersShareRate) (../../sb/HoldefiSettings.sol#677)
		- holdefiContract.beforeChangeSupplyRate(market) (../../sb/HoldefiSettings.sol#797)
	Event emitted after the call(s):
	- MarketActivationChanged(market,true) (../../sb/HoldefiSettings.sol#745)
		- activateMarketInternal(market) (../../sb/HoldefiSettings.sol#679)
	- SuppliersShareRateChanged(market,newSuppliersShareRate,marketAssets[market].suppliersShareRate) (../../sb/HoldefiSettings.sol#800-804)
		- setSuppliersShareRateInternal(market,suppliersShareRate) (../../sb/HoldefiSettings.sol#677)
Reentrancy in HoldefiSettings.removeMarket(address) (../../sb/HoldefiSettings.sol#685-709):
	External calls:
	- holdefiContract.beforeChangeBorrowRate(market) (../../sb/HoldefiSettings.sol#689)
	Event emitted after the call(s):
	- MarketExistenceChanged(market,false) (../../sb/HoldefiSettings.sol#708)
Reentrancy in HoldefiSettings.setBorrowRateInternal(address,uint256) (../../sb/HoldefiSettings.sol#755-775):
	External calls:
	- holdefiContract.beforeChangeBorrowRate(market) (../../sb/HoldefiSettings.sol#768)
	Event emitted after the call(s):
	- BorrowRateChanged(market,newBorrowRate,marketAssets[market].borrowRate) (../../sb/HoldefiSettings.sol#771)
Reentrancy in HoldefiSettings.setPromotionRate(address,uint256) (../../sb/HoldefiSettings.sol#575-583):
	External calls:
	- holdefiContract.beforeChangeSupplyRate(market) (../../sb/HoldefiSettings.sol#578)
	- holdefiContract.reserveSettlement(market) (../../sb/HoldefiSettings.sol#579)
	Event emitted after the call(s):
	- PromotionRateChanged(market,newPromotionRate,marketAssets[market].promotionRate) (../../sb/HoldefiSettings.sol#581)
Reentrancy in HoldefiSettings.setSuppliersShareRateInternal(address,uint256) (../../sb/HoldefiSettings.sol#778-808):
	External calls:
	- holdefiContract.beforeChangeSupplyRate(market) (../../sb/HoldefiSettings.sol#797)
	Event emitted after the call(s):
	- SuppliersShareRateChanged(market,newSuppliersShareRate,marketAssets[market].suppliersShareRate) (../../sb/HoldefiSettings.sol#800-804)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

HoldefiSettings.setBorrowRateInternal(address,uint256) (../../sb/HoldefiSettings.sol#755-775) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(deltaTime >= periodBetweenUpdates,Increasing rate is not allowed at this time) (../../sb/HoldefiSettings.sol#762)
HoldefiSettings.setSuppliersShareRateInternal(address,uint256) (../../sb/HoldefiSettings.sol#778-808) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(deltaTime >= periodBetweenUpdates,Decreasing rate is not allowed at this time) (../../sb/HoldefiSettings.sol#788)
HoldefiSettings.setValueToLoanRateInternal(address,uint256) (../../sb/HoldefiSettings.sol#811-838) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(deltaTime >= periodBetweenUpdates,Increasing rate is not allowed at this time) (../../sb/HoldefiSettings.sol#824)
HoldefiSettings.setPenaltyRateInternal(address,uint256) (../../sb/HoldefiSettings.sol#841-864) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(deltaTime >= periodBetweenUpdates,Increasing rate is not allowed at this time) (../../sb/HoldefiSettings.sol#855)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

SafeMath.div(uint256,uint256,string) (../../sb/HoldefiSettings.sol#191-194) is never used and should be removed
SafeMath.mod(uint256,uint256) (../../sb/HoldefiSettings.sol#153-156) is never used and should be removed
SafeMath.mod(uint256,uint256,string) (../../sb/HoldefiSettings.sol#211-214) is never used and should be removed
SafeMath.sub(uint256,uint256,string) (../../sb/HoldefiSettings.sol#171-174) is never used and should be removed
SafeMath.tryAdd(uint256,uint256) (../../sb/HoldefiSettings.sol#25-29) is never used and should be removed
SafeMath.tryDiv(uint256,uint256) (../../sb/HoldefiSettings.sol#61-64) is never used and should be removed
SafeMath.tryMod(uint256,uint256) (../../sb/HoldefiSettings.sol#71-74) is never used and should be removed
SafeMath.tryMul(uint256,uint256) (../../sb/HoldefiSettings.sol#46-54) is never used and should be removed
SafeMath.trySub(uint256,uint256) (../../sb/HoldefiSettings.sol#36-39) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code

Pragma version0.6.12 (../../sb/HoldefiSettings.sol#1) allows old versions
solc-0.6.12 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Constant HoldefiSettings.fivePercentLiquidationGap (../../sb/HoldefiSettings.sol#435) is not in UPPER_CASE_WITH_UNDERSCORES
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Variable HoldefiSettings.minSuppliersShareRate (../../sb/HoldefiSettings.sol#417) is too similar to HoldefiSettings.setSuppliersShareRateInternal(address,uint256).newSuppliersShareRate (../../sb/HoldefiSettings.sol#778)
Variable HoldefiSettings.minSuppliersShareRate (../../sb/HoldefiSettings.sol#417) is too similar to HoldefiSettings.setSuppliersShareRate(address,uint256).newSuppliersShareRate (../../sb/HoldefiSettings.sol#611)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#variable-names-too-similar
/sb/HoldefiSettings.sol analyzed (5 contracts with 93 detectors), 31 result(s) found
