'solc --version' running
'solc /sb/Holdefi.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/sb' running
Compilation warnings/errors on /sb/Holdefi.sol:
Warning: Contract code size exceeds 24576 bytes (a limit introduced in Spurious Dragon). This contract may not be deployable on mainnet. Consider enabling the optimizer (with a low "runs" value!), turning off revert strings, or using libraries.
   --> /sb/Holdefi.sol:578:1:
    |
578 | contract Holdefi is HoldefiPausableOwnable {
    | ^ (Relevant source part starts here and spans across multiple lines).



Reentrancy in Holdefi.repayBorrowInternal(address,address,address,uint256) (../../sb/Holdefi.sol#1808-1860):
	External calls:
	- transferFromHoldefi(msg.sender,ethAddress,extra) (../../sb/Holdefi.sol#1824)
		- (success,None) = receiver.call{value: amount}() (../../sb/Holdefi.sol#1608)
		- success = token.transfer(receiver,amount) (../../sb/Holdefi.sol#1612)
	- transferToHoldefi(address(this),market,transferAmount) (../../sb/Holdefi.sol#1829)
		- success = token.transferFrom(msg.sender,receiver,amount) (../../sb/Holdefi.sol#1619)
	External calls sending eth:
	- transferFromHoldefi(msg.sender,ethAddress,extra) (../../sb/Holdefi.sol#1824)
		- (success,None) = receiver.call{value: amount}() (../../sb/Holdefi.sol#1608)
	State variables written after the call(s):
	- borrows[account][collateral][market].balance = borrowData.balance (../../sb/Holdefi.sol#1841)
	Holdefi.borrows (../../sb/Holdefi.sol#665) can be used in cross function reentrancies:
	- Holdefi.approveBorrow(address,address,address,uint256) (../../sb/Holdefi.sol#1316-1322)
	- Holdefi.borrowBehalf(address,address,address,uint256,uint16) (../../sb/Holdefi.sol#1341-1351)
	- Holdefi.borrowInternal(address,address,address,uint256,uint16) (../../sb/Holdefi.sol#1760-1804)
	- Holdefi.getAccountBorrow(address,address,address) (../../sb/Holdefi.sol#860-879)
	- Holdefi.getAccountBorrowAllowance(address,address,address,address) (../../sb/Holdefi.sol#969-980)
	- Holdefi.liquidateBorrowerCollateral(address,address,address) (../../sb/Holdefi.sol#1398-1438)
	- Holdefi.repayBorrowInternal(address,address,address,uint256) (../../sb/Holdefi.sol#1808-1860)
	- borrows[account][collateral][market].accumulatedInterest = borrowData.interest (../../sb/Holdefi.sol#1842)
	Holdefi.borrows (../../sb/Holdefi.sol#665) can be used in cross function reentrancies:
	- Holdefi.approveBorrow(address,address,address,uint256) (../../sb/Holdefi.sol#1316-1322)
	- Holdefi.borrowBehalf(address,address,address,uint256,uint16) (../../sb/Holdefi.sol#1341-1351)
	- Holdefi.borrowInternal(address,address,address,uint256,uint16) (../../sb/Holdefi.sol#1760-1804)
	- Holdefi.getAccountBorrow(address,address,address) (../../sb/Holdefi.sol#860-879)
	- Holdefi.getAccountBorrowAllowance(address,address,address,address) (../../sb/Holdefi.sol#969-980)
	- Holdefi.liquidateBorrowerCollateral(address,address,address) (../../sb/Holdefi.sol#1398-1438)
	- Holdefi.repayBorrowInternal(address,address,address,uint256) (../../sb/Holdefi.sol#1808-1860)
	- borrows[account][collateral][market].lastInterestIndex = borrowData.currentIndex (../../sb/Holdefi.sol#1843)
	Holdefi.borrows (../../sb/Holdefi.sol#665) can be used in cross function reentrancies:
	- Holdefi.approveBorrow(address,address,address,uint256) (../../sb/Holdefi.sol#1316-1322)
	- Holdefi.borrowBehalf(address,address,address,uint256,uint16) (../../sb/Holdefi.sol#1341-1351)
	- Holdefi.borrowInternal(address,address,address,uint256,uint16) (../../sb/Holdefi.sol#1760-1804)
	- Holdefi.getAccountBorrow(address,address,address) (../../sb/Holdefi.sol#860-879)
	- Holdefi.getAccountBorrowAllowance(address,address,address,address) (../../sb/Holdefi.sol#969-980)
	- Holdefi.liquidateBorrowerCollateral(address,address,address) (../../sb/Holdefi.sol#1398-1438)
	- Holdefi.repayBorrowInternal(address,address,address,uint256) (../../sb/Holdefi.sol#1808-1860)
Reentrancy in Holdefi.repayBorrowInternal(address,address,address,uint256) (../../sb/Holdefi.sol#1808-1860):
	External calls:
	- transferFromHoldefi(msg.sender,ethAddress,extra) (../../sb/Holdefi.sol#1824)
		- (success,None) = receiver.call{value: amount}() (../../sb/Holdefi.sol#1608)
		- success = token.transfer(receiver,amount) (../../sb/Holdefi.sol#1612)
	- transferToHoldefi(address(this),market,transferAmount) (../../sb/Holdefi.sol#1829)
		- success = token.transferFrom(msg.sender,receiver,amount) (../../sb/Holdefi.sol#1619)
	- beforeChangeSupplyRate(market) (../../sb/Holdefi.sol#1846)
		- holdefiSettings.resetPromotionRate(market) (../../sb/Holdefi.sol#1600)
	External calls sending eth:
	- transferFromHoldefi(msg.sender,ethAddress,extra) (../../sb/Holdefi.sol#1824)
		- (success,None) = receiver.call{value: amount}() (../../sb/Holdefi.sol#1608)
	State variables written after the call(s):
	- beforeChangeSupplyRate(market) (../../sb/Holdefi.sol#1846)
		- marketAssets[market].promotionReserveScaled = reserveScaled (../../sb/Holdefi.sol#1582)
		- marketAssets[market].promotionDebtScaled = debtScaled (../../sb/Holdefi.sol#1594)
		- marketAssets[market].promotionReserveLastUpdateTime = block.timestamp (../../sb/Holdefi.sol#1583)
		- marketAssets[market].promotionDebtLastUpdateTime = block.timestamp (../../sb/Holdefi.sol#1595)
		- marketAssets[market].supplyIndex = currentSupplyIndex (../../sb/Holdefi.sol#1560)
		- marketAssets[market].supplyIndexUpdateTime = currentTime (../../sb/Holdefi.sol#1561)
	Holdefi.marketAssets (../../sb/Holdefi.sol#653) can be used in cross function reentrancies:
	- Holdefi.borrowInternal(address,address,address,uint256,uint16) (../../sb/Holdefi.sol#1760-1804)
	- Holdefi.depositPromotionReserveInternal(address,uint256) (../../sb/Holdefi.sol#1894-1907)
	- Holdefi.getCurrentBorrowIndex(address) (../../sb/Holdefi.sol#1086-1102)
	- Holdefi.getCurrentSupplyIndex(address) (../../sb/Holdefi.sol#1061-1078)
	- Holdefi.getPromotionDebt(address) (../../sb/Holdefi.sol#1131-1147)
	- Holdefi.getPromotionReserve(address) (../../sb/Holdefi.sol#1109-1124)
	- Holdefi.liquidateBorrowerCollateral(address,address,address) (../../sb/Holdefi.sol#1398-1438)
	- Holdefi.marketAssets (../../sb/Holdefi.sol#653)
	- Holdefi.repayBorrowInternal(address,address,address,uint256) (../../sb/Holdefi.sol#1808-1860)
	- Holdefi.reserveSettlement(address) (../../sb/Holdefi.sol#1536-1552)
	- Holdefi.supplyInternal(address,address,uint256,uint16) (../../sb/Holdefi.sol#1624-1655)
	- Holdefi.updateBorrowIndex(address) (../../sb/Holdefi.sol#1568-1575)
	- Holdefi.updatePromotionDebt(address) (../../sb/Holdefi.sol#1591-1602)
	- Holdefi.updatePromotionReserve(address) (../../sb/Holdefi.sol#1579-1586)
	- Holdefi.updateSupplyIndex(address) (../../sb/Holdefi.sol#1556-1564)
	- Holdefi.withdrawPromotionReserve(address,uint256) (../../sb/Holdefi.sol#1511-1524)
	- Holdefi.withdrawSupplyInternal(address,address,uint256) (../../sb/Holdefi.sol#1658-1701)
	- marketAssets[market].totalBorrow = marketAssets[market].totalBorrow.sub(remaining) (../../sb/Holdefi.sol#1848)
	Holdefi.marketAssets (../../sb/Holdefi.sol#653) can be used in cross function reentrancies:
	- Holdefi.borrowInternal(address,address,address,uint256,uint16) (../../sb/Holdefi.sol#1760-1804)
	- Holdefi.depositPromotionReserveInternal(address,uint256) (../../sb/Holdefi.sol#1894-1907)
	- Holdefi.getCurrentBorrowIndex(address) (../../sb/Holdefi.sol#1086-1102)
	- Holdefi.getCurrentSupplyIndex(address) (../../sb/Holdefi.sol#1061-1078)
	- Holdefi.getPromotionDebt(address) (../../sb/Holdefi.sol#1131-1147)
	- Holdefi.getPromotionReserve(address) (../../sb/Holdefi.sol#1109-1124)
	- Holdefi.liquidateBorrowerCollateral(address,address,address) (../../sb/Holdefi.sol#1398-1438)
	- Holdefi.marketAssets (../../sb/Holdefi.sol#653)
	- Holdefi.repayBorrowInternal(address,address,address,uint256) (../../sb/Holdefi.sol#1808-1860)
	- Holdefi.reserveSettlement(address) (../../sb/Holdefi.sol#1536-1552)
	- Holdefi.supplyInternal(address,address,uint256,uint16) (../../sb/Holdefi.sol#1624-1655)
	- Holdefi.updateBorrowIndex(address) (../../sb/Holdefi.sol#1568-1575)
	- Holdefi.updatePromotionDebt(address) (../../sb/Holdefi.sol#1591-1602)
	- Holdefi.updatePromotionReserve(address) (../../sb/Holdefi.sol#1579-1586)
	- Holdefi.updateSupplyIndex(address) (../../sb/Holdefi.sol#1556-1564)
	- Holdefi.withdrawPromotionReserve(address,uint256) (../../sb/Holdefi.sol#1511-1524)
	- Holdefi.withdrawSupplyInternal(address,address,uint256) (../../sb/Holdefi.sol#1658-1701)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities

Holdefi.liquidateBorrowerCollateral(address,address,address) (../../sb/Holdefi.sol#1398-1438) deletes Holdefi.MarketAccount (../../sb/Holdefi.sol#608-614) which contains a mapping:
	-delete borrows[borrower][collateral][market] (../../sb/Holdefi.sol#1432)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#deletion-on-mapping-containing-a-structure

Reentrancy in Holdefi.borrowInternal(address,address,address,uint256,uint16) (../../sb/Holdefi.sol#1760-1804):
	External calls:
	- beforeChangeSupplyRate(market) (../../sb/Holdefi.sol#1787)
		- holdefiSettings.resetPromotionRate(market) (../../sb/Holdefi.sol#1600)
	State variables written after the call(s):
	- marketAssets[market].totalBorrow = marketAssets[market].totalBorrow.add(amount) (../../sb/Holdefi.sol#1789)
	Holdefi.marketAssets (../../sb/Holdefi.sol#653) can be used in cross function reentrancies:
	- Holdefi.borrowInternal(address,address,address,uint256,uint16) (../../sb/Holdefi.sol#1760-1804)
	- Holdefi.depositPromotionReserveInternal(address,uint256) (../../sb/Holdefi.sol#1894-1907)
	- Holdefi.getCurrentBorrowIndex(address) (../../sb/Holdefi.sol#1086-1102)
	- Holdefi.getCurrentSupplyIndex(address) (../../sb/Holdefi.sol#1061-1078)
	- Holdefi.getPromotionDebt(address) (../../sb/Holdefi.sol#1131-1147)
	- Holdefi.getPromotionReserve(address) (../../sb/Holdefi.sol#1109-1124)
	- Holdefi.liquidateBorrowerCollateral(address,address,address) (../../sb/Holdefi.sol#1398-1438)
	- Holdefi.marketAssets (../../sb/Holdefi.sol#653)
	- Holdefi.repayBorrowInternal(address,address,address,uint256) (../../sb/Holdefi.sol#1808-1860)
	- Holdefi.reserveSettlement(address) (../../sb/Holdefi.sol#1536-1552)
	- Holdefi.supplyInternal(address,address,uint256,uint16) (../../sb/Holdefi.sol#1624-1655)
	- Holdefi.updateBorrowIndex(address) (../../sb/Holdefi.sol#1568-1575)
	- Holdefi.updatePromotionDebt(address) (../../sb/Holdefi.sol#1591-1602)
	- Holdefi.updatePromotionReserve(address) (../../sb/Holdefi.sol#1579-1586)
	- Holdefi.updateSupplyIndex(address) (../../sb/Holdefi.sol#1556-1564)
	- Holdefi.withdrawPromotionReserve(address,uint256) (../../sb/Holdefi.sol#1511-1524)
	- Holdefi.withdrawSupplyInternal(address,address,uint256) (../../sb/Holdefi.sol#1658-1701)
Reentrancy in Holdefi.buyLiquidatedCollateralInternal(address,address,uint256) (../../sb/Holdefi.sol#1863-1891):
	External calls:
	- transferToHoldefi(address(this),market,marketAmount) (../../sb/Holdefi.sol#1882)
		- success = token.transferFrom(msg.sender,receiver,amount) (../../sb/Holdefi.sol#1619)
	State variables written after the call(s):
	- collateralAssets[collateral].totalLiquidatedCollateral = totalLiquidatedCollateral.sub(collateralAmountWithDiscount) (../../sb/Holdefi.sol#1885)
	Holdefi.collateralAssets (../../sb/Holdefi.sol#656) can be used in cross function reentrancies:
	- Holdefi.buyLiquidatedCollateralInternal(address,address,uint256) (../../sb/Holdefi.sol#1863-1891)
	- Holdefi.collateralAssets (../../sb/Holdefi.sol#656)
	- Holdefi.collateralizeInternal(address,address,uint256) (../../sb/Holdefi.sol#1704-1723)
	- Holdefi.depositLiquidationReserveInternal(address,uint256) (../../sb/Holdefi.sol#1910-1924)
	- Holdefi.getLiquidationReserve(address) (../../sb/Holdefi.sol#1012-1036)
	- Holdefi.liquidateBorrowerCollateral(address,address,address) (../../sb/Holdefi.sol#1398-1438)
	- Holdefi.withdrawCollateralInternal(address,address,uint256) (../../sb/Holdefi.sol#1726-1757)
	- Holdefi.withdrawLiquidationReserve(address,uint256) (../../sb/Holdefi.sol#1477-1490)
	- marketDebt[collateral][market] = debt.sub(marketAmount) (../../sb/Holdefi.sol#1886)
	Holdefi.marketDebt (../../sb/Holdefi.sol#659) can be used in cross function reentrancies:
	- Holdefi.buyLiquidatedCollateralInternal(address,address,uint256) (../../sb/Holdefi.sol#1863-1891)
	- Holdefi.getLiquidationReserve(address) (../../sb/Holdefi.sol#1012-1036)
	- Holdefi.liquidateBorrowerCollateral(address,address,address) (../../sb/Holdefi.sol#1398-1438)
	- Holdefi.marketDebt (../../sb/Holdefi.sol#659)
Reentrancy in Holdefi.liquidateBorrowerCollateral(address,address,address) (../../sb/Holdefi.sol#1398-1438):
	External calls:
	- beforeChangeSupplyRate(market) (../../sb/Holdefi.sol#1433)
		- holdefiSettings.resetPromotionRate(market) (../../sb/Holdefi.sol#1600)
	State variables written after the call(s):
	- marketAssets[market].totalBorrow = marketAssets[market].totalBorrow.sub(borrowData.balance) (../../sb/Holdefi.sol#1434)
	Holdefi.marketAssets (../../sb/Holdefi.sol#653) can be used in cross function reentrancies:
	- Holdefi.borrowInternal(address,address,address,uint256,uint16) (../../sb/Holdefi.sol#1760-1804)
	- Holdefi.depositPromotionReserveInternal(address,uint256) (../../sb/Holdefi.sol#1894-1907)
	- Holdefi.getCurrentBorrowIndex(address) (../../sb/Holdefi.sol#1086-1102)
	- Holdefi.getCurrentSupplyIndex(address) (../../sb/Holdefi.sol#1061-1078)
	- Holdefi.getPromotionDebt(address) (../../sb/Holdefi.sol#1131-1147)
	- Holdefi.getPromotionReserve(address) (../../sb/Holdefi.sol#1109-1124)
	- Holdefi.liquidateBorrowerCollateral(address,address,address) (../../sb/Holdefi.sol#1398-1438)
	- Holdefi.marketAssets (../../sb/Holdefi.sol#653)
	- Holdefi.repayBorrowInternal(address,address,address,uint256) (../../sb/Holdefi.sol#1808-1860)
	- Holdefi.reserveSettlement(address) (../../sb/Holdefi.sol#1536-1552)
	- Holdefi.supplyInternal(address,address,uint256,uint16) (../../sb/Holdefi.sol#1624-1655)
	- Holdefi.updateBorrowIndex(address) (../../sb/Holdefi.sol#1568-1575)
	- Holdefi.updatePromotionDebt(address) (../../sb/Holdefi.sol#1591-1602)
	- Holdefi.updatePromotionReserve(address) (../../sb/Holdefi.sol#1579-1586)
	- Holdefi.updateSupplyIndex(address) (../../sb/Holdefi.sol#1556-1564)
	- Holdefi.withdrawPromotionReserve(address,uint256) (../../sb/Holdefi.sol#1511-1524)
	- Holdefi.withdrawSupplyInternal(address,address,uint256) (../../sb/Holdefi.sol#1658-1701)
Reentrancy in Holdefi.supplyInternal(address,address,uint256,uint16) (../../sb/Holdefi.sol#1624-1655):
	External calls:
	- transferToHoldefi(address(this),market,amount) (../../sb/Holdefi.sol#1630)
		- success = token.transferFrom(msg.sender,receiver,amount) (../../sb/Holdefi.sol#1619)
	- beforeChangeSupplyRate(market) (../../sb/Holdefi.sol#1641)
		- holdefiSettings.resetPromotionRate(market) (../../sb/Holdefi.sol#1600)
	State variables written after the call(s):
	- marketAssets[market].totalSupply = marketAssets[market].totalSupply.add(amount) (../../sb/Holdefi.sol#1643)
	Holdefi.marketAssets (../../sb/Holdefi.sol#653) can be used in cross function reentrancies:
	- Holdefi.borrowInternal(address,address,address,uint256,uint16) (../../sb/Holdefi.sol#1760-1804)
	- Holdefi.depositPromotionReserveInternal(address,uint256) (../../sb/Holdefi.sol#1894-1907)
	- Holdefi.getCurrentBorrowIndex(address) (../../sb/Holdefi.sol#1086-1102)
	- Holdefi.getCurrentSupplyIndex(address) (../../sb/Holdefi.sol#1061-1078)
	- Holdefi.getPromotionDebt(address) (../../sb/Holdefi.sol#1131-1147)
	- Holdefi.getPromotionReserve(address) (../../sb/Holdefi.sol#1109-1124)
	- Holdefi.liquidateBorrowerCollateral(address,address,address) (../../sb/Holdefi.sol#1398-1438)
	- Holdefi.marketAssets (../../sb/Holdefi.sol#653)
	- Holdefi.repayBorrowInternal(address,address,address,uint256) (../../sb/Holdefi.sol#1808-1860)
	- Holdefi.reserveSettlement(address) (../../sb/Holdefi.sol#1536-1552)
	- Holdefi.supplyInternal(address,address,uint256,uint16) (../../sb/Holdefi.sol#1624-1655)
	- Holdefi.updateBorrowIndex(address) (../../sb/Holdefi.sol#1568-1575)
	- Holdefi.updatePromotionDebt(address) (../../sb/Holdefi.sol#1591-1602)
	- Holdefi.updatePromotionReserve(address) (../../sb/Holdefi.sol#1579-1586)
	- Holdefi.updateSupplyIndex(address) (../../sb/Holdefi.sol#1556-1564)
	- Holdefi.withdrawPromotionReserve(address,uint256) (../../sb/Holdefi.sol#1511-1524)
	- Holdefi.withdrawSupplyInternal(address,address,uint256) (../../sb/Holdefi.sol#1658-1701)
Reentrancy in Holdefi.withdrawSupplyInternal(address,address,uint256) (../../sb/Holdefi.sol#1658-1701):
	External calls:
	- beforeChangeSupplyRate(market) (../../sb/Holdefi.sol#1686)
		- holdefiSettings.resetPromotionRate(market) (../../sb/Holdefi.sol#1600)
	State variables written after the call(s):
	- marketAssets[market].totalSupply = marketAssets[market].totalSupply.sub(remaining) (../../sb/Holdefi.sol#1688)
	Holdefi.marketAssets (../../sb/Holdefi.sol#653) can be used in cross function reentrancies:
	- Holdefi.borrowInternal(address,address,address,uint256,uint16) (../../sb/Holdefi.sol#1760-1804)
	- Holdefi.depositPromotionReserveInternal(address,uint256) (../../sb/Holdefi.sol#1894-1907)
	- Holdefi.getCurrentBorrowIndex(address) (../../sb/Holdefi.sol#1086-1102)
	- Holdefi.getCurrentSupplyIndex(address) (../../sb/Holdefi.sol#1061-1078)
	- Holdefi.getPromotionDebt(address) (../../sb/Holdefi.sol#1131-1147)
	- Holdefi.getPromotionReserve(address) (../../sb/Holdefi.sol#1109-1124)
	- Holdefi.liquidateBorrowerCollateral(address,address,address) (../../sb/Holdefi.sol#1398-1438)
	- Holdefi.marketAssets (../../sb/Holdefi.sol#653)
	- Holdefi.repayBorrowInternal(address,address,address,uint256) (../../sb/Holdefi.sol#1808-1860)
	- Holdefi.reserveSettlement(address) (../../sb/Holdefi.sol#1536-1552)
	- Holdefi.supplyInternal(address,address,uint256,uint16) (../../sb/Holdefi.sol#1624-1655)
	- Holdefi.updateBorrowIndex(address) (../../sb/Holdefi.sol#1568-1575)
	- Holdefi.updatePromotionDebt(address) (../../sb/Holdefi.sol#1591-1602)
	- Holdefi.updatePromotionReserve(address) (../../sb/Holdefi.sol#1579-1586)
	- Holdefi.updateSupplyIndex(address) (../../sb/Holdefi.sol#1556-1564)
	- Holdefi.withdrawPromotionReserve(address,uint256) (../../sb/Holdefi.sol#1511-1524)
	- Holdefi.withdrawSupplyInternal(address,address,uint256) (../../sb/Holdefi.sol#1658-1701)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1

Holdefi.borrowInternal(address,address,address,uint256,uint16).borrowData (../../sb/Holdefi.sol#1778) is a local variable never initialized
Holdefi.supplyInternal(address,address,uint256,uint16).supplyData (../../sb/Holdefi.sol#1633) is a local variable never initialized
Holdefi.withdrawSupplyInternal(address,address,uint256).supplyData (../../sb/Holdefi.sol#1662) is a local variable never initialized
Holdefi.liquidateBorrowerCollateral(address,address,address).borrowData (../../sb/Holdefi.sol#1402) is a local variable never initialized
Holdefi.repayBorrowInternal(address,address,address,uint256).borrowData (../../sb/Holdefi.sol#1812) is a local variable never initialized
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-local-variables

Holdefi.getCurrentSupplyIndex(address) (../../sb/Holdefi.sol#1061-1078) ignores return value by (supplyRateBase,promotionRate) = holdefiSettings.getInterests(market) (../../sb/Holdefi.sol#1070)
Holdefi.getPromotionReserve(address) (../../sb/Holdefi.sol#1109-1124) ignores return value by (borrowRate,supplyRateBase) = holdefiSettings.getInterests(market) (../../sb/Holdefi.sol#1114)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return

HoldefiCollaterals.withdraw(address,address,uint256).recipient (../../sb/Holdefi.sol#509) lacks a zero-check on :
		- (success,None) = recipient.call{value: amount}() (../../sb/Holdefi.sol#515)
HoldefiPausableOwnable.setPauser(address).newPauser (../../sb/Holdefi.sol#398) lacks a zero-check on :
		- pauser = newPauser (../../sb/Holdefi.sol#400)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

Holdefi.getCurrentBorrowIndex(address) (../../sb/Holdefi.sol#1086-1102) has external calls inside a loop: borrowRate = holdefiSettings.marketAssets(market).borrowRate (../../sb/Holdefi.sol#1095)
Holdefi.getAccountTotalBorrowValue(address,address) (../../sb/Holdefi.sol#986-1007) has external calls inside a loop: assetValue = holdefiPrices.getAssetValueFromAmount(market,totalDebt) (../../sb/Holdefi.sol#1004)
Holdefi.getLiquidationReserve(address) (../../sb/Holdefi.sol#1012-1036) has external calls inside a loop: assetValue = holdefiPrices.getAssetValueFromAmount(market,marketDebt[collateral][market]) (../../sb/Holdefi.sol#1020)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop

Reentrancy in Holdefi.collateralizeInternal(address,address,uint256) (../../sb/Holdefi.sol#1704-1723):
	External calls:
	- transferToHoldefi(address(holdefiCollaterals),collateral,amount) (../../sb/Holdefi.sol#1710)
		- success = token.transferFrom(msg.sender,receiver,amount) (../../sb/Holdefi.sol#1619)
	- transferFromHoldefi(address(holdefiCollaterals),collateral,amount) (../../sb/Holdefi.sol#1713)
		- (success,None) = receiver.call{value: amount}() (../../sb/Holdefi.sol#1608)
		- success = token.transfer(receiver,amount) (../../sb/Holdefi.sol#1612)
	External calls sending eth:
	- transferFromHoldefi(address(holdefiCollaterals),collateral,amount) (../../sb/Holdefi.sol#1713)
		- (success,None) = receiver.call{value: amount}() (../../sb/Holdefi.sol#1608)
	State variables written after the call(s):
	- collateralAssets[collateral].totalCollateral = collateralAssets[collateral].totalCollateral.add(amount) (../../sb/Holdefi.sol#1720)
	- collaterals[account][collateral].balance = balance (../../sb/Holdefi.sol#1717)
	- collaterals[account][collateral].lastUpdateTime = block.timestamp (../../sb/Holdefi.sol#1718)
Reentrancy in Holdefi.depositLiquidationReserveInternal(address,uint256) (../../sb/Holdefi.sol#1910-1924):
	External calls:
	- transferToHoldefi(address(holdefiCollaterals),collateral,amount) (../../sb/Holdefi.sol#1915)
		- success = token.transferFrom(msg.sender,receiver,amount) (../../sb/Holdefi.sol#1619)
	- transferFromHoldefi(address(holdefiCollaterals),collateral,amount) (../../sb/Holdefi.sol#1918)
		- (success,None) = receiver.call{value: amount}() (../../sb/Holdefi.sol#1608)
		- success = token.transfer(receiver,amount) (../../sb/Holdefi.sol#1612)
	External calls sending eth:
	- transferFromHoldefi(address(holdefiCollaterals),collateral,amount) (../../sb/Holdefi.sol#1918)
		- (success,None) = receiver.call{value: amount}() (../../sb/Holdefi.sol#1608)
	State variables written after the call(s):
	- collateralAssets[ethAddress].totalLiquidatedCollateral = collateralAssets[ethAddress].totalLiquidatedCollateral.add(msg.value) (../../sb/Holdefi.sol#1920-1921)
Reentrancy in Holdefi.depositPromotionReserveInternal(address,uint256) (../../sb/Holdefi.sol#1894-1907):
	External calls:
	- transferToHoldefi(address(this),market,amount) (../../sb/Holdefi.sol#1899)
		- success = token.transferFrom(msg.sender,receiver,amount) (../../sb/Holdefi.sol#1619)
	State variables written after the call(s):
	- marketAssets[market].promotionReserveScaled = marketAssets[market].promotionReserveScaled.add(amountScaled) (../../sb/Holdefi.sol#1903-1904)
Reentrancy in Holdefi.liquidateBorrowerCollateral(address,address,address) (../../sb/Holdefi.sol#1398-1438):
	External calls:
	- beforeChangeSupplyRate(market) (../../sb/Holdefi.sol#1433)
		- holdefiSettings.resetPromotionRate(market) (../../sb/Holdefi.sol#1600)
	State variables written after the call(s):
	- marketDebt[collateral][market] = marketDebt[collateral][market].add(totalBorrowedBalance) (../../sb/Holdefi.sol#1435)
Reentrancy in Holdefi.repayBorrowInternal(address,address,address,uint256) (../../sb/Holdefi.sol#1808-1860):
	External calls:
	- transferFromHoldefi(msg.sender,ethAddress,extra) (../../sb/Holdefi.sol#1824)
		- (success,None) = receiver.call{value: amount}() (../../sb/Holdefi.sol#1608)
		- success = token.transfer(receiver,amount) (../../sb/Holdefi.sol#1612)
	- transferToHoldefi(address(this),market,transferAmount) (../../sb/Holdefi.sol#1829)
		- success = token.transferFrom(msg.sender,receiver,amount) (../../sb/Holdefi.sol#1619)
	External calls sending eth:
	- transferFromHoldefi(msg.sender,ethAddress,extra) (../../sb/Holdefi.sol#1824)
		- (success,None) = receiver.call{value: amount}() (../../sb/Holdefi.sol#1608)
	State variables written after the call(s):
	- collaterals[account][collateral].lastUpdateTime = block.timestamp (../../sb/Holdefi.sol#1844)
Reentrancy in Holdefi.supplyInternal(address,address,uint256,uint16) (../../sb/Holdefi.sol#1624-1655):
	External calls:
	- transferToHoldefi(address(this),market,amount) (../../sb/Holdefi.sol#1630)
		- success = token.transferFrom(msg.sender,receiver,amount) (../../sb/Holdefi.sol#1619)
	State variables written after the call(s):
	- supplies[account][market].balance = supplyData.balance (../../sb/Holdefi.sol#1637)
	- supplies[account][market].accumulatedInterest = supplyData.interest (../../sb/Holdefi.sol#1638)
	- supplies[account][market].lastInterestIndex = supplyData.currentIndex (../../sb/Holdefi.sol#1639)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

Reentrancy in Holdefi.borrowInternal(address,address,address,uint256,uint16) (../../sb/Holdefi.sol#1760-1804):
	External calls:
	- beforeChangeSupplyRate(market) (../../sb/Holdefi.sol#1787)
		- holdefiSettings.resetPromotionRate(market) (../../sb/Holdefi.sol#1600)
	- transferFromHoldefi(msg.sender,market,amount) (../../sb/Holdefi.sol#1791)
		- (success,None) = receiver.call{value: amount}() (../../sb/Holdefi.sol#1608)
		- success = token.transfer(receiver,amount) (../../sb/Holdefi.sol#1612)
	External calls sending eth:
	- transferFromHoldefi(msg.sender,market,amount) (../../sb/Holdefi.sol#1791)
		- (success,None) = receiver.call{value: amount}() (../../sb/Holdefi.sol#1608)
	Event emitted after the call(s):
	- Borrow(msg.sender,account,market,collateral,amount,borrowData.balance,borrowData.interest,borrowData.currentIndex,referralCode) (../../sb/Holdefi.sol#1793-1803)
Reentrancy in Holdefi.buyLiquidatedCollateralInternal(address,address,uint256) (../../sb/Holdefi.sol#1863-1891):
	External calls:
	- transferToHoldefi(address(this),market,marketAmount) (../../sb/Holdefi.sol#1882)
		- success = token.transferFrom(msg.sender,receiver,amount) (../../sb/Holdefi.sol#1619)
	- holdefiCollaterals.withdraw(collateral,msg.sender,collateralAmountWithDiscount) (../../sb/Holdefi.sol#1888)
	Event emitted after the call(s):
	- BuyLiquidatedCollateral(market,collateral,marketAmount,collateralAmountWithDiscount) (../../sb/Holdefi.sol#1890)
Reentrancy in Holdefi.collateralizeInternal(address,address,uint256) (../../sb/Holdefi.sol#1704-1723):
	External calls:
	- transferToHoldefi(address(holdefiCollaterals),collateral,amount) (../../sb/Holdefi.sol#1710)
		- success = token.transferFrom(msg.sender,receiver,amount) (../../sb/Holdefi.sol#1619)
	- transferFromHoldefi(address(holdefiCollaterals),collateral,amount) (../../sb/Holdefi.sol#1713)
		- (success,None) = receiver.call{value: amount}() (../../sb/Holdefi.sol#1608)
		- success = token.transfer(receiver,amount) (../../sb/Holdefi.sol#1612)
	External calls sending eth:
	- transferFromHoldefi(address(holdefiCollaterals),collateral,amount) (../../sb/Holdefi.sol#1713)
		- (success,None) = receiver.call{value: amount}() (../../sb/Holdefi.sol#1608)
	Event emitted after the call(s):
	- Collateralize(msg.sender,account,collateral,amount,balance) (../../sb/Holdefi.sol#1722)
Reentrancy in Holdefi.depositLiquidationReserveInternal(address,uint256) (../../sb/Holdefi.sol#1910-1924):
	External calls:
	- transferToHoldefi(address(holdefiCollaterals),collateral,amount) (../../sb/Holdefi.sol#1915)
		- success = token.transferFrom(msg.sender,receiver,amount) (../../sb/Holdefi.sol#1619)
	- transferFromHoldefi(address(holdefiCollaterals),collateral,amount) (../../sb/Holdefi.sol#1918)
		- (success,None) = receiver.call{value: amount}() (../../sb/Holdefi.sol#1608)
		- success = token.transfer(receiver,amount) (../../sb/Holdefi.sol#1612)
	External calls sending eth:
	- transferFromHoldefi(address(holdefiCollaterals),collateral,amount) (../../sb/Holdefi.sol#1918)
		- (success,None) = receiver.call{value: amount}() (../../sb/Holdefi.sol#1608)
	Event emitted after the call(s):
	- LiquidationReserveDeposited(ethAddress,msg.value) (../../sb/Holdefi.sol#1923)
Reentrancy in Holdefi.depositPromotionReserveInternal(address,uint256) (../../sb/Holdefi.sol#1894-1907):
	External calls:
	- transferToHoldefi(address(this),market,amount) (../../sb/Holdefi.sol#1899)
		- success = token.transferFrom(msg.sender,receiver,amount) (../../sb/Holdefi.sol#1619)
	Event emitted after the call(s):
	- PromotionReserveDeposited(market,amount) (../../sb/Holdefi.sol#1906)
Reentrancy in Holdefi.liquidateBorrowerCollateral(address,address,address) (../../sb/Holdefi.sol#1398-1438):
	External calls:
	- beforeChangeSupplyRate(market) (../../sb/Holdefi.sol#1433)
		- holdefiSettings.resetPromotionRate(market) (../../sb/Holdefi.sol#1600)
	Event emitted after the call(s):
	- CollateralLiquidated(borrower,market,collateral,totalBorrowedBalance,liquidatedCollateral) (../../sb/Holdefi.sol#1437)
Reentrancy in Holdefi.repayBorrowInternal(address,address,address,uint256) (../../sb/Holdefi.sol#1808-1860):
	External calls:
	- transferFromHoldefi(msg.sender,ethAddress,extra) (../../sb/Holdefi.sol#1824)
		- (success,None) = receiver.call{value: amount}() (../../sb/Holdefi.sol#1608)
		- success = token.transfer(receiver,amount) (../../sb/Holdefi.sol#1612)
	- transferToHoldefi(address(this),market,transferAmount) (../../sb/Holdefi.sol#1829)
		- success = token.transferFrom(msg.sender,receiver,amount) (../../sb/Holdefi.sol#1619)
	- beforeChangeSupplyRate(market) (../../sb/Holdefi.sol#1846)
		- holdefiSettings.resetPromotionRate(market) (../../sb/Holdefi.sol#1600)
	External calls sending eth:
	- transferFromHoldefi(msg.sender,ethAddress,extra) (../../sb/Holdefi.sol#1824)
		- (success,None) = receiver.call{value: amount}() (../../sb/Holdefi.sol#1608)
	Event emitted after the call(s):
	- PromotionDebtUpdated(market,debtScaled) (../../sb/Holdefi.sol#1597)
		- beforeChangeSupplyRate(market) (../../sb/Holdefi.sol#1846)
	- PromotionReserveUpdated(market,reserveScaled) (../../sb/Holdefi.sol#1585)
		- beforeChangeSupplyRate(market) (../../sb/Holdefi.sol#1846)
	- RepayBorrow(msg.sender,account,market,collateral,transferAmount,borrowData.balance,borrowData.interest,borrowData.currentIndex) (../../sb/Holdefi.sol#1850-1859)
	- UpdateSupplyIndex(market,currentSupplyIndex,supplyRate) (../../sb/Holdefi.sol#1563)
		- beforeChangeSupplyRate(market) (../../sb/Holdefi.sol#1846)
Reentrancy in Holdefi.supplyInternal(address,address,uint256,uint16) (../../sb/Holdefi.sol#1624-1655):
	External calls:
	- transferToHoldefi(address(this),market,amount) (../../sb/Holdefi.sol#1630)
		- success = token.transferFrom(msg.sender,receiver,amount) (../../sb/Holdefi.sol#1619)
	- beforeChangeSupplyRate(market) (../../sb/Holdefi.sol#1641)
		- holdefiSettings.resetPromotionRate(market) (../../sb/Holdefi.sol#1600)
	Event emitted after the call(s):
	- PromotionDebtUpdated(market,debtScaled) (../../sb/Holdefi.sol#1597)
		- beforeChangeSupplyRate(market) (../../sb/Holdefi.sol#1641)
	- PromotionReserveUpdated(market,reserveScaled) (../../sb/Holdefi.sol#1585)
		- beforeChangeSupplyRate(market) (../../sb/Holdefi.sol#1641)
	- Supply(msg.sender,account,market,amount,supplyData.balance,supplyData.interest,supplyData.currentIndex,referralCode) (../../sb/Holdefi.sol#1645-1654)
	- UpdateSupplyIndex(market,currentSupplyIndex,supplyRate) (../../sb/Holdefi.sol#1563)
		- beforeChangeSupplyRate(market) (../../sb/Holdefi.sol#1641)
Reentrancy in Holdefi.withdrawCollateralInternal(address,address,uint256) (../../sb/Holdefi.sol#1726-1757):
	External calls:
	- holdefiCollaterals.withdraw(collateral,msg.sender,transferAmount) (../../sb/Holdefi.sol#1754)
	Event emitted after the call(s):
	- WithdrawCollateral(msg.sender,account,collateral,transferAmount,balance) (../../sb/Holdefi.sol#1756)
Reentrancy in Holdefi.withdrawLiquidationReserve(address,uint256) (../../sb/Holdefi.sol#1477-1490):
	External calls:
	- holdefiCollaterals.withdraw(collateral,msg.sender,transferAmount) (../../sb/Holdefi.sol#1487)
	Event emitted after the call(s):
	- LiquidationReserveWithdrawn(collateral,amount) (../../sb/Holdefi.sol#1489)
Reentrancy in Holdefi.withdrawPromotionReserve(address,uint256) (../../sb/Holdefi.sol#1511-1524):
	External calls:
	- transferFromHoldefi(msg.sender,market,amount) (../../sb/Holdefi.sol#1521)
		- (success,None) = receiver.call{value: amount}() (../../sb/Holdefi.sol#1608)
		- success = token.transfer(receiver,amount) (../../sb/Holdefi.sol#1612)
	External calls sending eth:
	- transferFromHoldefi(msg.sender,market,amount) (../../sb/Holdefi.sol#1521)
		- (success,None) = receiver.call{value: amount}() (../../sb/Holdefi.sol#1608)
	Event emitted after the call(s):
	- PromotionReserveWithdrawn(market,amount) (../../sb/Holdefi.sol#1523)
Reentrancy in Holdefi.withdrawSupplyInternal(address,address,uint256) (../../sb/Holdefi.sol#1658-1701):
	External calls:
	- beforeChangeSupplyRate(market) (../../sb/Holdefi.sol#1686)
		- holdefiSettings.resetPromotionRate(market) (../../sb/Holdefi.sol#1600)
	- transferFromHoldefi(msg.sender,market,transferAmount) (../../sb/Holdefi.sol#1690)
		- (success,None) = receiver.call{value: amount}() (../../sb/Holdefi.sol#1608)
		- success = token.transfer(receiver,amount) (../../sb/Holdefi.sol#1612)
	External calls sending eth:
	- transferFromHoldefi(msg.sender,market,transferAmount) (../../sb/Holdefi.sol#1690)
		- (success,None) = receiver.call{value: amount}() (../../sb/Holdefi.sol#1608)
	Event emitted after the call(s):
	- WithdrawSupply(msg.sender,account,market,transferAmount,supplyData.balance,supplyData.interest,supplyData.currentIndex) (../../sb/Holdefi.sol#1692-1700)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

HoldefiPausableOwnable.isPaused(string) (../../sb/Holdefi.sol#343-350) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp > paused[operation].pauseEndTime (../../sb/Holdefi.sol#344)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

SafeMath.div(uint256,uint256,string) (../../sb/Holdefi.sol#191-194) is never used and should be removed
SafeMath.mod(uint256,uint256) (../../sb/Holdefi.sol#153-156) is never used and should be removed
SafeMath.mod(uint256,uint256,string) (../../sb/Holdefi.sol#211-214) is never used and should be removed
SafeMath.sub(uint256,uint256,string) (../../sb/Holdefi.sol#171-174) is never used and should be removed
SafeMath.tryAdd(uint256,uint256) (../../sb/Holdefi.sol#25-29) is never used and should be removed
SafeMath.tryDiv(uint256,uint256) (../../sb/Holdefi.sol#61-64) is never used and should be removed
SafeMath.tryMod(uint256,uint256) (../../sb/Holdefi.sol#71-74) is never used and should be removed
SafeMath.tryMul(uint256,uint256) (../../sb/Holdefi.sol#46-54) is never used and should be removed
SafeMath.trySub(uint256,uint256) (../../sb/Holdefi.sol#36-39) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code

Pragma version0.6.12 (../../sb/Holdefi.sol#1) allows old versions
solc-0.6.12 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Low level call in HoldefiCollaterals.withdraw(address,address,uint256) (../../sb/Holdefi.sol#509-522):
	- (success,None) = recipient.call{value: amount}() (../../sb/Holdefi.sol#515)
Low level call in Holdefi.transferFromHoldefi(address,address,uint256) (../../sb/Holdefi.sol#1605-1615):
	- (success,None) = receiver.call{value: amount}() (../../sb/Holdefi.sol#1608)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls

Constant Holdefi.oneUnit (../../sb/Holdefi.sol#637) is not in UPPER_CASE_WITH_UNDERSCORES
Constant Holdefi.fivePercentLiquidationGap (../../sb/Holdefi.sol#641) is not in UPPER_CASE_WITH_UNDERSCORES
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Holdefi.holdefiCollaterals (../../sb/Holdefi.sol#650) should be immutable 
Holdefi.holdefiSettings (../../sb/Holdefi.sol#644) should be immutable 
HoldefiCollaterals.holdefiContract (../../sb/Holdefi.sol#488) should be immutable 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-immutable
/sb/Holdefi.sol analyzed (8 contracts with 93 detectors), 57 result(s) found
