{
    "errors": [],
    "fails": [],
    "findings": [
        {
            "confidence": "Medium",
            "contract": "Liquidity_v8",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/ImmuneBytes-BonFi(Liquidity)-Final Audit Report/code/Liquidity_v9(1).sol",
            "function": "_withdraw",
            "impact": "Medium",
            "line": 366,
            "line_end": 383,
            "message": "Reentrancy in Liquidity_v8._withdraw(address) (Liquidity_v9(1).sol#366-383):\n\tExternal calls:\n\t- principalPaid = _payDirect(from,amount,tokenAddress) (Liquidity_v9(1).sol#377)\n\t\t- ERC20Interface.transfer(to,amount) (Liquidity_v9(1).sol#511)\n\t- rewardPaid = _payDirect(from,reward,rewardTokenAddress) (Liquidity_v9(1).sol#378)\n\t\t- ERC20Interface.transfer(to,amount) (Liquidity_v9(1).sol#511)\n\tState variables written after the call(s):\n\t- rewardPaid = _payDirect(from,reward,rewardTokenAddress) (Liquidity_v9(1).sol#378)\n\t\t- ERC20Interface = IERC20(token) (Liquidity_v9(1).sol#510)\n\tLiquidity_v8.ERC20Interface (Liquidity_v9(1).sol#199) can be used in cross function reentrancies:\n\t- Liquidity_v8.ERC20Interface (Liquidity_v9(1).sol#199)\n\t- Liquidity_v8._hasAllowance(address,uint256,address) (Liquidity_v9(1).sol#514-524)\n\t- Liquidity_v8._payDirect(address,uint256,address) (Liquidity_v9(1).sol#505-512)\n\t- Liquidity_v8._payTo(address,address,uint256,address) (Liquidity_v9(1).sol#492-503)\n\t- Liquidity_v8.getPeggedValue() (Liquidity_v9(1).sol#388-399)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Liquidity_v8",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/ImmuneBytes-BonFi(Liquidity)-Final Audit Report/code/Liquidity_v9(1).sol",
            "function": "getPeggedValue",
            "impact": "Medium",
            "line": 388,
            "line_end": 399,
            "message": "Liquidity_v8.getPeggedValue() (Liquidity_v9(1).sol#388-399) ignores return value by (None,getReserves,None) = ERC20Interface.getReserves() (Liquidity_v9(1).sol#394)\n",
            "name": "unused-return",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Liquidity_v8",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/ImmuneBytes-BonFi(Liquidity)-Final Audit Report/code/Liquidity_v9(1).sol",
            "function": "getPeggedValue",
            "impact": "Medium",
            "line": 388,
            "line_end": 399,
            "message": "Liquidity_v8.getPeggedValue() (Liquidity_v9(1).sol#388-399) ignores return value by (getReserves,None,None) = ERC20Interface.getReserves() (Liquidity_v9(1).sol#392)\n",
            "name": "unused-return",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Liquidity_v8",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/ImmuneBytes-BonFi(Liquidity)-Final Audit Report/code/Liquidity_v9(1).sol",
            "function": "addReward",
            "impact": "Low",
            "line": 273,
            "line_end": 286,
            "message": "Liquidity_v8.addReward(uint256) (Liquidity_v9(1).sol#273-286) should emit an event for: \n\t- rewardBalance = rewardBalance.add(rewardAmount) (Liquidity_v9(1).sol#284) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Liquidity_v8",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/ImmuneBytes-BonFi(Liquidity)-Final Audit Report/code/Liquidity_v9(1).sol",
            "function": "changeLockDuration",
            "impact": "Low",
            "line": 265,
            "line_end": 267,
            "message": "Liquidity_v8.changeLockDuration(uint256) (Liquidity_v9(1).sol#265-267) should emit an event for: \n\t- lockDuration = lockduration_ (Liquidity_v9(1).sol#266) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Liquidity_v8",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/ImmuneBytes-BonFi(Liquidity)-Final Audit Report/code/Liquidity_v9(1).sol",
            "function": "_stake",
            "impact": "Low",
            "line": 331,
            "line_end": 349,
            "message": "Reentrancy in Liquidity_v8._stake(address,uint256) (Liquidity_v9(1).sol#331-349):\n\tExternal calls:\n\t- ! _payMe(staker,amount,tokenAddress) (Liquidity_v9(1).sol#332)\n\t\t- ERC20Interface.transferFrom(allower,receiver,amount) (Liquidity_v9(1).sol#502)\n\tState variables written after the call(s):\n\t- deposits[staker] = Deposits(amount,block.timestamp,block.timestamp.add((lockDuration.mul(86400))),index,false) (Liquidity_v9(1).sol#336-342)\n\t- hasStaked[staker] = true (Liquidity_v9(1).sol#335)\n\t- stakedBalance = stakedBalance.add(amount) (Liquidity_v9(1).sol#346)\n\t- stakedTotal = stakedTotal.add(amount) (Liquidity_v9(1).sol#347)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Liquidity_v8",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/ImmuneBytes-BonFi(Liquidity)-Final Audit Report/code/Liquidity_v9(1).sol",
            "function": "addReward",
            "impact": "Low",
            "line": 273,
            "line_end": 286,
            "message": "Reentrancy in Liquidity_v8.addReward(uint256) (Liquidity_v9(1).sol#273-286):\n\tExternal calls:\n\t- ! _payMe(from,rewardAmount,rewardTokenAddress) (Liquidity_v9(1).sol#280)\n\t\t- ERC20Interface.transferFrom(allower,receiver,amount) (Liquidity_v9(1).sol#502)\n\tState variables written after the call(s):\n\t- rewardBalance = rewardBalance.add(rewardAmount) (Liquidity_v9(1).sol#284)\n\t- totalReward = totalReward.add(rewardAmount) (Liquidity_v9(1).sol#283)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Liquidity_v8",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/ImmuneBytes-BonFi(Liquidity)-Final Audit Report/code/Liquidity_v9(1).sol",
            "function": "_emergencyWithdraw",
            "impact": "Low",
            "line": 413,
            "line_end": 424,
            "message": "Reentrancy in Liquidity_v8._emergencyWithdraw(address) (Liquidity_v9(1).sol#413-424):\n\tExternal calls:\n\t- principalPaid = _payDirect(from,amount,tokenAddress) (Liquidity_v9(1).sol#419)\n\t\t- ERC20Interface.transfer(to,amount) (Liquidity_v9(1).sol#511)\n\tEvent emitted after the call(s):\n\t- PaidOut(tokenAddress,address(0),from,amount,0) (Liquidity_v9(1).sol#421)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Liquidity_v8",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/ImmuneBytes-BonFi(Liquidity)-Final Audit Report/code/Liquidity_v9(1).sol",
            "function": "_withdraw",
            "impact": "Low",
            "line": 366,
            "line_end": 383,
            "message": "Reentrancy in Liquidity_v8._withdraw(address) (Liquidity_v9(1).sol#366-383):\n\tExternal calls:\n\t- principalPaid = _payDirect(from,amount,tokenAddress) (Liquidity_v9(1).sol#377)\n\t\t- ERC20Interface.transfer(to,amount) (Liquidity_v9(1).sol#511)\n\t- rewardPaid = _payDirect(from,reward,rewardTokenAddress) (Liquidity_v9(1).sol#378)\n\t\t- ERC20Interface.transfer(to,amount) (Liquidity_v9(1).sol#511)\n\tEvent emitted after the call(s):\n\t- PaidOut(tokenAddress,rewardTokenAddress,from,amount,reward) (Liquidity_v9(1).sol#380)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Liquidity_v8",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/ImmuneBytes-BonFi(Liquidity)-Final Audit Report/code/Liquidity_v9(1).sol",
            "function": "_stake",
            "impact": "Low",
            "line": 331,
            "line_end": 349,
            "message": "Reentrancy in Liquidity_v8._stake(address,uint256) (Liquidity_v9(1).sol#331-349):\n\tExternal calls:\n\t- ! _payMe(staker,amount,tokenAddress) (Liquidity_v9(1).sol#332)\n\t\t- ERC20Interface.transferFrom(allower,receiver,amount) (Liquidity_v9(1).sol#502)\n\tEvent emitted after the call(s):\n\t- Staked(tokenAddress,staker,amount) (Liquidity_v9(1).sol#343)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Liquidity_v8",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/ImmuneBytes-BonFi(Liquidity)-Final Audit Report/code/Liquidity_v9(1).sol",
            "function": "withdraw",
            "impact": "Low",
            "line": 354,
            "line_end": 364,
            "message": "Liquidity_v8.withdraw() (Liquidity_v9(1).sol#354-364) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(block.timestamp >= deposits[from].endTime,Requesting before lock time) (Liquidity_v9(1).sol#357-360)\n\t- require(bool,string)(deposits[from].paid == false,Already paid out) (Liquidity_v9(1).sol#361)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Liquidity_v8",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/ImmuneBytes-BonFi(Liquidity)-Final Audit Report/code/Liquidity_v9(1).sol",
            "function": "_calculate",
            "impact": "Low",
            "line": 435,
            "line_end": 482,
            "message": "Liquidity_v8._calculate(address) (Liquidity_v9(1).sol#435-482) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- i < index (Liquidity_v9(1).sol#453)\n\t- endTime < rates[i + 1].timeStamp (Liquidity_v9(1).sol#455)\n\t- depositTime < endTime (Liquidity_v9(1).sol#469)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Liquidity_v8",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/ImmuneBytes-BonFi(Liquidity)-Final Audit Report/code/Liquidity_v9(1).sol",
            "function": "_withdraw",
            "impact": "Low",
            "line": 366,
            "line_end": 383,
            "message": "Liquidity_v8._withdraw(address) (Liquidity_v9(1).sol#366-383) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(reward <= rewardBalance,Not enough rewards) (Liquidity_v9(1).sol#370)\n\t- require(bool,string)(principalPaid && rewardPaid,Error paying) (Liquidity_v9(1).sol#379)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Liquidity_v8",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/ImmuneBytes-BonFi(Liquidity)-Final Audit Report/code/Liquidity_v9(1).sol",
            "function": "emergencyWithdraw",
            "impact": "Low",
            "line": 401,
            "line_end": 411,
            "message": "Liquidity_v8.emergencyWithdraw() (Liquidity_v9(1).sol#401-411) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(block.timestamp >= deposits[from].endTime,Requesting before lock time) (Liquidity_v9(1).sol#404-407)\n\t- require(bool,string)(deposits[from].paid == false,Already paid out) (Liquidity_v9(1).sol#408)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Liquidity_v8",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/ImmuneBytes-BonFi(Liquidity)-Final Audit Report/code/Liquidity_v9(1).sol",
            "function": "_emergencyWithdraw",
            "impact": "Low",
            "line": 413,
            "line_end": 424,
            "message": "Liquidity_v8._emergencyWithdraw(address) (Liquidity_v9(1).sol#413-424) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(principalPaid,Error paying) (Liquidity_v9(1).sol#420)\n",
            "name": "timestamp",
            "check": "FP"
        }
    ],
    "infos": [],
    "parser": {
        "id": "slither-0.10.0",
        "mode": "solidity",
        "version": "2024/04/30"
    }
}