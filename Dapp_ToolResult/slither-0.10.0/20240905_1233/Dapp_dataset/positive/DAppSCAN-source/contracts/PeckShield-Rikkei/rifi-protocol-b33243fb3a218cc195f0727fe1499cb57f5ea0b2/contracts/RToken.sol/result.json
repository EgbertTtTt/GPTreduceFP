{
    "errors": [],
    "fails": [],
    "findings": [
        {
            "confidence": "Medium",
            "contract": "RToken",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-Rikkei/rifi-protocol-b33243fb3a218cc195f0727fe1499cb57f5ea0b2/contracts/RToken.sol",
            "function": "liquidateBorrowInternal",
            "impact": "Medium",
            "line": 2115,
            "line_end": 2130,
            "message": "Reentrancy in RToken.liquidateBorrowInternal(address,uint256,RTokenInterface) (RToken.sol#2115-2130):\n\tExternal calls:\n\t- error = rTokenCollateral.accrueInterest() (RToken.sol#2122)\n\t- liquidateBorrowFresh(msg.sender,borrower,repayAmount,rTokenCollateral) (RToken.sol#2129)\n\t\t- allowed = cointroller.liquidateBorrowAllowed(address(this),address(rTokenCollateral),liquidator,borrower,repayAmount) (RToken.sol#2143)\n\t\t- allowed = cointroller.repayBorrowAllowed(address(this),payer,borrower,repayAmount) (RToken.sol#2040)\n\t\t- allowed = cointroller.seizeAllowed(address(this),seizerToken,liquidator,borrower,seizeTokens) (RToken.sol#2237)\n\t\t- seizeError = rTokenCollateral.seize(liquidator,borrower,seizeTokens) (RToken.sol#2196)\n\tState variables written after the call(s):\n\t- liquidateBorrowFresh(msg.sender,borrower,repayAmount,rTokenCollateral) (RToken.sol#2129)\n\t\t- totalBorrows = vars.totalBorrowsNew (RToken.sol#2095)\n\tRTokenStorage.totalBorrows (RToken.sol#247) can be used in cross function reentrancies:\n\t- RToken.accrueInterest() (RToken.sol#1569-1647)\n\t- RToken.borrowRatePerBlock() (RToken.sol#1420-1422)\n\t- RToken.exchangeRateStoredInternal() (RToken.sol#1524-1554)\n\t- RToken.supplyRatePerBlock() (RToken.sol#1428-1430)\n\t- RTokenStorage.totalBorrows (RToken.sol#247)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "RToken",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-Rikkei/rifi-protocol-b33243fb3a218cc195f0727fe1499cb57f5ea0b2/contracts/RToken.sol",
            "function": "redeemFresh",
            "impact": "Medium",
            "line": 1799,
            "line_end": 1893,
            "message": "Reentrancy in RToken.redeemFresh(address,uint256,uint256) (RToken.sol#1799-1893):\n\tExternal calls:\n\t- allowed = cointroller.redeemAllowed(address(this),redeemer,vars.redeemTokens) (RToken.sol#1839)\n\tState variables written after the call(s):\n\t- totalSupply = vars.totalSupplyNew (RToken.sol#1882)\n\tRTokenStorage.totalSupply (RToken.sol#257) can be used in cross function reentrancies:\n\t- RToken.exchangeRateStoredInternal() (RToken.sol#1524-1554)\n\t- RTokenStorage.totalSupply (RToken.sol#257)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "High",
            "contract": "ExponentialNoError",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-Rikkei/rifi-protocol-b33243fb3a218cc195f0727fe1499cb57f5ea0b2/contracts/RToken.sol",
            "function": "fraction",
            "impact": "Low",
            "line": 1073,
            "message": "Exponential.divScalarByExpTruncate(uint256,ExponentialNoError.Exp).fraction (RToken.sol#1073) shadows:\n\t- ExponentialNoError.fraction(uint256,uint256) (RToken.sol#950-952) (function)\n",
            "name": "shadowing-local",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "RToken",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-Rikkei/rifi-protocol-b33243fb3a218cc195f0727fe1499cb57f5ea0b2/contracts/RToken.sol",
            "function": "initialize",
            "impact": "Low",
            "line": 1210,
            "line_end": 1241,
            "message": "RToken.initialize(CointrollerInterface,InterestRateModel,uint256,string,string,uint8) (RToken.sol#1210-1241) should emit an event for: \n\t- initialExchangeRateMantissa = initialExchangeRateMantissa_ (RToken.sol#1220) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "RToken",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-Rikkei/rifi-protocol-b33243fb3a218cc195f0727fe1499cb57f5ea0b2/contracts/RToken.sol",
            "function": "mintFresh",
            "impact": "Low",
            "line": 1682,
            "line_end": 1747,
            "message": "Reentrancy in RToken.mintFresh(address,uint256) (RToken.sol#1682-1747):\n\tExternal calls:\n\t- allowed = cointroller.mintAllowed(address(this),minter,mintAmount) (RToken.sol#1684)\n\tState variables written after the call(s):\n\t- accountTokens[minter] = vars.accountTokensNew (RToken.sol#1736)\n\t- totalSupply = vars.totalSupplyNew (RToken.sol#1735)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "RToken",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-Rikkei/rifi-protocol-b33243fb3a218cc195f0727fe1499cb57f5ea0b2/contracts/RToken.sol",
            "function": "borrowFresh",
            "impact": "Low",
            "line": 1923,
            "line_end": 1987,
            "message": "Reentrancy in RToken.borrowFresh(address,uint256) (RToken.sol#1923-1987):\n\tExternal calls:\n\t- allowed = cointroller.borrowAllowed(address(this),borrower,borrowAmount) (RToken.sol#1925)\n\tState variables written after the call(s):\n\t- accountBorrows[borrower].principal = vars.accountBorrowsNew (RToken.sol#1975)\n\t- accountBorrows[borrower].interestIndex = borrowIndex (RToken.sol#1976)\n\t- totalBorrows = vars.totalBorrowsNew (RToken.sol#1977)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "RToken",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-Rikkei/rifi-protocol-b33243fb3a218cc195f0727fe1499cb57f5ea0b2/contracts/RToken.sol",
            "function": "transferTokens",
            "impact": "Low",
            "line": 1252,
            "line_end": 1312,
            "message": "Reentrancy in RToken.transferTokens(address,address,address,uint256) (RToken.sol#1252-1312):\n\tExternal calls:\n\t- allowed = cointroller.transferAllowed(address(this),src,dst,tokens) (RToken.sol#1254)\n\tState variables written after the call(s):\n\t- accountTokens[src] = srrTokensNew (RToken.sol#1297)\n\t- accountTokens[dst] = dstTokensNew (RToken.sol#1298)\n\t- transferAllowances[src][spender] = allowanceNew (RToken.sol#1302)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "RToken",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-Rikkei/rifi-protocol-b33243fb3a218cc195f0727fe1499cb57f5ea0b2/contracts/RToken.sol",
            "function": "redeemFresh",
            "impact": "Low",
            "line": 1799,
            "line_end": 1893,
            "message": "Reentrancy in RToken.redeemFresh(address,uint256,uint256) (RToken.sol#1799-1893):\n\tExternal calls:\n\t- allowed = cointroller.redeemAllowed(address(this),redeemer,vars.redeemTokens) (RToken.sol#1839)\n\tState variables written after the call(s):\n\t- accountTokens[redeemer] = vars.accountTokensNew (RToken.sol#1883)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "RToken",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-Rikkei/rifi-protocol-b33243fb3a218cc195f0727fe1499cb57f5ea0b2/contracts/RToken.sol",
            "function": "seizeInternal",
            "impact": "Low",
            "line": 2235,
            "line_end": 2282,
            "message": "Reentrancy in RToken.seizeInternal(address,address,address,uint256) (RToken.sol#2235-2282):\n\tExternal calls:\n\t- allowed = cointroller.seizeAllowed(address(this),seizerToken,liquidator,borrower,seizeTokens) (RToken.sol#2237)\n\tState variables written after the call(s):\n\t- accountTokens[borrower] = borrowerTokensNew (RToken.sol#2271)\n\t- accountTokens[liquidator] = liquidatorTokensNew (RToken.sol#2272)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "RToken",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-Rikkei/rifi-protocol-b33243fb3a218cc195f0727fe1499cb57f5ea0b2/contracts/RToken.sol",
            "function": "repayBorrowFresh",
            "impact": "Low",
            "line": 2038,
            "line_end": 2105,
            "message": "Reentrancy in RToken.repayBorrowFresh(address,address,uint256) (RToken.sol#2038-2105):\n\tExternal calls:\n\t- allowed = cointroller.repayBorrowAllowed(address(this),payer,borrower,repayAmount) (RToken.sol#2040)\n\tState variables written after the call(s):\n\t- accountBorrows[borrower].principal = vars.accountBorrowsNew (RToken.sol#2093)\n\t- accountBorrows[borrower].interestIndex = borrowIndex (RToken.sol#2094)\n\t- totalBorrows = vars.totalBorrowsNew (RToken.sol#2095)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "RToken",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-Rikkei/rifi-protocol-b33243fb3a218cc195f0727fe1499cb57f5ea0b2/contracts/RToken.sol",
            "function": "liquidateBorrowFresh",
            "impact": "Low",
            "line": 2141,
            "line_end": 2210,
            "message": "Reentrancy in RToken.liquidateBorrowFresh(address,address,uint256,RTokenInterface) (RToken.sol#2141-2210):\n\tExternal calls:\n\t- allowed = cointroller.liquidateBorrowAllowed(address(this),address(rTokenCollateral),liquidator,borrower,repayAmount) (RToken.sol#2143)\n\t- (repayBorrowError,actualRepayAmount) = repayBorrowFresh(liquidator,borrower,repayAmount) (RToken.sol#2175)\n\t\t- allowed = cointroller.repayBorrowAllowed(address(this),payer,borrower,repayAmount) (RToken.sol#2040)\n\t- seizeError = seizeInternal(address(this),liquidator,borrower,seizeTokens) (RToken.sol#2194)\n\t\t- allowed = cointroller.seizeAllowed(address(this),seizerToken,liquidator,borrower,seizeTokens) (RToken.sol#2237)\n\tEvent emitted after the call(s):\n\t- Failure(uint256(err),uint256(info),0) (RToken.sol#662)\n\t\t- seizeError = seizeInternal(address(this),liquidator,borrower,seizeTokens) (RToken.sol#2194)\n\t- Failure(uint256(err),uint256(info),opaqueError) (RToken.sol#671)\n\t\t- seizeError = seizeInternal(address(this),liquidator,borrower,seizeTokens) (RToken.sol#2194)\n\t- Transfer(borrower,liquidator,seizeTokens) (RToken.sol#2275)\n\t\t- seizeError = seizeInternal(address(this),liquidator,borrower,seizeTokens) (RToken.sol#2194)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "RToken",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-Rikkei/rifi-protocol-b33243fb3a218cc195f0727fe1499cb57f5ea0b2/contracts/RToken.sol",
            "function": "liquidateBorrowFresh",
            "impact": "Low",
            "line": 2141,
            "line_end": 2210,
            "message": "Reentrancy in RToken.liquidateBorrowFresh(address,address,uint256,RTokenInterface) (RToken.sol#2141-2210):\n\tExternal calls:\n\t- allowed = cointroller.liquidateBorrowAllowed(address(this),address(rTokenCollateral),liquidator,borrower,repayAmount) (RToken.sol#2143)\n\t- (repayBorrowError,actualRepayAmount) = repayBorrowFresh(liquidator,borrower,repayAmount) (RToken.sol#2175)\n\t\t- allowed = cointroller.repayBorrowAllowed(address(this),payer,borrower,repayAmount) (RToken.sol#2040)\n\tEvent emitted after the call(s):\n\t- Failure(uint256(err),uint256(info),0) (RToken.sol#662)\n\t\t- (fail(TokenErrorReporter.Error(repayBorrowError),FailureInfo.LIQUIDATE_REPAY_BORROW_FRESH_FAILED),0) (RToken.sol#2177)\n\t- Failure(uint256(err),uint256(info),0) (RToken.sol#662)\n\t\t- (repayBorrowError,actualRepayAmount) = repayBorrowFresh(liquidator,borrower,repayAmount) (RToken.sol#2175)\n\t- Failure(uint256(err),uint256(info),opaqueError) (RToken.sol#671)\n\t\t- (repayBorrowError,actualRepayAmount) = repayBorrowFresh(liquidator,borrower,repayAmount) (RToken.sol#2175)\n\t- RepayBorrow(payer,borrower,vars.actualRepayAmount,vars.accountBorrowsNew,vars.totalBorrowsNew) (RToken.sol#2098)\n\t\t- (repayBorrowError,actualRepayAmount) = repayBorrowFresh(liquidator,borrower,repayAmount) (RToken.sol#2175)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "RToken",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-Rikkei/rifi-protocol-b33243fb3a218cc195f0727fe1499cb57f5ea0b2/contracts/RToken.sol",
            "function": "liquidateBorrowFresh",
            "impact": "Low",
            "line": 2141,
            "line_end": 2210,
            "message": "Reentrancy in RToken.liquidateBorrowFresh(address,address,uint256,RTokenInterface) (RToken.sol#2141-2210):\n\tExternal calls:\n\t- allowed = cointroller.liquidateBorrowAllowed(address(this),address(rTokenCollateral),liquidator,borrower,repayAmount) (RToken.sol#2143)\n\t- (repayBorrowError,actualRepayAmount) = repayBorrowFresh(liquidator,borrower,repayAmount) (RToken.sol#2175)\n\t\t- allowed = cointroller.repayBorrowAllowed(address(this),payer,borrower,repayAmount) (RToken.sol#2040)\n\t- seizeError = seizeInternal(address(this),liquidator,borrower,seizeTokens) (RToken.sol#2194)\n\t\t- allowed = cointroller.seizeAllowed(address(this),seizerToken,liquidator,borrower,seizeTokens) (RToken.sol#2237)\n\t- seizeError = rTokenCollateral.seize(liquidator,borrower,seizeTokens) (RToken.sol#2196)\n\tEvent emitted after the call(s):\n\t- LiquidateBorrow(liquidator,borrower,actualRepayAmount,address(rTokenCollateral),seizeTokens) (RToken.sol#2203)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "RToken",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-Rikkei/rifi-protocol-b33243fb3a218cc195f0727fe1499cb57f5ea0b2/contracts/RToken.sol",
            "function": "repayBorrowFresh",
            "impact": "Low",
            "line": 2038,
            "line_end": 2105,
            "message": "Reentrancy in RToken.repayBorrowFresh(address,address,uint256) (RToken.sol#2038-2105):\n\tExternal calls:\n\t- allowed = cointroller.repayBorrowAllowed(address(this),payer,borrower,repayAmount) (RToken.sol#2040)\n\tEvent emitted after the call(s):\n\t- Failure(uint256(err),uint256(info),opaqueError) (RToken.sol#671)\n\t\t- (failOpaque(Error.COINTROLLER_REJECTION,FailureInfo.REPAY_BORROW_COINTROLLER_REJECTION,allowed),0) (RToken.sol#2042)\n\t- Failure(uint256(err),uint256(info),opaqueError) (RToken.sol#671)\n\t\t- (failOpaque(Error.MATH_ERROR,FailureInfo.REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,uint256(vars.mathErr)),0) (RToken.sol#2058)\n\t- Failure(uint256(err),uint256(info),0) (RToken.sol#662)\n\t\t- (fail(Error.MARKET_NOT_FRESH,FailureInfo.REPAY_BORROW_FRESHNESS_CHECK),0) (RToken.sol#2047)\n\t- RepayBorrow(payer,borrower,vars.actualRepayAmount,vars.accountBorrowsNew,vars.totalBorrowsNew) (RToken.sol#2098)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "RToken",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-Rikkei/rifi-protocol-b33243fb3a218cc195f0727fe1499cb57f5ea0b2/contracts/RToken.sol",
            "function": "redeemFresh",
            "impact": "Low",
            "line": 1799,
            "line_end": 1893,
            "message": "Reentrancy in RToken.redeemFresh(address,uint256,uint256) (RToken.sol#1799-1893):\n\tExternal calls:\n\t- allowed = cointroller.redeemAllowed(address(this),redeemer,vars.redeemTokens) (RToken.sol#1839)\n\tEvent emitted after the call(s):\n\t- Failure(uint256(err),uint256(info),opaqueError) (RToken.sol#671)\n\t\t- failOpaque(Error.MATH_ERROR,FailureInfo.REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,uint256(vars.mathErr)) (RToken.sol#1861)\n\t- Failure(uint256(err),uint256(info),opaqueError) (RToken.sol#671)\n\t\t- failOpaque(Error.MATH_ERROR,FailureInfo.REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,uint256(vars.mathErr)) (RToken.sol#1856)\n\t- Failure(uint256(err),uint256(info),0) (RToken.sol#662)\n\t\t- fail(Error.TOKEN_INSUFFICIENT_CASH,FailureInfo.REDEEM_TRANSFER_OUT_NOT_POSSIBLE) (RToken.sol#1866)\n\t- Failure(uint256(err),uint256(info),opaqueError) (RToken.sol#671)\n\t\t- failOpaque(Error.COINTROLLER_REJECTION,FailureInfo.REDEEM_COINTROLLER_REJECTION,allowed) (RToken.sol#1841)\n\t- Failure(uint256(err),uint256(info),0) (RToken.sol#662)\n\t\t- fail(Error.MARKET_NOT_FRESH,FailureInfo.REDEEM_FRESHNESS_CHECK) (RToken.sol#1846)\n\t- Redeem(redeemer,vars.redeemAmount,vars.redeemTokens) (RToken.sol#1887)\n\t- Transfer(redeemer,address(this),vars.redeemTokens) (RToken.sol#1886)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "RToken",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-Rikkei/rifi-protocol-b33243fb3a218cc195f0727fe1499cb57f5ea0b2/contracts/RToken.sol",
            "function": "mintFresh",
            "impact": "Low",
            "line": 1682,
            "line_end": 1747,
            "message": "Reentrancy in RToken.mintFresh(address,uint256) (RToken.sol#1682-1747):\n\tExternal calls:\n\t- allowed = cointroller.mintAllowed(address(this),minter,mintAmount) (RToken.sol#1684)\n\tEvent emitted after the call(s):\n\t- Failure(uint256(err),uint256(info),0) (RToken.sol#662)\n\t\t- (fail(Error.MARKET_NOT_FRESH,FailureInfo.MINT_FRESHNESS_CHECK),0) (RToken.sol#1691)\n\t- Failure(uint256(err),uint256(info),opaqueError) (RToken.sol#671)\n\t\t- (failOpaque(Error.COINTROLLER_REJECTION,FailureInfo.MINT_COINTROLLER_REJECTION,allowed),0) (RToken.sol#1686)\n\t- Failure(uint256(err),uint256(info),opaqueError) (RToken.sol#671)\n\t\t- (failOpaque(Error.MATH_ERROR,FailureInfo.MINT_EXCHANGE_RATE_READ_FAILED,uint256(vars.mathErr)),0) (RToken.sol#1698)\n\t- Mint(minter,vars.actualMintAmount,vars.mintTokens) (RToken.sol#1739)\n\t- Transfer(address(this),minter,vars.mintTokens) (RToken.sol#1740)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "RToken",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-Rikkei/rifi-protocol-b33243fb3a218cc195f0727fe1499cb57f5ea0b2/contracts/RToken.sol",
            "function": "liquidateBorrowFresh",
            "impact": "Low",
            "line": 2141,
            "line_end": 2210,
            "message": "Reentrancy in RToken.liquidateBorrowFresh(address,address,uint256,RTokenInterface) (RToken.sol#2141-2210):\n\tExternal calls:\n\t- allowed = cointroller.liquidateBorrowAllowed(address(this),address(rTokenCollateral),liquidator,borrower,repayAmount) (RToken.sol#2143)\n\tEvent emitted after the call(s):\n\t- Failure(uint256(err),uint256(info),0) (RToken.sol#662)\n\t\t- (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED,FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_ZERO),0) (RToken.sol#2165)\n\t- Failure(uint256(err),uint256(info),0) (RToken.sol#662)\n\t\t- (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED,FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX),0) (RToken.sol#2170)\n\t- Failure(uint256(err),uint256(info),opaqueError) (RToken.sol#671)\n\t\t- (failOpaque(Error.COINTROLLER_REJECTION,FailureInfo.LIQUIDATE_COINTROLLER_REJECTION,allowed),0) (RToken.sol#2145)\n\t- Failure(uint256(err),uint256(info),0) (RToken.sol#662)\n\t\t- (fail(Error.MARKET_NOT_FRESH,FailureInfo.LIQUIDATE_COLLATERAL_FRESHNESS_CHECK),0) (RToken.sol#2155)\n\t- Failure(uint256(err),uint256(info),0) (RToken.sol#662)\n\t\t- (fail(Error.INVALID_ACCOUNT_PAIR,FailureInfo.LIQUIDATE_LIQUIDATOR_IS_BORROWER),0) (RToken.sol#2160)\n\t- Failure(uint256(err),uint256(info),0) (RToken.sol#662)\n\t\t- (fail(Error.MARKET_NOT_FRESH,FailureInfo.LIQUIDATE_FRESHNESS_CHECK),0) (RToken.sol#2150)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "RToken",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-Rikkei/rifi-protocol-b33243fb3a218cc195f0727fe1499cb57f5ea0b2/contracts/RToken.sol",
            "function": "borrowFresh",
            "impact": "Low",
            "line": 1923,
            "line_end": 1987,
            "message": "Reentrancy in RToken.borrowFresh(address,uint256) (RToken.sol#1923-1987):\n\tExternal calls:\n\t- allowed = cointroller.borrowAllowed(address(this),borrower,borrowAmount) (RToken.sol#1925)\n\tEvent emitted after the call(s):\n\t- Borrow(borrower,borrowAmount,vars.accountBorrowsNew,vars.totalBorrowsNew) (RToken.sol#1980)\n\t- Failure(uint256(err),uint256(info),opaqueError) (RToken.sol#671)\n\t\t- failOpaque(Error.MATH_ERROR,FailureInfo.BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,uint256(vars.mathErr)) (RToken.sol#1954)\n\t- Failure(uint256(err),uint256(info),opaqueError) (RToken.sol#671)\n\t\t- failOpaque(Error.MATH_ERROR,FailureInfo.BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,uint256(vars.mathErr)) (RToken.sol#1949)\n\t- Failure(uint256(err),uint256(info),0) (RToken.sol#662)\n\t\t- fail(Error.TOKEN_INSUFFICIENT_CASH,FailureInfo.BORROW_CASH_NOT_AVAILABLE) (RToken.sol#1937)\n\t- Failure(uint256(err),uint256(info),opaqueError) (RToken.sol#671)\n\t\t- failOpaque(Error.COINTROLLER_REJECTION,FailureInfo.BORROW_COINTROLLER_REJECTION,allowed) (RToken.sol#1927)\n\t- Failure(uint256(err),uint256(info),0) (RToken.sol#662)\n\t\t- fail(Error.MARKET_NOT_FRESH,FailureInfo.BORROW_FRESHNESS_CHECK) (RToken.sol#1932)\n\t- Failure(uint256(err),uint256(info),opaqueError) (RToken.sol#671)\n\t\t- failOpaque(Error.MATH_ERROR,FailureInfo.BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,uint256(vars.mathErr)) (RToken.sol#1959)\n",
            "name": "reentrancy-events",
            "check": "FP"
        }
    ],
    "infos": [],
    "parser": {
        "id": "slither-0.10.0",
        "mode": "solidity",
        "version": "2024/04/30"
    }
}