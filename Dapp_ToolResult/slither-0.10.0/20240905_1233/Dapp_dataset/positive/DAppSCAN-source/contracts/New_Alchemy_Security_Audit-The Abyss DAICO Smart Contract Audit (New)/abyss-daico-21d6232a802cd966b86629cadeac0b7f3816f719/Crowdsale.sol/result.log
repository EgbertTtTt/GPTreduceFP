'solc --version' running
'solc /sb/Crowdsale.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/sb' running
Compilation warnings/errors on /sb/Crowdsale.sol:
/sb/Crowdsale.sol:97:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function MultiOwnable() public {
    ^ (Relevant source part starts here and spans across multiple lines).
/sb/Crowdsale.sol:136:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function SafeMath() public {
    ^ (Relevant source part starts here and spans across multiple lines).
/sb/Crowdsale.sol:251:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function ManagedToken(address _listener, address[] _owners) public {
    ^ (Relevant source part starts here and spans across multiple lines).
/sb/Crowdsale.sol:411:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function TransferLimitedToken(
    ^ (Relevant source part starts here and spans across multiple lines).
/sb/Crowdsale.sol:482:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function LockedTokens(IERC20Token _token, address _crowdsaleAddress) public {
    ^ (Relevant source part starts here and spans across multiple lines).
/sb/Crowdsale.sol:528:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function Ownable(address _owner) public {
    ^ (Relevant source part starts here and spans across multiple lines).
/sb/Crowdsale.sol:120:9: Warning: Invoking events without "emit" prefix is deprecated.
        SetOwners(_owners);
        ^----------------^
/sb/Crowdsale.sol:176:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(msg.sender, _to, _value);
        ^-------------------------------^
/sb/Crowdsale.sol:187:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(_from, _to, _value);
        ^--------------------------^
/sb/Crowdsale.sol:197:9: Warning: Invoking events without "emit" prefix is deprecated.
        Approval(msg.sender, _spender, _value);
        ^------------------------------------^
/sb/Crowdsale.sol:217:5: Warning: Functions in interfaces should be declared external.
    function onTokenTransfer(address _from, address _to, uint256 _value) public;
    ^--------------------------------------------------------------------------^
/sb/Crowdsale.sol:264:9: Warning: Invoking events without "emit" prefix is deprecated.
        AllowTransfersChanged(_allowTransfers);
        ^------------------------------------^
/sb/Crowdsale.sol:310:9: Warning: Invoking events without "emit" prefix is deprecated.
        Issue(_to, _value);
        ^----------------^
/sb/Crowdsale.sol:311:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(address(0), _to, _value);
        ^-------------------------------^
/sb/Crowdsale.sol:325:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(_from, address(0), _value);
        ^---------------------------------^
/sb/Crowdsale.sol:326:9: Warning: Invoking events without "emit" prefix is deprecated.
        Destroy(_from, _value);
        ^--------------------^
/sb/Crowdsale.sol:341:9: Warning: Invoking events without "emit" prefix is deprecated.
        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        ^-----------------------------------------------------------^
/sb/Crowdsale.sol:362:9: Warning: Invoking events without "emit" prefix is deprecated.
        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        ^-----------------------------------------------------------^
/sb/Crowdsale.sol:372:9: Warning: Invoking events without "emit" prefix is deprecated.
        IssuanceFinished();
        ^----------------^
/sb/Crowdsale.sol:508:17: Warning: Invoking events without "emit" prefix is deprecated.
                TokensUnlocked(msg.sender, walletTokens[msg.sender][i].amount);
                ^------------------------------------------------------------^
/sb/Crowdsale.sol:554:9: Warning: Invoking events without "emit" prefix is deprecated.
        OwnershipTransferred(owner, newOwner);
        ^-----------------------------------^
/sb/Crowdsale.sol:592:9: Warning: Invoking events without "emit" prefix is deprecated.
        Pause();
        ^-----^
/sb/Crowdsale.sol:600:9: Warning: Invoking events without "emit" prefix is deprecated.
        Unpause();
        ^-------^


LockedTokens (../../sb/Crowdsale.sol#464-512) contract sets array length with a user-controlled value:
	- walletTokens[_to].push(Tokens({amount:_amount,lockEndTime:_lockEndTime,released:false})) (../../sb/Crowdsale.sol#495)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#array-length-assignment

LockedTokens.releaseTokens() (../../sb/Crowdsale.sol#501-511) ignores return value by token.transfer(msg.sender,walletTokens[msg.sender][i].amount) (../../sb/Crowdsale.sol#507)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-transfer

Reentrancy in LockedTokens.releaseTokens() (../../sb/Crowdsale.sol#501-511):
	External calls:
	- token.transfer(msg.sender,walletTokens[msg.sender][i].amount) (../../sb/Crowdsale.sol#507)
	State variables written after the call(s):
	- walletTokens[msg.sender][i].released = true (../../sb/Crowdsale.sol#506)
	LockedTokens.walletTokens (../../sb/Crowdsale.sol#475) can be used in cross function reentrancies:
	- LockedTokens.addTokens(address,uint256,uint256) (../../sb/Crowdsale.sol#493-496)
	- LockedTokens.releaseTokens() (../../sb/Crowdsale.sol#501-511)
	- LockedTokens.walletTokens (../../sb/Crowdsale.sol#475)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1

TransferLimitedToken.TransferLimitedToken(uint256,address,address[],address)._limitedWalletsManager (../../sb/Crowdsale.sol#415) lacks a zero-check on :
		- limitedWalletsManager = _limitedWalletsManager (../../sb/Crowdsale.sol#420)
LockedTokens.LockedTokens(IERC20Token,address)._crowdsaleAddress (../../sb/Crowdsale.sol#482) lacks a zero-check on :
		- crowdsaleAddress = _crowdsaleAddress (../../sb/Crowdsale.sol#484)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

LockedTokens.releaseTokens() (../../sb/Crowdsale.sol#501-511) has external calls inside a loop: token.transfer(msg.sender,walletTokens[msg.sender][i].amount) (../../sb/Crowdsale.sol#507)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop

Reentrancy in LockedTokens.releaseTokens() (../../sb/Crowdsale.sol#501-511):
	External calls:
	- token.transfer(msg.sender,walletTokens[msg.sender][i].amount) (../../sb/Crowdsale.sol#507)
	Event emitted after the call(s):
	- TokensUnlocked(msg.sender,walletTokens[msg.sender][i].amount) (../../sb/Crowdsale.sol#508)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

LockedTokens.releaseTokens() (../../sb/Crowdsale.sol#501-511) uses timestamp for comparisons
	Dangerous comparisons:
	- ! walletTokens[msg.sender][i].released && now >= walletTokens[msg.sender][i].lockEndTime (../../sb/Crowdsale.sol#505)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

MultiOwnable.onlyOwner() (../../sb/Crowdsale.sol#89-92) compares to a boolean constant:
	-require(bool)(ownerByAddress[msg.sender] == true) (../../sb/Crowdsale.sol#90)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#boolean-equality

SafeMath.safeDiv(uint256,uint256) (../../sb/Crowdsale.sol#145-148) is never used and should be removed
SafeMath.safeMul(uint256,uint256) (../../sb/Crowdsale.sol#139-143) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code

Pragma version^0.4.21 (../../sb/Crowdsale.sol#1) allows old versions
solc-0.4.26 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Parameter MultiOwnable.setOwners(address[])._owners (../../sb/Crowdsale.sol#104) is not in mixedCase
Parameter ERC20Token.transfer(address,uint256)._to (../../sb/Crowdsale.sol#170) is not in mixedCase
Parameter ERC20Token.transfer(address,uint256)._value (../../sb/Crowdsale.sol#170) is not in mixedCase
Parameter ERC20Token.transferFrom(address,address,uint256)._from (../../sb/Crowdsale.sol#180) is not in mixedCase
Parameter ERC20Token.transferFrom(address,address,uint256)._to (../../sb/Crowdsale.sol#180) is not in mixedCase
Parameter ERC20Token.transferFrom(address,address,uint256)._value (../../sb/Crowdsale.sol#180) is not in mixedCase
Parameter ERC20Token.balanceOf(address)._owner (../../sb/Crowdsale.sol#191) is not in mixedCase
Parameter ERC20Token.approve(address,uint256)._spender (../../sb/Crowdsale.sol#195) is not in mixedCase
Parameter ERC20Token.approve(address,uint256)._value (../../sb/Crowdsale.sol#195) is not in mixedCase
Parameter ERC20Token.allowance(address,address)._owner (../../sb/Crowdsale.sol#201) is not in mixedCase
Parameter ERC20Token.allowance(address,address)._spender (../../sb/Crowdsale.sol#201) is not in mixedCase
Parameter ManagedToken.setAllowTransfers(bool)._allowTransfers (../../sb/Crowdsale.sol#262) is not in mixedCase
Parameter ManagedToken.setListener(address)._listener (../../sb/Crowdsale.sol#271) is not in mixedCase
Parameter ManagedToken.transfer(address,uint256)._to (../../sb/Crowdsale.sol#279) is not in mixedCase
Parameter ManagedToken.transfer(address,uint256)._value (../../sb/Crowdsale.sol#279) is not in mixedCase
Parameter ManagedToken.transferFrom(address,address,uint256)._from (../../sb/Crowdsale.sol#287) is not in mixedCase
Parameter ManagedToken.transferFrom(address,address,uint256)._to (../../sb/Crowdsale.sol#287) is not in mixedCase
Parameter ManagedToken.transferFrom(address,address,uint256)._value (../../sb/Crowdsale.sol#287) is not in mixedCase
Parameter ManagedToken.issue(address,uint256)._to (../../sb/Crowdsale.sol#307) is not in mixedCase
Parameter ManagedToken.issue(address,uint256)._value (../../sb/Crowdsale.sol#307) is not in mixedCase
Parameter ManagedToken.destroy(address,uint256)._from (../../sb/Crowdsale.sol#320) is not in mixedCase
Parameter ManagedToken.destroy(address,uint256)._value (../../sb/Crowdsale.sol#320) is not in mixedCase
Parameter ManagedToken.increaseApproval(address,uint256)._spender (../../sb/Crowdsale.sol#339) is not in mixedCase
Parameter ManagedToken.increaseApproval(address,uint256)._addedValue (../../sb/Crowdsale.sol#339) is not in mixedCase
Parameter ManagedToken.decreaseApproval(address,uint256)._spender (../../sb/Crowdsale.sol#355) is not in mixedCase
Parameter ManagedToken.decreaseApproval(address,uint256)._subtractedValue (../../sb/Crowdsale.sol#355) is not in mixedCase
Parameter TransferLimitedToken.addLimitedWalletAddress(address)._wallet (../../sb/Crowdsale.sol#427) is not in mixedCase
Parameter TransferLimitedToken.delLimitedWalletAddress(address)._wallet (../../sb/Crowdsale.sol#436) is not in mixedCase
Parameter TransferLimitedToken.transfer(address,uint256)._to (../../sb/Crowdsale.sol#447) is not in mixedCase
Parameter TransferLimitedToken.transfer(address,uint256)._value (../../sb/Crowdsale.sol#447) is not in mixedCase
Parameter TransferLimitedToken.transferFrom(address,address,uint256)._from (../../sb/Crowdsale.sol#451) is not in mixedCase
Parameter TransferLimitedToken.transferFrom(address,address,uint256)._to (../../sb/Crowdsale.sol#451) is not in mixedCase
Parameter TransferLimitedToken.transferFrom(address,address,uint256)._value (../../sb/Crowdsale.sol#451) is not in mixedCase
Parameter TransferLimitedToken.approve(address,uint256)._spender (../../sb/Crowdsale.sol#455) is not in mixedCase
Parameter TransferLimitedToken.approve(address,uint256)._value (../../sb/Crowdsale.sol#455) is not in mixedCase
Parameter LockedTokens.addTokens(address,uint256,uint256)._to (../../sb/Crowdsale.sol#493) is not in mixedCase
Parameter LockedTokens.addTokens(address,uint256,uint256)._amount (../../sb/Crowdsale.sol#493) is not in mixedCase
Parameter LockedTokens.addTokens(address,uint256,uint256)._lockEndTime (../../sb/Crowdsale.sol#493) is not in mixedCase
Parameter Ownable.transferOwnership(address)._newOwner (../../sb/Crowdsale.sol#544) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Loop condition i < owners.length (../../sb/Crowdsale.sol#111) should use cached array length instead of referencing `length` member of the storage array.
 Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#cache-array-length

IERC20Token.decimals (../../sb/Crowdsale.sol#64) should be constant 
IERC20Token.name (../../sb/Crowdsale.sol#62) should be constant 
IERC20Token.symbol (../../sb/Crowdsale.sol#63) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant

setOwners(address[]) should be declared external:
	- MultiOwnable.setOwners(address[]) (../../sb/Crowdsale.sol#104-108)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external
/sb/Crowdsale.sol analyzed (13 contracts with 93 detectors), 57 result(s) found
