'solc --version' running
'solc /sb/ConvergentCurvePool.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/sb' running
Compilation warnings/errors on /sb/ConvergentCurvePool.sol:
Warning: Function state mutability can be restricted to pure
    --> /sb/ConvergentCurvePool.sol:1811:5:
     |
1811 |     function getRate() external override view returns (uint256) {
     |     ^ (Relevant source part starts here and spans across multiple lines).

Warning: Function state mutability can be restricted to pure
    --> /sb/ConvergentCurvePool.sol:2418:5:
     |
2418 |     function _normalize(
     |     ^ (Relevant source part starts here and spans across multiple lines).



LogExpMath.n_exp(int256) (../../sb/ConvergentCurvePool.sol#147-220) performs a multiplication on the result of a division:
	- t = ((t * x) / 2) / PRECISION (../../sb/ConvergentCurvePool.sol#197)
	- t = ((t * x) / 3) / PRECISION (../../sb/ConvergentCurvePool.sol#199)
LogExpMath.n_exp(int256) (../../sb/ConvergentCurvePool.sol#147-220) performs a multiplication on the result of a division:
	- t = ((t * x) / 3) / PRECISION (../../sb/ConvergentCurvePool.sol#199)
	- t = ((t * x) / 4) / PRECISION (../../sb/ConvergentCurvePool.sol#201)
LogExpMath.n_exp(int256) (../../sb/ConvergentCurvePool.sol#147-220) performs a multiplication on the result of a division:
	- t = ((t * x) / 4) / PRECISION (../../sb/ConvergentCurvePool.sol#201)
	- t = ((t * x) / 5) / PRECISION (../../sb/ConvergentCurvePool.sol#203)
LogExpMath.n_exp(int256) (../../sb/ConvergentCurvePool.sol#147-220) performs a multiplication on the result of a division:
	- t = ((t * x) / 5) / PRECISION (../../sb/ConvergentCurvePool.sol#203)
	- t = ((t * x) / 6) / PRECISION (../../sb/ConvergentCurvePool.sol#205)
LogExpMath.n_exp(int256) (../../sb/ConvergentCurvePool.sol#147-220) performs a multiplication on the result of a division:
	- t = ((t * x) / 6) / PRECISION (../../sb/ConvergentCurvePool.sol#205)
	- t = ((t * x) / 7) / PRECISION (../../sb/ConvergentCurvePool.sol#207)
LogExpMath.n_exp(int256) (../../sb/ConvergentCurvePool.sol#147-220) performs a multiplication on the result of a division:
	- t = ((t * x) / 7) / PRECISION (../../sb/ConvergentCurvePool.sol#207)
	- t = ((t * x) / 8) / PRECISION (../../sb/ConvergentCurvePool.sol#209)
LogExpMath.n_exp(int256) (../../sb/ConvergentCurvePool.sol#147-220) performs a multiplication on the result of a division:
	- t = ((t * x) / 8) / PRECISION (../../sb/ConvergentCurvePool.sol#209)
	- t = ((t * x) / 9) / PRECISION (../../sb/ConvergentCurvePool.sol#211)
LogExpMath.n_exp(int256) (../../sb/ConvergentCurvePool.sol#147-220) performs a multiplication on the result of a division:
	- t = ((t * x) / 9) / PRECISION (../../sb/ConvergentCurvePool.sol#211)
	- t = ((t * x) / 10) / PRECISION (../../sb/ConvergentCurvePool.sol#213)
LogExpMath.n_exp(int256) (../../sb/ConvergentCurvePool.sol#147-220) performs a multiplication on the result of a division:
	- t = ((t * x) / 10) / PRECISION (../../sb/ConvergentCurvePool.sol#213)
	- t = ((t * x) / 11) / PRECISION (../../sb/ConvergentCurvePool.sol#215)
LogExpMath.n_exp(int256) (../../sb/ConvergentCurvePool.sol#147-220) performs a multiplication on the result of a division:
	- t = ((t * x) / 11) / PRECISION (../../sb/ConvergentCurvePool.sol#215)
	- t = ((t * x) / 12) / PRECISION (../../sb/ConvergentCurvePool.sol#217)
LogExpMath.n_exp(int256) (../../sb/ConvergentCurvePool.sol#147-220) performs a multiplication on the result of a division:
	- (((ans * s) / PRECISION) * last) / 100 (../../sb/ConvergentCurvePool.sol#219)
LogExpMath.n_exp(int256) (../../sb/ConvergentCurvePool.sol#147-220) performs a multiplication on the result of a division:
	- ans = (ans * a8) / PRECISION (../../sb/ConvergentCurvePool.sol#187)
	- ans = (ans * a9) / PRECISION (../../sb/ConvergentCurvePool.sol#191)
LogExpMath.n_exp(int256) (../../sb/ConvergentCurvePool.sol#147-220) performs a multiplication on the result of a division:
	- ans = (ans * a7) / PRECISION (../../sb/ConvergentCurvePool.sol#183)
	- ans = (ans * a8) / PRECISION (../../sb/ConvergentCurvePool.sol#187)
LogExpMath.n_exp(int256) (../../sb/ConvergentCurvePool.sol#147-220) performs a multiplication on the result of a division:
	- ans = (ans * a6) / PRECISION (../../sb/ConvergentCurvePool.sol#179)
	- ans = (ans * a7) / PRECISION (../../sb/ConvergentCurvePool.sol#183)
LogExpMath.n_exp(int256) (../../sb/ConvergentCurvePool.sol#147-220) performs a multiplication on the result of a division:
	- ans = (ans * a5) / PRECISION (../../sb/ConvergentCurvePool.sol#175)
	- ans = (ans * a6) / PRECISION (../../sb/ConvergentCurvePool.sol#179)
LogExpMath.n_exp(int256) (../../sb/ConvergentCurvePool.sol#147-220) performs a multiplication on the result of a division:
	- ans = (ans * a4) / PRECISION (../../sb/ConvergentCurvePool.sol#171)
	- ans = (ans * a5) / PRECISION (../../sb/ConvergentCurvePool.sol#175)
LogExpMath.n_exp(int256) (../../sb/ConvergentCurvePool.sol#147-220) performs a multiplication on the result of a division:
	- ans = (ans * a3) / PRECISION (../../sb/ConvergentCurvePool.sol#167)
	- ans = (ans * a4) / PRECISION (../../sb/ConvergentCurvePool.sol#171)
LogExpMath.n_exp(int256) (../../sb/ConvergentCurvePool.sol#147-220) performs a multiplication on the result of a division:
	- ans = (ans * a2) / PRECISION (../../sb/ConvergentCurvePool.sol#163)
	- ans = (ans * a3) / PRECISION (../../sb/ConvergentCurvePool.sol#167)
LogExpMath.n_log(int256) (../../sb/ConvergentCurvePool.sol#227-295) performs a multiplication on the result of a division:
	- z = (PRECISION * (a - PRECISION)) / (a + PRECISION) (../../sb/ConvergentCurvePool.sol#281)
	- z_squared = (z * z) / PRECISION (../../sb/ConvergentCurvePool.sol#283)
LogExpMath.n_log(int256) (../../sb/ConvergentCurvePool.sol#227-295) performs a multiplication on the result of a division:
	- z = (PRECISION * (a - PRECISION)) / (a + PRECISION) (../../sb/ConvergentCurvePool.sol#281)
	- z_squared = (z * z) / PRECISION (../../sb/ConvergentCurvePool.sol#283)
	- t = (z * z_squared) / PRECISION (../../sb/ConvergentCurvePool.sol#284)
LogExpMath.n_log(int256) (../../sb/ConvergentCurvePool.sol#227-295) performs a multiplication on the result of a division:
	- z_squared = (z * z) / PRECISION (../../sb/ConvergentCurvePool.sol#283)
	- t = (z * z_squared) / PRECISION (../../sb/ConvergentCurvePool.sol#284)
	- t = (t * z_squared) / PRECISION (../../sb/ConvergentCurvePool.sol#286)
LogExpMath.n_log(int256) (../../sb/ConvergentCurvePool.sol#227-295) performs a multiplication on the result of a division:
	- z_squared = (z * z) / PRECISION (../../sb/ConvergentCurvePool.sol#283)
	- t = (t * z_squared) / PRECISION (../../sb/ConvergentCurvePool.sol#286)
	- t = (t * z_squared) / PRECISION (../../sb/ConvergentCurvePool.sol#288)
LogExpMath.n_log(int256) (../../sb/ConvergentCurvePool.sol#227-295) performs a multiplication on the result of a division:
	- z_squared = (z * z) / PRECISION (../../sb/ConvergentCurvePool.sol#283)
	- t = (t * z_squared) / PRECISION (../../sb/ConvergentCurvePool.sol#288)
	- t = (t * z_squared) / PRECISION (../../sb/ConvergentCurvePool.sol#290)
LogExpMath.n_log(int256) (../../sb/ConvergentCurvePool.sol#227-295) performs a multiplication on the result of a division:
	- z_squared = (z * z) / PRECISION (../../sb/ConvergentCurvePool.sol#283)
	- t = (t * z_squared) / PRECISION (../../sb/ConvergentCurvePool.sol#290)
	- t = (t * z_squared) / PRECISION (../../sb/ConvergentCurvePool.sol#292)
LogExpMath.n_log(int256) (../../sb/ConvergentCurvePool.sol#227-295) performs a multiplication on the result of a division:
	- z = (PRECISION * (a - PRECISION)) / (a + PRECISION) (../../sb/ConvergentCurvePool.sol#281)
	- s = z (../../sb/ConvergentCurvePool.sol#282)
	- (ans + 2 * s) / 100 (../../sb/ConvergentCurvePool.sol#294)
LogExpMath.n_log(int256) (../../sb/ConvergentCurvePool.sol#227-295) performs a multiplication on the result of a division:
	- a = (a * PRECISION) / a10 (../../sb/ConvergentCurvePool.sol#275)
	- a = (a * PRECISION) / a11 (../../sb/ConvergentCurvePool.sol#279)
LogExpMath.n_log(int256) (../../sb/ConvergentCurvePool.sol#227-295) performs a multiplication on the result of a division:
	- a = (a * PRECISION) / a9 (../../sb/ConvergentCurvePool.sol#271)
	- a = (a * PRECISION) / a10 (../../sb/ConvergentCurvePool.sol#275)
LogExpMath.n_log(int256) (../../sb/ConvergentCurvePool.sol#227-295) performs a multiplication on the result of a division:
	- a = (a * PRECISION) / a8 (../../sb/ConvergentCurvePool.sol#267)
	- a = (a * PRECISION) / a9 (../../sb/ConvergentCurvePool.sol#271)
LogExpMath.n_log(int256) (../../sb/ConvergentCurvePool.sol#227-295) performs a multiplication on the result of a division:
	- a = (a * PRECISION) / a7 (../../sb/ConvergentCurvePool.sol#263)
	- a = (a * PRECISION) / a8 (../../sb/ConvergentCurvePool.sol#267)
LogExpMath.n_log(int256) (../../sb/ConvergentCurvePool.sol#227-295) performs a multiplication on the result of a division:
	- a = (a * PRECISION) / a6 (../../sb/ConvergentCurvePool.sol#259)
	- a = (a * PRECISION) / a7 (../../sb/ConvergentCurvePool.sol#263)
LogExpMath.n_log(int256) (../../sb/ConvergentCurvePool.sol#227-295) performs a multiplication on the result of a division:
	- a = (a * PRECISION) / a5 (../../sb/ConvergentCurvePool.sol#255)
	- a = (a * PRECISION) / a6 (../../sb/ConvergentCurvePool.sol#259)
LogExpMath.n_log(int256) (../../sb/ConvergentCurvePool.sol#227-295) performs a multiplication on the result of a division:
	- a = (a * PRECISION) / a4 (../../sb/ConvergentCurvePool.sol#251)
	- a = (a * PRECISION) / a5 (../../sb/ConvergentCurvePool.sol#255)
LogExpMath.n_log(int256) (../../sb/ConvergentCurvePool.sol#227-295) performs a multiplication on the result of a division:
	- a = (a * PRECISION) / a3 (../../sb/ConvergentCurvePool.sol#247)
	- a = (a * PRECISION) / a4 (../../sb/ConvergentCurvePool.sol#251)
LogExpMath.n_log(int256) (../../sb/ConvergentCurvePool.sol#227-295) performs a multiplication on the result of a division:
	- a = (a * PRECISION) / a2 (../../sb/ConvergentCurvePool.sol#243)
	- a = (a * PRECISION) / a3 (../../sb/ConvergentCurvePool.sol#247)
LogExpMath.pow(uint256,uint256) (../../sb/ConvergentCurvePool.sol#304-330) performs a multiplication on the result of a division:
	- logx_times_y = ((logbase / DECIMALS) * y_int256 + ((logbase % DECIMALS) * y_int256) / DECIMALS) (../../sb/ConvergentCurvePool.sol#320)
LogExpMath.n_log_36(int256) (../../sb/ConvergentCurvePool.sol#360-380) performs a multiplication on the result of a division:
	- z = (DOUBLE_DECIMALS * (a - DOUBLE_DECIMALS)) / (a + DOUBLE_DECIMALS) (../../sb/ConvergentCurvePool.sol#362)
	- z_squared = (z * z) / DOUBLE_DECIMALS (../../sb/ConvergentCurvePool.sol#364)
LogExpMath.n_log_36(int256) (../../sb/ConvergentCurvePool.sol#360-380) performs a multiplication on the result of a division:
	- z = (DOUBLE_DECIMALS * (a - DOUBLE_DECIMALS)) / (a + DOUBLE_DECIMALS) (../../sb/ConvergentCurvePool.sol#362)
	- z_squared = (z * z) / DOUBLE_DECIMALS (../../sb/ConvergentCurvePool.sol#364)
	- t = (z * z_squared) / DOUBLE_DECIMALS (../../sb/ConvergentCurvePool.sol#365)
LogExpMath.n_log_36(int256) (../../sb/ConvergentCurvePool.sol#360-380) performs a multiplication on the result of a division:
	- z_squared = (z * z) / DOUBLE_DECIMALS (../../sb/ConvergentCurvePool.sol#364)
	- t = (z * z_squared) / DOUBLE_DECIMALS (../../sb/ConvergentCurvePool.sol#365)
	- t = (t * z_squared) / DOUBLE_DECIMALS (../../sb/ConvergentCurvePool.sol#367)
LogExpMath.n_log_36(int256) (../../sb/ConvergentCurvePool.sol#360-380) performs a multiplication on the result of a division:
	- z_squared = (z * z) / DOUBLE_DECIMALS (../../sb/ConvergentCurvePool.sol#364)
	- t = (t * z_squared) / DOUBLE_DECIMALS (../../sb/ConvergentCurvePool.sol#367)
	- t = (t * z_squared) / DOUBLE_DECIMALS (../../sb/ConvergentCurvePool.sol#369)
LogExpMath.n_log_36(int256) (../../sb/ConvergentCurvePool.sol#360-380) performs a multiplication on the result of a division:
	- z_squared = (z * z) / DOUBLE_DECIMALS (../../sb/ConvergentCurvePool.sol#364)
	- t = (t * z_squared) / DOUBLE_DECIMALS (../../sb/ConvergentCurvePool.sol#369)
	- t = (t * z_squared) / DOUBLE_DECIMALS (../../sb/ConvergentCurvePool.sol#371)
LogExpMath.n_log_36(int256) (../../sb/ConvergentCurvePool.sol#360-380) performs a multiplication on the result of a division:
	- z_squared = (z * z) / DOUBLE_DECIMALS (../../sb/ConvergentCurvePool.sol#364)
	- t = (t * z_squared) / DOUBLE_DECIMALS (../../sb/ConvergentCurvePool.sol#371)
	- t = (t * z_squared) / DOUBLE_DECIMALS (../../sb/ConvergentCurvePool.sol#373)
LogExpMath.n_log_36(int256) (../../sb/ConvergentCurvePool.sol#360-380) performs a multiplication on the result of a division:
	- z_squared = (z * z) / DOUBLE_DECIMALS (../../sb/ConvergentCurvePool.sol#364)
	- t = (t * z_squared) / DOUBLE_DECIMALS (../../sb/ConvergentCurvePool.sol#373)
	- t = (t * z_squared) / DOUBLE_DECIMALS (../../sb/ConvergentCurvePool.sol#375)
LogExpMath.n_log_36(int256) (../../sb/ConvergentCurvePool.sol#360-380) performs a multiplication on the result of a division:
	- z_squared = (z * z) / DOUBLE_DECIMALS (../../sb/ConvergentCurvePool.sol#364)
	- t = (t * z_squared) / DOUBLE_DECIMALS (../../sb/ConvergentCurvePool.sol#375)
	- t = (t * z_squared) / DOUBLE_DECIMALS (../../sb/ConvergentCurvePool.sol#377)
LogExpMath.n_log_36(int256) (../../sb/ConvergentCurvePool.sol#360-380) performs a multiplication on the result of a division:
	- z = (DOUBLE_DECIMALS * (a - DOUBLE_DECIMALS)) / (a + DOUBLE_DECIMALS) (../../sb/ConvergentCurvePool.sol#362)
	- s = z (../../sb/ConvergentCurvePool.sol#363)
	- 2 * s (../../sb/ConvergentCurvePool.sol#379)
ConvergentCurvePool._mintLP(uint256,uint256,uint256[],address) (../../sb/ConvergentCurvePool.sol#2195-2246) performs a multiplication on the result of a division:
	- underlyingPerBond = reserveUnderlying.div(reserveBond) (../../sb/ConvergentCurvePool.sol#2218)
	- neededUnderlying = underlyingPerBond.mul(inputBond) (../../sb/ConvergentCurvePool.sol#2220)
ConvergentCurvePool._burnLP(uint256,uint256,uint256[],address) (../../sb/ConvergentCurvePool.sol#2255-2294) performs a multiplication on the result of a division:
	- underlyingPerBond = reserveUnderlying.div(reserveBond) (../../sb/ConvergentCurvePool.sol#2267)
	- minOutputUnderlying > minOutputBond.mul(underlyingPerBond) (../../sb/ConvergentCurvePool.sol#2269)
ConvergentCurvePool._burnLP(uint256,uint256,uint256[],address) (../../sb/ConvergentCurvePool.sol#2255-2294) performs a multiplication on the result of a division:
	- underlyingPerBond = reserveUnderlying.div(reserveBond) (../../sb/ConvergentCurvePool.sol#2267)
	- (minOutputBond.mul(underlyingPerBond),minOutputBond) (../../sb/ConvergentCurvePool.sol#2292)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply

ConvergentCurvePool._mintLP(uint256,uint256,uint256[],address) (../../sb/ConvergentCurvePool.sol#2195-2246) uses a dangerous strict equality:
	- localTotalSupply == 0 (../../sb/ConvergentCurvePool.sol#2209)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities

ConvergentCurvePool.constructor(IERC20,IERC20,uint256,uint256,IVault,uint256,uint256,address,string,string).name (../../sb/ConvergentCurvePool.sol#1774) shadows:
	- BalancerPoolToken.name() (../../sb/ConvergentCurvePool.sol#1665-1667) (function)
ConvergentCurvePool.constructor(IERC20,IERC20,uint256,uint256,IVault,uint256,uint256,address,string,string).symbol (../../sb/ConvergentCurvePool.sol#1775) shadows:
	- BalancerPoolToken.symbol() (../../sb/ConvergentCurvePool.sol#1669-1671) (function)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing

ConvergentCurvePool.constructor(IERC20,IERC20,uint256,uint256,IVault,uint256,uint256,address,string,string)._governance (../../sb/ConvergentCurvePool.sol#1773) lacks a zero-check on :
		- governance = _governance (../../sb/ConvergentCurvePool.sol#1807)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

ConvergentCurvePool._mintLP(uint256,uint256,uint256[],address) (../../sb/ConvergentCurvePool.sol#2195-2246) uses timestamp for comparisons
	Dangerous comparisons:
	- localTotalSupply == 0 (../../sb/ConvergentCurvePool.sol#2209)
	- neededUnderlying > inputUnderlying (../../sb/ConvergentCurvePool.sol#2223)
ConvergentCurvePool._mintGovernanceLP(uint256[]) (../../sb/ConvergentCurvePool.sol#2299-2333) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(localFeeUnderlying >= (feesUsedUnderlying).div(percentFeeGov),Underflow) (../../sb/ConvergentCurvePool.sol#2319-2322)
	- require(bool,string)(localFeeBond >= (feesUsedBond).div(percentFeeGov),Underflow) (../../sb/ConvergentCurvePool.sol#2323)
ConvergentCurvePool._getYieldExponent() (../../sb/ConvergentCurvePool.sol#2337-2347) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp < expiration (../../sb/ConvergentCurvePool.sol#2339-2341)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

LogExpMath.n_log(int256) (../../sb/ConvergentCurvePool.sol#227-295) has a high cyclomatic complexity (13).
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#cyclomatic-complexity

FixedPoint.add(uint256,uint256) (../../sb/ConvergentCurvePool.sol#398-404) is never used and should be removed
FixedPoint.complement(uint256) (../../sb/ConvergentCurvePool.sol#509-511) is never used and should be removed
FixedPoint.divDown(uint256,uint256) (../../sb/ConvergentCurvePool.sol#457-468) is never used and should be removed
FixedPoint.divUp(uint256,uint256) (../../sb/ConvergentCurvePool.sol#470-487) is never used and should be removed
FixedPoint.mul(uint256,uint256) (../../sb/ConvergentCurvePool.sol#414-421) is never used and should be removed
FixedPoint.mulDown(uint256,uint256) (../../sb/ConvergentCurvePool.sol#423-428) is never used and should be removed
FixedPoint.mulUp(uint256,uint256) (../../sb/ConvergentCurvePool.sol#430-445) is never used and should be removed
FixedPoint.pow(uint256,uint256) (../../sb/ConvergentCurvePool.sol#489-491) is never used and should be removed
FixedPoint.powDown(uint256,uint256) (../../sb/ConvergentCurvePool.sol#493-499) is never used and should be removed
FixedPoint.powUp(uint256,uint256) (../../sb/ConvergentCurvePool.sol#501-504) is never used and should be removed
FixedPoint.sub(uint256,uint256) (../../sb/ConvergentCurvePool.sol#406-412) is never used and should be removed
LogExpMath.log(int256,int256) (../../sb/ConvergentCurvePool.sol#339-353) is never used and should be removed
Math.add(int256,int256) (../../sb/ConvergentCurvePool.sol#1501-1505) is never used and should be removed
Math.divDown(uint256,uint256) (../../sb/ConvergentCurvePool.sol#1545-1548) is never used and should be removed
Math.divUp(uint256,uint256) (../../sb/ConvergentCurvePool.sol#1550-1558) is never used and should be removed
Math.max(uint256,uint256) (../../sb/ConvergentCurvePool.sol#1528-1530) is never used and should be removed
Math.min(uint256,uint256) (../../sb/ConvergentCurvePool.sol#1535-1537) is never used and should be removed
Math.sub(int256,int256) (../../sb/ConvergentCurvePool.sol#1519-1523) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code

Pragma version^0.7.0 (../../sb/ConvergentCurvePool.sol#1) allows old versions
solc-0.7.6 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Function LogExpMath.n_exp(int256) (../../sb/ConvergentCurvePool.sol#147-220) is not in mixedCase
Function LogExpMath.n_log(int256) (../../sb/ConvergentCurvePool.sol#227-295) is not in mixedCase
Function LogExpMath.n_log_36(int256) (../../sb/ConvergentCurvePool.sol#360-380) is not in mixedCase
Constant LogExpMath.x0 (../../sb/ConvergentCurvePool.sol#115) is not in UPPER_CASE_WITH_UNDERSCORES
Constant LogExpMath.a0 (../../sb/ConvergentCurvePool.sol#116) is not in UPPER_CASE_WITH_UNDERSCORES
Constant LogExpMath.x1 (../../sb/ConvergentCurvePool.sol#117) is not in UPPER_CASE_WITH_UNDERSCORES
Constant LogExpMath.a1 (../../sb/ConvergentCurvePool.sol#118) is not in UPPER_CASE_WITH_UNDERSCORES
Constant LogExpMath.x2 (../../sb/ConvergentCurvePool.sol#119) is not in UPPER_CASE_WITH_UNDERSCORES
Constant LogExpMath.a2 (../../sb/ConvergentCurvePool.sol#120) is not in UPPER_CASE_WITH_UNDERSCORES
Constant LogExpMath.x3 (../../sb/ConvergentCurvePool.sol#121) is not in UPPER_CASE_WITH_UNDERSCORES
Constant LogExpMath.a3 (../../sb/ConvergentCurvePool.sol#122) is not in UPPER_CASE_WITH_UNDERSCORES
Constant LogExpMath.x4 (../../sb/ConvergentCurvePool.sol#123) is not in UPPER_CASE_WITH_UNDERSCORES
Constant LogExpMath.a4 (../../sb/ConvergentCurvePool.sol#124) is not in UPPER_CASE_WITH_UNDERSCORES
Constant LogExpMath.x5 (../../sb/ConvergentCurvePool.sol#125) is not in UPPER_CASE_WITH_UNDERSCORES
Constant LogExpMath.a5 (../../sb/ConvergentCurvePool.sol#126) is not in UPPER_CASE_WITH_UNDERSCORES
Constant LogExpMath.x6 (../../sb/ConvergentCurvePool.sol#127) is not in UPPER_CASE_WITH_UNDERSCORES
Constant LogExpMath.a6 (../../sb/ConvergentCurvePool.sol#128) is not in UPPER_CASE_WITH_UNDERSCORES
Constant LogExpMath.x7 (../../sb/ConvergentCurvePool.sol#129) is not in UPPER_CASE_WITH_UNDERSCORES
Constant LogExpMath.a7 (../../sb/ConvergentCurvePool.sol#130) is not in UPPER_CASE_WITH_UNDERSCORES
Constant LogExpMath.x8 (../../sb/ConvergentCurvePool.sol#131) is not in UPPER_CASE_WITH_UNDERSCORES
Constant LogExpMath.a8 (../../sb/ConvergentCurvePool.sol#132) is not in UPPER_CASE_WITH_UNDERSCORES
Constant LogExpMath.x9 (../../sb/ConvergentCurvePool.sol#133) is not in UPPER_CASE_WITH_UNDERSCORES
Constant LogExpMath.a9 (../../sb/ConvergentCurvePool.sol#134) is not in UPPER_CASE_WITH_UNDERSCORES
Constant LogExpMath.x10 (../../sb/ConvergentCurvePool.sol#135) is not in UPPER_CASE_WITH_UNDERSCORES
Constant LogExpMath.a10 (../../sb/ConvergentCurvePool.sol#136) is not in UPPER_CASE_WITH_UNDERSCORES
Constant LogExpMath.x11 (../../sb/ConvergentCurvePool.sol#137) is not in UPPER_CASE_WITH_UNDERSCORES
Constant LogExpMath.a11 (../../sb/ConvergentCurvePool.sol#138) is not in UPPER_CASE_WITH_UNDERSCORES
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Variable LogExpMath.EXPONENT_LB (../../sb/ConvergentCurvePool.sol#111) is too similar to LogExpMath.EXPONENT_UB (../../sb/ConvergentCurvePool.sol#112)
Variable LogExpMath.PRECISION_LOG_UNDER_BOUND (../../sb/ConvergentCurvePool.sol#109) is too similar to LogExpMath.PRECISION_LOG_UPPER_BOUND (../../sb/ConvergentCurvePool.sol#110)
Variable ConvergentCurvePool._assignTradeFee(uint256,uint256,IERC20,bool).impliedYieldFee_scope_0 (../../sb/ConvergentCurvePool.sol#2156-2158) is too similar to ConvergentCurvePool._assignTradeFee(uint256,uint256,IERC20,bool).impliedYieldFee_scope_1 (../../sb/ConvergentCurvePool.sol#2167-2169)
Variable ConvergentCurvePool._assignTradeFee(uint256,uint256,IERC20,bool).impliedYieldFee_scope_0 (../../sb/ConvergentCurvePool.sol#2156-2158) is too similar to ConvergentCurvePool._assignTradeFee(uint256,uint256,IERC20,bool).impliedYieldFee_scope_2 (../../sb/ConvergentCurvePool.sol#2176-2178)
Variable ConvergentCurvePool._assignTradeFee(uint256,uint256,IERC20,bool).impliedYieldFee_scope_1 (../../sb/ConvergentCurvePool.sol#2167-2169) is too similar to ConvergentCurvePool._assignTradeFee(uint256,uint256,IERC20,bool).impliedYieldFee_scope_2 (../../sb/ConvergentCurvePool.sol#2176-2178)
Variable ConvergentCurvePool.solveTradeInvariant(uint256,uint256,uint256,bool).xBeforePowA (../../sb/ConvergentCurvePool.sol#2107) is too similar to ConvergentCurvePool.solveTradeInvariant(uint256,uint256,uint256,bool).yBeforePowA (../../sb/ConvergentCurvePool.sol#2109)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#variable-names-too-similar

LogExpMath.slitherConstructorConstantVariables() (../../sb/ConvergentCurvePool.sol#104-381) uses literals with too many digits:
	- x0 = 128000000000000000000 (../../sb/ConvergentCurvePool.sol#115)
LogExpMath.slitherConstructorConstantVariables() (../../sb/ConvergentCurvePool.sol#104-381) uses literals with too many digits:
	- a0 = 38877084059945950922200000000000000000000000000000000000 (../../sb/ConvergentCurvePool.sol#116)
LogExpMath.slitherConstructorConstantVariables() (../../sb/ConvergentCurvePool.sol#104-381) uses literals with too many digits:
	- x1 = 64000000000000000000 (../../sb/ConvergentCurvePool.sol#117)
LogExpMath.slitherConstructorConstantVariables() (../../sb/ConvergentCurvePool.sol#104-381) uses literals with too many digits:
	- a1 = 6235149080811616882910000000 (../../sb/ConvergentCurvePool.sol#118)
LogExpMath.slitherConstructorConstantVariables() (../../sb/ConvergentCurvePool.sol#104-381) uses literals with too many digits:
	- x2 = 3200000000000000000000 (../../sb/ConvergentCurvePool.sol#119)
LogExpMath.slitherConstructorConstantVariables() (../../sb/ConvergentCurvePool.sol#104-381) uses literals with too many digits:
	- a2 = 7896296018268069516100000000000000 (../../sb/ConvergentCurvePool.sol#120)
LogExpMath.slitherConstructorConstantVariables() (../../sb/ConvergentCurvePool.sol#104-381) uses literals with too many digits:
	- x3 = 1600000000000000000000 (../../sb/ConvergentCurvePool.sol#121)
LogExpMath.slitherConstructorConstantVariables() (../../sb/ConvergentCurvePool.sol#104-381) uses literals with too many digits:
	- a3 = 888611052050787263676000000 (../../sb/ConvergentCurvePool.sol#122)
LogExpMath.slitherConstructorConstantVariables() (../../sb/ConvergentCurvePool.sol#104-381) uses literals with too many digits:
	- x4 = 800000000000000000000 (../../sb/ConvergentCurvePool.sol#123)
LogExpMath.slitherConstructorConstantVariables() (../../sb/ConvergentCurvePool.sol#104-381) uses literals with too many digits:
	- x5 = 400000000000000000000 (../../sb/ConvergentCurvePool.sol#125)
LogExpMath.slitherConstructorConstantVariables() (../../sb/ConvergentCurvePool.sol#104-381) uses literals with too many digits:
	- x6 = 200000000000000000000 (../../sb/ConvergentCurvePool.sol#127)
LogExpMath.slitherConstructorConstantVariables() (../../sb/ConvergentCurvePool.sol#104-381) uses literals with too many digits:
	- x7 = 100000000000000000000 (../../sb/ConvergentCurvePool.sol#129)
LogExpMath.slitherConstructorConstantVariables() (../../sb/ConvergentCurvePool.sol#104-381) uses literals with too many digits:
	- x8 = 50000000000000000000 (../../sb/ConvergentCurvePool.sol#131)
LogExpMath.slitherConstructorConstantVariables() (../../sb/ConvergentCurvePool.sol#104-381) uses literals with too many digits:
	- x9 = 25000000000000000000 (../../sb/ConvergentCurvePool.sol#133)
LogExpMath.slitherConstructorConstantVariables() (../../sb/ConvergentCurvePool.sol#104-381) uses literals with too many digits:
	- x10 = 12500000000000000000 (../../sb/ConvergentCurvePool.sol#135)
LogExpMath.slitherConstructorConstantVariables() (../../sb/ConvergentCurvePool.sol#104-381) uses literals with too many digits:
	- x11 = 6250000000000000000 (../../sb/ConvergentCurvePool.sol#137)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits

LogExpMath.DOUBLE_PRECISION (../../sb/ConvergentCurvePool.sol#108) is never used in LogExpMath (../../sb/ConvergentCurvePool.sol#104-381)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-state-variable

ConvergentCurvePool.governance (../../sb/ConvergentCurvePool.sol#1747) should be immutable 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-immutable
/sb/ConvergentCurvePool.sol analyzed (14 contracts with 93 detectors), 126 result(s) found
