'solc --version' running
'solc /sb/PolyDistribution.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/sb' running
Compilation warnings/errors on /sb/PolyDistribution.sol:
/sb/PolyDistribution.sol:95:3: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
  function PolyToken(address _polyDistributionContractAddress) public {
  ^ (Relevant source part starts here and spans across multiple lines).
/sb/PolyDistribution.sol:243:3: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
  function Ownable() public {
  ^ (Relevant source part starts here and spans across multiple lines).
/sb/PolyDistribution.sol:322:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function PolyDistribution(uint256 _startTime) public {
    ^ (Relevant source part starts here and spans across multiple lines).
/sb/PolyDistribution.sol:130:5: Warning: Invoking events without "emit" prefix is deprecated.
    Transfer(msg.sender, _to, _value);
    ^-------------------------------^
/sb/PolyDistribution.sol:148:5: Warning: Invoking events without "emit" prefix is deprecated.
    Transfer(_from, _to, _value);
    ^--------------------------^
/sb/PolyDistribution.sol:164:5: Warning: Invoking events without "emit" prefix is deprecated.
    Approval(msg.sender, _spender, _value);
    ^------------------------------------^
/sb/PolyDistribution.sol:180:5: Warning: Invoking events without "emit" prefix is deprecated.
    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    ^-----------------------------------------------------------^
/sb/PolyDistribution.sol:201:5: Warning: Invoking events without "emit" prefix is deprecated.
    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    ^-----------------------------------------------------------^
/sb/PolyDistribution.sol:261:5: Warning: Invoking events without "emit" prefix is deprecated.
    OwnershipTransferred(owner, newOwner);
    ^-----------------------------------^
/sb/PolyDistribution.sol:344:87: Warning: Using "years" as a unit denomination is deprecated.
      allocations[_recipient] = Allocation(uint8(AllocationType.FOUNDER), startTime + 1 years, startTime + 4 years, _totalAllocated, 0);
                                                                                      ^-----^
/sb/PolyDistribution.sol:344:108: Warning: Using "years" as a unit denomination is deprecated.
      allocations[_recipient] = Allocation(uint8(AllocationType.FOUNDER), startTime + 1 years, startTime + 4 years, _totalAllocated, 0);
                                                                                                           ^-----^
/sb/PolyDistribution.sol:350:109: Warning: Using "years" as a unit denomination is deprecated.
      allocations[_recipient] = Allocation(uint8(AllocationType.RESERVE), startTime + 182 days, startTime + 4 years, _totalAllocated, 0);
                                                                                                            ^-----^
/sb/PolyDistribution.sol:353:86: Warning: Using "years" as a unit denomination is deprecated.
      allocations[_recipient] = Allocation(uint8(AllocationType.BONUS1), startTime + 1 years, startTime + 1 years, _totalAllocated, 0);
                                                                                     ^-----^
/sb/PolyDistribution.sol:353:107: Warning: Using "years" as a unit denomination is deprecated.
      allocations[_recipient] = Allocation(uint8(AllocationType.BONUS1), startTime + 1 years, startTime + 1 years, _totalAllocated, 0);
                                                                                                          ^-----^
/sb/PolyDistribution.sol:356:86: Warning: Using "years" as a unit denomination is deprecated.
      allocations[_recipient] = Allocation(uint8(AllocationType.BONUS2), startTime + 2 years, startTime + 2 years, _totalAllocated, 0);
                                                                                     ^-----^
/sb/PolyDistribution.sol:356:107: Warning: Using "years" as a unit denomination is deprecated.
      allocations[_recipient] = Allocation(uint8(AllocationType.BONUS2), startTime + 2 years, startTime + 2 years, _totalAllocated, 0);
                                                                                                          ^-----^
/sb/PolyDistribution.sol:359:86: Warning: Using "years" as a unit denomination is deprecated.
      allocations[_recipient] = Allocation(uint8(AllocationType.BONUS3), startTime + 3 years, startTime + 3 years, _totalAllocated, 0);
                                                                                     ^-----^
/sb/PolyDistribution.sol:359:107: Warning: Using "years" as a unit denomination is deprecated.
      allocations[_recipient] = Allocation(uint8(AllocationType.BONUS3), startTime + 3 years, startTime + 3 years, _totalAllocated, 0);
                                                                                                          ^-----^
/sb/PolyDistribution.sol:362:5: Warning: Invoking events without "emit" prefix is deprecated.
    LogNewAllocation(_recipient, _supply, _totalAllocated, grandTotalAllocated());
    ^---------------------------------------------------------------------------^
/sb/PolyDistribution.sol:413:5: Warning: Invoking events without "emit" prefix is deprecated.
    LogPolyClaimed(_recipient, allocations[_recipient].AllocationSupply, tokensToTransfer, newAmountClaimed, grandTotalClaimed);
    ^-------------------------------------------------------------------------------------------------------------------------^


PolyDistribution.transferTokens(address) (../../sb/PolyDistribution.sol#397-414) ignores return value by POLY.transfer(_recipient,tokensToTransfer) (../../sb/PolyDistribution.sol#411)
PolyDistribution.refundTokens(address,address) (../../sb/PolyDistribution.sol#422-427) ignores return value by token.transfer(_recipient,balance) (../../sb/PolyDistribution.sol#426)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-transfer

Reentrancy in PolyDistribution.airdropTokens(address[]) (../../sb/PolyDistribution.sol#376-391):
	External calls:
	- require(bool)(POLY.transfer(_recipient[i],250 * decimalFactor)) (../../sb/PolyDistribution.sol#384)
	State variables written after the call(s):
	- airdrops[_recipient[i]] = true (../../sb/PolyDistribution.sol#383)
	PolyDistribution.airdrops (../../sb/PolyDistribution.sol#308) can be used in cross function reentrancies:
	- PolyDistribution.airdropTokens(address[]) (../../sb/PolyDistribution.sol#376-391)
	- PolyDistribution.airdrops (../../sb/PolyDistribution.sol#308)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1

PolyDistribution.airdropTokens(address[]).airdropped (../../sb/PolyDistribution.sol#378) is a local variable never initialized
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-local-variables

PolyDistribution.airdropTokens(address[]) (../../sb/PolyDistribution.sol#376-391) has external calls inside a loop: require(bool)(POLY.transfer(_recipient[i],250 * decimalFactor)) (../../sb/PolyDistribution.sol#384)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop

Reentrancy in PolyDistribution.airdropTokens(address[]) (../../sb/PolyDistribution.sol#376-391):
	External calls:
	- require(bool)(POLY.transfer(_recipient[i],250 * decimalFactor)) (../../sb/PolyDistribution.sol#384)
	State variables written after the call(s):
	- AVAILABLE_AIRDROP_SUPPLY = AVAILABLE_AIRDROP_SUPPLY.sub(airdropped) (../../sb/PolyDistribution.sol#388)
	- AVAILABLE_TOTAL_SUPPLY = AVAILABLE_TOTAL_SUPPLY.sub(airdropped) (../../sb/PolyDistribution.sol#389)
	- grandTotalClaimed = grandTotalClaimed.add(airdropped) (../../sb/PolyDistribution.sol#390)
Reentrancy in PolyDistribution.transferTokens(address) (../../sb/PolyDistribution.sol#397-414):
	External calls:
	- POLY.transfer(_recipient,tokensToTransfer) (../../sb/PolyDistribution.sol#411)
	State variables written after the call(s):
	- grandTotalClaimed = grandTotalClaimed.add(tokensToTransfer) (../../sb/PolyDistribution.sol#412)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

Reentrancy in PolyDistribution.transferTokens(address) (../../sb/PolyDistribution.sol#397-414):
	External calls:
	- POLY.transfer(_recipient,tokensToTransfer) (../../sb/PolyDistribution.sol#411)
	Event emitted after the call(s):
	- LogPolyClaimed(_recipient,allocations[_recipient].AllocationSupply,tokensToTransfer,newAmountClaimed,grandTotalClaimed) (../../sb/PolyDistribution.sol#413)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

PolyDistribution.PolyDistribution(uint256) (../../sb/PolyDistribution.sol#322-327) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(_startTime >= now) (../../sb/PolyDistribution.sol#323)
PolyDistribution.airdropTokens(address[]) (../../sb/PolyDistribution.sol#376-391) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(now >= startTime) (../../sb/PolyDistribution.sol#377)
PolyDistribution.transferTokens(address) (../../sb/PolyDistribution.sol#397-414) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(now >= allocations[_recipient].endCliff) (../../sb/PolyDistribution.sol#399)
	- require(bool)(now >= startTime) (../../sb/PolyDistribution.sol#400)
	- allocations[_recipient].endVesting > now (../../sb/PolyDistribution.sol#402)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

Pragma version^0.4.18 (../../sb/PolyDistribution.sol#1) allows old versions
solc-0.4.26 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Parameter PolyToken.balanceOf(address)._owner (../../sb/PolyDistribution.sol#104) is not in mixedCase
Parameter PolyToken.allowance(address,address)._owner (../../sb/PolyDistribution.sol#114) is not in mixedCase
Parameter PolyToken.allowance(address,address)._spender (../../sb/PolyDistribution.sol#114) is not in mixedCase
Parameter PolyToken.transfer(address,uint256)._to (../../sb/PolyDistribution.sol#123) is not in mixedCase
Parameter PolyToken.transfer(address,uint256)._value (../../sb/PolyDistribution.sol#123) is not in mixedCase
Parameter PolyToken.transferFrom(address,address,uint256)._from (../../sb/PolyDistribution.sol#140) is not in mixedCase
Parameter PolyToken.transferFrom(address,address,uint256)._to (../../sb/PolyDistribution.sol#140) is not in mixedCase
Parameter PolyToken.transferFrom(address,address,uint256)._value (../../sb/PolyDistribution.sol#140) is not in mixedCase
Parameter PolyToken.approve(address,uint256)._spender (../../sb/PolyDistribution.sol#162) is not in mixedCase
Parameter PolyToken.approve(address,uint256)._value (../../sb/PolyDistribution.sol#162) is not in mixedCase
Parameter PolyToken.increaseApproval(address,uint256)._spender (../../sb/PolyDistribution.sol#178) is not in mixedCase
Parameter PolyToken.increaseApproval(address,uint256)._addedValue (../../sb/PolyDistribution.sol#178) is not in mixedCase
Parameter PolyToken.decreaseApproval(address,uint256)._spender (../../sb/PolyDistribution.sol#194) is not in mixedCase
Parameter PolyToken.decreaseApproval(address,uint256)._subtractedValue (../../sb/PolyDistribution.sol#194) is not in mixedCase
Parameter PolyDistribution.setAllocation(address,uint256,PolyDistribution.AllocationType)._recipient (../../sb/PolyDistribution.sol#335) is not in mixedCase
Parameter PolyDistribution.setAllocation(address,uint256,PolyDistribution.AllocationType)._totalAllocated (../../sb/PolyDistribution.sol#335) is not in mixedCase
Parameter PolyDistribution.setAllocation(address,uint256,PolyDistribution.AllocationType)._supply (../../sb/PolyDistribution.sol#335) is not in mixedCase
Parameter PolyDistribution.setAirdropAdmin(address,bool)._admin (../../sb/PolyDistribution.sol#368) is not in mixedCase
Parameter PolyDistribution.setAirdropAdmin(address,bool)._isAdmin (../../sb/PolyDistribution.sol#368) is not in mixedCase
Parameter PolyDistribution.airdropTokens(address[])._recipient (../../sb/PolyDistribution.sol#376) is not in mixedCase
Parameter PolyDistribution.transferTokens(address)._recipient (../../sb/PolyDistribution.sol#397) is not in mixedCase
Parameter PolyDistribution.refundTokens(address,address)._recipient (../../sb/PolyDistribution.sol#422) is not in mixedCase
Parameter PolyDistribution.refundTokens(address,address)._token (../../sb/PolyDistribution.sol#422) is not in mixedCase
Variable PolyDistribution.POLY (../../sb/PolyDistribution.sol#275) is not in mixedCase
Constant PolyDistribution.decimalFactor (../../sb/PolyDistribution.sol#277) is not in UPPER_CASE_WITH_UNDERSCORES
Variable PolyDistribution.AVAILABLE_TOTAL_SUPPLY (../../sb/PolyDistribution.sol#280) is not in mixedCase
Variable PolyDistribution.AVAILABLE_PRESALE_SUPPLY (../../sb/PolyDistribution.sol#281) is not in mixedCase
Variable PolyDistribution.AVAILABLE_FOUNDER_SUPPLY (../../sb/PolyDistribution.sol#282) is not in mixedCase
Variable PolyDistribution.AVAILABLE_AIRDROP_SUPPLY (../../sb/PolyDistribution.sol#283) is not in mixedCase
Variable PolyDistribution.AVAILABLE_ADVISOR_SUPPLY (../../sb/PolyDistribution.sol#284) is not in mixedCase
Variable PolyDistribution.AVAILABLE_RESERVE_SUPPLY (../../sb/PolyDistribution.sol#285) is not in mixedCase
Variable PolyDistribution.AVAILABLE_BONUS1_SUPPLY (../../sb/PolyDistribution.sol#287) is not in mixedCase
Variable PolyDistribution.AVAILABLE_BONUS2_SUPPLY (../../sb/PolyDistribution.sol#288) is not in mixedCase
Variable PolyDistribution.AVAILABLE_BONUS3_SUPPLY (../../sb/PolyDistribution.sol#289) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Variable PolyDistribution.AVAILABLE_BONUS1_SUPPLY (../../sb/PolyDistribution.sol#287) is too similar to PolyDistribution.AVAILABLE_BONUS2_SUPPLY (../../sb/PolyDistribution.sol#288)
Variable PolyDistribution.AVAILABLE_BONUS1_SUPPLY (../../sb/PolyDistribution.sol#287) is too similar to PolyDistribution.AVAILABLE_BONUS3_SUPPLY (../../sb/PolyDistribution.sol#289)
Variable PolyDistribution.AVAILABLE_BONUS2_SUPPLY (../../sb/PolyDistribution.sol#288) is too similar to PolyDistribution.AVAILABLE_BONUS3_SUPPLY (../../sb/PolyDistribution.sol#289)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#variable-names-too-similar

PolyToken.slitherConstructorVariables() (../../sb/PolyDistribution.sol#79-205) uses literals with too many digits:
	- totalSupply = 1000000000 * decimalFactor (../../sb/PolyDistribution.sol#87)
PolyDistribution.slitherConstructorVariables() (../../sb/PolyDistribution.sol#272-428) uses literals with too many digits:
	- AVAILABLE_TOTAL_SUPPLY = 1000000000 * decimalFactor (../../sb/PolyDistribution.sol#280)
PolyDistribution.slitherConstructorVariables() (../../sb/PolyDistribution.sol#272-428) uses literals with too many digits:
	- AVAILABLE_PRESALE_SUPPLY = 240000000 * decimalFactor (../../sb/PolyDistribution.sol#281)
PolyDistribution.slitherConstructorVariables() (../../sb/PolyDistribution.sol#272-428) uses literals with too many digits:
	- AVAILABLE_FOUNDER_SUPPLY = 150000000 * decimalFactor (../../sb/PolyDistribution.sol#282)
PolyDistribution.slitherConstructorVariables() (../../sb/PolyDistribution.sol#272-428) uses literals with too many digits:
	- AVAILABLE_AIRDROP_SUPPLY = 10000000 * decimalFactor (../../sb/PolyDistribution.sol#283)
PolyDistribution.slitherConstructorVariables() (../../sb/PolyDistribution.sol#272-428) uses literals with too many digits:
	- AVAILABLE_ADVISOR_SUPPLY = 25000000 * decimalFactor (../../sb/PolyDistribution.sol#284)
PolyDistribution.slitherConstructorVariables() (../../sb/PolyDistribution.sol#272-428) uses literals with too many digits:
	- AVAILABLE_RESERVE_SUPPLY = 495000000 * decimalFactor (../../sb/PolyDistribution.sol#285)
PolyDistribution.slitherConstructorVariables() (../../sb/PolyDistribution.sol#272-428) uses literals with too many digits:
	- AVAILABLE_BONUS1_SUPPLY = 20000000 * decimalFactor (../../sb/PolyDistribution.sol#287)
PolyDistribution.slitherConstructorVariables() (../../sb/PolyDistribution.sol#272-428) uses literals with too many digits:
	- AVAILABLE_BONUS2_SUPPLY = 30000000 * decimalFactor (../../sb/PolyDistribution.sol#288)
PolyDistribution.slitherConstructorVariables() (../../sb/PolyDistribution.sol#272-428) uses literals with too many digits:
	- AVAILABLE_BONUS3_SUPPLY = 30000000 * decimalFactor (../../sb/PolyDistribution.sol#289)
PolyDistribution.slitherConstructorConstantVariables() (../../sb/PolyDistribution.sol#272-428) uses literals with too many digits:
	- INITIAL_SUPPLY = 1000000000 * decimalFactor (../../sb/PolyDistribution.sol#279)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits

PolyToken.name (../../sb/PolyDistribution.sol#83) should be constant 
PolyToken.symbol (../../sb/PolyDistribution.sol#84) should be constant 
PolyToken.totalSupply (../../sb/PolyDistribution.sol#87) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant

airdropTokens(address[]) should be declared external:
	- PolyDistribution.airdropTokens(address[]) (../../sb/PolyDistribution.sol#376-391)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external
/sb/PolyDistribution.sol analyzed (5 contracts with 93 detectors), 65 result(s) found
