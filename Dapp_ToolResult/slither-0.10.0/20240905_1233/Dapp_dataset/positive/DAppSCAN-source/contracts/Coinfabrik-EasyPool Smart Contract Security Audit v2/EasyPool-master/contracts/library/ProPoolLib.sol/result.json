{
    "errors": [],
    "fails": [],
    "findings": [
        {
            "confidence": "Medium",
            "contract": "ProPoolLib",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Coinfabrik-EasyPool Smart Contract Security Audit v2/EasyPool-master/contracts/library/ProPoolLib.sol",
            "function": "addressTransfer",
            "impact": "High",
            "line": 1431,
            "line_end": 1437,
            "message": "ProPoolLib.addressTransfer(address,uint256) (ProPoolLib.sol#1431-1437) sends eth to arbitrary user\n\tDangerous calls:\n\t- destination.transfer(etherAmount) (ProPoolLib.sol#1436)\n",
            "name": "arbitrary-send-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "ProPoolLib",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Coinfabrik-EasyPool Smart Contract Security Audit v2/EasyPool-master/contracts/library/ProPoolLib.sol",
            "function": "addressCall",
            "impact": "High",
            "line": 1449,
            "line_end": 1462,
            "message": "ProPoolLib.addressCall(address,uint256,uint256,bytes) (ProPoolLib.sol#1449-1462) sends eth to arbitrary user\n\tDangerous calls:\n\t- require(bool)(destination.call.gas(gasAmount).value(etherAmount)(data)) (ProPoolLib.sol#1456-1461)\n\t- require(bool)(destination.call.gas(gasleft()()).value(etherAmount)(data)) (ProPoolLib.sol#1456-1461)\n",
            "name": "arbitrary-send-eth",
            "check": "FP"
        },
        {
            "confidence": "High",
            "contract": "QuotaLib",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Coinfabrik-EasyPool Smart Contract Security Audit v2/EasyPool-master/contracts/library/ProPoolLib.sol",
            "function": "share",
            "impact": "Low",
            "line": 122,
            "message": "QuotaLib.claimShare(QuotaLib.Storage,address,uint256,uint256[2]).share (ProPoolLib.sol#122) shadows:\n\t- QuotaLib.share(uint256,uint256[2]) (ProPoolLib.sol#153-155) (function)\n",
            "name": "shadowing-local",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "ProPoolLib",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Coinfabrik-EasyPool Smart Contract Security Audit v2/EasyPool-master/contracts/library/ProPoolLib.sol",
            "function": "getPoolDetails2",
            "impact": "Low",
            "line": 792,
            "line_end": 813,
            "message": "ProPoolLib.getPoolDetails2(ProPoolLib.Pool) (ProPoolLib.sol#792-813) has external calls inside a loop: tokenBalances[i] = IERC20Base(tokenAddresses[i]).balanceOf(address(this)) (ProPoolLib.sol#810)\n",
            "name": "calls-loop",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "ProPoolLib",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Coinfabrik-EasyPool Smart Contract Security Audit v2/EasyPool-master/contracts/library/ProPoolLib.sol",
            "function": "getParticipantShares",
            "impact": "Low",
            "line": 847,
            "line_end": 882,
            "message": "ProPoolLib.getParticipantShares(ProPoolLib.Pool,address) (ProPoolLib.sol#847-882) has external calls inside a loop: tokenShare[i] = pool.tokenQuota[pool.tokenAddresses[i]].calcShare(addr,IERC20Base(pool.tokenAddresses[i]).balanceOf(address(this)),(netPartContribution,netPoolContribution)) (ProPoolLib.sol#874-878)\n",
            "name": "calls-loop",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "ProPoolLib",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Coinfabrik-EasyPool Smart Contract Security Audit v2/EasyPool-master/contracts/library/ProPoolLib.sol",
            "function": "init",
            "impact": "Low",
            "line": 337,
            "line_end": 392,
            "message": "Reentrancy in ProPoolLib.init(ProPoolLib.Pool,uint256,uint256,uint256,uint256,bool,address,address,address,address[],address[]) (ProPoolLib.sol#337-392):\n\tExternal calls:\n\t- pool.svcFeePerEther = pool.feeService.getFeePerEther() (ProPoolLib.sol#362)\n\tEvent emitted after the call(s):\n\t- AdminAdded(admin) (ProPoolLib.sol#1425)\n\t\t- addAdmin(pool,creatorAddress) (ProPoolLib.sol#371)\n\t- AdminAdded(admin) (ProPoolLib.sol#1425)\n\t\t- addAdmin(pool,admins[i]) (ProPoolLib.sol#373)\n\t- ExcludedFromWhitelist(exclude[i],idx) (ProPoolLib.sol#1286-1289)\n\t\t- modifyWhitelistCore(pool,0,whitelist,new address[](0)) (ProPoolLib.sol#390)\n\t- FeeServiceAttached(feeServiceAddr,pool.svcFeePerEther) (ProPoolLib.sol#364-367)\n\t- GroupSettingsChanged(idx,maxBalance,minContribution,maxContribution,ctorFeePerEther,isRestricted) (ProPoolLib.sol#1253-1260)\n\t\t- setGroupSettingsCore(pool,0,maxBalance,minContribution,maxContribution,ctorFeePerEther,isRestricted) (ProPoolLib.sol#377-385)\n\t- IncludedInWhitelist(include[i],idx) (ProPoolLib.sol#1306-1309)\n\t\t- modifyWhitelistCore(pool,0,whitelist,new address[](0)) (ProPoolLib.sol#390)\n\t- WhitelistEnabled(idx) (ProPoolLib.sol#1278)\n\t\t- modifyWhitelistCore(pool,0,whitelist,new address[](0)) (ProPoolLib.sol#390)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "ProPoolLib",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Coinfabrik-EasyPool Smart Contract Security Audit v2/EasyPool-master/contracts/library/ProPoolLib.sol",
            "function": "confirmTokenAddress",
            "impact": "Low",
            "line": 472,
            "line_end": 501,
            "message": "Reentrancy in ProPoolLib.confirmTokenAddress(ProPoolLib.Pool,address) (ProPoolLib.sol#472-501):\n\tExternal calls:\n\t- balance = ERC20.balanceOf(address(this)) (ProPoolLib.sol#483)\n\t- sendFees(pool) (ProPoolLib.sol#491)\n\t\t- pool.feeService.sendFee.value(svcFee)(creator) (ProPoolLib.sol#1332)\n\tExternal calls sending eth:\n\t- sendFees(pool) (ProPoolLib.sol#491)\n\t\t- destination.transfer(etherAmount) (ProPoolLib.sol#1436)\n\t\t- pool.feeService.sendFee.value(svcFee)(creator) (ProPoolLib.sol#1332)\n\tEvent emitted after the call(s):\n\t- AddressTransfer(destination,etherAmount) (ProPoolLib.sol#1432-1435)\n\t\t- sendFees(pool) (ProPoolLib.sol#491)\n\t- FeesDistributed(ctorFee,svcFee) (ProPoolLib.sol#1335-1338)\n\t\t- sendFees(pool) (ProPoolLib.sol#491)\n\t- TokenAddressConfirmed(tokenAddress,balance) (ProPoolLib.sol#497-500)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "ProPoolLib",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Coinfabrik-EasyPool Smart Contract Security Audit v2/EasyPool-master/contracts/library/ProPoolLib.sol",
            "function": "sendFees",
            "impact": "Low",
            "line": 1318,
            "line_end": 1339,
            "message": "Reentrancy in ProPoolLib.sendFees(ProPoolLib.Pool) (ProPoolLib.sol#1318-1339):\n\tExternal calls:\n\t- pool.feeService.sendFee.value(svcFee)(creator) (ProPoolLib.sol#1332)\n\tExternal calls sending eth:\n\t- addressTransfer(msg.sender,ctorFee) (ProPoolLib.sol#1325)\n\t\t- destination.transfer(etherAmount) (ProPoolLib.sol#1436)\n\t- pool.feeService.sendFee.value(svcFee)(creator) (ProPoolLib.sol#1332)\n\tEvent emitted after the call(s):\n\t- FeesDistributed(ctorFee,svcFee) (ProPoolLib.sol#1335-1338)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "ProPoolLib",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Coinfabrik-EasyPool Smart Contract Security Audit v2/EasyPool-master/contracts/library/ProPoolLib.sol",
            "function": "withdrawTokens",
            "impact": "Low",
            "line": 1153,
            "line_end": 1201,
            "message": "Reentrancy in ProPoolLib.withdrawTokens(ProPoolLib.Pool,uint256,uint256) (ProPoolLib.sol#1153-1201):\n\tExternal calls:\n\t- tokenBalance = tokenContract.balanceOf(address(this)) (ProPoolLib.sol#1174)\n\t- succeeded = tokenContract.transfer(msg.sender,tokenAmount) (ProPoolLib.sol#1187)\n\tEvent emitted after the call(s):\n\t- TokenWithdrawal(tokenAddress,msg.sender,tokenBalance,tokenAmount,succeeded) (ProPoolLib.sol#1191-1197)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "ProPoolLib",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Coinfabrik-EasyPool Smart Contract Security Audit v2/EasyPool-master/contracts/library/ProPoolLib.sol",
            "function": "confirmTokenAddress",
            "impact": "Low",
            "line": 472,
            "line_end": 501,
            "message": "Reentrancy in ProPoolLib.confirmTokenAddress(ProPoolLib.Pool,address) (ProPoolLib.sol#472-501):\n\tExternal calls:\n\t- balance = ERC20.balanceOf(address(this)) (ProPoolLib.sol#483)\n\tEvent emitted after the call(s):\n\t- StateChanged(uint256(pool.state),uint256(state)) (ProPoolLib.sol#1405-1408)\n\t\t- changeState(pool,State.Distribution) (ProPoolLib.sol#490)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "ProPoolLib",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Coinfabrik-EasyPool Smart Contract Security Audit v2/EasyPool-master/contracts/library/ProPoolLib.sol",
            "function": "addressCall",
            "impact": "Low",
            "line": 1449,
            "line_end": 1462,
            "message": "ProPoolLib.addressCall(address,uint256,uint256,bytes) (ProPoolLib.sol#1449-1462) tries to limit the gas of an external call that controls implicit decoding\n\trequire(bool)(destination.call.gas(gasAmount).value(etherAmount)(data)) (ProPoolLib.sol#1456-1461)\n\trequire(bool)(destination.call.gas(gasleft()()).value(etherAmount)(data)) (ProPoolLib.sol#1456-1461)\n",
            "name": "return-bomb",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "ProPoolLib",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Coinfabrik-EasyPool Smart Contract Security Audit v2/EasyPool-master/contracts/library/ProPoolLib.sol",
            "function": "withdrawAmount",
            "impact": "Informational",
            "line": 645,
            "line_end": 701,
            "message": "Reentrancy in ProPoolLib.withdrawAmount(ProPoolLib.Pool,uint256,uint256) (ProPoolLib.sol#645-701):\n\tExternal calls:\n\t- addressTransfer(msg.sender,finalAmount) (ProPoolLib.sol#690)\n\t\t- destination.transfer(etherAmount) (ProPoolLib.sol#1436)\n\tEvent emitted after the call(s):\n\t- Withdrawal(msg.sender,finalAmount,participant.contribution[idx],0,group.contribution,group.remaining,idx) (ProPoolLib.sol#692-700)\n",
            "name": "reentrancy-unlimited-gas",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "ProPoolLib",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Coinfabrik-EasyPool Smart Contract Security Audit v2/EasyPool-master/contracts/library/ProPoolLib.sol",
            "function": "withdrawRefundAndTokens",
            "impact": "Informational",
            "line": 1080,
            "line_end": 1116,
            "message": "Reentrancy in ProPoolLib.withdrawRefundAndTokens(ProPoolLib.Pool) (ProPoolLib.sol#1080-1116):\n\tExternal calls:\n\t- (poolContribution,poolRemaining,poolCtorFee,partContribution,partCtorFee) = withdrawAllRemaining2(pool) (ProPoolLib.sol#1088-1093)\n\t\t- destination.transfer(etherAmount) (ProPoolLib.sol#1436)\n\t- withdrawRefundShare(pool,poolRemaining,netPoolContribution,netPartContribution) (ProPoolLib.sol#1101)\n\t\t- destination.transfer(etherAmount) (ProPoolLib.sol#1436)\n\tEvent emitted after the call(s):\n\t- AddressTransfer(destination,etherAmount) (ProPoolLib.sol#1432-1435)\n\t\t- withdrawRefundShare(pool,poolRemaining,netPoolContribution,netPartContribution) (ProPoolLib.sol#1101)\n\t- RefundWithdrawal(msg.sender,address(this).balance,poolRemaining,amount) (ProPoolLib.sol#1140-1145)\n\t\t- withdrawRefundShare(pool,poolRemaining,netPoolContribution,netPartContribution) (ProPoolLib.sol#1101)\n\t- TokenWithdrawal(tokenAddress,msg.sender,tokenBalance,tokenAmount,succeeded) (ProPoolLib.sol#1191-1197)\n\t\t- withdrawTokens(pool,netPoolContribution,netPartContribution) (ProPoolLib.sol#1114)\n",
            "name": "reentrancy-unlimited-gas",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "ProPoolLib",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Coinfabrik-EasyPool Smart Contract Security Audit v2/EasyPool-master/contracts/library/ProPoolLib.sol",
            "function": "confirmTokenAddress",
            "impact": "Informational",
            "line": 472,
            "line_end": 501,
            "message": "Reentrancy in ProPoolLib.confirmTokenAddress(ProPoolLib.Pool,address) (ProPoolLib.sol#472-501):\n\tExternal calls:\n\t- sendFees(pool) (ProPoolLib.sol#491)\n\t\t- destination.transfer(etherAmount) (ProPoolLib.sol#1436)\n\tExternal calls sending eth:\n\t- sendFees(pool) (ProPoolLib.sol#491)\n\t\t- destination.transfer(etherAmount) (ProPoolLib.sol#1436)\n\t\t- pool.feeService.sendFee.value(svcFee)(creator) (ProPoolLib.sol#1332)\n\tEvent emitted after the call(s):\n\t- TokenAddressConfirmed(tokenAddress,balance) (ProPoolLib.sol#497-500)\n",
            "name": "reentrancy-unlimited-gas",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "ProPoolLib",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Coinfabrik-EasyPool Smart Contract Security Audit v2/EasyPool-master/contracts/library/ProPoolLib.sol",
            "function": "withdrawRefundShare",
            "impact": "Informational",
            "line": 1121,
            "line_end": 1148,
            "message": "Reentrancy in ProPoolLib.withdrawRefundShare(ProPoolLib.Pool,uint256,uint256,uint256) (ProPoolLib.sol#1121-1148):\n\tExternal calls:\n\t- addressTransfer(msg.sender,amount) (ProPoolLib.sol#1139)\n\t\t- destination.transfer(etherAmount) (ProPoolLib.sol#1436)\n\tEvent emitted after the call(s):\n\t- RefundWithdrawal(msg.sender,address(this).balance,poolRemaining,amount) (ProPoolLib.sol#1140-1145)\n",
            "name": "reentrancy-unlimited-gas",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "ProPoolLib",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Coinfabrik-EasyPool Smart Contract Security Audit v2/EasyPool-master/contracts/library/ProPoolLib.sol",
            "function": "sendFees",
            "impact": "Informational",
            "line": 1318,
            "line_end": 1339,
            "message": "Reentrancy in ProPoolLib.sendFees(ProPoolLib.Pool) (ProPoolLib.sol#1318-1339):\n\tExternal calls:\n\t- addressTransfer(msg.sender,ctorFee) (ProPoolLib.sol#1325)\n\t\t- destination.transfer(etherAmount) (ProPoolLib.sol#1436)\n\tExternal calls sending eth:\n\t- addressTransfer(msg.sender,ctorFee) (ProPoolLib.sol#1325)\n\t\t- destination.transfer(etherAmount) (ProPoolLib.sol#1436)\n\t- pool.feeService.sendFee.value(svcFee)(creator) (ProPoolLib.sol#1332)\n\tEvent emitted after the call(s):\n\t- FeesDistributed(ctorFee,svcFee) (ProPoolLib.sol#1335-1338)\n",
            "name": "reentrancy-unlimited-gas",
            "check": "FP"
        }
    ],
    "infos": [],
    "parser": {
        "id": "slither-0.10.0",
        "mode": "solidity",
        "version": "2024/04/30"
    }
}