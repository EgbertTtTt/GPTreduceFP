{
    "errors": [],
    "fails": [],
    "findings": [
        {
            "confidence": "Medium",
            "contract": "StakingV2",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-TranchessV1.1/contract-core-68a86350313c1cb9e5467e791d3e9efaf228a0df/contracts/exchange/StakingV2.sol",
            "function": "deposit",
            "impact": "Medium",
            "line": 1387,
            "line_end": 1406,
            "message": "Reentrancy in StakingV2.deposit(uint256,uint256) (StakingV2.sol#1387-1406):\n\tExternal calls:\n\t- tokenM.safeTransferFrom(msg.sender,address(this),amount) (StakingV2.sol#1392)\n\t- tokenA.safeTransferFrom(msg.sender,address(this),amount) (StakingV2.sol#1394)\n\t- tokenB.safeTransferFrom(msg.sender,address(this),amount) (StakingV2.sol#1396)\n\tState variables written after the call(s):\n\t- _availableBalances[msg.sender][tranche] = _availableBalances[msg.sender][tranche].add(amount) (StakingV2.sol#1398-1400)\n\tStakingV2._availableBalances (StakingV2.sol#1123) can be used in cross function reentrancies:\n\t- StakingV2._updateWorkingBalance(address) (StakingV2.sol#1848-1879)\n\t- StakingV2._userCheckpoint(address,uint256) (StakingV2.sol#1745-1841)\n\t- StakingV2.availableBalanceOf(uint256,address) (StakingV2.sol#1230-1262)\n\t- StakingV2.deposit(uint256,uint256) (StakingV2.sol#1387-1406)\n\t- StakingV2.withdraw(uint256,uint256) (StakingV2.sol#1418-1438)\n\t- StakingV2.workingBalanceOf(address) (StakingV2.sol#1320-1338)\n\t- _totalSupplies[tranche] = _totalSupplies[tranche].add(amount) (StakingV2.sol#1401)\n\tStakingV2._totalSupplies (StakingV2.sol#1117) can be used in cross function reentrancies:\n\t- StakingV2._checkpoint(uint256) (StakingV2.sol#1643-1731)\n\t- StakingV2._updateWorkingBalance(address) (StakingV2.sol#1848-1879)\n\t- StakingV2.deposit(uint256,uint256) (StakingV2.sol#1387-1406)\n\t- StakingV2.totalSupply(uint256) (StakingV2.sol#1204-1228)\n\t- StakingV2.withdraw(uint256,uint256) (StakingV2.sol#1418-1438)\n\t- StakingV2.workingSupply() (StakingV2.sol#1302-1318)\n\t- _updateWorkingBalance(msg.sender) (StakingV2.sol#1403)\n\t\t- _workingBalances[account] = newWorkingBalance (StakingV2.sol#1878)\n\tStakingV2._workingBalances (StakingV2.sol#1156) can be used in cross function reentrancies:\n\t- StakingV2._updateWorkingBalance(address) (StakingV2.sol#1848-1879)\n\t- StakingV2._userCheckpoint(address,uint256) (StakingV2.sol#1745-1841)\n\t- StakingV2.workingBalanceOf(address) (StakingV2.sol#1320-1338)\n\t- _updateWorkingBalance(msg.sender) (StakingV2.sol#1403)\n\t\t- _workingSupply = _workingSupply.sub(_workingBalances[account]).add(newWorkingBalance) (StakingV2.sol#1877)\n\tStakingV2._workingSupply (StakingV2.sol#1155) can be used in cross function reentrancies:\n\t- StakingV2._checkpoint(uint256) (StakingV2.sol#1643-1731)\n\t- StakingV2._updateWorkingBalance(address) (StakingV2.sol#1848-1879)\n\t- StakingV2.workingSupply() (StakingV2.sol#1302-1318)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StakingV2",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-TranchessV1.1/contract-core-68a86350313c1cb9e5467e791d3e9efaf228a0df/contracts/exchange/StakingV2.sol",
            "function": "_claim",
            "impact": "Medium",
            "line": 1635,
            "line_end": 1638,
            "message": "Reentrancy in StakingV2._claim(address) (StakingV2.sol#1635-1638):\n\tExternal calls:\n\t- chessSchedule.mint(account,_claimableRewards[account]) (StakingV2.sol#1636)\n\tState variables written after the call(s):\n\t- _claimableRewards[account] = 0 (StakingV2.sol#1637)\n\tStakingV2._claimableRewards (StakingV2.sol#1152) can be used in cross function reentrancies:\n\t- StakingV2._claim(address) (StakingV2.sol#1635-1638)\n\t- StakingV2._userCheckpoint(address,uint256) (StakingV2.sol#1745-1841)\n\t- StakingV2.claimableRewards(address) (StakingV2.sol#1462-1467)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StakingV2",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-TranchessV1.1/contract-core-68a86350313c1cb9e5467e791d3e9efaf228a0df/contracts/exchange/StakingV2.sol",
            "function": "withdraw",
            "impact": "Medium",
            "line": 1418,
            "line_end": 1438,
            "message": "Reentrancy in StakingV2.withdraw(uint256,uint256) (StakingV2.sol#1418-1438):\n\tExternal calls:\n\t- tokenM.safeTransfer(msg.sender,amount) (StakingV2.sol#1428)\n\t- tokenA.safeTransfer(msg.sender,amount) (StakingV2.sol#1430)\n\t- tokenB.safeTransfer(msg.sender,amount) (StakingV2.sol#1432)\n\tState variables written after the call(s):\n\t- _updateWorkingBalance(msg.sender) (StakingV2.sol#1435)\n\t\t- _workingBalances[account] = newWorkingBalance (StakingV2.sol#1878)\n\tStakingV2._workingBalances (StakingV2.sol#1156) can be used in cross function reentrancies:\n\t- StakingV2._updateWorkingBalance(address) (StakingV2.sol#1848-1879)\n\t- StakingV2._userCheckpoint(address,uint256) (StakingV2.sol#1745-1841)\n\t- StakingV2.workingBalanceOf(address) (StakingV2.sol#1320-1338)\n\t- _updateWorkingBalance(msg.sender) (StakingV2.sol#1435)\n\t\t- _workingSupply = _workingSupply.sub(_workingBalances[account]).add(newWorkingBalance) (StakingV2.sol#1877)\n\tStakingV2._workingSupply (StakingV2.sol#1155) can be used in cross function reentrancies:\n\t- StakingV2._checkpoint(uint256) (StakingV2.sol#1643-1731)\n\t- StakingV2._updateWorkingBalance(address) (StakingV2.sol#1848-1879)\n\t- StakingV2.workingSupply() (StakingV2.sol#1302-1318)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StakingV2",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-TranchessV1.1/contract-core-68a86350313c1cb9e5467e791d3e9efaf228a0df/contracts/exchange/StakingV2.sol",
            "function": "claimAndDeposit",
            "impact": "Medium",
            "line": 1410,
            "line_end": 1413,
            "message": "StakingV2.claimAndDeposit(address) (StakingV2.sol#1410-1413) ignores return value by (createdShares) = IPrimaryMarket(primaryMarket).claim(msg.sender) (StakingV2.sol#1411)\n",
            "name": "unused-return",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StakingV2",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-TranchessV1.1/contract-core-68a86350313c1cb9e5467e791d3e9efaf228a0df/contracts/exchange/StakingV2.sol",
            "function": "_fundBatchRebalance",
            "impact": "Medium",
            "line": 1365,
            "line_end": 1381,
            "message": "StakingV2._fundBatchRebalance(uint256,uint256,uint256,uint256,uint256) (StakingV2.sol#1365-1381) ignores return value by fund.batchRebalance(amountM,amountA,amountB,fromIndex,toIndex) (StakingV2.sol#1380)\n",
            "name": "unused-return",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StakingV2",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-TranchessV1.1/contract-core-68a86350313c1cb9e5467e791d3e9efaf228a0df/contracts/exchange/StakingV2.sol",
            "function": "_fundDoRebalance",
            "impact": "Medium",
            "line": 1348,
            "line_end": 1363,
            "message": "StakingV2._fundDoRebalance(uint256,uint256,uint256,uint256) (StakingV2.sol#1348-1363) ignores return value by fund.doRebalance(amountM,amountA,amountB,index) (StakingV2.sol#1362)\n",
            "name": "unused-return",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StakingV2",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-TranchessV1.1/contract-core-68a86350313c1cb9e5467e791d3e9efaf228a0df/contracts/exchange/StakingV2.sol",
            "function": "claimAndDeposit",
            "impact": "Low",
            "line": 1410,
            "line_end": 1413,
            "message": "Reentrancy in StakingV2.claimAndDeposit(address) (StakingV2.sol#1410-1413):\n\tExternal calls:\n\t- (createdShares) = IPrimaryMarket(primaryMarket).claim(msg.sender) (StakingV2.sol#1411)\n\t- deposit(TRANCHE_M,createdShares) (StakingV2.sol#1412)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (StakingV2.sol#565)\n\t\t- tokenM.safeTransferFrom(msg.sender,address(this),amount) (StakingV2.sol#1392)\n\t\t- (success,returndata) = target.call{value: value}(data) (StakingV2.sol#433)\n\t\t- tokenA.safeTransferFrom(msg.sender,address(this),amount) (StakingV2.sol#1394)\n\t\t- tokenB.safeTransferFrom(msg.sender,address(this),amount) (StakingV2.sol#1396)\n\tExternal calls sending eth:\n\t- deposit(TRANCHE_M,createdShares) (StakingV2.sol#1412)\n\t\t- (success,returndata) = target.call{value: value}(data) (StakingV2.sol#433)\n\tEvent emitted after the call(s):\n\t- Deposited(tranche,msg.sender,amount) (StakingV2.sol#1405)\n\t\t- deposit(TRANCHE_M,createdShares) (StakingV2.sol#1412)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StakingV2",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-TranchessV1.1/contract-core-68a86350313c1cb9e5467e791d3e9efaf228a0df/contracts/exchange/StakingV2.sol",
            "function": "deposit",
            "impact": "Low",
            "line": 1387,
            "line_end": 1406,
            "message": "Reentrancy in StakingV2.deposit(uint256,uint256) (StakingV2.sol#1387-1406):\n\tExternal calls:\n\t- tokenM.safeTransferFrom(msg.sender,address(this),amount) (StakingV2.sol#1392)\n\t- tokenA.safeTransferFrom(msg.sender,address(this),amount) (StakingV2.sol#1394)\n\t- tokenB.safeTransferFrom(msg.sender,address(this),amount) (StakingV2.sol#1396)\n\tEvent emitted after the call(s):\n\t- Deposited(tranche,msg.sender,amount) (StakingV2.sol#1405)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StakingV2",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-TranchessV1.1/contract-core-68a86350313c1cb9e5467e791d3e9efaf228a0df/contracts/exchange/StakingV2.sol",
            "function": "withdraw",
            "impact": "Low",
            "line": 1418,
            "line_end": 1438,
            "message": "Reentrancy in StakingV2.withdraw(uint256,uint256) (StakingV2.sol#1418-1438):\n\tExternal calls:\n\t- tokenM.safeTransfer(msg.sender,amount) (StakingV2.sol#1428)\n\t- tokenA.safeTransfer(msg.sender,amount) (StakingV2.sol#1430)\n\t- tokenB.safeTransfer(msg.sender,amount) (StakingV2.sol#1432)\n\tEvent emitted after the call(s):\n\t- Withdrawn(tranche,msg.sender,amount) (StakingV2.sol#1437)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StakingV2",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-TranchessV1.1/contract-core-68a86350313c1cb9e5467e791d3e9efaf228a0df/contracts/exchange/StakingV2.sol",
            "function": "syncWithVotingEscrow",
            "impact": "Low",
            "line": 1485,
            "line_end": 1505,
            "message": "StakingV2.syncWithVotingEscrow(address) (StakingV2.sol#1485-1505) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- newLocked.amount != veSnapshot.veLocked.amount || newLocked.unlockTime != veSnapshot.veLocked.unlockTime || newLocked.unlockTime < block.timestamp (StakingV2.sol#1493-1495)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StakingV2",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-TranchessV1.1/contract-core-68a86350313c1cb9e5467e791d3e9efaf228a0df/contracts/exchange/StakingV2.sol",
            "function": "_userCheckpoint",
            "impact": "Low",
            "line": 1745,
            "line_end": 1841,
            "message": "StakingV2._userCheckpoint(address,uint256) (StakingV2.sol#1745-1841) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- userIntegral == integral && oldVersion == targetVersion (StakingV2.sol#1762)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StakingV2",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-TranchessV1.1/contract-core-68a86350313c1cb9e5467e791d3e9efaf228a0df/contracts/exchange/StakingV2.sol",
            "function": "claimRewards",
            "impact": "Low",
            "line": 1471,
            "line_end": 1480,
            "message": "StakingV2.claimRewards(address) (StakingV2.sol#1471-1480) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(block.timestamp >= guardedLaunchStart + 1296000,Cannot claim during guarded launch) (StakingV2.sol#1472-1475)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StakingV2",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-TranchessV1.1/contract-core-68a86350313c1cb9e5467e791d3e9efaf228a0df/contracts/exchange/StakingV2.sol",
            "function": "_initializeStaking",
            "impact": "Low",
            "line": 1178,
            "line_end": 1182,
            "message": "StakingV2._initializeStaking() (StakingV2.sol#1178-1182) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(_checkpointTimestamp == 0) (StakingV2.sol#1179)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StakingV2",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-TranchessV1.1/contract-core-68a86350313c1cb9e5467e791d3e9efaf228a0df/contracts/exchange/StakingV2.sol",
            "function": "_checkpoint",
            "impact": "Low",
            "line": 1643,
            "line_end": 1731,
            "message": "StakingV2._checkpoint(uint256) (StakingV2.sol#1643-1731) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- timestamp >= block.timestamp (StakingV2.sol#1645)\n\t- i < MAX_ITERATIONS && timestamp_ < block.timestamp (StakingV2.sol#1674)\n\t- endTimestamp == rebalanceTimestamp (StakingV2.sol#1686)\n\t- endTimestamp == endWeek (StakingV2.sol#1709)\n\t- _rate != rate (StakingV2.sol#1720)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StakingV2",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-TranchessV1.1/contract-core-68a86350313c1cb9e5467e791d3e9efaf228a0df/contracts/exchange/StakingV2.sol",
            "function": "_updateWorkingBalance",
            "impact": "Low",
            "line": 1848,
            "line_end": 1879,
            "message": "StakingV2._updateWorkingBalance(address) (StakingV2.sol#1848-1879) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- veProportion > 0 && _veSnapshots[account].veLocked.unlockTime > block.timestamp (StakingV2.sol#1866)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "High",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-TranchessV1.1/contract-core-68a86350313c1cb9e5467e791d3e9efaf228a0df/contracts/exchange/StakingV2.sol",
            "impact": "Informational",
            "line": 1078,
            "message": "StakingV2._reservedSlots (StakingV2.sol#1078) is never used in StakingV2 (StakingV2.sol#1076-1880)\n",
            "name": "unused-state",
            "check": "FP"
        }
    ],
    "infos": [],
    "parser": {
        "id": "slither-0.10.0",
        "mode": "solidity",
        "version": "2024/04/30"
    }
}