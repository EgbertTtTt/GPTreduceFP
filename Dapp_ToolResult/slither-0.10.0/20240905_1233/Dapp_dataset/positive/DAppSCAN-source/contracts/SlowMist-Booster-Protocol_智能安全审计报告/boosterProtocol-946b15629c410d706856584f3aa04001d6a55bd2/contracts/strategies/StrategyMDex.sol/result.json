{
    "errors": [],
    "fails": [],
    "findings": [
        {
            "confidence": "Medium",
            "contract": "StrategyMDex",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "liquidation",
            "impact": "Medium",
            "line": 2371,
            "line_end": 2417,
            "message": "Reentrancy in StrategyMDex.liquidation(uint256,address,address,uint256) (StrategyMDex.sol#2371-2417):\n\tExternal calls:\n\t- updatePool(_pid) (StrategyMDex.sol#2377)\n\t\t- hecopool.deposit(_poolId,_lpAmount) (StrategyMDex.sol#1115)\n\t\t- hecopool.deposit(_poolId,0) (StrategyMDex.sol#1124)\n\t\t- router.addLiquidity(poolInfo[_pid].collateralToken[0],poolInfo[_pid].collateralToken[1],_amount0,_amount1,0,0,address(this),block.timestamp.add(60)) (StrategyMDex.sol#2232-2234)\n\t\t- actionPool.onAcionUpdate(_pid) (StrategyMDex.sol#2041)\n\t\t- utils.getTokenIn(token1,swapAmt,token0) (StrategyMDex.sol#2206)\n\t\t- utils.getTokenIn(token0,swapAmt,token1) (StrategyMDex.sol#2210)\n\t\t- newRewardBase = utils.getTokenIn(rewardToken,newRewards,pool.baseToken) (StrategyMDex.sol#2060)\n\t\t- utils.makeRefundFee(_pid,newRewardBase) (StrategyMDex.sol#2063)\n\t- makeWithdrawRemoveLiquidity(_pid,withdrawLPTokenAmount) (StrategyMDex.sol#2400)\n\t\t- hecopool.withdraw(_poolId,_lpAmount) (StrategyMDex.sol#1119)\n\t\t- router.removeLiquidity(token0,token1,_withdrawLPTokenAmount,0,0,address(this),block.timestamp.add(60)) (StrategyMDex.sol#2331)\n\t- makeLiquidationRepay(_pid,_account,borrowAmount) (StrategyMDex.sol#2405)\n\t\t- utils.makeRepay(_pid,userInfo[_pid][_account].borrowFrom,_account,_rate,_fast) (StrategyMDex.sol#2335)\n\t\t- utils.getTokenIn(token0,amount0,poolInfo[_pid].baseToken) (StrategyMDex.sol#2426)\n\t\t- utils.getTokenIn(token1,amount1,poolInfo[_pid].baseToken) (StrategyMDex.sol#2427)\n\tState variables written after the call(s):\n\t- makeLiquidationRepay(_pid,_account,borrowAmount) (StrategyMDex.sol#2405)\n\t\t- userInfo[_pid][_account].borrowFrom = address(0) (StrategyMDex.sol#2337)\n\t\t- userInfo[_pid][_account].bid = 0 (StrategyMDex.sol#2338)\n\tStrategyMDex.userInfo (StrategyMDex.sol#1873) can be used in cross function reentrancies:\n\t- StrategyMDex._emergencyWithdraw(uint256,address) (StrategyMDex.sol#2349-2369)\n\t- StrategyMDex._withdraw(uint256,address,uint256,bool) (StrategyMDex.sol#2266-2305)\n\t- StrategyMDex.deposit(uint256,address,address,uint256,uint256,uint256) (StrategyMDex.sol#2101-2164)\n\t- StrategyMDex.getATUserAmount(uint256,address) (StrategyMDex.sol#1905-1908)\n\t- StrategyMDex.getBorrowInfo(uint256,address) (StrategyMDex.sol#1933-1937)\n\t- StrategyMDex.liquidation(uint256,address,address,uint256) (StrategyMDex.sol#2371-2417)\n\t- StrategyMDex.makeBorrowBaseToken(uint256,address,address,uint256) (StrategyMDex.sol#2166-2183)\n\t- StrategyMDex.makeLiquidationRepay(uint256,address,uint256) (StrategyMDex.sol#2419-2432)\n\t- StrategyMDex.makeWithdrawCalcAmount(uint256,address) (StrategyMDex.sol#2307-2323)\n\t- StrategyMDex.pendingLPAmount(uint256,address) (StrategyMDex.sol#2005-2012)\n\t- StrategyMDex.pendingRewards(uint256,address) (StrategyMDex.sol#1999-2002)\n\t- StrategyMDex.repayBorrow(uint256,address,uint256,bool) (StrategyMDex.sol#2334-2343)\n\t- StrategyMDex.userInfo (StrategyMDex.sol#1873)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyMDex",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "updatePool",
            "impact": "Medium",
            "line": 2032,
            "line_end": 2081,
            "message": "Reentrancy in StrategyMDex.updatePool(uint256) (StrategyMDex.sol#2032-2081):\n\tExternal calls:\n\t- actionPool.onAcionUpdate(_pid) (StrategyMDex.sol#2041)\n\t- newRewards = poolClaim(pool.poolId) (StrategyMDex.sol#2049)\n\t\t- hecopool.deposit(_poolId,0) (StrategyMDex.sol#1124)\n\t- newRewardBase = utils.getTokenIn(rewardToken,newRewards,pool.baseToken) (StrategyMDex.sol#2060)\n\t- utils.makeRefundFee(_pid,newRewardBase) (StrategyMDex.sol#2063)\n\t- makeBalanceOptimalLiquidityByAmount(_pid,uBalanceAfter0.sub(uBalanceBefore0),uBalanceAfter1.sub(uBalanceBefore1)) (StrategyMDex.sol#2068-2070)\n\t\t- utils.getTokenIn(token1,swapAmt,token0) (StrategyMDex.sol#2206)\n\t\t- utils.getTokenIn(token0,swapAmt,token1) (StrategyMDex.sol#2210)\n\t- lpAmount = makeLiquidityAndDepositByAmount(_pid,uBalanceAfter0.sub(uBalanceBefore0),uBalanceAfter1.sub(uBalanceBefore1)) (StrategyMDex.sol#2075-2077)\n\t\t- hecopool.deposit(_poolId,_lpAmount) (StrategyMDex.sol#1115)\n\t\t- router.addLiquidity(poolInfo[_pid].collateralToken[0],poolInfo[_pid].collateralToken[1],_amount0,_amount1,0,0,address(this),block.timestamp.add(60)) (StrategyMDex.sol#2232-2234)\n\tState variables written after the call(s):\n\t- pool.totalLPReinvest = pool.totalLPReinvest.add(lpAmount) (StrategyMDex.sol#2080)\n\tStrategyMDex.poolInfo (StrategyMDex.sol#1871) can be used in cross function reentrancies:\n\t- StrategyMDex._emergencyWithdraw(uint256,address) (StrategyMDex.sol#2349-2369)\n\t- StrategyMDex._withdraw(uint256,address,uint256,bool) (StrategyMDex.sol#2266-2305)\n\t- StrategyMDex.addPool(uint256,address[],address) (StrategyMDex.sol#1947-1967)\n\t- StrategyMDex.deposit(uint256,address,address,uint256,uint256,uint256) (StrategyMDex.sol#2101-2164)\n\t- StrategyMDex.depositLPToken(uint256,address,address,uint256,uint256,uint256) (StrategyMDex.sol#2085-2099)\n\t- StrategyMDex.getATPoolInfo(uint256) (StrategyMDex.sol#1898-1903)\n\t- StrategyMDex.getBaseToken(uint256) (StrategyMDex.sol#1929-1931)\n\t- StrategyMDex.getDepositAmount(uint256,address) (StrategyMDex.sol#2018-2021)\n\t- StrategyMDex.getPoolCollateralToken(uint256) (StrategyMDex.sol#1921-1923)\n\t- StrategyMDex.getPoolInfo(uint256) (StrategyMDex.sol#1910-1919)\n\t- StrategyMDex.getPoollpToken(uint256) (StrategyMDex.sol#1925-1927)\n\t- StrategyMDex.liquidation(uint256,address,address,uint256) (StrategyMDex.sol#2371-2417)\n\t- StrategyMDex.makeBalanceOptimalLiquidity(uint256) (StrategyMDex.sol#2185-2191)\n\t- StrategyMDex.makeBalanceOptimalLiquidityByAmount(uint256,uint256,uint256) (StrategyMDex.sol#2193-2213)\n\t- StrategyMDex.makeLiquidationRepay(uint256,address,uint256) (StrategyMDex.sol#2419-2432)\n\t- StrategyMDex.makeLiquidityAndDeposit(uint256) (StrategyMDex.sol#2215-2221)\n\t- StrategyMDex.makeLiquidityAndDepositByAmount(uint256,uint256,uint256) (StrategyMDex.sol#2223-2242)\n\t- StrategyMDex.makeWithdrawCalcAmount(uint256,address) (StrategyMDex.sol#2307-2323)\n\t- StrategyMDex.makeWithdrawRemoveLiquidity(uint256,uint256) (StrategyMDex.sol#2325-2332)\n\t- StrategyMDex.massUpdatePools() (StrategyMDex.sol#2024-2029)\n\t- StrategyMDex.pendingLPAmount(uint256,address) (StrategyMDex.sol#2005-2012)\n\t- StrategyMDex.poolInfo (StrategyMDex.sol#1871)\n\t- StrategyMDex.poolLength() (StrategyMDex.sol#1893-1895)\n\t- StrategyMDex.resetApprove(uint256) (StrategyMDex.sol#1969-1984)\n\t- StrategyMDex.setMiniRewardAmount(uint256,uint256) (StrategyMDex.sol#1994-1996)\n\t- StrategyMDex.updatePool(uint256) (StrategyMDex.sol#2032-2081)\n\t- StrategyMDex.withdraw(uint256,address,uint256) (StrategyMDex.sol#2259-2264)\n\t- StrategyMDex.withdrawLPToken(uint256,address,uint256) (StrategyMDex.sol#2244-2257)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyMDex",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "_withdraw",
            "impact": "Medium",
            "line": 2266,
            "line_end": 2305,
            "message": "Reentrancy in StrategyMDex._withdraw(uint256,address,uint256,bool) (StrategyMDex.sol#2266-2305):\n\tExternal calls:\n\t- updatePool(_pid) (StrategyMDex.sol#2268)\n\t\t- hecopool.deposit(_poolId,_lpAmount) (StrategyMDex.sol#1115)\n\t\t- hecopool.deposit(_poolId,0) (StrategyMDex.sol#1124)\n\t\t- router.addLiquidity(poolInfo[_pid].collateralToken[0],poolInfo[_pid].collateralToken[1],_amount0,_amount1,0,0,address(this),block.timestamp.add(60)) (StrategyMDex.sol#2232-2234)\n\t\t- actionPool.onAcionUpdate(_pid) (StrategyMDex.sol#2041)\n\t\t- utils.getTokenIn(token1,swapAmt,token0) (StrategyMDex.sol#2206)\n\t\t- utils.getTokenIn(token0,swapAmt,token1) (StrategyMDex.sol#2210)\n\t\t- newRewardBase = utils.getTokenIn(rewardToken,newRewards,pool.baseToken) (StrategyMDex.sol#2060)\n\t\t- utils.makeRefundFee(_pid,newRewardBase) (StrategyMDex.sol#2063)\n\t- makeWithdrawRemoveLiquidity(_pid,withdrawLPTokenAmount) (StrategyMDex.sol#2282)\n\t\t- hecopool.withdraw(_poolId,_lpAmount) (StrategyMDex.sol#1119)\n\t\t- router.removeLiquidity(token0,token1,_withdrawLPTokenAmount,0,0,address(this),block.timestamp.add(60)) (StrategyMDex.sol#2331)\n\t- utils.makeWithdrawRewardFee(_pid,borrowRate,rewardsRate) (StrategyMDex.sol#2286)\n\t- repayBorrow(_pid,_account,_rate,_fast) (StrategyMDex.sol#2288)\n\t\t- utils.makeRepay(_pid,userInfo[_pid][_account].borrowFrom,_account,_rate,_fast) (StrategyMDex.sol#2335)\n\tState variables written after the call(s):\n\t- poolInfo[_pid].totalPoints = TenMath.safeSub(poolInfo[_pid].totalPoints,removedPoint) (StrategyMDex.sol#2293)\n\tStrategyMDex.poolInfo (StrategyMDex.sol#1871) can be used in cross function reentrancies:\n\t- StrategyMDex._emergencyWithdraw(uint256,address) (StrategyMDex.sol#2349-2369)\n\t- StrategyMDex._withdraw(uint256,address,uint256,bool) (StrategyMDex.sol#2266-2305)\n\t- StrategyMDex.addPool(uint256,address[],address) (StrategyMDex.sol#1947-1967)\n\t- StrategyMDex.deposit(uint256,address,address,uint256,uint256,uint256) (StrategyMDex.sol#2101-2164)\n\t- StrategyMDex.depositLPToken(uint256,address,address,uint256,uint256,uint256) (StrategyMDex.sol#2085-2099)\n\t- StrategyMDex.getATPoolInfo(uint256) (StrategyMDex.sol#1898-1903)\n\t- StrategyMDex.getBaseToken(uint256) (StrategyMDex.sol#1929-1931)\n\t- StrategyMDex.getDepositAmount(uint256,address) (StrategyMDex.sol#2018-2021)\n\t- StrategyMDex.getPoolCollateralToken(uint256) (StrategyMDex.sol#1921-1923)\n\t- StrategyMDex.getPoolInfo(uint256) (StrategyMDex.sol#1910-1919)\n\t- StrategyMDex.getPoollpToken(uint256) (StrategyMDex.sol#1925-1927)\n\t- StrategyMDex.liquidation(uint256,address,address,uint256) (StrategyMDex.sol#2371-2417)\n\t- StrategyMDex.makeBalanceOptimalLiquidity(uint256) (StrategyMDex.sol#2185-2191)\n\t- StrategyMDex.makeBalanceOptimalLiquidityByAmount(uint256,uint256,uint256) (StrategyMDex.sol#2193-2213)\n\t- StrategyMDex.makeLiquidationRepay(uint256,address,uint256) (StrategyMDex.sol#2419-2432)\n\t- StrategyMDex.makeLiquidityAndDeposit(uint256) (StrategyMDex.sol#2215-2221)\n\t- StrategyMDex.makeLiquidityAndDepositByAmount(uint256,uint256,uint256) (StrategyMDex.sol#2223-2242)\n\t- StrategyMDex.makeWithdrawCalcAmount(uint256,address) (StrategyMDex.sol#2307-2323)\n\t- StrategyMDex.makeWithdrawRemoveLiquidity(uint256,uint256) (StrategyMDex.sol#2325-2332)\n\t- StrategyMDex.massUpdatePools() (StrategyMDex.sol#2024-2029)\n\t- StrategyMDex.pendingLPAmount(uint256,address) (StrategyMDex.sol#2005-2012)\n\t- StrategyMDex.poolInfo (StrategyMDex.sol#1871)\n\t- StrategyMDex.poolLength() (StrategyMDex.sol#1893-1895)\n\t- StrategyMDex.resetApprove(uint256) (StrategyMDex.sol#1969-1984)\n\t- StrategyMDex.setMiniRewardAmount(uint256,uint256) (StrategyMDex.sol#1994-1996)\n\t- StrategyMDex.updatePool(uint256) (StrategyMDex.sol#2032-2081)\n\t- StrategyMDex.withdraw(uint256,address,uint256) (StrategyMDex.sol#2259-2264)\n\t- StrategyMDex.withdrawLPToken(uint256,address,uint256) (StrategyMDex.sol#2244-2257)\n\t- poolInfo[_pid].totalLPReinvest = TenMath.safeSub(poolInfo[_pid].totalLPReinvest,withdrawLPTokenAmount) (StrategyMDex.sol#2294)\n\tStrategyMDex.poolInfo (StrategyMDex.sol#1871) can be used in cross function reentrancies:\n\t- StrategyMDex._emergencyWithdraw(uint256,address) (StrategyMDex.sol#2349-2369)\n\t- StrategyMDex._withdraw(uint256,address,uint256,bool) (StrategyMDex.sol#2266-2305)\n\t- StrategyMDex.addPool(uint256,address[],address) (StrategyMDex.sol#1947-1967)\n\t- StrategyMDex.deposit(uint256,address,address,uint256,uint256,uint256) (StrategyMDex.sol#2101-2164)\n\t- StrategyMDex.depositLPToken(uint256,address,address,uint256,uint256,uint256) (StrategyMDex.sol#2085-2099)\n\t- StrategyMDex.getATPoolInfo(uint256) (StrategyMDex.sol#1898-1903)\n\t- StrategyMDex.getBaseToken(uint256) (StrategyMDex.sol#1929-1931)\n\t- StrategyMDex.getDepositAmount(uint256,address) (StrategyMDex.sol#2018-2021)\n\t- StrategyMDex.getPoolCollateralToken(uint256) (StrategyMDex.sol#1921-1923)\n\t- StrategyMDex.getPoolInfo(uint256) (StrategyMDex.sol#1910-1919)\n\t- StrategyMDex.getPoollpToken(uint256) (StrategyMDex.sol#1925-1927)\n\t- StrategyMDex.liquidation(uint256,address,address,uint256) (StrategyMDex.sol#2371-2417)\n\t- StrategyMDex.makeBalanceOptimalLiquidity(uint256) (StrategyMDex.sol#2185-2191)\n\t- StrategyMDex.makeBalanceOptimalLiquidityByAmount(uint256,uint256,uint256) (StrategyMDex.sol#2193-2213)\n\t- StrategyMDex.makeLiquidationRepay(uint256,address,uint256) (StrategyMDex.sol#2419-2432)\n\t- StrategyMDex.makeLiquidityAndDeposit(uint256) (StrategyMDex.sol#2215-2221)\n\t- StrategyMDex.makeLiquidityAndDepositByAmount(uint256,uint256,uint256) (StrategyMDex.sol#2223-2242)\n\t- StrategyMDex.makeWithdrawCalcAmount(uint256,address) (StrategyMDex.sol#2307-2323)\n\t- StrategyMDex.makeWithdrawRemoveLiquidity(uint256,uint256) (StrategyMDex.sol#2325-2332)\n\t- StrategyMDex.massUpdatePools() (StrategyMDex.sol#2024-2029)\n\t- StrategyMDex.pendingLPAmount(uint256,address) (StrategyMDex.sol#2005-2012)\n\t- StrategyMDex.poolInfo (StrategyMDex.sol#1871)\n\t- StrategyMDex.poolLength() (StrategyMDex.sol#1893-1895)\n\t- StrategyMDex.resetApprove(uint256) (StrategyMDex.sol#1969-1984)\n\t- StrategyMDex.setMiniRewardAmount(uint256,uint256) (StrategyMDex.sol#1994-1996)\n\t- StrategyMDex.updatePool(uint256) (StrategyMDex.sol#2032-2081)\n\t- StrategyMDex.withdraw(uint256,address,uint256) (StrategyMDex.sol#2259-2264)\n\t- StrategyMDex.withdrawLPToken(uint256,address,uint256) (StrategyMDex.sol#2244-2257)\n\t- poolInfo[_pid].totalLPAmount = TenMath.safeSub(poolInfo[_pid].totalLPAmount,removedLPAmount) (StrategyMDex.sol#2298)\n\tStrategyMDex.poolInfo (StrategyMDex.sol#1871) can be used in cross function reentrancies:\n\t- StrategyMDex._emergencyWithdraw(uint256,address) (StrategyMDex.sol#2349-2369)\n\t- StrategyMDex._withdraw(uint256,address,uint256,bool) (StrategyMDex.sol#2266-2305)\n\t- StrategyMDex.addPool(uint256,address[],address) (StrategyMDex.sol#1947-1967)\n\t- StrategyMDex.deposit(uint256,address,address,uint256,uint256,uint256) (StrategyMDex.sol#2101-2164)\n\t- StrategyMDex.depositLPToken(uint256,address,address,uint256,uint256,uint256) (StrategyMDex.sol#2085-2099)\n\t- StrategyMDex.getATPoolInfo(uint256) (StrategyMDex.sol#1898-1903)\n\t- StrategyMDex.getBaseToken(uint256) (StrategyMDex.sol#1929-1931)\n\t- StrategyMDex.getDepositAmount(uint256,address) (StrategyMDex.sol#2018-2021)\n\t- StrategyMDex.getPoolCollateralToken(uint256) (StrategyMDex.sol#1921-1923)\n\t- StrategyMDex.getPoolInfo(uint256) (StrategyMDex.sol#1910-1919)\n\t- StrategyMDex.getPoollpToken(uint256) (StrategyMDex.sol#1925-1927)\n\t- StrategyMDex.liquidation(uint256,address,address,uint256) (StrategyMDex.sol#2371-2417)\n\t- StrategyMDex.makeBalanceOptimalLiquidity(uint256) (StrategyMDex.sol#2185-2191)\n\t- StrategyMDex.makeBalanceOptimalLiquidityByAmount(uint256,uint256,uint256) (StrategyMDex.sol#2193-2213)\n\t- StrategyMDex.makeLiquidationRepay(uint256,address,uint256) (StrategyMDex.sol#2419-2432)\n\t- StrategyMDex.makeLiquidityAndDeposit(uint256) (StrategyMDex.sol#2215-2221)\n\t- StrategyMDex.makeLiquidityAndDepositByAmount(uint256,uint256,uint256) (StrategyMDex.sol#2223-2242)\n\t- StrategyMDex.makeWithdrawCalcAmount(uint256,address) (StrategyMDex.sol#2307-2323)\n\t- StrategyMDex.makeWithdrawRemoveLiquidity(uint256,uint256) (StrategyMDex.sol#2325-2332)\n\t- StrategyMDex.massUpdatePools() (StrategyMDex.sol#2024-2029)\n\t- StrategyMDex.pendingLPAmount(uint256,address) (StrategyMDex.sol#2005-2012)\n\t- StrategyMDex.poolInfo (StrategyMDex.sol#1871)\n\t- StrategyMDex.poolLength() (StrategyMDex.sol#1893-1895)\n\t- StrategyMDex.resetApprove(uint256) (StrategyMDex.sol#1969-1984)\n\t- StrategyMDex.setMiniRewardAmount(uint256,uint256) (StrategyMDex.sol#1994-1996)\n\t- StrategyMDex.updatePool(uint256) (StrategyMDex.sol#2032-2081)\n\t- StrategyMDex.withdraw(uint256,address,uint256) (StrategyMDex.sol#2259-2264)\n\t- StrategyMDex.withdrawLPToken(uint256,address,uint256) (StrategyMDex.sol#2244-2257)\n\t- repayBorrow(_pid,_account,_rate,_fast) (StrategyMDex.sol#2288)\n\t\t- userInfo[_pid][_account].borrowFrom = address(0) (StrategyMDex.sol#2337)\n\t\t- userInfo[_pid][_account].bid = 0 (StrategyMDex.sol#2338)\n\tStrategyMDex.userInfo (StrategyMDex.sol#1873) can be used in cross function reentrancies:\n\t- StrategyMDex._emergencyWithdraw(uint256,address) (StrategyMDex.sol#2349-2369)\n\t- StrategyMDex._withdraw(uint256,address,uint256,bool) (StrategyMDex.sol#2266-2305)\n\t- StrategyMDex.deposit(uint256,address,address,uint256,uint256,uint256) (StrategyMDex.sol#2101-2164)\n\t- StrategyMDex.getATUserAmount(uint256,address) (StrategyMDex.sol#1905-1908)\n\t- StrategyMDex.getBorrowInfo(uint256,address) (StrategyMDex.sol#1933-1937)\n\t- StrategyMDex.liquidation(uint256,address,address,uint256) (StrategyMDex.sol#2371-2417)\n\t- StrategyMDex.makeBorrowBaseToken(uint256,address,address,uint256) (StrategyMDex.sol#2166-2183)\n\t- StrategyMDex.makeLiquidationRepay(uint256,address,uint256) (StrategyMDex.sol#2419-2432)\n\t- StrategyMDex.makeWithdrawCalcAmount(uint256,address) (StrategyMDex.sol#2307-2323)\n\t- StrategyMDex.pendingLPAmount(uint256,address) (StrategyMDex.sol#2005-2012)\n\t- StrategyMDex.pendingRewards(uint256,address) (StrategyMDex.sol#1999-2002)\n\t- StrategyMDex.repayBorrow(uint256,address,uint256,bool) (StrategyMDex.sol#2334-2343)\n\t- StrategyMDex.userInfo (StrategyMDex.sol#1873)\n\t- user.lpPoints = TenMath.safeSub(user.lpPoints,removedPoint) (StrategyMDex.sol#2292)\n\tStrategyMDex.userInfo (StrategyMDex.sol#1873) can be used in cross function reentrancies:\n\t- StrategyMDex._emergencyWithdraw(uint256,address) (StrategyMDex.sol#2349-2369)\n\t- StrategyMDex._withdraw(uint256,address,uint256,bool) (StrategyMDex.sol#2266-2305)\n\t- StrategyMDex.deposit(uint256,address,address,uint256,uint256,uint256) (StrategyMDex.sol#2101-2164)\n\t- StrategyMDex.getATUserAmount(uint256,address) (StrategyMDex.sol#1905-1908)\n\t- StrategyMDex.getBorrowInfo(uint256,address) (StrategyMDex.sol#1933-1937)\n\t- StrategyMDex.liquidation(uint256,address,address,uint256) (StrategyMDex.sol#2371-2417)\n\t- StrategyMDex.makeBorrowBaseToken(uint256,address,address,uint256) (StrategyMDex.sol#2166-2183)\n\t- StrategyMDex.makeLiquidationRepay(uint256,address,uint256) (StrategyMDex.sol#2419-2432)\n\t- StrategyMDex.makeWithdrawCalcAmount(uint256,address) (StrategyMDex.sol#2307-2323)\n\t- StrategyMDex.pendingLPAmount(uint256,address) (StrategyMDex.sol#2005-2012)\n\t- StrategyMDex.pendingRewards(uint256,address) (StrategyMDex.sol#1999-2002)\n\t- StrategyMDex.repayBorrow(uint256,address,uint256,bool) (StrategyMDex.sol#2334-2343)\n\t- StrategyMDex.userInfo (StrategyMDex.sol#1873)\n\t- user.lpAmount = TenMath.safeSub(user.lpAmount,removedLPAmount) (StrategyMDex.sol#2297)\n\tStrategyMDex.userInfo (StrategyMDex.sol#1873) can be used in cross function reentrancies:\n\t- StrategyMDex._emergencyWithdraw(uint256,address) (StrategyMDex.sol#2349-2369)\n\t- StrategyMDex._withdraw(uint256,address,uint256,bool) (StrategyMDex.sol#2266-2305)\n\t- StrategyMDex.deposit(uint256,address,address,uint256,uint256,uint256) (StrategyMDex.sol#2101-2164)\n\t- StrategyMDex.getATUserAmount(uint256,address) (StrategyMDex.sol#1905-1908)\n\t- StrategyMDex.getBorrowInfo(uint256,address) (StrategyMDex.sol#1933-1937)\n\t- StrategyMDex.liquidation(uint256,address,address,uint256) (StrategyMDex.sol#2371-2417)\n\t- StrategyMDex.makeBorrowBaseToken(uint256,address,address,uint256) (StrategyMDex.sol#2166-2183)\n\t- StrategyMDex.makeLiquidationRepay(uint256,address,uint256) (StrategyMDex.sol#2419-2432)\n\t- StrategyMDex.makeWithdrawCalcAmount(uint256,address) (StrategyMDex.sol#2307-2323)\n\t- StrategyMDex.pendingLPAmount(uint256,address) (StrategyMDex.sol#2005-2012)\n\t- StrategyMDex.pendingRewards(uint256,address) (StrategyMDex.sol#1999-2002)\n\t- StrategyMDex.repayBorrow(uint256,address,uint256,bool) (StrategyMDex.sol#2334-2343)\n\t- StrategyMDex.userInfo (StrategyMDex.sol#1873)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyMDex",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "_emergencyWithdraw",
            "impact": "Medium",
            "line": 2349,
            "line_end": 2369,
            "message": "Reentrancy in StrategyMDex._emergencyWithdraw(uint256,address) (StrategyMDex.sol#2349-2369):\n\tExternal calls:\n\t- makeWithdrawRemoveLiquidity(_pid,withdrawLPTokenAmount) (StrategyMDex.sol#2363)\n\t\t- hecopool.withdraw(_poolId,_lpAmount) (StrategyMDex.sol#1119)\n\t\t- router.removeLiquidity(token0,token1,_withdrawLPTokenAmount,0,0,address(this),block.timestamp.add(60)) (StrategyMDex.sol#2331)\n\t- repayBorrow(_pid,_account,1e9,false) (StrategyMDex.sol#2364)\n\t\t- utils.makeRepay(_pid,userInfo[_pid][_account].borrowFrom,_account,_rate,_fast) (StrategyMDex.sol#2335)\n\tState variables written after the call(s):\n\t- repayBorrow(_pid,_account,1e9,false) (StrategyMDex.sol#2364)\n\t\t- userInfo[_pid][_account].borrowFrom = address(0) (StrategyMDex.sol#2337)\n\t\t- userInfo[_pid][_account].bid = 0 (StrategyMDex.sol#2338)\n\tStrategyMDex.userInfo (StrategyMDex.sol#1873) can be used in cross function reentrancies:\n\t- StrategyMDex._emergencyWithdraw(uint256,address) (StrategyMDex.sol#2349-2369)\n\t- StrategyMDex._withdraw(uint256,address,uint256,bool) (StrategyMDex.sol#2266-2305)\n\t- StrategyMDex.deposit(uint256,address,address,uint256,uint256,uint256) (StrategyMDex.sol#2101-2164)\n\t- StrategyMDex.getATUserAmount(uint256,address) (StrategyMDex.sol#1905-1908)\n\t- StrategyMDex.getBorrowInfo(uint256,address) (StrategyMDex.sol#1933-1937)\n\t- StrategyMDex.liquidation(uint256,address,address,uint256) (StrategyMDex.sol#2371-2417)\n\t- StrategyMDex.makeBorrowBaseToken(uint256,address,address,uint256) (StrategyMDex.sol#2166-2183)\n\t- StrategyMDex.makeLiquidationRepay(uint256,address,uint256) (StrategyMDex.sol#2419-2432)\n\t- StrategyMDex.makeWithdrawCalcAmount(uint256,address) (StrategyMDex.sol#2307-2323)\n\t- StrategyMDex.pendingLPAmount(uint256,address) (StrategyMDex.sol#2005-2012)\n\t- StrategyMDex.pendingRewards(uint256,address) (StrategyMDex.sol#1999-2002)\n\t- StrategyMDex.repayBorrow(uint256,address,uint256,bool) (StrategyMDex.sol#2334-2343)\n\t- StrategyMDex.userInfo (StrategyMDex.sol#1873)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyMDex",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "repayBorrow",
            "impact": "Medium",
            "line": 2334,
            "line_end": 2343,
            "message": "Reentrancy in StrategyMDex.repayBorrow(uint256,address,uint256,bool) (StrategyMDex.sol#2334-2343):\n\tExternal calls:\n\t- utils.makeRepay(_pid,userInfo[_pid][_account].borrowFrom,_account,_rate,_fast) (StrategyMDex.sol#2335)\n\tState variables written after the call(s):\n\t- userInfo[_pid][_account].borrowFrom = address(0) (StrategyMDex.sol#2337)\n\tStrategyMDex.userInfo (StrategyMDex.sol#1873) can be used in cross function reentrancies:\n\t- StrategyMDex._emergencyWithdraw(uint256,address) (StrategyMDex.sol#2349-2369)\n\t- StrategyMDex._withdraw(uint256,address,uint256,bool) (StrategyMDex.sol#2266-2305)\n\t- StrategyMDex.deposit(uint256,address,address,uint256,uint256,uint256) (StrategyMDex.sol#2101-2164)\n\t- StrategyMDex.getATUserAmount(uint256,address) (StrategyMDex.sol#1905-1908)\n\t- StrategyMDex.getBorrowInfo(uint256,address) (StrategyMDex.sol#1933-1937)\n\t- StrategyMDex.liquidation(uint256,address,address,uint256) (StrategyMDex.sol#2371-2417)\n\t- StrategyMDex.makeBorrowBaseToken(uint256,address,address,uint256) (StrategyMDex.sol#2166-2183)\n\t- StrategyMDex.makeLiquidationRepay(uint256,address,uint256) (StrategyMDex.sol#2419-2432)\n\t- StrategyMDex.makeWithdrawCalcAmount(uint256,address) (StrategyMDex.sol#2307-2323)\n\t- StrategyMDex.pendingLPAmount(uint256,address) (StrategyMDex.sol#2005-2012)\n\t- StrategyMDex.pendingRewards(uint256,address) (StrategyMDex.sol#1999-2002)\n\t- StrategyMDex.repayBorrow(uint256,address,uint256,bool) (StrategyMDex.sol#2334-2343)\n\t- StrategyMDex.userInfo (StrategyMDex.sol#1873)\n\t- userInfo[_pid][_account].bid = 0 (StrategyMDex.sol#2338)\n\tStrategyMDex.userInfo (StrategyMDex.sol#1873) can be used in cross function reentrancies:\n\t- StrategyMDex._emergencyWithdraw(uint256,address) (StrategyMDex.sol#2349-2369)\n\t- StrategyMDex._withdraw(uint256,address,uint256,bool) (StrategyMDex.sol#2266-2305)\n\t- StrategyMDex.deposit(uint256,address,address,uint256,uint256,uint256) (StrategyMDex.sol#2101-2164)\n\t- StrategyMDex.getATUserAmount(uint256,address) (StrategyMDex.sol#1905-1908)\n\t- StrategyMDex.getBorrowInfo(uint256,address) (StrategyMDex.sol#1933-1937)\n\t- StrategyMDex.liquidation(uint256,address,address,uint256) (StrategyMDex.sol#2371-2417)\n\t- StrategyMDex.makeBorrowBaseToken(uint256,address,address,uint256) (StrategyMDex.sol#2166-2183)\n\t- StrategyMDex.makeLiquidationRepay(uint256,address,uint256) (StrategyMDex.sol#2419-2432)\n\t- StrategyMDex.makeWithdrawCalcAmount(uint256,address) (StrategyMDex.sol#2307-2323)\n\t- StrategyMDex.pendingLPAmount(uint256,address) (StrategyMDex.sol#2005-2012)\n\t- StrategyMDex.pendingRewards(uint256,address) (StrategyMDex.sol#1999-2002)\n\t- StrategyMDex.repayBorrow(uint256,address,uint256,bool) (StrategyMDex.sol#2334-2343)\n\t- StrategyMDex.userInfo (StrategyMDex.sol#1873)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyMDex",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "deposit",
            "impact": "Medium",
            "line": 2101,
            "line_end": 2164,
            "message": "Reentrancy in StrategyMDex.deposit(uint256,address,address,uint256,uint256,uint256) (StrategyMDex.sol#2101-2164):\n\tExternal calls:\n\t- updatePool(_pid) (StrategyMDex.sol#2116)\n\t\t- hecopool.deposit(_poolId,_lpAmount) (StrategyMDex.sol#1115)\n\t\t- hecopool.deposit(_poolId,0) (StrategyMDex.sol#1124)\n\t\t- router.addLiquidity(poolInfo[_pid].collateralToken[0],poolInfo[_pid].collateralToken[1],_amount0,_amount1,0,0,address(this),block.timestamp.add(60)) (StrategyMDex.sol#2232-2234)\n\t\t- actionPool.onAcionUpdate(_pid) (StrategyMDex.sol#2041)\n\t\t- utils.getTokenIn(token1,swapAmt,token0) (StrategyMDex.sol#2206)\n\t\t- utils.getTokenIn(token0,swapAmt,token1) (StrategyMDex.sol#2210)\n\t\t- newRewardBase = utils.getTokenIn(rewardToken,newRewards,pool.baseToken) (StrategyMDex.sol#2060)\n\t\t- utils.makeRefundFee(_pid,newRewardBase) (StrategyMDex.sol#2063)\n\t- utils.makeDepositFee(_pid) (StrategyMDex.sol#2121)\n\t- makeBorrowBaseToken(_pid,_account,user.borrowFrom,_bAmount) (StrategyMDex.sol#2124)\n\t\t- bid = ITenBankHall(bank).makeBorrowFrom(_pid,_account,_borrowFrom,_bAmount) (StrategyMDex.sol#2175)\n\tState variables written after the call(s):\n\t- makeBorrowBaseToken(_pid,_account,user.borrowFrom,_bAmount) (StrategyMDex.sol#2124)\n\t\t- userInfo[_pid][_account].bid = bid (StrategyMDex.sol#2182)\n\tStrategyMDex.userInfo (StrategyMDex.sol#1873) can be used in cross function reentrancies:\n\t- StrategyMDex._emergencyWithdraw(uint256,address) (StrategyMDex.sol#2349-2369)\n\t- StrategyMDex._withdraw(uint256,address,uint256,bool) (StrategyMDex.sol#2266-2305)\n\t- StrategyMDex.deposit(uint256,address,address,uint256,uint256,uint256) (StrategyMDex.sol#2101-2164)\n\t- StrategyMDex.getATUserAmount(uint256,address) (StrategyMDex.sol#1905-1908)\n\t- StrategyMDex.getBorrowInfo(uint256,address) (StrategyMDex.sol#1933-1937)\n\t- StrategyMDex.liquidation(uint256,address,address,uint256) (StrategyMDex.sol#2371-2417)\n\t- StrategyMDex.makeBorrowBaseToken(uint256,address,address,uint256) (StrategyMDex.sol#2166-2183)\n\t- StrategyMDex.makeLiquidationRepay(uint256,address,uint256) (StrategyMDex.sol#2419-2432)\n\t- StrategyMDex.makeWithdrawCalcAmount(uint256,address) (StrategyMDex.sol#2307-2323)\n\t- StrategyMDex.pendingLPAmount(uint256,address) (StrategyMDex.sol#2005-2012)\n\t- StrategyMDex.pendingRewards(uint256,address) (StrategyMDex.sol#1999-2002)\n\t- StrategyMDex.repayBorrow(uint256,address,uint256,bool) (StrategyMDex.sol#2334-2343)\n\t- StrategyMDex.userInfo (StrategyMDex.sol#1873)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyMDex",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "updatePool",
            "impact": "Medium",
            "line": 2032,
            "line_end": 2081,
            "message": "Reentrancy in StrategyMDex.updatePool(uint256) (StrategyMDex.sol#2032-2081):\n\tExternal calls:\n\t- actionPool.onAcionUpdate(_pid) (StrategyMDex.sol#2041)\n\tState variables written after the call(s):\n\t- pool.lastRewardsBlock = block.number (StrategyMDex.sol#2044)\n\tStrategyMDex.poolInfo (StrategyMDex.sol#1871) can be used in cross function reentrancies:\n\t- StrategyMDex._emergencyWithdraw(uint256,address) (StrategyMDex.sol#2349-2369)\n\t- StrategyMDex._withdraw(uint256,address,uint256,bool) (StrategyMDex.sol#2266-2305)\n\t- StrategyMDex.addPool(uint256,address[],address) (StrategyMDex.sol#1947-1967)\n\t- StrategyMDex.deposit(uint256,address,address,uint256,uint256,uint256) (StrategyMDex.sol#2101-2164)\n\t- StrategyMDex.depositLPToken(uint256,address,address,uint256,uint256,uint256) (StrategyMDex.sol#2085-2099)\n\t- StrategyMDex.getATPoolInfo(uint256) (StrategyMDex.sol#1898-1903)\n\t- StrategyMDex.getBaseToken(uint256) (StrategyMDex.sol#1929-1931)\n\t- StrategyMDex.getDepositAmount(uint256,address) (StrategyMDex.sol#2018-2021)\n\t- StrategyMDex.getPoolCollateralToken(uint256) (StrategyMDex.sol#1921-1923)\n\t- StrategyMDex.getPoolInfo(uint256) (StrategyMDex.sol#1910-1919)\n\t- StrategyMDex.getPoollpToken(uint256) (StrategyMDex.sol#1925-1927)\n\t- StrategyMDex.liquidation(uint256,address,address,uint256) (StrategyMDex.sol#2371-2417)\n\t- StrategyMDex.makeBalanceOptimalLiquidity(uint256) (StrategyMDex.sol#2185-2191)\n\t- StrategyMDex.makeBalanceOptimalLiquidityByAmount(uint256,uint256,uint256) (StrategyMDex.sol#2193-2213)\n\t- StrategyMDex.makeLiquidationRepay(uint256,address,uint256) (StrategyMDex.sol#2419-2432)\n\t- StrategyMDex.makeLiquidityAndDeposit(uint256) (StrategyMDex.sol#2215-2221)\n\t- StrategyMDex.makeLiquidityAndDepositByAmount(uint256,uint256,uint256) (StrategyMDex.sol#2223-2242)\n\t- StrategyMDex.makeWithdrawCalcAmount(uint256,address) (StrategyMDex.sol#2307-2323)\n\t- StrategyMDex.makeWithdrawRemoveLiquidity(uint256,uint256) (StrategyMDex.sol#2325-2332)\n\t- StrategyMDex.massUpdatePools() (StrategyMDex.sol#2024-2029)\n\t- StrategyMDex.pendingLPAmount(uint256,address) (StrategyMDex.sol#2005-2012)\n\t- StrategyMDex.poolInfo (StrategyMDex.sol#1871)\n\t- StrategyMDex.poolLength() (StrategyMDex.sol#1893-1895)\n\t- StrategyMDex.resetApprove(uint256) (StrategyMDex.sol#1969-1984)\n\t- StrategyMDex.setMiniRewardAmount(uint256,uint256) (StrategyMDex.sol#1994-1996)\n\t- StrategyMDex.updatePool(uint256) (StrategyMDex.sol#2032-2081)\n\t- StrategyMDex.withdraw(uint256,address,uint256) (StrategyMDex.sol#2259-2264)\n\t- StrategyMDex.withdrawLPToken(uint256,address,uint256) (StrategyMDex.sol#2244-2257)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyMDex",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "deposit",
            "impact": "Medium",
            "line": 2101,
            "line_end": 2164,
            "message": "Reentrancy in StrategyMDex.deposit(uint256,address,address,uint256,uint256,uint256) (StrategyMDex.sol#2101-2164):\n\tExternal calls:\n\t- updatePool(_pid) (StrategyMDex.sol#2116)\n\t\t- hecopool.deposit(_poolId,_lpAmount) (StrategyMDex.sol#1115)\n\t\t- hecopool.deposit(_poolId,0) (StrategyMDex.sol#1124)\n\t\t- router.addLiquidity(poolInfo[_pid].collateralToken[0],poolInfo[_pid].collateralToken[1],_amount0,_amount1,0,0,address(this),block.timestamp.add(60)) (StrategyMDex.sol#2232-2234)\n\t\t- actionPool.onAcionUpdate(_pid) (StrategyMDex.sol#2041)\n\t\t- utils.getTokenIn(token1,swapAmt,token0) (StrategyMDex.sol#2206)\n\t\t- utils.getTokenIn(token0,swapAmt,token1) (StrategyMDex.sol#2210)\n\t\t- newRewardBase = utils.getTokenIn(rewardToken,newRewards,pool.baseToken) (StrategyMDex.sol#2060)\n\t\t- utils.makeRefundFee(_pid,newRewardBase) (StrategyMDex.sol#2063)\n\t- utils.makeDepositFee(_pid) (StrategyMDex.sol#2121)\n\t- makeBorrowBaseToken(_pid,_account,user.borrowFrom,_bAmount) (StrategyMDex.sol#2124)\n\t\t- bid = ITenBankHall(bank).makeBorrowFrom(_pid,_account,_borrowFrom,_bAmount) (StrategyMDex.sol#2175)\n\t- makeBalanceOptimalLiquidity(_pid) (StrategyMDex.sol#2127)\n\t\t- utils.getTokenIn(token1,swapAmt,token0) (StrategyMDex.sol#2206)\n\t\t- utils.getTokenIn(token0,swapAmt,token1) (StrategyMDex.sol#2210)\n\t- lpAmount = makeLiquidityAndDeposit(_pid) (StrategyMDex.sol#2130)\n\t\t- hecopool.deposit(_poolId,_lpAmount) (StrategyMDex.sol#1115)\n\t\t- router.addLiquidity(poolInfo[_pid].collateralToken[0],poolInfo[_pid].collateralToken[1],_amount0,_amount1,0,0,address(this),block.timestamp.add(60)) (StrategyMDex.sol#2232-2234)\n\t- utils.transferFromAllToken(address(this),_account,token0,token1) (StrategyMDex.sol#2139)\n\tState variables written after the call(s):\n\t- poolInfo[_pid].totalPoints = poolInfo[_pid].totalPoints.add(addPoint) (StrategyMDex.sol#2149)\n\tStrategyMDex.poolInfo (StrategyMDex.sol#1871) can be used in cross function reentrancies:\n\t- StrategyMDex._emergencyWithdraw(uint256,address) (StrategyMDex.sol#2349-2369)\n\t- StrategyMDex._withdraw(uint256,address,uint256,bool) (StrategyMDex.sol#2266-2305)\n\t- StrategyMDex.addPool(uint256,address[],address) (StrategyMDex.sol#1947-1967)\n\t- StrategyMDex.deposit(uint256,address,address,uint256,uint256,uint256) (StrategyMDex.sol#2101-2164)\n\t- StrategyMDex.depositLPToken(uint256,address,address,uint256,uint256,uint256) (StrategyMDex.sol#2085-2099)\n\t- StrategyMDex.getATPoolInfo(uint256) (StrategyMDex.sol#1898-1903)\n\t- StrategyMDex.getBaseToken(uint256) (StrategyMDex.sol#1929-1931)\n\t- StrategyMDex.getDepositAmount(uint256,address) (StrategyMDex.sol#2018-2021)\n\t- StrategyMDex.getPoolCollateralToken(uint256) (StrategyMDex.sol#1921-1923)\n\t- StrategyMDex.getPoolInfo(uint256) (StrategyMDex.sol#1910-1919)\n\t- StrategyMDex.getPoollpToken(uint256) (StrategyMDex.sol#1925-1927)\n\t- StrategyMDex.liquidation(uint256,address,address,uint256) (StrategyMDex.sol#2371-2417)\n\t- StrategyMDex.makeBalanceOptimalLiquidity(uint256) (StrategyMDex.sol#2185-2191)\n\t- StrategyMDex.makeBalanceOptimalLiquidityByAmount(uint256,uint256,uint256) (StrategyMDex.sol#2193-2213)\n\t- StrategyMDex.makeLiquidationRepay(uint256,address,uint256) (StrategyMDex.sol#2419-2432)\n\t- StrategyMDex.makeLiquidityAndDeposit(uint256) (StrategyMDex.sol#2215-2221)\n\t- StrategyMDex.makeLiquidityAndDepositByAmount(uint256,uint256,uint256) (StrategyMDex.sol#2223-2242)\n\t- StrategyMDex.makeWithdrawCalcAmount(uint256,address) (StrategyMDex.sol#2307-2323)\n\t- StrategyMDex.makeWithdrawRemoveLiquidity(uint256,uint256) (StrategyMDex.sol#2325-2332)\n\t- StrategyMDex.massUpdatePools() (StrategyMDex.sol#2024-2029)\n\t- StrategyMDex.pendingLPAmount(uint256,address) (StrategyMDex.sol#2005-2012)\n\t- StrategyMDex.poolInfo (StrategyMDex.sol#1871)\n\t- StrategyMDex.poolLength() (StrategyMDex.sol#1893-1895)\n\t- StrategyMDex.resetApprove(uint256) (StrategyMDex.sol#1969-1984)\n\t- StrategyMDex.setMiniRewardAmount(uint256,uint256) (StrategyMDex.sol#1994-1996)\n\t- StrategyMDex.updatePool(uint256) (StrategyMDex.sol#2032-2081)\n\t- StrategyMDex.withdraw(uint256,address,uint256) (StrategyMDex.sol#2259-2264)\n\t- StrategyMDex.withdrawLPToken(uint256,address,uint256) (StrategyMDex.sol#2244-2257)\n\t- poolInfo[_pid].totalLPReinvest = poolInfo[_pid].totalLPReinvest.add(lpAmount) (StrategyMDex.sol#2150)\n\tStrategyMDex.poolInfo (StrategyMDex.sol#1871) can be used in cross function reentrancies:\n\t- StrategyMDex._emergencyWithdraw(uint256,address) (StrategyMDex.sol#2349-2369)\n\t- StrategyMDex._withdraw(uint256,address,uint256,bool) (StrategyMDex.sol#2266-2305)\n\t- StrategyMDex.addPool(uint256,address[],address) (StrategyMDex.sol#1947-1967)\n\t- StrategyMDex.deposit(uint256,address,address,uint256,uint256,uint256) (StrategyMDex.sol#2101-2164)\n\t- StrategyMDex.depositLPToken(uint256,address,address,uint256,uint256,uint256) (StrategyMDex.sol#2085-2099)\n\t- StrategyMDex.getATPoolInfo(uint256) (StrategyMDex.sol#1898-1903)\n\t- StrategyMDex.getBaseToken(uint256) (StrategyMDex.sol#1929-1931)\n\t- StrategyMDex.getDepositAmount(uint256,address) (StrategyMDex.sol#2018-2021)\n\t- StrategyMDex.getPoolCollateralToken(uint256) (StrategyMDex.sol#1921-1923)\n\t- StrategyMDex.getPoolInfo(uint256) (StrategyMDex.sol#1910-1919)\n\t- StrategyMDex.getPoollpToken(uint256) (StrategyMDex.sol#1925-1927)\n\t- StrategyMDex.liquidation(uint256,address,address,uint256) (StrategyMDex.sol#2371-2417)\n\t- StrategyMDex.makeBalanceOptimalLiquidity(uint256) (StrategyMDex.sol#2185-2191)\n\t- StrategyMDex.makeBalanceOptimalLiquidityByAmount(uint256,uint256,uint256) (StrategyMDex.sol#2193-2213)\n\t- StrategyMDex.makeLiquidationRepay(uint256,address,uint256) (StrategyMDex.sol#2419-2432)\n\t- StrategyMDex.makeLiquidityAndDeposit(uint256) (StrategyMDex.sol#2215-2221)\n\t- StrategyMDex.makeLiquidityAndDepositByAmount(uint256,uint256,uint256) (StrategyMDex.sol#2223-2242)\n\t- StrategyMDex.makeWithdrawCalcAmount(uint256,address) (StrategyMDex.sol#2307-2323)\n\t- StrategyMDex.makeWithdrawRemoveLiquidity(uint256,uint256) (StrategyMDex.sol#2325-2332)\n\t- StrategyMDex.massUpdatePools() (StrategyMDex.sol#2024-2029)\n\t- StrategyMDex.pendingLPAmount(uint256,address) (StrategyMDex.sol#2005-2012)\n\t- StrategyMDex.poolInfo (StrategyMDex.sol#1871)\n\t- StrategyMDex.poolLength() (StrategyMDex.sol#1893-1895)\n\t- StrategyMDex.resetApprove(uint256) (StrategyMDex.sol#1969-1984)\n\t- StrategyMDex.setMiniRewardAmount(uint256,uint256) (StrategyMDex.sol#1994-1996)\n\t- StrategyMDex.updatePool(uint256) (StrategyMDex.sol#2032-2081)\n\t- StrategyMDex.withdraw(uint256,address,uint256) (StrategyMDex.sol#2259-2264)\n\t- StrategyMDex.withdrawLPToken(uint256,address,uint256) (StrategyMDex.sol#2244-2257)\n\t- poolInfo[_pid].totalLPAmount = poolInfo[_pid].totalLPAmount.add(lpAmount) (StrategyMDex.sol#2153)\n\tStrategyMDex.poolInfo (StrategyMDex.sol#1871) can be used in cross function reentrancies:\n\t- StrategyMDex._emergencyWithdraw(uint256,address) (StrategyMDex.sol#2349-2369)\n\t- StrategyMDex._withdraw(uint256,address,uint256,bool) (StrategyMDex.sol#2266-2305)\n\t- StrategyMDex.addPool(uint256,address[],address) (StrategyMDex.sol#1947-1967)\n\t- StrategyMDex.deposit(uint256,address,address,uint256,uint256,uint256) (StrategyMDex.sol#2101-2164)\n\t- StrategyMDex.depositLPToken(uint256,address,address,uint256,uint256,uint256) (StrategyMDex.sol#2085-2099)\n\t- StrategyMDex.getATPoolInfo(uint256) (StrategyMDex.sol#1898-1903)\n\t- StrategyMDex.getBaseToken(uint256) (StrategyMDex.sol#1929-1931)\n\t- StrategyMDex.getDepositAmount(uint256,address) (StrategyMDex.sol#2018-2021)\n\t- StrategyMDex.getPoolCollateralToken(uint256) (StrategyMDex.sol#1921-1923)\n\t- StrategyMDex.getPoolInfo(uint256) (StrategyMDex.sol#1910-1919)\n\t- StrategyMDex.getPoollpToken(uint256) (StrategyMDex.sol#1925-1927)\n\t- StrategyMDex.liquidation(uint256,address,address,uint256) (StrategyMDex.sol#2371-2417)\n\t- StrategyMDex.makeBalanceOptimalLiquidity(uint256) (StrategyMDex.sol#2185-2191)\n\t- StrategyMDex.makeBalanceOptimalLiquidityByAmount(uint256,uint256,uint256) (StrategyMDex.sol#2193-2213)\n\t- StrategyMDex.makeLiquidationRepay(uint256,address,uint256) (StrategyMDex.sol#2419-2432)\n\t- StrategyMDex.makeLiquidityAndDeposit(uint256) (StrategyMDex.sol#2215-2221)\n\t- StrategyMDex.makeLiquidityAndDepositByAmount(uint256,uint256,uint256) (StrategyMDex.sol#2223-2242)\n\t- StrategyMDex.makeWithdrawCalcAmount(uint256,address) (StrategyMDex.sol#2307-2323)\n\t- StrategyMDex.makeWithdrawRemoveLiquidity(uint256,uint256) (StrategyMDex.sol#2325-2332)\n\t- StrategyMDex.massUpdatePools() (StrategyMDex.sol#2024-2029)\n\t- StrategyMDex.pendingLPAmount(uint256,address) (StrategyMDex.sol#2005-2012)\n\t- StrategyMDex.poolInfo (StrategyMDex.sol#1871)\n\t- StrategyMDex.poolLength() (StrategyMDex.sol#1893-1895)\n\t- StrategyMDex.resetApprove(uint256) (StrategyMDex.sol#1969-1984)\n\t- StrategyMDex.setMiniRewardAmount(uint256,uint256) (StrategyMDex.sol#1994-1996)\n\t- StrategyMDex.updatePool(uint256) (StrategyMDex.sol#2032-2081)\n\t- StrategyMDex.withdraw(uint256,address,uint256) (StrategyMDex.sol#2259-2264)\n\t- StrategyMDex.withdrawLPToken(uint256,address,uint256) (StrategyMDex.sol#2244-2257)\n\t- user.lpPoints = user.lpPoints.add(addPoint) (StrategyMDex.sol#2148)\n\tStrategyMDex.userInfo (StrategyMDex.sol#1873) can be used in cross function reentrancies:\n\t- StrategyMDex._emergencyWithdraw(uint256,address) (StrategyMDex.sol#2349-2369)\n\t- StrategyMDex._withdraw(uint256,address,uint256,bool) (StrategyMDex.sol#2266-2305)\n\t- StrategyMDex.deposit(uint256,address,address,uint256,uint256,uint256) (StrategyMDex.sol#2101-2164)\n\t- StrategyMDex.getATUserAmount(uint256,address) (StrategyMDex.sol#1905-1908)\n\t- StrategyMDex.getBorrowInfo(uint256,address) (StrategyMDex.sol#1933-1937)\n\t- StrategyMDex.liquidation(uint256,address,address,uint256) (StrategyMDex.sol#2371-2417)\n\t- StrategyMDex.makeBorrowBaseToken(uint256,address,address,uint256) (StrategyMDex.sol#2166-2183)\n\t- StrategyMDex.makeLiquidationRepay(uint256,address,uint256) (StrategyMDex.sol#2419-2432)\n\t- StrategyMDex.makeWithdrawCalcAmount(uint256,address) (StrategyMDex.sol#2307-2323)\n\t- StrategyMDex.pendingLPAmount(uint256,address) (StrategyMDex.sol#2005-2012)\n\t- StrategyMDex.pendingRewards(uint256,address) (StrategyMDex.sol#1999-2002)\n\t- StrategyMDex.repayBorrow(uint256,address,uint256,bool) (StrategyMDex.sol#2334-2343)\n\t- StrategyMDex.userInfo (StrategyMDex.sol#1873)\n\t- user.lpAmount = user.lpAmount.add(lpAmount) (StrategyMDex.sol#2152)\n\tStrategyMDex.userInfo (StrategyMDex.sol#1873) can be used in cross function reentrancies:\n\t- StrategyMDex._emergencyWithdraw(uint256,address) (StrategyMDex.sol#2349-2369)\n\t- StrategyMDex._withdraw(uint256,address,uint256,bool) (StrategyMDex.sol#2266-2305)\n\t- StrategyMDex.deposit(uint256,address,address,uint256,uint256,uint256) (StrategyMDex.sol#2101-2164)\n\t- StrategyMDex.getATUserAmount(uint256,address) (StrategyMDex.sol#1905-1908)\n\t- StrategyMDex.getBorrowInfo(uint256,address) (StrategyMDex.sol#1933-1937)\n\t- StrategyMDex.liquidation(uint256,address,address,uint256) (StrategyMDex.sol#2371-2417)\n\t- StrategyMDex.makeBorrowBaseToken(uint256,address,address,uint256) (StrategyMDex.sol#2166-2183)\n\t- StrategyMDex.makeLiquidationRepay(uint256,address,uint256) (StrategyMDex.sol#2419-2432)\n\t- StrategyMDex.makeWithdrawCalcAmount(uint256,address) (StrategyMDex.sol#2307-2323)\n\t- StrategyMDex.pendingLPAmount(uint256,address) (StrategyMDex.sol#2005-2012)\n\t- StrategyMDex.pendingRewards(uint256,address) (StrategyMDex.sol#1999-2002)\n\t- StrategyMDex.repayBorrow(uint256,address,uint256,bool) (StrategyMDex.sol#2334-2343)\n\t- StrategyMDex.userInfo (StrategyMDex.sol#1873)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyMDex",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "depositLPToken",
            "impact": "Medium",
            "line": 2085,
            "line_end": 2099,
            "message": "Reentrancy in StrategyMDex.depositLPToken(uint256,address,address,uint256,uint256,uint256) (StrategyMDex.sol#2085-2099):\n\tExternal calls:\n\t- router.removeLiquidity(token0,token1,withdrawLPAmount,0,0,address(this),block.timestamp.add(60)) (StrategyMDex.sol#2095)\n\t- lpAmount = deposit(_pid,_account,_borrowFrom,_bAmount,_desirePrice,_slippage) (StrategyMDex.sol#2098)\n\t\t- hecopool.deposit(_poolId,_lpAmount) (StrategyMDex.sol#1115)\n\t\t- hecopool.deposit(_poolId,0) (StrategyMDex.sol#1124)\n\t\t- router.addLiquidity(poolInfo[_pid].collateralToken[0],poolInfo[_pid].collateralToken[1],_amount0,_amount1,0,0,address(this),block.timestamp.add(60)) (StrategyMDex.sol#2232-2234)\n\t\t- bid = ITenBankHall(bank).makeBorrowFrom(_pid,_account,_borrowFrom,_bAmount) (StrategyMDex.sol#2175)\n\t\t- actionPool.onAcionUpdate(_pid) (StrategyMDex.sol#2041)\n\t\t- utils.makeDepositFee(_pid) (StrategyMDex.sol#2121)\n\t\t- utils.getTokenIn(token1,swapAmt,token0) (StrategyMDex.sol#2206)\n\t\t- utils.transferFromAllToken(address(this),_account,token0,token1) (StrategyMDex.sol#2139)\n\t\t- utils.getTokenIn(token0,swapAmt,token1) (StrategyMDex.sol#2210)\n\t\t- newRewardBase = utils.getTokenIn(rewardToken,newRewards,pool.baseToken) (StrategyMDex.sol#2060)\n\t\t- utils.makeRefundFee(_pid,newRewardBase) (StrategyMDex.sol#2063)\n\t\t- actionPool.onAcionIn(_pid,_account,lpAmountOld,user.lpAmount) (StrategyMDex.sol#2162)\n\tState variables written after the call(s):\n\t- lpAmount = deposit(_pid,_account,_borrowFrom,_bAmount,_desirePrice,_slippage) (StrategyMDex.sol#2098)\n\t\t- pool.lastRewardsBlock = block.number (StrategyMDex.sol#2036)\n\t\t- pool.lastRewardsBlock = block.number (StrategyMDex.sol#2044)\n\t\t- poolInfo[_pid].totalPoints = poolInfo[_pid].totalPoints.add(addPoint) (StrategyMDex.sol#2149)\n\t\t- poolInfo[_pid].totalLPReinvest = poolInfo[_pid].totalLPReinvest.add(lpAmount) (StrategyMDex.sol#2150)\n\t\t- poolInfo[_pid].totalLPAmount = poolInfo[_pid].totalLPAmount.add(lpAmount) (StrategyMDex.sol#2153)\n\t\t- pool.totalLPReinvest = pool.totalLPReinvest.add(lpAmount) (StrategyMDex.sol#2080)\n\tStrategyMDex.poolInfo (StrategyMDex.sol#1871) can be used in cross function reentrancies:\n\t- StrategyMDex._emergencyWithdraw(uint256,address) (StrategyMDex.sol#2349-2369)\n\t- StrategyMDex._withdraw(uint256,address,uint256,bool) (StrategyMDex.sol#2266-2305)\n\t- StrategyMDex.addPool(uint256,address[],address) (StrategyMDex.sol#1947-1967)\n\t- StrategyMDex.deposit(uint256,address,address,uint256,uint256,uint256) (StrategyMDex.sol#2101-2164)\n\t- StrategyMDex.depositLPToken(uint256,address,address,uint256,uint256,uint256) (StrategyMDex.sol#2085-2099)\n\t- StrategyMDex.getATPoolInfo(uint256) (StrategyMDex.sol#1898-1903)\n\t- StrategyMDex.getBaseToken(uint256) (StrategyMDex.sol#1929-1931)\n\t- StrategyMDex.getDepositAmount(uint256,address) (StrategyMDex.sol#2018-2021)\n\t- StrategyMDex.getPoolCollateralToken(uint256) (StrategyMDex.sol#1921-1923)\n\t- StrategyMDex.getPoolInfo(uint256) (StrategyMDex.sol#1910-1919)\n\t- StrategyMDex.getPoollpToken(uint256) (StrategyMDex.sol#1925-1927)\n\t- StrategyMDex.liquidation(uint256,address,address,uint256) (StrategyMDex.sol#2371-2417)\n\t- StrategyMDex.makeBalanceOptimalLiquidity(uint256) (StrategyMDex.sol#2185-2191)\n\t- StrategyMDex.makeBalanceOptimalLiquidityByAmount(uint256,uint256,uint256) (StrategyMDex.sol#2193-2213)\n\t- StrategyMDex.makeLiquidationRepay(uint256,address,uint256) (StrategyMDex.sol#2419-2432)\n\t- StrategyMDex.makeLiquidityAndDeposit(uint256) (StrategyMDex.sol#2215-2221)\n\t- StrategyMDex.makeLiquidityAndDepositByAmount(uint256,uint256,uint256) (StrategyMDex.sol#2223-2242)\n\t- StrategyMDex.makeWithdrawCalcAmount(uint256,address) (StrategyMDex.sol#2307-2323)\n\t- StrategyMDex.makeWithdrawRemoveLiquidity(uint256,uint256) (StrategyMDex.sol#2325-2332)\n\t- StrategyMDex.massUpdatePools() (StrategyMDex.sol#2024-2029)\n\t- StrategyMDex.pendingLPAmount(uint256,address) (StrategyMDex.sol#2005-2012)\n\t- StrategyMDex.poolInfo (StrategyMDex.sol#1871)\n\t- StrategyMDex.poolLength() (StrategyMDex.sol#1893-1895)\n\t- StrategyMDex.resetApprove(uint256) (StrategyMDex.sol#1969-1984)\n\t- StrategyMDex.setMiniRewardAmount(uint256,uint256) (StrategyMDex.sol#1994-1996)\n\t- StrategyMDex.updatePool(uint256) (StrategyMDex.sol#2032-2081)\n\t- StrategyMDex.withdraw(uint256,address,uint256) (StrategyMDex.sol#2259-2264)\n\t- StrategyMDex.withdrawLPToken(uint256,address,uint256) (StrategyMDex.sol#2244-2257)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyMDex",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "liquidation",
            "impact": "Medium",
            "line": 2371,
            "line_end": 2417,
            "message": "Reentrancy in StrategyMDex.liquidation(uint256,address,address,uint256) (StrategyMDex.sol#2371-2417):\n\tExternal calls:\n\t- updatePool(_pid) (StrategyMDex.sol#2377)\n\t\t- hecopool.deposit(_poolId,_lpAmount) (StrategyMDex.sol#1115)\n\t\t- hecopool.deposit(_poolId,0) (StrategyMDex.sol#1124)\n\t\t- router.addLiquidity(poolInfo[_pid].collateralToken[0],poolInfo[_pid].collateralToken[1],_amount0,_amount1,0,0,address(this),block.timestamp.add(60)) (StrategyMDex.sol#2232-2234)\n\t\t- actionPool.onAcionUpdate(_pid) (StrategyMDex.sol#2041)\n\t\t- utils.getTokenIn(token1,swapAmt,token0) (StrategyMDex.sol#2206)\n\t\t- utils.getTokenIn(token0,swapAmt,token1) (StrategyMDex.sol#2210)\n\t\t- newRewardBase = utils.getTokenIn(rewardToken,newRewards,pool.baseToken) (StrategyMDex.sol#2060)\n\t\t- utils.makeRefundFee(_pid,newRewardBase) (StrategyMDex.sol#2063)\n\tState variables written after the call(s):\n\t- poolInfo[_pid].totalLPAmount = TenMath.safeSub(poolInfo[_pid].totalLPAmount,user.lpAmount) (StrategyMDex.sol#2392)\n\tStrategyMDex.poolInfo (StrategyMDex.sol#1871) can be used in cross function reentrancies:\n\t- StrategyMDex._emergencyWithdraw(uint256,address) (StrategyMDex.sol#2349-2369)\n\t- StrategyMDex._withdraw(uint256,address,uint256,bool) (StrategyMDex.sol#2266-2305)\n\t- StrategyMDex.addPool(uint256,address[],address) (StrategyMDex.sol#1947-1967)\n\t- StrategyMDex.deposit(uint256,address,address,uint256,uint256,uint256) (StrategyMDex.sol#2101-2164)\n\t- StrategyMDex.depositLPToken(uint256,address,address,uint256,uint256,uint256) (StrategyMDex.sol#2085-2099)\n\t- StrategyMDex.getATPoolInfo(uint256) (StrategyMDex.sol#1898-1903)\n\t- StrategyMDex.getBaseToken(uint256) (StrategyMDex.sol#1929-1931)\n\t- StrategyMDex.getDepositAmount(uint256,address) (StrategyMDex.sol#2018-2021)\n\t- StrategyMDex.getPoolCollateralToken(uint256) (StrategyMDex.sol#1921-1923)\n\t- StrategyMDex.getPoolInfo(uint256) (StrategyMDex.sol#1910-1919)\n\t- StrategyMDex.getPoollpToken(uint256) (StrategyMDex.sol#1925-1927)\n\t- StrategyMDex.liquidation(uint256,address,address,uint256) (StrategyMDex.sol#2371-2417)\n\t- StrategyMDex.makeBalanceOptimalLiquidity(uint256) (StrategyMDex.sol#2185-2191)\n\t- StrategyMDex.makeBalanceOptimalLiquidityByAmount(uint256,uint256,uint256) (StrategyMDex.sol#2193-2213)\n\t- StrategyMDex.makeLiquidationRepay(uint256,address,uint256) (StrategyMDex.sol#2419-2432)\n\t- StrategyMDex.makeLiquidityAndDeposit(uint256) (StrategyMDex.sol#2215-2221)\n\t- StrategyMDex.makeLiquidityAndDepositByAmount(uint256,uint256,uint256) (StrategyMDex.sol#2223-2242)\n\t- StrategyMDex.makeWithdrawCalcAmount(uint256,address) (StrategyMDex.sol#2307-2323)\n\t- StrategyMDex.makeWithdrawRemoveLiquidity(uint256,uint256) (StrategyMDex.sol#2325-2332)\n\t- StrategyMDex.massUpdatePools() (StrategyMDex.sol#2024-2029)\n\t- StrategyMDex.pendingLPAmount(uint256,address) (StrategyMDex.sol#2005-2012)\n\t- StrategyMDex.poolInfo (StrategyMDex.sol#1871)\n\t- StrategyMDex.poolLength() (StrategyMDex.sol#1893-1895)\n\t- StrategyMDex.resetApprove(uint256) (StrategyMDex.sol#1969-1984)\n\t- StrategyMDex.setMiniRewardAmount(uint256,uint256) (StrategyMDex.sol#1994-1996)\n\t- StrategyMDex.updatePool(uint256) (StrategyMDex.sol#2032-2081)\n\t- StrategyMDex.withdraw(uint256,address,uint256) (StrategyMDex.sol#2259-2264)\n\t- StrategyMDex.withdrawLPToken(uint256,address,uint256) (StrategyMDex.sol#2244-2257)\n\t- poolInfo[_pid].totalLPReinvest = TenMath.safeSub(poolInfo[_pid].totalLPReinvest,withdrawLPTokenAmount) (StrategyMDex.sol#2393)\n\tStrategyMDex.poolInfo (StrategyMDex.sol#1871) can be used in cross function reentrancies:\n\t- StrategyMDex._emergencyWithdraw(uint256,address) (StrategyMDex.sol#2349-2369)\n\t- StrategyMDex._withdraw(uint256,address,uint256,bool) (StrategyMDex.sol#2266-2305)\n\t- StrategyMDex.addPool(uint256,address[],address) (StrategyMDex.sol#1947-1967)\n\t- StrategyMDex.deposit(uint256,address,address,uint256,uint256,uint256) (StrategyMDex.sol#2101-2164)\n\t- StrategyMDex.depositLPToken(uint256,address,address,uint256,uint256,uint256) (StrategyMDex.sol#2085-2099)\n\t- StrategyMDex.getATPoolInfo(uint256) (StrategyMDex.sol#1898-1903)\n\t- StrategyMDex.getBaseToken(uint256) (StrategyMDex.sol#1929-1931)\n\t- StrategyMDex.getDepositAmount(uint256,address) (StrategyMDex.sol#2018-2021)\n\t- StrategyMDex.getPoolCollateralToken(uint256) (StrategyMDex.sol#1921-1923)\n\t- StrategyMDex.getPoolInfo(uint256) (StrategyMDex.sol#1910-1919)\n\t- StrategyMDex.getPoollpToken(uint256) (StrategyMDex.sol#1925-1927)\n\t- StrategyMDex.liquidation(uint256,address,address,uint256) (StrategyMDex.sol#2371-2417)\n\t- StrategyMDex.makeBalanceOptimalLiquidity(uint256) (StrategyMDex.sol#2185-2191)\n\t- StrategyMDex.makeBalanceOptimalLiquidityByAmount(uint256,uint256,uint256) (StrategyMDex.sol#2193-2213)\n\t- StrategyMDex.makeLiquidationRepay(uint256,address,uint256) (StrategyMDex.sol#2419-2432)\n\t- StrategyMDex.makeLiquidityAndDeposit(uint256) (StrategyMDex.sol#2215-2221)\n\t- StrategyMDex.makeLiquidityAndDepositByAmount(uint256,uint256,uint256) (StrategyMDex.sol#2223-2242)\n\t- StrategyMDex.makeWithdrawCalcAmount(uint256,address) (StrategyMDex.sol#2307-2323)\n\t- StrategyMDex.makeWithdrawRemoveLiquidity(uint256,uint256) (StrategyMDex.sol#2325-2332)\n\t- StrategyMDex.massUpdatePools() (StrategyMDex.sol#2024-2029)\n\t- StrategyMDex.pendingLPAmount(uint256,address) (StrategyMDex.sol#2005-2012)\n\t- StrategyMDex.poolInfo (StrategyMDex.sol#1871)\n\t- StrategyMDex.poolLength() (StrategyMDex.sol#1893-1895)\n\t- StrategyMDex.resetApprove(uint256) (StrategyMDex.sol#1969-1984)\n\t- StrategyMDex.setMiniRewardAmount(uint256,uint256) (StrategyMDex.sol#1994-1996)\n\t- StrategyMDex.updatePool(uint256) (StrategyMDex.sol#2032-2081)\n\t- StrategyMDex.withdraw(uint256,address,uint256) (StrategyMDex.sol#2259-2264)\n\t- StrategyMDex.withdrawLPToken(uint256,address,uint256) (StrategyMDex.sol#2244-2257)\n\t- poolInfo[_pid].totalPoints = TenMath.safeSub(poolInfo[_pid].totalPoints,user.lpPoints) (StrategyMDex.sol#2394)\n\tStrategyMDex.poolInfo (StrategyMDex.sol#1871) can be used in cross function reentrancies:\n\t- StrategyMDex._emergencyWithdraw(uint256,address) (StrategyMDex.sol#2349-2369)\n\t- StrategyMDex._withdraw(uint256,address,uint256,bool) (StrategyMDex.sol#2266-2305)\n\t- StrategyMDex.addPool(uint256,address[],address) (StrategyMDex.sol#1947-1967)\n\t- StrategyMDex.deposit(uint256,address,address,uint256,uint256,uint256) (StrategyMDex.sol#2101-2164)\n\t- StrategyMDex.depositLPToken(uint256,address,address,uint256,uint256,uint256) (StrategyMDex.sol#2085-2099)\n\t- StrategyMDex.getATPoolInfo(uint256) (StrategyMDex.sol#1898-1903)\n\t- StrategyMDex.getBaseToken(uint256) (StrategyMDex.sol#1929-1931)\n\t- StrategyMDex.getDepositAmount(uint256,address) (StrategyMDex.sol#2018-2021)\n\t- StrategyMDex.getPoolCollateralToken(uint256) (StrategyMDex.sol#1921-1923)\n\t- StrategyMDex.getPoolInfo(uint256) (StrategyMDex.sol#1910-1919)\n\t- StrategyMDex.getPoollpToken(uint256) (StrategyMDex.sol#1925-1927)\n\t- StrategyMDex.liquidation(uint256,address,address,uint256) (StrategyMDex.sol#2371-2417)\n\t- StrategyMDex.makeBalanceOptimalLiquidity(uint256) (StrategyMDex.sol#2185-2191)\n\t- StrategyMDex.makeBalanceOptimalLiquidityByAmount(uint256,uint256,uint256) (StrategyMDex.sol#2193-2213)\n\t- StrategyMDex.makeLiquidationRepay(uint256,address,uint256) (StrategyMDex.sol#2419-2432)\n\t- StrategyMDex.makeLiquidityAndDeposit(uint256) (StrategyMDex.sol#2215-2221)\n\t- StrategyMDex.makeLiquidityAndDepositByAmount(uint256,uint256,uint256) (StrategyMDex.sol#2223-2242)\n\t- StrategyMDex.makeWithdrawCalcAmount(uint256,address) (StrategyMDex.sol#2307-2323)\n\t- StrategyMDex.makeWithdrawRemoveLiquidity(uint256,uint256) (StrategyMDex.sol#2325-2332)\n\t- StrategyMDex.massUpdatePools() (StrategyMDex.sol#2024-2029)\n\t- StrategyMDex.pendingLPAmount(uint256,address) (StrategyMDex.sol#2005-2012)\n\t- StrategyMDex.poolInfo (StrategyMDex.sol#1871)\n\t- StrategyMDex.poolLength() (StrategyMDex.sol#1893-1895)\n\t- StrategyMDex.resetApprove(uint256) (StrategyMDex.sol#1969-1984)\n\t- StrategyMDex.setMiniRewardAmount(uint256,uint256) (StrategyMDex.sol#1994-1996)\n\t- StrategyMDex.updatePool(uint256) (StrategyMDex.sol#2032-2081)\n\t- StrategyMDex.withdraw(uint256,address,uint256) (StrategyMDex.sol#2259-2264)\n\t- StrategyMDex.withdrawLPToken(uint256,address,uint256) (StrategyMDex.sol#2244-2257)\n\t- user.lpPoints = 0 (StrategyMDex.sol#2396)\n\tStrategyMDex.userInfo (StrategyMDex.sol#1873) can be used in cross function reentrancies:\n\t- StrategyMDex._emergencyWithdraw(uint256,address) (StrategyMDex.sol#2349-2369)\n\t- StrategyMDex._withdraw(uint256,address,uint256,bool) (StrategyMDex.sol#2266-2305)\n\t- StrategyMDex.deposit(uint256,address,address,uint256,uint256,uint256) (StrategyMDex.sol#2101-2164)\n\t- StrategyMDex.getATUserAmount(uint256,address) (StrategyMDex.sol#1905-1908)\n\t- StrategyMDex.getBorrowInfo(uint256,address) (StrategyMDex.sol#1933-1937)\n\t- StrategyMDex.liquidation(uint256,address,address,uint256) (StrategyMDex.sol#2371-2417)\n\t- StrategyMDex.makeBorrowBaseToken(uint256,address,address,uint256) (StrategyMDex.sol#2166-2183)\n\t- StrategyMDex.makeLiquidationRepay(uint256,address,uint256) (StrategyMDex.sol#2419-2432)\n\t- StrategyMDex.makeWithdrawCalcAmount(uint256,address) (StrategyMDex.sol#2307-2323)\n\t- StrategyMDex.pendingLPAmount(uint256,address) (StrategyMDex.sol#2005-2012)\n\t- StrategyMDex.pendingRewards(uint256,address) (StrategyMDex.sol#1999-2002)\n\t- StrategyMDex.repayBorrow(uint256,address,uint256,bool) (StrategyMDex.sol#2334-2343)\n\t- StrategyMDex.userInfo (StrategyMDex.sol#1873)\n\t- user.lpAmount = 0 (StrategyMDex.sol#2397)\n\tStrategyMDex.userInfo (StrategyMDex.sol#1873) can be used in cross function reentrancies:\n\t- StrategyMDex._emergencyWithdraw(uint256,address) (StrategyMDex.sol#2349-2369)\n\t- StrategyMDex._withdraw(uint256,address,uint256,bool) (StrategyMDex.sol#2266-2305)\n\t- StrategyMDex.deposit(uint256,address,address,uint256,uint256,uint256) (StrategyMDex.sol#2101-2164)\n\t- StrategyMDex.getATUserAmount(uint256,address) (StrategyMDex.sol#1905-1908)\n\t- StrategyMDex.getBorrowInfo(uint256,address) (StrategyMDex.sol#1933-1937)\n\t- StrategyMDex.liquidation(uint256,address,address,uint256) (StrategyMDex.sol#2371-2417)\n\t- StrategyMDex.makeBorrowBaseToken(uint256,address,address,uint256) (StrategyMDex.sol#2166-2183)\n\t- StrategyMDex.makeLiquidationRepay(uint256,address,uint256) (StrategyMDex.sol#2419-2432)\n\t- StrategyMDex.makeWithdrawCalcAmount(uint256,address) (StrategyMDex.sol#2307-2323)\n\t- StrategyMDex.pendingLPAmount(uint256,address) (StrategyMDex.sol#2005-2012)\n\t- StrategyMDex.pendingRewards(uint256,address) (StrategyMDex.sol#1999-2002)\n\t- StrategyMDex.repayBorrow(uint256,address,uint256,bool) (StrategyMDex.sol#2334-2343)\n\t- StrategyMDex.userInfo (StrategyMDex.sol#1873)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyMDex",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "makeBorrowBaseToken",
            "impact": "Medium",
            "line": 2166,
            "line_end": 2183,
            "message": "Reentrancy in StrategyMDex.makeBorrowBaseToken(uint256,address,address,uint256) (StrategyMDex.sol#2166-2183):\n\tExternal calls:\n\t- bid = ITenBankHall(bank).makeBorrowFrom(_pid,_account,_borrowFrom,_bAmount) (StrategyMDex.sol#2175)\n\tState variables written after the call(s):\n\t- userInfo[_pid][_account].bid = bid (StrategyMDex.sol#2182)\n\tStrategyMDex.userInfo (StrategyMDex.sol#1873) can be used in cross function reentrancies:\n\t- StrategyMDex._emergencyWithdraw(uint256,address) (StrategyMDex.sol#2349-2369)\n\t- StrategyMDex._withdraw(uint256,address,uint256,bool) (StrategyMDex.sol#2266-2305)\n\t- StrategyMDex.deposit(uint256,address,address,uint256,uint256,uint256) (StrategyMDex.sol#2101-2164)\n\t- StrategyMDex.getATUserAmount(uint256,address) (StrategyMDex.sol#1905-1908)\n\t- StrategyMDex.getBorrowInfo(uint256,address) (StrategyMDex.sol#1933-1937)\n\t- StrategyMDex.liquidation(uint256,address,address,uint256) (StrategyMDex.sol#2371-2417)\n\t- StrategyMDex.makeBorrowBaseToken(uint256,address,address,uint256) (StrategyMDex.sol#2166-2183)\n\t- StrategyMDex.makeLiquidationRepay(uint256,address,uint256) (StrategyMDex.sol#2419-2432)\n\t- StrategyMDex.makeWithdrawCalcAmount(uint256,address) (StrategyMDex.sol#2307-2323)\n\t- StrategyMDex.pendingLPAmount(uint256,address) (StrategyMDex.sol#2005-2012)\n\t- StrategyMDex.pendingRewards(uint256,address) (StrategyMDex.sol#1999-2002)\n\t- StrategyMDex.repayBorrow(uint256,address,uint256,bool) (StrategyMDex.sol#2334-2343)\n\t- StrategyMDex.userInfo (StrategyMDex.sol#1873)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyMDex",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "resetApprove",
            "impact": "Medium",
            "line": 1969,
            "line_end": 1984,
            "message": "StrategyMDex.resetApprove(uint256) (StrategyMDex.sol#1969-1984) ignores return value by IERC20(pool.collateralToken[0]).approve(address(utils),uint256(- 1)) (StrategyMDex.sol#1978)\n",
            "name": "unused-return",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyUtils",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "optimalDepositAmount",
            "impact": "Medium",
            "line": 1717,
            "line_end": 1732,
            "message": "StrategyUtils.optimalDepositAmount(address,uint256,uint256) (StrategyMDex.sol#1717-1732) ignores return value by (resA,resB,None) = IMdexPair(lpToken).getReserves() (StrategyMDex.sol#1724)\n",
            "name": "unused-return",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyMDex",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "resetApprove",
            "impact": "Medium",
            "line": 1969,
            "line_end": 1984,
            "message": "StrategyMDex.resetApprove(uint256) (StrategyMDex.sol#1969-1984) ignores return value by IERC20(address(pool.lpToken)).approve(address(utils),uint256(- 1)) (StrategyMDex.sol#1980)\n",
            "name": "unused-return",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyUtils",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "getTokenInTo",
            "impact": "Medium",
            "line": 1819,
            "line_end": 1838,
            "message": "StrategyUtils.getTokenInTo(address,address,uint256,address) (StrategyMDex.sol#1819-1838) ignores return value by IERC20(_tokenIn).approve(address(router),uint256(- 1)) (StrategyMDex.sol#1829)\n",
            "name": "unused-return",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyUtils",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "getLPToken2TokenAmount",
            "impact": "Medium",
            "line": 1758,
            "line_end": 1771,
            "message": "StrategyUtils.getLPToken2TokenAmount(address,address,uint256) (StrategyMDex.sol#1758-1771) ignores return value by (a,b) = IMdexPair(_lpToken).getReserves() (StrategyMDex.sol#1760)\n",
            "name": "unused-return",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyMDex",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "resetApprove",
            "impact": "Medium",
            "line": 1969,
            "line_end": 1984,
            "message": "StrategyMDex.resetApprove(uint256) (StrategyMDex.sol#1969-1984) ignores return value by IERC20(pool.collateralToken[1]).approve(address(utils),uint256(- 1)) (StrategyMDex.sol#1979)\n",
            "name": "unused-return",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyMDex",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "resetApprove",
            "impact": "Medium",
            "line": 1969,
            "line_end": 1984,
            "message": "StrategyMDex.resetApprove(uint256) (StrategyMDex.sol#1969-1984) ignores return value by IERC20(pool.collateralToken[1]).approve(address(router),uint256(- 1)) (StrategyMDex.sol#1974)\n",
            "name": "unused-return",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyMDex",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "makeBalanceOptimalLiquidityByAmount",
            "impact": "Medium",
            "line": 2193,
            "line_end": 2213,
            "message": "StrategyMDex.makeBalanceOptimalLiquidityByAmount(uint256,uint256,uint256) (StrategyMDex.sol#2193-2213) ignores return value by utils.getTokenIn(token0,swapAmt,token1) (StrategyMDex.sol#2210)\n",
            "name": "unused-return",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyMDex",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "resetApprove",
            "impact": "Medium",
            "line": 1969,
            "line_end": 1984,
            "message": "StrategyMDex.resetApprove(uint256) (StrategyMDex.sol#1969-1984) ignores return value by IERC20(address(pool.lpToken)).approve(address(router),uint256(- 1)) (StrategyMDex.sol#1975)\n",
            "name": "unused-return",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyUtils",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "checkSlippageLimit",
            "impact": "Medium",
            "line": 1577,
            "line_end": 1590,
            "message": "StrategyUtils.checkSlippageLimit(uint256,uint256,uint256) (StrategyMDex.sol#1577-1590) ignores return value by (a,b) = IMdexPair(pairs).getReserves() (StrategyMDex.sol#1587)\n",
            "name": "unused-return",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyMDexPools",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "poolTokenApprove",
            "impact": "Medium",
            "line": 1110,
            "line_end": 1112,
            "message": "StrategyMDexPools.poolTokenApprove(address,uint256) (StrategyMDex.sol#1110-1112) ignores return value by IERC20(_token).approve(address(hecopool),_value) (StrategyMDex.sol#1111)\n",
            "name": "unused-return",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyMDex",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "resetApprove",
            "impact": "Medium",
            "line": 1969,
            "line_end": 1984,
            "message": "StrategyMDex.resetApprove(uint256) (StrategyMDex.sol#1969-1984) ignores return value by IERC20(rewardToken).approve(address(router),uint256(- 1)) (StrategyMDex.sol#1976)\n",
            "name": "unused-return",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyMDex",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "makeWithdrawRemoveLiquidity",
            "impact": "Medium",
            "line": 2325,
            "line_end": 2332,
            "message": "StrategyMDex.makeWithdrawRemoveLiquidity(uint256,uint256) (StrategyMDex.sol#2325-2332) ignores return value by router.removeLiquidity(token0,token1,_withdrawLPTokenAmount,0,0,address(this),block.timestamp.add(60)) (StrategyMDex.sol#2331)\n",
            "name": "unused-return",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyMDex",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "makeLiquidationRepay",
            "impact": "Medium",
            "line": 2419,
            "line_end": 2432,
            "message": "StrategyMDex.makeLiquidationRepay(uint256,address,uint256) (StrategyMDex.sol#2419-2432) ignores return value by utils.getTokenIn(token0,amount0,poolInfo[_pid].baseToken) (StrategyMDex.sol#2426)\n",
            "name": "unused-return",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyUtils",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "checkDepositLimit",
            "impact": "Medium",
            "line": 1565,
            "line_end": 1575,
            "message": "StrategyUtils.checkDepositLimit(uint256,address,uint256) (StrategyMDex.sol#1565-1575) ignores return value by (totalLPRefund) = IStrategyLink(strategy).getPoolInfo(_pid) (StrategyMDex.sol#1573)\n",
            "name": "unused-return",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyMDex",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "makeLiquidationRepay",
            "impact": "Medium",
            "line": 2419,
            "line_end": 2432,
            "message": "StrategyMDex.makeLiquidationRepay(uint256,address,uint256) (StrategyMDex.sol#2419-2432) ignores return value by utils.getTokenIn(token1,amount1,poolInfo[_pid].baseToken) (StrategyMDex.sol#2427)\n",
            "name": "unused-return",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyMDex",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "withdrawLPToken",
            "impact": "Medium",
            "line": 2244,
            "line_end": 2257,
            "message": "StrategyMDex.withdrawLPToken(uint256,address,uint256) (StrategyMDex.sol#2244-2257) ignores return value by router.addLiquidity(token0,token1,amount0,amount1,0,0,_account,block.timestamp.add(60)) (StrategyMDex.sol#2253)\n",
            "name": "unused-return",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyMDex",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "depositLPToken",
            "impact": "Medium",
            "line": 2085,
            "line_end": 2099,
            "message": "StrategyMDex.depositLPToken(uint256,address,address,uint256,uint256,uint256) (StrategyMDex.sol#2085-2099) ignores return value by router.removeLiquidity(token0,token1,withdrawLPAmount,0,0,address(this),block.timestamp.add(60)) (StrategyMDex.sol#2095)\n",
            "name": "unused-return",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyMDex",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "resetApprove",
            "impact": "Medium",
            "line": 1969,
            "line_end": 1984,
            "message": "StrategyMDex.resetApprove(uint256) (StrategyMDex.sol#1969-1984) ignores return value by IERC20(rewardToken).approve(address(utils),uint256(- 1)) (StrategyMDex.sol#1981)\n",
            "name": "unused-return",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyMDexPools",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "poolDepositToken",
            "impact": "Medium",
            "line": 1097,
            "line_end": 1099,
            "message": "StrategyMDexPools.poolDepositToken(uint256) (StrategyMDex.sol#1097-1099) ignores return value by (lpToken,None,None,None,None,None) = hecopool.poolInfo(_poolId) (StrategyMDex.sol#1098)\n",
            "name": "unused-return",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyMDex",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "makeBalanceOptimalLiquidityByAmount",
            "impact": "Medium",
            "line": 2193,
            "line_end": 2213,
            "message": "StrategyMDex.makeBalanceOptimalLiquidityByAmount(uint256,uint256,uint256) (StrategyMDex.sol#2193-2213) ignores return value by utils.getTokenIn(token1,swapAmt,token0) (StrategyMDex.sol#2206)\n",
            "name": "unused-return",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyMDex",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "resetApprove",
            "impact": "Medium",
            "line": 1969,
            "line_end": 1984,
            "message": "StrategyMDex.resetApprove(uint256) (StrategyMDex.sol#1969-1984) ignores return value by IERC20(pool.collateralToken[0]).approve(address(router),uint256(- 1)) (StrategyMDex.sol#1973)\n",
            "name": "unused-return",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyMDex",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "makeLiquidityAndDepositByAmount",
            "impact": "Medium",
            "line": 2223,
            "line_end": 2242,
            "message": "StrategyMDex.makeLiquidityAndDepositByAmount(uint256,uint256,uint256) (StrategyMDex.sol#2223-2242) ignores return value by router.addLiquidity(poolInfo[_pid].collateralToken[0],poolInfo[_pid].collateralToken[1],_amount0,_amount1,0,0,address(this),block.timestamp.add(60)) (StrategyMDex.sol#2232-2234)\n",
            "name": "unused-return",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyMDex",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "makeBalanceOptimalLiquidityByAmount",
            "impact": "Low",
            "line": 2193,
            "line_end": 2213,
            "message": "StrategyMDex.makeBalanceOptimalLiquidityByAmount(uint256,uint256,uint256) (StrategyMDex.sol#2193-2213) has external calls inside a loop: token0 = IMdexPair(pairs).token0() (StrategyMDex.sol#2195)\n",
            "name": "calls-loop",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyMDexPools",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "poolClaim",
            "impact": "Low",
            "line": 1122,
            "line_end": 1127,
            "message": "StrategyMDexPools.poolClaim(uint256) (StrategyMDex.sol#1122-1127) has external calls inside a loop: uBalanceAfter = IERC20(mdxToken).balanceOf(address(this)) (StrategyMDex.sol#1125)\n",
            "name": "calls-loop",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyMDex",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "makeBalanceOptimalLiquidityByAmount",
            "impact": "Low",
            "line": 2193,
            "line_end": 2213,
            "message": "StrategyMDex.makeBalanceOptimalLiquidityByAmount(uint256,uint256,uint256) (StrategyMDex.sol#2193-2213) has external calls inside a loop: utils.getTokenIn(token1,swapAmt,token0) (StrategyMDex.sol#2206)\n",
            "name": "calls-loop",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyMDex",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "makeBalanceOptimalLiquidityByAmount",
            "impact": "Low",
            "line": 2193,
            "line_end": 2213,
            "message": "StrategyMDex.makeBalanceOptimalLiquidityByAmount(uint256,uint256,uint256) (StrategyMDex.sol#2193-2213) has external calls inside a loop: token1 = IMdexPair(pairs).token1() (StrategyMDex.sol#2196)\n",
            "name": "calls-loop",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyMDexPools",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "poolClaim",
            "impact": "Low",
            "line": 1122,
            "line_end": 1127,
            "message": "StrategyMDexPools.poolClaim(uint256) (StrategyMDex.sol#1122-1127) has external calls inside a loop: hecopool.deposit(_poolId,0) (StrategyMDex.sol#1124)\n",
            "name": "calls-loop",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyMDex",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "updatePool",
            "impact": "Low",
            "line": 2032,
            "line_end": 2081,
            "message": "StrategyMDex.updatePool(uint256) (StrategyMDex.sol#2032-2081) has external calls inside a loop: newRewardBase = utils.getTokenIn(rewardToken,newRewards,pool.baseToken) (StrategyMDex.sol#2060)\n",
            "name": "calls-loop",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyMDex",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "updatePool",
            "impact": "Low",
            "line": 2032,
            "line_end": 2081,
            "message": "StrategyMDex.updatePool(uint256) (StrategyMDex.sol#2032-2081) has external calls inside a loop: actionPool.onAcionUpdate(_pid) (StrategyMDex.sol#2041)\n",
            "name": "calls-loop",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyMDex",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "getTokenBalance_this",
            "impact": "Low",
            "line": 1939,
            "line_end": 1943,
            "message": "StrategyMDex.getTokenBalance_this(address,address) (StrategyMDex.sol#1939-1943) has external calls inside a loop: a2 = IERC20(_token1).balanceOf(address(this)) (StrategyMDex.sol#1942)\n",
            "name": "calls-loop",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyMDexPools",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "poolClaim",
            "impact": "Low",
            "line": 1122,
            "line_end": 1127,
            "message": "StrategyMDexPools.poolClaim(uint256) (StrategyMDex.sol#1122-1127) has external calls inside a loop: uBalanceBefore = IERC20(mdxToken).balanceOf(address(this)) (StrategyMDex.sol#1123)\n",
            "name": "calls-loop",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyMDex",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "makeLiquidityAndDepositByAmount",
            "impact": "Low",
            "line": 2223,
            "line_end": 2242,
            "message": "StrategyMDex.makeLiquidityAndDepositByAmount(uint256,uint256,uint256) (StrategyMDex.sol#2223-2242) has external calls inside a loop: uBalanceBefore = poolInfo[_pid].lpToken.balanceOf(address(this)) (StrategyMDex.sol#2231)\n",
            "name": "calls-loop",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyMDex",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "getTokenBalance_this",
            "impact": "Low",
            "line": 1939,
            "line_end": 1943,
            "message": "StrategyMDex.getTokenBalance_this(address,address) (StrategyMDex.sol#1939-1943) has external calls inside a loop: a1 = IERC20(_token0).balanceOf(address(this)) (StrategyMDex.sol#1941)\n",
            "name": "calls-loop",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyMDex",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "makeLiquidityAndDepositByAmount",
            "impact": "Low",
            "line": 2223,
            "line_end": 2242,
            "message": "StrategyMDex.makeLiquidityAndDepositByAmount(uint256,uint256,uint256) (StrategyMDex.sol#2223-2242) has external calls inside a loop: uBalanceAfter = poolInfo[_pid].lpToken.balanceOf(address(this)) (StrategyMDex.sol#2235)\n",
            "name": "calls-loop",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyMDex",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "makeBalanceOptimalLiquidityByAmount",
            "impact": "Low",
            "line": 2193,
            "line_end": 2213,
            "message": "StrategyMDex.makeBalanceOptimalLiquidityByAmount(uint256,uint256,uint256) (StrategyMDex.sol#2193-2213) has external calls inside a loop: utils.getAmountIn(token1,swapAmt,token0) > 0 (StrategyMDex.sol#2205)\n",
            "name": "calls-loop",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyMDex",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "makeBalanceOptimalLiquidityByAmount",
            "impact": "Low",
            "line": 2193,
            "line_end": 2213,
            "message": "StrategyMDex.makeBalanceOptimalLiquidityByAmount(uint256,uint256,uint256) (StrategyMDex.sol#2193-2213) has external calls inside a loop: utils.getTokenIn(token0,swapAmt,token1) (StrategyMDex.sol#2210)\n",
            "name": "calls-loop",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyMDex",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "makeLiquidityAndDepositByAmount",
            "impact": "Low",
            "line": 2223,
            "line_end": 2242,
            "message": "StrategyMDex.makeLiquidityAndDepositByAmount(uint256,uint256,uint256) (StrategyMDex.sol#2223-2242) has external calls inside a loop: router.addLiquidity(poolInfo[_pid].collateralToken[0],poolInfo[_pid].collateralToken[1],_amount0,_amount1,0,0,address(this),block.timestamp.add(60)) (StrategyMDex.sol#2232-2234)\n",
            "name": "calls-loop",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyMDexPools",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "poolDeposit",
            "impact": "Low",
            "line": 1114,
            "line_end": 1116,
            "message": "StrategyMDexPools.poolDeposit(uint256,uint256) (StrategyMDex.sol#1114-1116) has external calls inside a loop: hecopool.deposit(_poolId,_lpAmount) (StrategyMDex.sol#1115)\n",
            "name": "calls-loop",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyMDex",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "updatePool",
            "impact": "Low",
            "line": 2032,
            "line_end": 2081,
            "message": "StrategyMDex.updatePool(uint256) (StrategyMDex.sol#2032-2081) has external calls inside a loop: utils.makeRefundFee(_pid,newRewardBase) (StrategyMDex.sol#2063)\n",
            "name": "calls-loop",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyMDex",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "makeBalanceOptimalLiquidityByAmount",
            "impact": "Low",
            "line": 2193,
            "line_end": 2213,
            "message": "StrategyMDex.makeBalanceOptimalLiquidityByAmount(uint256,uint256,uint256) (StrategyMDex.sol#2193-2213) has external calls inside a loop: pairs = factory.getPair(poolInfo[_pid].collateralToken[0],poolInfo[_pid].collateralToken[1]) (StrategyMDex.sol#2194)\n",
            "name": "calls-loop",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyMDex",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "makeBalanceOptimalLiquidityByAmount",
            "impact": "Low",
            "line": 2193,
            "line_end": 2213,
            "message": "StrategyMDex.makeBalanceOptimalLiquidityByAmount(uint256,uint256,uint256) (StrategyMDex.sol#2193-2213) has external calls inside a loop: utils.getAmountIn(token0,swapAmt,token1) > 0 (StrategyMDex.sol#2209)\n",
            "name": "calls-loop",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyMDex",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "makeBalanceOptimalLiquidityByAmount",
            "impact": "Low",
            "line": 2193,
            "line_end": 2213,
            "message": "StrategyMDex.makeBalanceOptimalLiquidityByAmount(uint256,uint256,uint256) (StrategyMDex.sol#2193-2213) has external calls inside a loop: (swapAmt,isReversed) = utils.optimalDepositAmount(address(pairs),_amount0,_amount1) (StrategyMDex.sol#2200)\n",
            "name": "calls-loop",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyMDex",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "updatePool",
            "impact": "Low",
            "line": 2032,
            "line_end": 2081,
            "message": "StrategyMDex.updatePool(uint256) (StrategyMDex.sol#2032-2081) has external calls inside a loop: utils.getAmountIn(rewardToken,newRewards,pool.baseToken) <= 0 (StrategyMDex.sol#2055)\n",
            "name": "calls-loop",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyMDex",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "deposit",
            "impact": "Low",
            "line": 2101,
            "line_end": 2164,
            "message": "Reentrancy in StrategyMDex.deposit(uint256,address,address,uint256,uint256,uint256) (StrategyMDex.sol#2101-2164):\n\tExternal calls:\n\t- updatePool(_pid) (StrategyMDex.sol#2116)\n\t\t- hecopool.deposit(_poolId,_lpAmount) (StrategyMDex.sol#1115)\n\t\t- hecopool.deposit(_poolId,0) (StrategyMDex.sol#1124)\n\t\t- router.addLiquidity(poolInfo[_pid].collateralToken[0],poolInfo[_pid].collateralToken[1],_amount0,_amount1,0,0,address(this),block.timestamp.add(60)) (StrategyMDex.sol#2232-2234)\n\t\t- actionPool.onAcionUpdate(_pid) (StrategyMDex.sol#2041)\n\t\t- utils.getTokenIn(token1,swapAmt,token0) (StrategyMDex.sol#2206)\n\t\t- utils.getTokenIn(token0,swapAmt,token1) (StrategyMDex.sol#2210)\n\t\t- newRewardBase = utils.getTokenIn(rewardToken,newRewards,pool.baseToken) (StrategyMDex.sol#2060)\n\t\t- utils.makeRefundFee(_pid,newRewardBase) (StrategyMDex.sol#2063)\n\t- utils.makeDepositFee(_pid) (StrategyMDex.sol#2121)\n\t- makeBorrowBaseToken(_pid,_account,user.borrowFrom,_bAmount) (StrategyMDex.sol#2124)\n\t\t- bid = ITenBankHall(bank).makeBorrowFrom(_pid,_account,_borrowFrom,_bAmount) (StrategyMDex.sol#2175)\n\tEvent emitted after the call(s):\n\t- StrategyBorrow(address(this),_pid,_account,_bAmount) (StrategyMDex.sol#2177)\n\t\t- makeBorrowBaseToken(_pid,_account,user.borrowFrom,_bAmount) (StrategyMDex.sol#2124)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyMDex",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "liquidation",
            "impact": "Low",
            "line": 2371,
            "line_end": 2417,
            "message": "Reentrancy in StrategyMDex.liquidation(uint256,address,address,uint256) (StrategyMDex.sol#2371-2417):\n\tExternal calls:\n\t- updatePool(_pid) (StrategyMDex.sol#2377)\n\t\t- hecopool.deposit(_poolId,_lpAmount) (StrategyMDex.sol#1115)\n\t\t- hecopool.deposit(_poolId,0) (StrategyMDex.sol#1124)\n\t\t- router.addLiquidity(poolInfo[_pid].collateralToken[0],poolInfo[_pid].collateralToken[1],_amount0,_amount1,0,0,address(this),block.timestamp.add(60)) (StrategyMDex.sol#2232-2234)\n\t\t- actionPool.onAcionUpdate(_pid) (StrategyMDex.sol#2041)\n\t\t- utils.getTokenIn(token1,swapAmt,token0) (StrategyMDex.sol#2206)\n\t\t- utils.getTokenIn(token0,swapAmt,token1) (StrategyMDex.sol#2210)\n\t\t- newRewardBase = utils.getTokenIn(rewardToken,newRewards,pool.baseToken) (StrategyMDex.sol#2060)\n\t\t- utils.makeRefundFee(_pid,newRewardBase) (StrategyMDex.sol#2063)\n\t- makeWithdrawRemoveLiquidity(_pid,withdrawLPTokenAmount) (StrategyMDex.sol#2400)\n\t\t- hecopool.withdraw(_poolId,_lpAmount) (StrategyMDex.sol#1119)\n\t\t- router.removeLiquidity(token0,token1,_withdrawLPTokenAmount,0,0,address(this),block.timestamp.add(60)) (StrategyMDex.sol#2331)\n\tEvent emitted after the call(s):\n\t- StrategyLiquidation(address(this),_pid,_account,withdrawLPTokenAmount) (StrategyMDex.sol#2402)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyMDex",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "_withdraw",
            "impact": "Low",
            "line": 2266,
            "line_end": 2305,
            "message": "Reentrancy in StrategyMDex._withdraw(uint256,address,uint256,bool) (StrategyMDex.sol#2266-2305):\n\tExternal calls:\n\t- updatePool(_pid) (StrategyMDex.sol#2268)\n\t\t- hecopool.deposit(_poolId,_lpAmount) (StrategyMDex.sol#1115)\n\t\t- hecopool.deposit(_poolId,0) (StrategyMDex.sol#1124)\n\t\t- router.addLiquidity(poolInfo[_pid].collateralToken[0],poolInfo[_pid].collateralToken[1],_amount0,_amount1,0,0,address(this),block.timestamp.add(60)) (StrategyMDex.sol#2232-2234)\n\t\t- actionPool.onAcionUpdate(_pid) (StrategyMDex.sol#2041)\n\t\t- utils.getTokenIn(token1,swapAmt,token0) (StrategyMDex.sol#2206)\n\t\t- utils.getTokenIn(token0,swapAmt,token1) (StrategyMDex.sol#2210)\n\t\t- newRewardBase = utils.getTokenIn(rewardToken,newRewards,pool.baseToken) (StrategyMDex.sol#2060)\n\t\t- utils.makeRefundFee(_pid,newRewardBase) (StrategyMDex.sol#2063)\n\t- makeWithdrawRemoveLiquidity(_pid,withdrawLPTokenAmount) (StrategyMDex.sol#2282)\n\t\t- hecopool.withdraw(_poolId,_lpAmount) (StrategyMDex.sol#1119)\n\t\t- router.removeLiquidity(token0,token1,_withdrawLPTokenAmount,0,0,address(this),block.timestamp.add(60)) (StrategyMDex.sol#2331)\n\t- utils.makeWithdrawRewardFee(_pid,borrowRate,rewardsRate) (StrategyMDex.sol#2286)\n\t- repayBorrow(_pid,_account,_rate,_fast) (StrategyMDex.sol#2288)\n\t\t- utils.makeRepay(_pid,userInfo[_pid][_account].borrowFrom,_account,_rate,_fast) (StrategyMDex.sol#2335)\n\tEvent emitted after the call(s):\n\t- StrategyWithdraw(address(this),_pid,_account,withdrawLPTokenAmount) (StrategyMDex.sol#2300)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyMDex",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "deposit",
            "impact": "Low",
            "line": 2101,
            "line_end": 2164,
            "message": "Reentrancy in StrategyMDex.deposit(uint256,address,address,uint256,uint256,uint256) (StrategyMDex.sol#2101-2164):\n\tExternal calls:\n\t- updatePool(_pid) (StrategyMDex.sol#2116)\n\t\t- hecopool.deposit(_poolId,_lpAmount) (StrategyMDex.sol#1115)\n\t\t- hecopool.deposit(_poolId,0) (StrategyMDex.sol#1124)\n\t\t- router.addLiquidity(poolInfo[_pid].collateralToken[0],poolInfo[_pid].collateralToken[1],_amount0,_amount1,0,0,address(this),block.timestamp.add(60)) (StrategyMDex.sol#2232-2234)\n\t\t- actionPool.onAcionUpdate(_pid) (StrategyMDex.sol#2041)\n\t\t- utils.getTokenIn(token1,swapAmt,token0) (StrategyMDex.sol#2206)\n\t\t- utils.getTokenIn(token0,swapAmt,token1) (StrategyMDex.sol#2210)\n\t\t- newRewardBase = utils.getTokenIn(rewardToken,newRewards,pool.baseToken) (StrategyMDex.sol#2060)\n\t\t- utils.makeRefundFee(_pid,newRewardBase) (StrategyMDex.sol#2063)\n\t- utils.makeDepositFee(_pid) (StrategyMDex.sol#2121)\n\t- makeBorrowBaseToken(_pid,_account,user.borrowFrom,_bAmount) (StrategyMDex.sol#2124)\n\t\t- bid = ITenBankHall(bank).makeBorrowFrom(_pid,_account,_borrowFrom,_bAmount) (StrategyMDex.sol#2175)\n\t- makeBalanceOptimalLiquidity(_pid) (StrategyMDex.sol#2127)\n\t\t- utils.getTokenIn(token1,swapAmt,token0) (StrategyMDex.sol#2206)\n\t\t- utils.getTokenIn(token0,swapAmt,token1) (StrategyMDex.sol#2210)\n\t- lpAmount = makeLiquidityAndDeposit(_pid) (StrategyMDex.sol#2130)\n\t\t- hecopool.deposit(_poolId,_lpAmount) (StrategyMDex.sol#1115)\n\t\t- router.addLiquidity(poolInfo[_pid].collateralToken[0],poolInfo[_pid].collateralToken[1],_amount0,_amount1,0,0,address(this),block.timestamp.add(60)) (StrategyMDex.sol#2232-2234)\n\t- utils.transferFromAllToken(address(this),_account,token0,token1) (StrategyMDex.sol#2139)\n\tEvent emitted after the call(s):\n\t- StrategyDeposit(address(this),_pid,_account,lpAmount,_bAmount) (StrategyMDex.sol#2159)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyMDex",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "makeBorrowBaseToken",
            "impact": "Low",
            "line": 2166,
            "line_end": 2183,
            "message": "Reentrancy in StrategyMDex.makeBorrowBaseToken(uint256,address,address,uint256) (StrategyMDex.sol#2166-2183):\n\tExternal calls:\n\t- bid = ITenBankHall(bank).makeBorrowFrom(_pid,_account,_borrowFrom,_bAmount) (StrategyMDex.sol#2175)\n\tEvent emitted after the call(s):\n\t- StrategyBorrow(address(this),_pid,_account,_bAmount) (StrategyMDex.sol#2177)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyMDex",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "depositLPToken",
            "impact": "Low",
            "line": 2085,
            "line_end": 2099,
            "message": "Reentrancy in StrategyMDex.depositLPToken(uint256,address,address,uint256,uint256,uint256) (StrategyMDex.sol#2085-2099):\n\tExternal calls:\n\t- router.removeLiquidity(token0,token1,withdrawLPAmount,0,0,address(this),block.timestamp.add(60)) (StrategyMDex.sol#2095)\n\t- lpAmount = deposit(_pid,_account,_borrowFrom,_bAmount,_desirePrice,_slippage) (StrategyMDex.sol#2098)\n\t\t- hecopool.deposit(_poolId,_lpAmount) (StrategyMDex.sol#1115)\n\t\t- hecopool.deposit(_poolId,0) (StrategyMDex.sol#1124)\n\t\t- router.addLiquidity(poolInfo[_pid].collateralToken[0],poolInfo[_pid].collateralToken[1],_amount0,_amount1,0,0,address(this),block.timestamp.add(60)) (StrategyMDex.sol#2232-2234)\n\t\t- bid = ITenBankHall(bank).makeBorrowFrom(_pid,_account,_borrowFrom,_bAmount) (StrategyMDex.sol#2175)\n\t\t- actionPool.onAcionUpdate(_pid) (StrategyMDex.sol#2041)\n\t\t- utils.makeDepositFee(_pid) (StrategyMDex.sol#2121)\n\t\t- utils.getTokenIn(token1,swapAmt,token0) (StrategyMDex.sol#2206)\n\t\t- utils.transferFromAllToken(address(this),_account,token0,token1) (StrategyMDex.sol#2139)\n\t\t- utils.getTokenIn(token0,swapAmt,token1) (StrategyMDex.sol#2210)\n\t\t- newRewardBase = utils.getTokenIn(rewardToken,newRewards,pool.baseToken) (StrategyMDex.sol#2060)\n\t\t- utils.makeRefundFee(_pid,newRewardBase) (StrategyMDex.sol#2063)\n\t\t- actionPool.onAcionIn(_pid,_account,lpAmountOld,user.lpAmount) (StrategyMDex.sol#2162)\n\tEvent emitted after the call(s):\n\t- StrategyBorrow(address(this),_pid,_account,_bAmount) (StrategyMDex.sol#2177)\n\t\t- lpAmount = deposit(_pid,_account,_borrowFrom,_bAmount,_desirePrice,_slippage) (StrategyMDex.sol#2098)\n\t- StrategyDeposit(address(this),_pid,_account,lpAmount,_bAmount) (StrategyMDex.sol#2159)\n\t\t- lpAmount = deposit(_pid,_account,_borrowFrom,_bAmount,_desirePrice,_slippage) (StrategyMDex.sol#2098)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StrategyUtils",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/SlowMist-Booster-Protocol_\u667a\u80fd\u5b89\u5168\u5ba1\u8ba1\u62a5\u544a/boosterProtocol-946b15629c410d706856584f3aa04001d6a55bd2/contracts/strategies/StrategyMDex.sol",
            "function": "getTokenInTo",
            "impact": "Low",
            "line": 1819,
            "line_end": 1838,
            "message": "StrategyUtils.getTokenInTo(address,address,uint256,address) (StrategyMDex.sol#1819-1838) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- result.length == 0 (StrategyMDex.sol#1833)\n",
            "name": "timestamp",
            "check": "FP"
        }
    ],
    "infos": [],
    "parser": {
        "id": "slither-0.10.0",
        "mode": "solidity",
        "version": "2024/04/30"
    }
}