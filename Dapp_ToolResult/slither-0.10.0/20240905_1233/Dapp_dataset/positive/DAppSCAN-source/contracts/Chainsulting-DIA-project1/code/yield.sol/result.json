{
    "errors": [],
    "fails": [],
    "findings": [
        {
            "confidence": "Medium",
            "contract": "DIACompanyLockup",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Chainsulting-DIA-project1/code/yield.sol",
            "function": "allocatePremium",
            "impact": "Medium",
            "line": 669,
            "line_end": 674,
            "message": "Reentrancy in DIACompanyLockup.allocatePremium(uint256,uint256) (yield.sol#669-674):\n\tExternal calls:\n\t- require(bool)(token.transferFrom(kickerWallet,address(this),premiumAmount)) (yield.sol#672)\n\tState variables written after the call(s):\n\t- l.balance += premiumAmount (yield.sol#673)\n\tDIACompanyLockup.lockBoxStructs (yield.sol#555) can be used in cross function reentrancies:\n\t- DIACompanyLockup.allocatePremium(uint256,uint256) (yield.sol#669-674)\n\t- DIACompanyLockup.deposit(address,uint256,uint256) (yield.sol#588-619)\n\t- DIACompanyLockup.getLockBoxBeneficiary(uint256) (yield.sol#571-573)\n\t- DIACompanyLockup.lockBoxStructs (yield.sol#555)\n\t- DIACompanyLockup.triggerWithdrawAll() (yield.sol#638-645)\n\t- DIACompanyLockup.updateBeneficiary(uint256,address) (yield.sol#622-626)\n\t- DIACompanyLockup.withdraw(uint256) (yield.sol#628-635)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "DIACompanyLockup",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Chainsulting-DIA-project1/code/yield.sol",
            "function": "updateYields",
            "impact": "Low",
            "line": 662,
            "line_end": 666,
            "message": "DIACompanyLockup.updateYields(uint256,uint256,uint256) (yield.sol#662-666) should emit an event for: \n\t- threeMonthPromille = threeMonths (yield.sol#663) \n\t- sixMonthPromille = sixMonths (yield.sol#664) \n\t- nineMonthPromille = nineMonths (yield.sol#665) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "DIACompanyLockup",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Chainsulting-DIA-project1/code/yield.sol",
            "function": "updateKicker",
            "impact": "Low",
            "line": 656,
            "line_end": 660,
            "message": "DIACompanyLockup.updateKicker(address,uint256,uint256) (yield.sol#656-660) should emit an event for: \n\t- kickerPromille = newPromille (yield.sol#658) \n\t- kickerDeadline = newDeadline (yield.sol#659) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "DIACompanyLockup",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Chainsulting-DIA-project1/code/yield.sol",
            "function": "updateEndDepositTime",
            "impact": "Low",
            "line": 648,
            "line_end": 650,
            "message": "DIACompanyLockup.updateEndDepositTime(uint256) (yield.sol#648-650) should emit an event for: \n\t- endDepositTime = newEndTime (yield.sol#649) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "DIACompanyLockup",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Chainsulting-DIA-project1/code/yield.sol",
            "function": "withdraw",
            "impact": "Low",
            "line": 628,
            "line_end": 635,
            "message": "DIACompanyLockup.withdraw(uint256) (yield.sol#628-635) has external calls inside a loop: require(bool)(token.transfer(l.beneficiary,amount)) (yield.sol#634)\n",
            "name": "calls-loop",
            "check": "TP"
        },
        {
            "confidence": "Medium",
            "contract": "DIACompanyLockup",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Chainsulting-DIA-project1/code/yield.sol",
            "function": "deposit",
            "impact": "Low",
            "line": 588,
            "line_end": 619,
            "message": "Reentrancy in DIACompanyLockup.deposit(address,uint256,uint256) (yield.sol#588-619):\n\tExternal calls:\n\t- require(bool)(token.transferFrom(yieldWallet,address(this),yieldAmount)) (yield.sol#601)\n\t- require(bool)(token.transferFrom(kickerWallet,address(this),kickerAmount)) (yield.sol#606)\n\t- require(bool)(token.transferFrom(msg.sender,address(this),amount)) (yield.sol#610)\n\tState variables written after the call(s):\n\t- lockBoxStructs.push(l) (yield.sol#617)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "DIACompanyLockup",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Chainsulting-DIA-project1/code/yield.sol",
            "function": "deposit",
            "impact": "Low",
            "line": 588,
            "line_end": 619,
            "message": "Reentrancy in DIACompanyLockup.deposit(address,uint256,uint256) (yield.sol#588-619):\n\tExternal calls:\n\t- require(bool)(token.transferFrom(yieldWallet,address(this),yieldAmount)) (yield.sol#601)\n\t- require(bool)(token.transferFrom(kickerWallet,address(this),kickerAmount)) (yield.sol#606)\n\t- require(bool)(token.transferFrom(msg.sender,address(this),amount)) (yield.sol#610)\n\tEvent emitted after the call(s):\n\t- LogLockupDeposit(msg.sender,l.beneficiary,l.balance,l.releaseTime) (yield.sol#618)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "DIACompanyLockup",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Chainsulting-DIA-project1/code/yield.sol",
            "function": "withdraw",
            "impact": "Low",
            "line": 628,
            "line_end": 635,
            "message": "DIACompanyLockup.withdraw(uint256) (yield.sol#628-635) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(l.releaseTime <= now) (yield.sol#630)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "DIACompanyLockup",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Chainsulting-DIA-project1/code/yield.sol",
            "function": "triggerWithdrawAll",
            "impact": "Low",
            "line": 638,
            "line_end": 645,
            "message": "DIACompanyLockup.triggerWithdrawAll() (yield.sol#638-645) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- lockBoxStructs[i].releaseTime <= now && lockBoxStructs[i].balance > 0 (yield.sol#641)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "DIACompanyLockup",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Chainsulting-DIA-project1/code/yield.sol",
            "function": "allocatePremium",
            "impact": "Low",
            "line": 669,
            "line_end": 674,
            "message": "DIACompanyLockup.allocatePremium(uint256,uint256) (yield.sol#669-674) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(l.releaseTime <= now) (yield.sol#671)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "DIACompanyLockup",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Chainsulting-DIA-project1/code/yield.sol",
            "function": "deposit",
            "impact": "Low",
            "line": 588,
            "line_end": 619,
            "message": "DIACompanyLockup.deposit(address,uint256,uint256) (yield.sol#588-619) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(now < endDepositTime,Deposit time has ended.) (yield.sol#589)\n\t- now <= kickerDeadline (yield.sol#605)\n",
            "name": "timestamp",
            "check": "FP"
        }
    ],
    "infos": [],
    "parser": {
        "id": "slither-0.10.0",
        "mode": "solidity",
        "version": "2024/04/30"
    }
}