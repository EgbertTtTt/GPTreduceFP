'solc --version' running
'solc /sb/CCollateralCapErc20.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/sb' running

EIP20NonStandardInterface (../../sb/CCollateralCapErc20.sol#1239-1301) has incorrect ERC20 function interface:EIP20NonStandardInterface.transfer(address,uint256) (../../sb/CCollateralCapErc20.sol#1265)
EIP20NonStandardInterface (../../sb/CCollateralCapErc20.sol#1239-1301) has incorrect ERC20 function interface:EIP20NonStandardInterface.transferFrom(address,address,uint256) (../../sb/CCollateralCapErc20.sol#1279)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-erc20-interface

CToken.accrueInterest() (../../sb/CCollateralCapErc20.sol#1600-1652) uses a dangerous strict equality:
	- accrualBlockNumberPrior == currentBlockNumber (../../sb/CCollateralCapErc20.sol#1606)
CCollateralCapErc20.decreaseUserCollateralInternal(address,uint256) (../../sb/CCollateralCapErc20.sol#2985-2992) uses a dangerous strict equality:
	- require(bool,string)(comptroller.redeemAllowed(address(this),account,amount) == 0,comptroller rejection) (../../sb/CCollateralCapErc20.sol#2986)
CToken.exchangeRateStoredInternal() (../../sb/CCollateralCapErc20.sol#1567-1585) uses a dangerous strict equality:
	- _totalSupply == 0 (../../sb/CCollateralCapErc20.sol#1569)
CCollateralCapErc20.flashLoan(address,uint256,bytes) (../../sb/CCollateralCapErc20.sol#2690-2714) uses a dangerous strict equality:
	- require(bool,string)(cashOnChainAfter == add_(cashOnChainBefore,totalFee),BALANCE_INCONSISTENT) (../../sb/CCollateralCapErc20.sol#2706)
CToken.initialize(ComptrollerInterface,InterestRateModel,uint256,string,string,uint8) (../../sb/CCollateralCapErc20.sol#1318-1349) uses a dangerous strict equality:
	- require(bool,string)(accrualBlockNumber == 0 && borrowIndex == 0,market may only be initialized once) (../../sb/CCollateralCapErc20.sol#1325)
CToken.initialize(ComptrollerInterface,InterestRateModel,uint256,string,string,uint8) (../../sb/CCollateralCapErc20.sol#1318-1349) uses a dangerous strict equality:
	- require(bool,string)(err == uint256(Error.NO_ERROR),setting comptroller failed) (../../sb/CCollateralCapErc20.sol#1333)
CToken.initialize(ComptrollerInterface,InterestRateModel,uint256,string,string,uint8) (../../sb/CCollateralCapErc20.sol#1318-1349) uses a dangerous strict equality:
	- require(bool,string)(err == uint256(Error.NO_ERROR),setting interest rate model failed) (../../sb/CCollateralCapErc20.sol#1341)
CToken.liquidateBorrowFresh(address,address,uint256,CTokenInterface) (../../sb/CCollateralCapErc20.sol#1930-1999) uses a dangerous strict equality:
	- require(bool,string)(amountSeizeError == uint256(Error.NO_ERROR),LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED) (../../sb/CCollateralCapErc20.sol#1975)
CToken.liquidateBorrowFresh(address,address,uint256,CTokenInterface) (../../sb/CCollateralCapErc20.sol#1930-1999) uses a dangerous strict equality:
	- require(bool,string)(seizeError == uint256(Error.NO_ERROR),token seizure failed) (../../sb/CCollateralCapErc20.sol#1989)
Exponential.mulExp(Exponential.Exp,Exponential.Exp) (../../sb/CCollateralCapErc20.sol#928-948) uses a dangerous strict equality:
	- assert(bool)(err2 == MathError.NO_ERROR) (../../sb/CCollateralCapErc20.sol#945)
CarefulMath.mulUInt(uint256,uint256) (../../sb/CCollateralCapErc20.sol#683-695) uses a dangerous strict equality:
	- a == 0 (../../sb/CCollateralCapErc20.sol#684)
Exponential.mul_(uint256,uint256,string) (../../sb/CCollateralCapErc20.sol#1080-1087) uses a dangerous strict equality:
	- a == 0 || b == 0 (../../sb/CCollateralCapErc20.sol#1081)
Exponential.mul_(uint256,uint256,string) (../../sb/CCollateralCapErc20.sol#1080-1087) uses a dangerous strict equality:
	- require(bool,string)(c / a == b,errorMessage) (../../sb/CCollateralCapErc20.sol#1085)
CToken.transfer(address,uint256) (../../sb/CCollateralCapErc20.sol#1357-1359) uses a dangerous strict equality:
	- transferTokens(msg.sender,msg.sender,dst,amount) == uint256(Error.NO_ERROR) (../../sb/CCollateralCapErc20.sol#1358)
CToken.transferFrom(address,address,uint256) (../../sb/CCollateralCapErc20.sol#1368-1370) uses a dangerous strict equality:
	- transferTokens(msg.sender,src,dst,amount) == uint256(Error.NO_ERROR) (../../sb/CCollateralCapErc20.sol#1369)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities

Reentrancy in CCollateralCapErc20.flashLoan(address,uint256,bytes) (../../sb/CCollateralCapErc20.sol#2690-2714):
	External calls:
	- doTransferOut(address(uint160(receiver)),amount) (../../sb/CCollateralCapErc20.sol#2699)
		- token.transfer(to,amount) (../../sb/CCollateralCapErc20.sol#2840)
	- IFlashloanReceiver(receiver).executeOperation(msg.sender,underlying,amount,totalFee,params) (../../sb/CCollateralCapErc20.sol#2702)
	State variables written after the call(s):
	- internalCash = add_(cashBefore,totalFee) (../../sb/CCollateralCapErc20.sol#2711)
	CSupplyCapStorage.internalCash (../../sb/CCollateralCapErc20.sol#232) can be used in cross function reentrancies:
	- CCollateralCapErc20.doTransferIn(address,uint256) (../../sb/CCollateralCapErc20.sol#2801-2827)
	- CCollateralCapErc20.doTransferOut(address,uint256) (../../sb/CCollateralCapErc20.sol#2838-2858)
	- CCollateralCapErc20.getCashPrior() (../../sb/CCollateralCapErc20.sol#2754-2756)
	- CSupplyCapStorage.internalCash (../../sb/CCollateralCapErc20.sol#232)
Reentrancy in CToken.liquidateBorrowInternal(address,uint256,CTokenInterface) (../../sb/CCollateralCapErc20.sol#1904-1919):
	External calls:
	- error = cTokenCollateral.accrueInterest() (../../sb/CCollateralCapErc20.sol#1911)
	- liquidateBorrowFresh(msg.sender,borrower,repayAmount,cTokenCollateral) (../../sb/CCollateralCapErc20.sol#1918)
		- allowed = comptroller.repayBorrowAllowed(address(this),payer,borrower,repayAmount) (../../sb/CCollateralCapErc20.sol#1835)
		- allowed = comptroller.liquidateBorrowAllowed(address(this),address(cTokenCollateral),liquidator,borrower,repayAmount) (../../sb/CCollateralCapErc20.sol#1932)
		- seizeError = cTokenCollateral.seize(liquidator,borrower,seizeTokens) (../../sb/CCollateralCapErc20.sol#1985)
	State variables written after the call(s):
	- liquidateBorrowFresh(msg.sender,borrower,repayAmount,cTokenCollateral) (../../sb/CCollateralCapErc20.sol#1918)
		- totalBorrows = vars.totalBorrowsNew (../../sb/CCollateralCapErc20.sol#1884)
	CTokenStorage.totalBorrows (../../sb/CCollateralCapErc20.sol#178) can be used in cross function reentrancies:
	- CToken.accrueInterest() (../../sb/CCollateralCapErc20.sol#1600-1652)
	- CToken.borrowRatePerBlock() (../../sb/CCollateralCapErc20.sol#1443-1445)
	- CToken.estimateBorrowRatePerBlockAfterChange(uint256,bool) (../../sb/CCollateralCapErc20.sol#1459-1471)
	- CToken.estimateSupplyRatePerBlockAfterChange(uint256,bool) (../../sb/CCollateralCapErc20.sol#1477-1490)
	- CToken.exchangeRateStoredInternal() (../../sb/CCollateralCapErc20.sol#1567-1585)
	- CToken.supplyRatePerBlock() (../../sb/CCollateralCapErc20.sol#1451-1453)
	- CTokenStorage.totalBorrows (../../sb/CCollateralCapErc20.sol#178)
Reentrancy in CCollateralCapErc20.mintFresh(address,uint256) (../../sb/CCollateralCapErc20.sol#3007-3070):
	External calls:
	- allowed = comptroller.mintAllowed(address(this),minter,mintAmount) (../../sb/CCollateralCapErc20.sol#3012)
	- vars.actualMintAmount = doTransferIn(minter,mintAmount) (../../sb/CCollateralCapErc20.sol#3038)
		- token.transferFrom(from,address(this),amount) (../../sb/CCollateralCapErc20.sol#2804)
	State variables written after the call(s):
	- increaseUserCollateralInternal(minter,vars.mintTokens) (../../sb/CCollateralCapErc20.sol#3058)
		- accountCollateralTokens[account] = add_(accountCollateralTokens[account],amount) (../../sb/CCollateralCapErc20.sol#2963)
		- accountCollateralTokens[account] = add_(accountCollateralTokens[account],gap) (../../sb/CCollateralCapErc20.sol#2972)
	CCollateralCapStorage.accountCollateralTokens (../../sb/CCollateralCapErc20.sol#245) can be used in cross function reentrancies:
	- CCollateralCapStorage.accountCollateralTokens (../../sb/CCollateralCapErc20.sol#245)
	- CCollateralCapErc20.decreaseUserCollateralInternal(address,uint256) (../../sb/CCollateralCapErc20.sol#2985-2992)
	- CCollateralCapErc20.getCTokenBalanceInternal(address) (../../sb/CCollateralCapErc20.sol#2939-2948)
	- CCollateralCapErc20.increaseUserCollateralInternal(address,uint256) (../../sb/CCollateralCapErc20.sol#2956-2978)
	- CCollateralCapErc20.initializeAccountCollateralTokens(address) (../../sb/CCollateralCapErc20.sol#2773-2790)
	- CCollateralCapErc20.redeemFresh(address,uint256,uint256) (../../sb/CCollateralCapErc20.sol#3086-3173)
	- CCollateralCapErc20.registerCollateral(address) (../../sb/CCollateralCapErc20.sol#2722-2730)
	- CCollateralCapErc20.seizeInternal(address,address,address,uint256) (../../sb/CCollateralCapErc20.sol#3185-3223)
	- CCollateralCapErc20.unregisterCollateral(address) (../../sb/CCollateralCapErc20.sol#2737-2744)
	- accountTokens[minter] = add_(accountTokens[minter],vars.mintTokens) (../../sb/CCollateralCapErc20.sol#3052)
	CTokenStorage.accountTokens (../../sb/CCollateralCapErc20.sol#193) can be used in cross function reentrancies:
	- CToken.balanceOf(address) (../../sb/CCollateralCapErc20.sol#1402-1404)
	- CToken.balanceOfUnderlying(address) (../../sb/CCollateralCapErc20.sol#1412-1415)
	- CCollateralCapErc20.getCTokenBalanceInternal(address) (../../sb/CCollateralCapErc20.sol#2939-2948)
	- CCollateralCapErc20.initializeAccountCollateralTokens(address) (../../sb/CCollateralCapErc20.sol#2773-2790)
	- CCollateralCapErc20.mintFresh(address,uint256) (../../sb/CCollateralCapErc20.sol#3007-3070)
	- CCollateralCapErc20.redeemFresh(address,uint256,uint256) (../../sb/CCollateralCapErc20.sol#3086-3173)
	- CCollateralCapErc20.registerCollateral(address) (../../sb/CCollateralCapErc20.sol#2722-2730)
	- CCollateralCapErc20.seizeInternal(address,address,address,uint256) (../../sb/CCollateralCapErc20.sol#3185-3223)
	- increaseUserCollateralInternal(minter,vars.mintTokens) (../../sb/CCollateralCapErc20.sol#3058)
		- totalCollateralTokens = totalCollateralTokensNew (../../sb/CCollateralCapErc20.sol#2962)
		- totalCollateralTokens = add_(totalCollateralTokens,gap) (../../sb/CCollateralCapErc20.sol#2971)
	CCollateralCapStorage.totalCollateralTokens (../../sb/CCollateralCapErc20.sol#239) can be used in cross function reentrancies:
	- CCollateralCapErc20.decreaseUserCollateralInternal(address,uint256) (../../sb/CCollateralCapErc20.sol#2985-2992)
	- CCollateralCapErc20.increaseUserCollateralInternal(address,uint256) (../../sb/CCollateralCapErc20.sol#2956-2978)
	- CCollateralCapErc20.initializeAccountCollateralTokens(address) (../../sb/CCollateralCapErc20.sol#2773-2790)
	- CCollateralCapStorage.totalCollateralTokens (../../sb/CCollateralCapErc20.sol#239)
	- totalSupply = add_(totalSupply,vars.mintTokens) (../../sb/CCollateralCapErc20.sol#3051)
	CTokenStorage.totalSupply (../../sb/CCollateralCapErc20.sol#188) can be used in cross function reentrancies:
	- CToken.exchangeRateStoredInternal() (../../sb/CCollateralCapErc20.sol#1567-1585)
	- CCollateralCapErc20.mintFresh(address,uint256) (../../sb/CCollateralCapErc20.sol#3007-3070)
	- CCollateralCapErc20.redeemFresh(address,uint256,uint256) (../../sb/CCollateralCapErc20.sol#3086-3173)
	- CTokenStorage.totalSupply (../../sb/CCollateralCapErc20.sol#188)
Reentrancy in CCollateralCapErc20.redeemFresh(address,uint256,uint256) (../../sb/CCollateralCapErc20.sol#3086-3173):
	External calls:
	- doTransferOut(redeemer,vars.redeemAmount) (../../sb/CCollateralCapErc20.sol#3148)
		- token.transfer(to,amount) (../../sb/CCollateralCapErc20.sol#2840)
	State variables written after the call(s):
	- accountTokens[redeemer] = sub_(accountTokens[redeemer],vars.redeemTokens) (../../sb/CCollateralCapErc20.sol#3156)
	CTokenStorage.accountTokens (../../sb/CCollateralCapErc20.sol#193) can be used in cross function reentrancies:
	- CToken.balanceOf(address) (../../sb/CCollateralCapErc20.sol#1402-1404)
	- CToken.balanceOfUnderlying(address) (../../sb/CCollateralCapErc20.sol#1412-1415)
	- CCollateralCapErc20.getCTokenBalanceInternal(address) (../../sb/CCollateralCapErc20.sol#2939-2948)
	- CCollateralCapErc20.initializeAccountCollateralTokens(address) (../../sb/CCollateralCapErc20.sol#2773-2790)
	- CCollateralCapErc20.mintFresh(address,uint256) (../../sb/CCollateralCapErc20.sol#3007-3070)
	- CCollateralCapErc20.redeemFresh(address,uint256,uint256) (../../sb/CCollateralCapErc20.sol#3086-3173)
	- CCollateralCapErc20.registerCollateral(address) (../../sb/CCollateralCapErc20.sol#2722-2730)
	- CCollateralCapErc20.seizeInternal(address,address,address,uint256) (../../sb/CCollateralCapErc20.sol#3185-3223)
	- totalSupply = sub_(totalSupply,vars.redeemTokens) (../../sb/CCollateralCapErc20.sol#3155)
	CTokenStorage.totalSupply (../../sb/CCollateralCapErc20.sol#188) can be used in cross function reentrancies:
	- CToken.exchangeRateStoredInternal() (../../sb/CCollateralCapErc20.sol#1567-1585)
	- CCollateralCapErc20.mintFresh(address,uint256) (../../sb/CCollateralCapErc20.sol#3007-3070)
	- CCollateralCapErc20.redeemFresh(address,uint256,uint256) (../../sb/CCollateralCapErc20.sol#3086-3173)
	- CTokenStorage.totalSupply (../../sb/CCollateralCapErc20.sol#188)
Reentrancy in CCollateralCapErc20.redeemFresh(address,uint256,uint256) (../../sb/CCollateralCapErc20.sol#3086-3173):
	External calls:
	- doTransferOut(redeemer,vars.redeemAmount) (../../sb/CCollateralCapErc20.sol#3148)
		- token.transfer(to,amount) (../../sb/CCollateralCapErc20.sol#2840)
	- decreaseUserCollateralInternal(redeemer,collateralTokens) (../../sb/CCollateralCapErc20.sol#3162)
		- require(bool,string)(comptroller.redeemAllowed(address(this),account,amount) == 0,comptroller rejection) (../../sb/CCollateralCapErc20.sol#2986)
	State variables written after the call(s):
	- decreaseUserCollateralInternal(redeemer,collateralTokens) (../../sb/CCollateralCapErc20.sol#3162)
		- accountCollateralTokens[account] = sub_(accountCollateralTokens[account],amount) (../../sb/CCollateralCapErc20.sol#2989)
	CCollateralCapStorage.accountCollateralTokens (../../sb/CCollateralCapErc20.sol#245) can be used in cross function reentrancies:
	- CCollateralCapStorage.accountCollateralTokens (../../sb/CCollateralCapErc20.sol#245)
	- CCollateralCapErc20.decreaseUserCollateralInternal(address,uint256) (../../sb/CCollateralCapErc20.sol#2985-2992)
	- CCollateralCapErc20.getCTokenBalanceInternal(address) (../../sb/CCollateralCapErc20.sol#2939-2948)
	- CCollateralCapErc20.increaseUserCollateralInternal(address,uint256) (../../sb/CCollateralCapErc20.sol#2956-2978)
	- CCollateralCapErc20.initializeAccountCollateralTokens(address) (../../sb/CCollateralCapErc20.sol#2773-2790)
	- CCollateralCapErc20.redeemFresh(address,uint256,uint256) (../../sb/CCollateralCapErc20.sol#3086-3173)
	- CCollateralCapErc20.registerCollateral(address) (../../sb/CCollateralCapErc20.sol#2722-2730)
	- CCollateralCapErc20.seizeInternal(address,address,address,uint256) (../../sb/CCollateralCapErc20.sol#3185-3223)
	- CCollateralCapErc20.unregisterCollateral(address) (../../sb/CCollateralCapErc20.sol#2737-2744)
	- decreaseUserCollateralInternal(redeemer,collateralTokens) (../../sb/CCollateralCapErc20.sol#3162)
		- totalCollateralTokens = sub_(totalCollateralTokens,amount) (../../sb/CCollateralCapErc20.sol#2988)
	CCollateralCapStorage.totalCollateralTokens (../../sb/CCollateralCapErc20.sol#239) can be used in cross function reentrancies:
	- CCollateralCapErc20.decreaseUserCollateralInternal(address,uint256) (../../sb/CCollateralCapErc20.sol#2985-2992)
	- CCollateralCapErc20.increaseUserCollateralInternal(address,uint256) (../../sb/CCollateralCapErc20.sol#2956-2978)
	- CCollateralCapErc20.initializeAccountCollateralTokens(address) (../../sb/CCollateralCapErc20.sol#2773-2790)
	- CCollateralCapStorage.totalCollateralTokens (../../sb/CCollateralCapErc20.sol#239)
Reentrancy in CCollateralCapErc20.seizeInternal(address,address,address,uint256) (../../sb/CCollateralCapErc20.sol#3185-3223):
	External calls:
	- allowed = comptroller.seizeAllowed(address(this),seizerToken,liquidator,borrower,seizeTokens) (../../sb/CCollateralCapErc20.sol#3191)
	State variables written after the call(s):
	- accountCollateralTokens[borrower] = sub_(accountCollateralTokens[borrower],seizeTokens) (../../sb/CCollateralCapErc20.sol#3210)
	CCollateralCapStorage.accountCollateralTokens (../../sb/CCollateralCapErc20.sol#245) can be used in cross function reentrancies:
	- CCollateralCapStorage.accountCollateralTokens (../../sb/CCollateralCapErc20.sol#245)
	- CCollateralCapErc20.decreaseUserCollateralInternal(address,uint256) (../../sb/CCollateralCapErc20.sol#2985-2992)
	- CCollateralCapErc20.getCTokenBalanceInternal(address) (../../sb/CCollateralCapErc20.sol#2939-2948)
	- CCollateralCapErc20.increaseUserCollateralInternal(address,uint256) (../../sb/CCollateralCapErc20.sol#2956-2978)
	- CCollateralCapErc20.initializeAccountCollateralTokens(address) (../../sb/CCollateralCapErc20.sol#2773-2790)
	- CCollateralCapErc20.redeemFresh(address,uint256,uint256) (../../sb/CCollateralCapErc20.sol#3086-3173)
	- CCollateralCapErc20.registerCollateral(address) (../../sb/CCollateralCapErc20.sol#2722-2730)
	- CCollateralCapErc20.seizeInternal(address,address,address,uint256) (../../sb/CCollateralCapErc20.sol#3185-3223)
	- CCollateralCapErc20.unregisterCollateral(address) (../../sb/CCollateralCapErc20.sol#2737-2744)
	- accountCollateralTokens[liquidator] = add_(accountCollateralTokens[liquidator],seizeTokens) (../../sb/CCollateralCapErc20.sol#3211)
	CCollateralCapStorage.accountCollateralTokens (../../sb/CCollateralCapErc20.sol#245) can be used in cross function reentrancies:
	- CCollateralCapStorage.accountCollateralTokens (../../sb/CCollateralCapErc20.sol#245)
	- CCollateralCapErc20.decreaseUserCollateralInternal(address,uint256) (../../sb/CCollateralCapErc20.sol#2985-2992)
	- CCollateralCapErc20.getCTokenBalanceInternal(address) (../../sb/CCollateralCapErc20.sol#2939-2948)
	- CCollateralCapErc20.increaseUserCollateralInternal(address,uint256) (../../sb/CCollateralCapErc20.sol#2956-2978)
	- CCollateralCapErc20.initializeAccountCollateralTokens(address) (../../sb/CCollateralCapErc20.sol#2773-2790)
	- CCollateralCapErc20.redeemFresh(address,uint256,uint256) (../../sb/CCollateralCapErc20.sol#3086-3173)
	- CCollateralCapErc20.registerCollateral(address) (../../sb/CCollateralCapErc20.sol#2722-2730)
	- CCollateralCapErc20.seizeInternal(address,address,address,uint256) (../../sb/CCollateralCapErc20.sol#3185-3223)
	- CCollateralCapErc20.unregisterCollateral(address) (../../sb/CCollateralCapErc20.sol#2737-2744)
	- accountTokens[borrower] = sub_(accountTokens[borrower],seizeTokens) (../../sb/CCollateralCapErc20.sol#3208)
	CTokenStorage.accountTokens (../../sb/CCollateralCapErc20.sol#193) can be used in cross function reentrancies:
	- CToken.balanceOf(address) (../../sb/CCollateralCapErc20.sol#1402-1404)
	- CToken.balanceOfUnderlying(address) (../../sb/CCollateralCapErc20.sol#1412-1415)
	- CCollateralCapErc20.getCTokenBalanceInternal(address) (../../sb/CCollateralCapErc20.sol#2939-2948)
	- CCollateralCapErc20.initializeAccountCollateralTokens(address) (../../sb/CCollateralCapErc20.sol#2773-2790)
	- CCollateralCapErc20.mintFresh(address,uint256) (../../sb/CCollateralCapErc20.sol#3007-3070)
	- CCollateralCapErc20.redeemFresh(address,uint256,uint256) (../../sb/CCollateralCapErc20.sol#3086-3173)
	- CCollateralCapErc20.registerCollateral(address) (../../sb/CCollateralCapErc20.sol#2722-2730)
	- CCollateralCapErc20.seizeInternal(address,address,address,uint256) (../../sb/CCollateralCapErc20.sol#3185-3223)
	- accountTokens[liquidator] = add_(accountTokens[liquidator],seizeTokens) (../../sb/CCollateralCapErc20.sol#3209)
	CTokenStorage.accountTokens (../../sb/CCollateralCapErc20.sol#193) can be used in cross function reentrancies:
	- CToken.balanceOf(address) (../../sb/CCollateralCapErc20.sol#1402-1404)
	- CToken.balanceOfUnderlying(address) (../../sb/CCollateralCapErc20.sol#1412-1415)
	- CCollateralCapErc20.getCTokenBalanceInternal(address) (../../sb/CCollateralCapErc20.sol#2939-2948)
	- CCollateralCapErc20.initializeAccountCollateralTokens(address) (../../sb/CCollateralCapErc20.sol#2773-2790)
	- CCollateralCapErc20.mintFresh(address,uint256) (../../sb/CCollateralCapErc20.sol#3007-3070)
	- CCollateralCapErc20.redeemFresh(address,uint256,uint256) (../../sb/CCollateralCapErc20.sol#3086-3173)
	- CCollateralCapErc20.registerCollateral(address) (../../sb/CCollateralCapErc20.sol#2722-2730)
	- CCollateralCapErc20.seizeInternal(address,address,address,uint256) (../../sb/CCollateralCapErc20.sol#3185-3223)
Reentrancy in CCollateralCapErc20.transferTokens(address,address,address,uint256) (../../sb/CCollateralCapErc20.sol#2869-2932):
	External calls:
	- allowed = comptroller.transferAllowed(address(this),src,dst,collateralTokens) (../../sb/CCollateralCapErc20.sol#2890)
	State variables written after the call(s):
	- accountCollateralTokens[src] = sub_(accountCollateralTokens[src],collateralTokens) (../../sb/CCollateralCapErc20.sol#2913)
	CCollateralCapStorage.accountCollateralTokens (../../sb/CCollateralCapErc20.sol#245) can be used in cross function reentrancies:
	- CCollateralCapStorage.accountCollateralTokens (../../sb/CCollateralCapErc20.sol#245)
	- CCollateralCapErc20.decreaseUserCollateralInternal(address,uint256) (../../sb/CCollateralCapErc20.sol#2985-2992)
	- CCollateralCapErc20.getCTokenBalanceInternal(address) (../../sb/CCollateralCapErc20.sol#2939-2948)
	- CCollateralCapErc20.increaseUserCollateralInternal(address,uint256) (../../sb/CCollateralCapErc20.sol#2956-2978)
	- CCollateralCapErc20.initializeAccountCollateralTokens(address) (../../sb/CCollateralCapErc20.sol#2773-2790)
	- CCollateralCapErc20.redeemFresh(address,uint256,uint256) (../../sb/CCollateralCapErc20.sol#3086-3173)
	- CCollateralCapErc20.registerCollateral(address) (../../sb/CCollateralCapErc20.sol#2722-2730)
	- CCollateralCapErc20.seizeInternal(address,address,address,uint256) (../../sb/CCollateralCapErc20.sol#3185-3223)
	- CCollateralCapErc20.unregisterCollateral(address) (../../sb/CCollateralCapErc20.sol#2737-2744)
	- accountCollateralTokens[dst] = add_(accountCollateralTokens[dst],collateralTokens) (../../sb/CCollateralCapErc20.sol#2914)
	CCollateralCapStorage.accountCollateralTokens (../../sb/CCollateralCapErc20.sol#245) can be used in cross function reentrancies:
	- CCollateralCapStorage.accountCollateralTokens (../../sb/CCollateralCapErc20.sol#245)
	- CCollateralCapErc20.decreaseUserCollateralInternal(address,uint256) (../../sb/CCollateralCapErc20.sol#2985-2992)
	- CCollateralCapErc20.getCTokenBalanceInternal(address) (../../sb/CCollateralCapErc20.sol#2939-2948)
	- CCollateralCapErc20.increaseUserCollateralInternal(address,uint256) (../../sb/CCollateralCapErc20.sol#2956-2978)
	- CCollateralCapErc20.initializeAccountCollateralTokens(address) (../../sb/CCollateralCapErc20.sol#2773-2790)
	- CCollateralCapErc20.redeemFresh(address,uint256,uint256) (../../sb/CCollateralCapErc20.sol#3086-3173)
	- CCollateralCapErc20.registerCollateral(address) (../../sb/CCollateralCapErc20.sol#2722-2730)
	- CCollateralCapErc20.seizeInternal(address,address,address,uint256) (../../sb/CCollateralCapErc20.sol#3185-3223)
	- CCollateralCapErc20.unregisterCollateral(address) (../../sb/CCollateralCapErc20.sol#2737-2744)
	- accountTokens[src] = sub_(accountTokens[src],tokens) (../../sb/CCollateralCapErc20.sol#2910)
	CTokenStorage.accountTokens (../../sb/CCollateralCapErc20.sol#193) can be used in cross function reentrancies:
	- CToken.balanceOf(address) (../../sb/CCollateralCapErc20.sol#1402-1404)
	- CToken.balanceOfUnderlying(address) (../../sb/CCollateralCapErc20.sol#1412-1415)
	- CCollateralCapErc20.getCTokenBalanceInternal(address) (../../sb/CCollateralCapErc20.sol#2939-2948)
	- CCollateralCapErc20.initializeAccountCollateralTokens(address) (../../sb/CCollateralCapErc20.sol#2773-2790)
	- CCollateralCapErc20.mintFresh(address,uint256) (../../sb/CCollateralCapErc20.sol#3007-3070)
	- CCollateralCapErc20.redeemFresh(address,uint256,uint256) (../../sb/CCollateralCapErc20.sol#3086-3173)
	- CCollateralCapErc20.registerCollateral(address) (../../sb/CCollateralCapErc20.sol#2722-2730)
	- CCollateralCapErc20.seizeInternal(address,address,address,uint256) (../../sb/CCollateralCapErc20.sol#3185-3223)
	- accountTokens[dst] = add_(accountTokens[dst],tokens) (../../sb/CCollateralCapErc20.sol#2911)
	CTokenStorage.accountTokens (../../sb/CCollateralCapErc20.sol#193) can be used in cross function reentrancies:
	- CToken.balanceOf(address) (../../sb/CCollateralCapErc20.sol#1402-1404)
	- CToken.balanceOfUnderlying(address) (../../sb/CCollateralCapErc20.sol#1412-1415)
	- CCollateralCapErc20.getCTokenBalanceInternal(address) (../../sb/CCollateralCapErc20.sol#2939-2948)
	- CCollateralCapErc20.initializeAccountCollateralTokens(address) (../../sb/CCollateralCapErc20.sol#2773-2790)
	- CCollateralCapErc20.mintFresh(address,uint256) (../../sb/CCollateralCapErc20.sol#3007-3070)
	- CCollateralCapErc20.redeemFresh(address,uint256,uint256) (../../sb/CCollateralCapErc20.sol#3086-3173)
	- CCollateralCapErc20.registerCollateral(address) (../../sb/CCollateralCapErc20.sol#2722-2730)
	- CCollateralCapErc20.seizeInternal(address,address,address,uint256) (../../sb/CCollateralCapErc20.sol#3185-3223)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1

CCollateralCapErc20.redeemFresh(address,uint256,uint256).vars (../../sb/CCollateralCapErc20.sol#3092) is a local variable never initialized
CCollateralCapErc20.mintFresh(address,uint256).vars (../../sb/CCollateralCapErc20.sol#3022) is a local variable never initialized
CToken.borrowFresh(address,uint256).vars (../../sb/CCollateralCapErc20.sol#1746) is a local variable never initialized
CToken.repayBorrowFresh(address,address,uint256).vars (../../sb/CCollateralCapErc20.sol#1845) is a local variable never initialized
CToken._addReservesFresh(uint256).actualAddAmount (../../sb/CCollateralCapErc20.sol#2161) is a local variable never initialized
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-local-variables

CCollateralCapErc20.initialize(address,ComptrollerInterface,InterestRateModel,uint256,string,string,uint8) (../../sb/CCollateralCapErc20.sol#2561-2574) ignores return value by EIP20Interface(underlying).totalSupply() (../../sb/CCollateralCapErc20.sol#2573)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return

Exponential.divScalarByExpTruncate(uint256,Exponential.Exp).fraction (../../sb/CCollateralCapErc20.sol#892) shadows:
	- Exponential.fraction(uint256,uint256) (../../sb/CCollateralCapErc20.sol#1122-1124) (function)
Exponential.div_ScalarByExpTruncate(uint256,Exponential.Exp).fraction (../../sb/CCollateralCapErc20.sol#921) shadows:
	- Exponential.fraction(uint256,uint256) (../../sb/CCollateralCapErc20.sol#1122-1124) (function)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing

CToken._setPendingAdmin(address).newPendingAdmin (../../sb/CCollateralCapErc20.sol#2022) lacks a zero-check on :
		- pendingAdmin = newPendingAdmin (../../sb/CCollateralCapErc20.sol#2032)
CCollateralCapErc20.initialize(address,ComptrollerInterface,InterestRateModel,uint256,string,string,uint8).underlying_ (../../sb/CCollateralCapErc20.sol#2561) lacks a zero-check on :
		- underlying = underlying_ (../../sb/CCollateralCapErc20.sol#2572)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

Reentrancy in CToken.borrowFresh(address,uint256) (../../sb/CCollateralCapErc20.sol#1729-1782):
	External calls:
	- allowed = comptroller.borrowAllowed(address(this),borrower,borrowAmount) (../../sb/CCollateralCapErc20.sol#1731)
	State variables written after the call(s):
	- accountBorrows[borrower].principal = vars.accountBorrowsNew (../../sb/CCollateralCapErc20.sol#1770)
	- accountBorrows[borrower].interestIndex = borrowIndex (../../sb/CCollateralCapErc20.sol#1771)
	- totalBorrows = vars.totalBorrowsNew (../../sb/CCollateralCapErc20.sol#1772)
Reentrancy in CCollateralCapErc20.decreaseUserCollateralInternal(address,uint256) (../../sb/CCollateralCapErc20.sol#2985-2992):
	External calls:
	- require(bool,string)(comptroller.redeemAllowed(address(this),account,amount) == 0,comptroller rejection) (../../sb/CCollateralCapErc20.sol#2986)
	State variables written after the call(s):
	- accountCollateralTokens[account] = sub_(accountCollateralTokens[account],amount) (../../sb/CCollateralCapErc20.sol#2989)
	- totalCollateralTokens = sub_(totalCollateralTokens,amount) (../../sb/CCollateralCapErc20.sol#2988)
Reentrancy in CCollateralCapErc20.doTransferIn(address,uint256) (../../sb/CCollateralCapErc20.sol#2801-2827):
	External calls:
	- token.transferFrom(from,address(this),amount) (../../sb/CCollateralCapErc20.sol#2804)
	State variables written after the call(s):
	- internalCash = add_(internalCash,transferredIn) (../../sb/CCollateralCapErc20.sol#2825)
Reentrancy in CCollateralCapErc20.doTransferOut(address,uint256) (../../sb/CCollateralCapErc20.sol#2838-2858):
	External calls:
	- token.transfer(to,amount) (../../sb/CCollateralCapErc20.sol#2840)
	State variables written after the call(s):
	- internalCash = sub_(internalCash,amount) (../../sb/CCollateralCapErc20.sol#2857)
Reentrancy in CCollateralCapErc20.flashLoan(address,uint256,bytes) (../../sb/CCollateralCapErc20.sol#2690-2714):
	External calls:
	- doTransferOut(address(uint160(receiver)),amount) (../../sb/CCollateralCapErc20.sol#2699)
		- token.transfer(to,amount) (../../sb/CCollateralCapErc20.sol#2840)
	- IFlashloanReceiver(receiver).executeOperation(msg.sender,underlying,amount,totalFee,params) (../../sb/CCollateralCapErc20.sol#2702)
	State variables written after the call(s):
	- totalReserves = add_(totalReserves,reservesFee) (../../sb/CCollateralCapErc20.sol#2710)
Reentrancy in CToken.repayBorrowFresh(address,address,uint256) (../../sb/CCollateralCapErc20.sol#1833-1894):
	External calls:
	- allowed = comptroller.repayBorrowAllowed(address(this),payer,borrower,repayAmount) (../../sb/CCollateralCapErc20.sol#1835)
	State variables written after the call(s):
	- accountBorrows[borrower].principal = vars.accountBorrowsNew (../../sb/CCollateralCapErc20.sol#1882)
	- accountBorrows[borrower].interestIndex = borrowIndex (../../sb/CCollateralCapErc20.sol#1883)
	- totalBorrows = vars.totalBorrowsNew (../../sb/CCollateralCapErc20.sol#1884)
Reentrancy in CCollateralCapErc20.transferTokens(address,address,address,uint256) (../../sb/CCollateralCapErc20.sol#2869-2932):
	External calls:
	- allowed = comptroller.transferAllowed(address(this),src,dst,collateralTokens) (../../sb/CCollateralCapErc20.sol#2890)
	State variables written after the call(s):
	- transferAllowances[src][spender] = allowanceNew (../../sb/CCollateralCapErc20.sol#2922)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

Reentrancy in CToken.borrowFresh(address,uint256) (../../sb/CCollateralCapErc20.sol#1729-1782):
	External calls:
	- allowed = comptroller.borrowAllowed(address(this),borrower,borrowAmount) (../../sb/CCollateralCapErc20.sol#1731)
	Event emitted after the call(s):
	- Borrow(borrower,borrowAmount,vars.accountBorrowsNew,vars.totalBorrowsNew) (../../sb/CCollateralCapErc20.sol#1775)
	- Failure(uint256(err),uint256(info),0) (../../sb/CCollateralCapErc20.sol#647)
		- fail(Error.MARKET_NOT_FRESH,FailureInfo.BORROW_FRESHNESS_CHECK) (../../sb/CCollateralCapErc20.sol#1738)
	- Failure(uint256(err),uint256(info),0) (../../sb/CCollateralCapErc20.sol#647)
		- fail(Error.TOKEN_INSUFFICIENT_CASH,FailureInfo.BORROW_CASH_NOT_AVAILABLE) (../../sb/CCollateralCapErc20.sol#1743)
	- Failure(uint256(err),uint256(info),opaqueError) (../../sb/CCollateralCapErc20.sol#656)
		- failOpaque(Error.COMPTROLLER_REJECTION,FailureInfo.BORROW_COMPTROLLER_REJECTION,allowed) (../../sb/CCollateralCapErc20.sol#1733)
Reentrancy in CCollateralCapErc20.decreaseUserCollateralInternal(address,uint256) (../../sb/CCollateralCapErc20.sol#2985-2992):
	External calls:
	- require(bool,string)(comptroller.redeemAllowed(address(this),account,amount) == 0,comptroller rejection) (../../sb/CCollateralCapErc20.sol#2986)
	Event emitted after the call(s):
	- UserCollateralChanged(account,accountCollateralTokens[account]) (../../sb/CCollateralCapErc20.sol#2991)
Reentrancy in CToken.liquidateBorrowFresh(address,address,uint256,CTokenInterface) (../../sb/CCollateralCapErc20.sol#1930-1999):
	External calls:
	- allowed = comptroller.liquidateBorrowAllowed(address(this),address(cTokenCollateral),liquidator,borrower,repayAmount) (../../sb/CCollateralCapErc20.sol#1932)
	Event emitted after the call(s):
	- Failure(uint256(err),uint256(info),0) (../../sb/CCollateralCapErc20.sol#647)
		- (fail(Error.MARKET_NOT_FRESH,FailureInfo.LIQUIDATE_FRESHNESS_CHECK),0) (../../sb/CCollateralCapErc20.sol#1939)
	- Failure(uint256(err),uint256(info),0) (../../sb/CCollateralCapErc20.sol#647)
		- (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED,FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_ZERO),0) (../../sb/CCollateralCapErc20.sol#1954)
	- Failure(uint256(err),uint256(info),opaqueError) (../../sb/CCollateralCapErc20.sol#656)
		- (failOpaque(Error.COMPTROLLER_REJECTION,FailureInfo.LIQUIDATE_COMPTROLLER_REJECTION,allowed),0) (../../sb/CCollateralCapErc20.sol#1934)
	- Failure(uint256(err),uint256(info),0) (../../sb/CCollateralCapErc20.sol#647)
		- (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED,FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX),0) (../../sb/CCollateralCapErc20.sol#1959)
	- Failure(uint256(err),uint256(info),0) (../../sb/CCollateralCapErc20.sol#647)
		- (fail(Error.MARKET_NOT_FRESH,FailureInfo.LIQUIDATE_COLLATERAL_FRESHNESS_CHECK),0) (../../sb/CCollateralCapErc20.sol#1944)
	- Failure(uint256(err),uint256(info),0) (../../sb/CCollateralCapErc20.sol#647)
		- (fail(Error.INVALID_ACCOUNT_PAIR,FailureInfo.LIQUIDATE_LIQUIDATOR_IS_BORROWER),0) (../../sb/CCollateralCapErc20.sol#1949)
Reentrancy in CToken.liquidateBorrowFresh(address,address,uint256,CTokenInterface) (../../sb/CCollateralCapErc20.sol#1930-1999):
	External calls:
	- allowed = comptroller.liquidateBorrowAllowed(address(this),address(cTokenCollateral),liquidator,borrower,repayAmount) (../../sb/CCollateralCapErc20.sol#1932)
	- (repayBorrowError,actualRepayAmount) = repayBorrowFresh(liquidator,borrower,repayAmount) (../../sb/CCollateralCapErc20.sol#1964)
		- allowed = comptroller.repayBorrowAllowed(address(this),payer,borrower,repayAmount) (../../sb/CCollateralCapErc20.sol#1835)
	Event emitted after the call(s):
	- Failure(uint256(err),uint256(info),0) (../../sb/CCollateralCapErc20.sol#647)
		- (fail(TokenErrorReporter.Error(repayBorrowError),FailureInfo.LIQUIDATE_REPAY_BORROW_FRESH_FAILED),0) (../../sb/CCollateralCapErc20.sol#1966)
	- Failure(uint256(err),uint256(info),opaqueError) (../../sb/CCollateralCapErc20.sol#656)
		- (repayBorrowError,actualRepayAmount) = repayBorrowFresh(liquidator,borrower,repayAmount) (../../sb/CCollateralCapErc20.sol#1964)
	- Failure(uint256(err),uint256(info),0) (../../sb/CCollateralCapErc20.sol#647)
		- (repayBorrowError,actualRepayAmount) = repayBorrowFresh(liquidator,borrower,repayAmount) (../../sb/CCollateralCapErc20.sol#1964)
	- RepayBorrow(payer,borrower,vars.actualRepayAmount,vars.accountBorrowsNew,vars.totalBorrowsNew) (../../sb/CCollateralCapErc20.sol#1887)
		- (repayBorrowError,actualRepayAmount) = repayBorrowFresh(liquidator,borrower,repayAmount) (../../sb/CCollateralCapErc20.sol#1964)
Reentrancy in CToken.liquidateBorrowFresh(address,address,uint256,CTokenInterface) (../../sb/CCollateralCapErc20.sol#1930-1999):
	External calls:
	- allowed = comptroller.liquidateBorrowAllowed(address(this),address(cTokenCollateral),liquidator,borrower,repayAmount) (../../sb/CCollateralCapErc20.sol#1932)
	- (repayBorrowError,actualRepayAmount) = repayBorrowFresh(liquidator,borrower,repayAmount) (../../sb/CCollateralCapErc20.sol#1964)
		- allowed = comptroller.repayBorrowAllowed(address(this),payer,borrower,repayAmount) (../../sb/CCollateralCapErc20.sol#1835)
	- seizeError = cTokenCollateral.seize(liquidator,borrower,seizeTokens) (../../sb/CCollateralCapErc20.sol#1985)
	Event emitted after the call(s):
	- LiquidateBorrow(liquidator,borrower,actualRepayAmount,address(cTokenCollateral),seizeTokens) (../../sb/CCollateralCapErc20.sol#1992)
Reentrancy in CCollateralCapErc20.mintFresh(address,uint256) (../../sb/CCollateralCapErc20.sol#3007-3070):
	External calls:
	- allowed = comptroller.mintAllowed(address(this),minter,mintAmount) (../../sb/CCollateralCapErc20.sol#3012)
	Event emitted after the call(s):
	- Failure(uint256(err),uint256(info),0) (../../sb/CCollateralCapErc20.sol#647)
		- (fail(Error.MARKET_NOT_FRESH,FailureInfo.MINT_FRESHNESS_CHECK),0) (../../sb/CCollateralCapErc20.sol#3019)
	- Failure(uint256(err),uint256(info),opaqueError) (../../sb/CCollateralCapErc20.sol#656)
		- (failOpaque(Error.COMPTROLLER_REJECTION,FailureInfo.MINT_COMPTROLLER_REJECTION,allowed),0) (../../sb/CCollateralCapErc20.sol#3014)
Reentrancy in CCollateralCapErc20.mintFresh(address,uint256) (../../sb/CCollateralCapErc20.sol#3007-3070):
	External calls:
	- allowed = comptroller.mintAllowed(address(this),minter,mintAmount) (../../sb/CCollateralCapErc20.sol#3012)
	- vars.actualMintAmount = doTransferIn(minter,mintAmount) (../../sb/CCollateralCapErc20.sol#3038)
		- token.transferFrom(from,address(this),amount) (../../sb/CCollateralCapErc20.sol#2804)
	Event emitted after the call(s):
	- Mint(minter,vars.actualMintAmount,vars.mintTokens) (../../sb/CCollateralCapErc20.sol#3062)
	- Transfer(address(this),minter,vars.mintTokens) (../../sb/CCollateralCapErc20.sol#3063)
	- UserCollateralChanged(account,accountCollateralTokens[account]) (../../sb/CCollateralCapErc20.sol#2965)
		- increaseUserCollateralInternal(minter,vars.mintTokens) (../../sb/CCollateralCapErc20.sol#3058)
	- UserCollateralChanged(account,accountCollateralTokens[account]) (../../sb/CCollateralCapErc20.sol#2974)
		- increaseUserCollateralInternal(minter,vars.mintTokens) (../../sb/CCollateralCapErc20.sol#3058)
Reentrancy in CCollateralCapErc20.redeemFresh(address,uint256,uint256) (../../sb/CCollateralCapErc20.sol#3086-3173):
	External calls:
	- doTransferOut(redeemer,vars.redeemAmount) (../../sb/CCollateralCapErc20.sol#3148)
		- token.transfer(to,amount) (../../sb/CCollateralCapErc20.sol#2840)
	- decreaseUserCollateralInternal(redeemer,collateralTokens) (../../sb/CCollateralCapErc20.sol#3162)
		- require(bool,string)(comptroller.redeemAllowed(address(this),account,amount) == 0,comptroller rejection) (../../sb/CCollateralCapErc20.sol#2986)
	Event emitted after the call(s):
	- Redeem(redeemer,vars.redeemAmount,vars.redeemTokens) (../../sb/CCollateralCapErc20.sol#3167)
	- Transfer(redeemer,address(this),vars.redeemTokens) (../../sb/CCollateralCapErc20.sol#3166)
	- UserCollateralChanged(account,accountCollateralTokens[account]) (../../sb/CCollateralCapErc20.sol#2991)
		- decreaseUserCollateralInternal(redeemer,collateralTokens) (../../sb/CCollateralCapErc20.sol#3162)
Reentrancy in CToken.repayBorrowFresh(address,address,uint256) (../../sb/CCollateralCapErc20.sol#1833-1894):
	External calls:
	- allowed = comptroller.repayBorrowAllowed(address(this),payer,borrower,repayAmount) (../../sb/CCollateralCapErc20.sol#1835)
	Event emitted after the call(s):
	- Failure(uint256(err),uint256(info),opaqueError) (../../sb/CCollateralCapErc20.sol#656)
		- (failOpaque(Error.COMPTROLLER_REJECTION,FailureInfo.REPAY_BORROW_COMPTROLLER_REJECTION,allowed),0) (../../sb/CCollateralCapErc20.sol#1837)
	- Failure(uint256(err),uint256(info),0) (../../sb/CCollateralCapErc20.sol#647)
		- (fail(Error.MARKET_NOT_FRESH,FailureInfo.REPAY_BORROW_FRESHNESS_CHECK),0) (../../sb/CCollateralCapErc20.sol#1842)
	- RepayBorrow(payer,borrower,vars.actualRepayAmount,vars.accountBorrowsNew,vars.totalBorrowsNew) (../../sb/CCollateralCapErc20.sol#1887)
Reentrancy in CCollateralCapErc20.seizeInternal(address,address,address,uint256) (../../sb/CCollateralCapErc20.sol#3185-3223):
	External calls:
	- allowed = comptroller.seizeAllowed(address(this),seizerToken,liquidator,borrower,seizeTokens) (../../sb/CCollateralCapErc20.sol#3191)
	Event emitted after the call(s):
	- Failure(uint256(err),uint256(info),opaqueError) (../../sb/CCollateralCapErc20.sol#656)
		- failOpaque(Error.COMPTROLLER_REJECTION,FailureInfo.LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,allowed) (../../sb/CCollateralCapErc20.sol#3193)
	- Failure(uint256(err),uint256(info),0) (../../sb/CCollateralCapErc20.sol#647)
		- fail(Error.INVALID_ACCOUNT_PAIR,FailureInfo.LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER) (../../sb/CCollateralCapErc20.sol#3198)
	- Transfer(borrower,liquidator,seizeTokens) (../../sb/CCollateralCapErc20.sol#3214)
	- UserCollateralChanged(borrower,accountCollateralTokens[borrower]) (../../sb/CCollateralCapErc20.sol#3215)
	- UserCollateralChanged(liquidator,accountCollateralTokens[liquidator]) (../../sb/CCollateralCapErc20.sol#3216)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

CCollateralCapErc20.doTransferIn(address,uint256) (../../sb/CCollateralCapErc20.sol#2801-2827) uses assembly
	- INLINE ASM (../../sb/CCollateralCapErc20.sol#2807-2819)
CCollateralCapErc20.doTransferOut(address,uint256) (../../sb/CCollateralCapErc20.sol#2838-2858) uses assembly
	- INLINE ASM (../../sb/CCollateralCapErc20.sol#2843-2855)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage

CarefulMath.addThenSubUInt(uint256,uint256,uint256) (../../sb/CCollateralCapErc20.sol#735-743) is never used and should be removed
CarefulMath.addUInt(uint256,uint256) (../../sb/CCollateralCapErc20.sol#722-730) is never used and should be removed
CarefulMath.divUInt(uint256,uint256) (../../sb/CCollateralCapErc20.sol#700-706) is never used and should be removed
CarefulMath.mulUInt(uint256,uint256) (../../sb/CCollateralCapErc20.sol#683-695) is never used and should be removed
CarefulMath.subUInt(uint256,uint256) (../../sb/CCollateralCapErc20.sol#711-717) is never used and should be removed
ComptrollerErrorReporter.fail(ComptrollerErrorReporter.Error,ComptrollerErrorReporter.FailureInfo) (../../sb/CCollateralCapErc20.sol#534-538) is never used and should be removed
ComptrollerErrorReporter.failOpaque(ComptrollerErrorReporter.Error,ComptrollerErrorReporter.FailureInfo,uint256) (../../sb/CCollateralCapErc20.sol#543-547) is never used and should be removed
Exponential.addExp(Exponential.Exp,Exponential.Exp) (../../sb/CCollateralCapErc20.sol#789-793) is never used and should be removed
Exponential.add_(Exponential.Double,Exponential.Double) (../../sb/CCollateralCapErc20.sol#1021-1023) is never used and should be removed
Exponential.add_(Exponential.Exp,Exponential.Exp) (../../sb/CCollateralCapErc20.sol#1017-1019) is never used and should be removed
Exponential.divExp(Exponential.Exp,Exponential.Exp) (../../sb/CCollateralCapErc20.sol#973-975) is never used and should be removed
Exponential.divScalar(Exponential.Exp,uint256) (../../sb/CCollateralCapErc20.sol#859-866) is never used and should be removed
Exponential.divScalarByExp(uint256,Exponential.Exp) (../../sb/CCollateralCapErc20.sol#871-886) is never used and should be removed
Exponential.divScalarByExpTruncate(uint256,Exponential.Exp) (../../sb/CCollateralCapErc20.sol#891-898) is never used and should be removed
Exponential.div_(Exponential.Double,Exponential.Double) (../../sb/CCollateralCapErc20.sol#1101-1103) is never used and should be removed
Exponential.div_(Exponential.Double,uint256) (../../sb/CCollateralCapErc20.sol#1105-1107) is never used and should be removed
Exponential.div_(Exponential.Exp,Exponential.Exp) (../../sb/CCollateralCapErc20.sol#1089-1091) is never used and should be removed
Exponential.div_(Exponential.Exp,uint256) (../../sb/CCollateralCapErc20.sol#1093-1095) is never used and should be removed
Exponential.div_(uint256,Exponential.Double) (../../sb/CCollateralCapErc20.sol#1109-1111) is never used and should be removed
Exponential.fraction(uint256,uint256) (../../sb/CCollateralCapErc20.sol#1122-1124) is never used and should be removed
Exponential.getExp(uint256,uint256) (../../sb/CCollateralCapErc20.sol#772-784) is never used and should be removed
Exponential.isZeroExp(Exponential.Exp) (../../sb/CCollateralCapErc20.sol#1003-1005) is never used and should be removed
Exponential.lessThanExp(Exponential.Exp,Exponential.Exp) (../../sb/CCollateralCapErc20.sol#989-991) is never used and should be removed
Exponential.lessThanOrEqualExp(Exponential.Exp,Exponential.Exp) (../../sb/CCollateralCapErc20.sol#996-998) is never used and should be removed
Exponential.mulExp(Exponential.Exp,Exponential.Exp) (../../sb/CCollateralCapErc20.sol#928-948) is never used and should be removed
Exponential.mulExp(uint256,uint256) (../../sb/CCollateralCapErc20.sol#953-955) is never used and should be removed
Exponential.mulExp3(Exponential.Exp,Exponential.Exp,Exponential.Exp) (../../sb/CCollateralCapErc20.sol#960-966) is never used and should be removed
Exponential.mulScalar(Exponential.Exp,uint256) (../../sb/CCollateralCapErc20.sol#807-814) is never used and should be removed
Exponential.mulScalarTruncate(Exponential.Exp,uint256) (../../sb/CCollateralCapErc20.sol#819-826) is never used and should be removed
Exponential.mulScalarTruncateAddUInt(Exponential.Exp,uint256,uint256) (../../sb/CCollateralCapErc20.sol#831-838) is never used and should be removed
Exponential.mul_(Exponential.Double,Exponential.Double) (../../sb/CCollateralCapErc20.sol#1064-1066) is never used and should be removed
Exponential.mul_(Exponential.Double,uint256) (../../sb/CCollateralCapErc20.sol#1068-1070) is never used and should be removed
Exponential.mul_(Exponential.Exp,Exponential.Exp) (../../sb/CCollateralCapErc20.sol#1052-1054) is never used and should be removed
Exponential.mul_(uint256,Exponential.Double) (../../sb/CCollateralCapErc20.sol#1072-1074) is never used and should be removed
Exponential.mul_(uint256,Exponential.Exp) (../../sb/CCollateralCapErc20.sol#1060-1062) is never used and should be removed
Exponential.safe224(uint256,string) (../../sb/CCollateralCapErc20.sol#1007-1010) is never used and should be removed
Exponential.safe32(uint256,string) (../../sb/CCollateralCapErc20.sol#1012-1015) is never used and should be removed
Exponential.sqrt(uint256) (../../sb/CCollateralCapErc20.sol#1128-1170) is never used and should be removed
Exponential.subExp(Exponential.Exp,Exponential.Exp) (../../sb/CCollateralCapErc20.sol#798-802) is never used and should be removed
Exponential.sub_(Exponential.Double,Exponential.Double) (../../sb/CCollateralCapErc20.sol#1039-1041) is never used and should be removed
Exponential.sub_(Exponential.Exp,Exponential.Exp) (../../sb/CCollateralCapErc20.sol#1035-1037) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code

Pragma version^0.5.16 (../../sb/CCollateralCapErc20.sol#1) allows old versions
solc-0.5.17 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Constant CTokenStorage.borrowRateMaxMantissa (../../sb/CCollateralCapErc20.sol#128) is not in UPPER_CASE_WITH_UNDERSCORES
Constant CTokenStorage.reserveFactorMaxMantissa (../../sb/CCollateralCapErc20.sol#133) is not in UPPER_CASE_WITH_UNDERSCORES
Function CTokenInterface._setPendingAdmin(address) (../../sb/CCollateralCapErc20.sol#375) is not in mixedCase
Function CTokenInterface._acceptAdmin() (../../sb/CCollateralCapErc20.sol#376) is not in mixedCase
Function CTokenInterface._setComptroller(ComptrollerInterface) (../../sb/CCollateralCapErc20.sol#377) is not in mixedCase
Function CTokenInterface._setReserveFactor(uint256) (../../sb/CCollateralCapErc20.sol#378) is not in mixedCase
Function CTokenInterface._reduceReserves(uint256) (../../sb/CCollateralCapErc20.sol#379) is not in mixedCase
Function CTokenInterface._setInterestRateModel(InterestRateModel) (../../sb/CCollateralCapErc20.sol#380) is not in mixedCase
Function CErc20Interface._addReserves(uint256) (../../sb/CCollateralCapErc20.sol#397) is not in mixedCase
Function CCollateralCapErc20Interface._setCollateralCap(uint256) (../../sb/CCollateralCapErc20.sol#440) is not in mixedCase
Function CDelegatorInterface._setImplementation(address,bool,bytes) (../../sb/CCollateralCapErc20.sol#455) is not in mixedCase
Function CDelegateInterface._becomeImplementation(bytes) (../../sb/CCollateralCapErc20.sol#464) is not in mixedCase
Function CDelegateInterface._resignImplementation() (../../sb/CCollateralCapErc20.sol#469) is not in mixedCase
Function Exponential.mul_ScalarTruncate(Exponential.Exp,uint256) (../../sb/CCollateralCapErc20.sol#843-846) is not in mixedCase
Function Exponential.mul_ScalarTruncateAddUInt(Exponential.Exp,uint256,uint256) (../../sb/CCollateralCapErc20.sol#851-854) is not in mixedCase
Function Exponential.div_ScalarByExp(uint256,Exponential.Exp) (../../sb/CCollateralCapErc20.sol#903-915) is not in mixedCase
Function Exponential.div_ScalarByExpTruncate(uint256,Exponential.Exp) (../../sb/CCollateralCapErc20.sol#920-923) is not in mixedCase
Constant Exponential.expScale (../../sb/CCollateralCapErc20.sol#754) is not in UPPER_CASE_WITH_UNDERSCORES
Constant Exponential.doubleScale (../../sb/CCollateralCapErc20.sol#755) is not in UPPER_CASE_WITH_UNDERSCORES
Constant Exponential.halfExpScale (../../sb/CCollateralCapErc20.sol#756) is not in UPPER_CASE_WITH_UNDERSCORES
Constant Exponential.mantissaOne (../../sb/CCollateralCapErc20.sol#757) is not in UPPER_CASE_WITH_UNDERSCORES
Function CToken._setPendingAdmin(address) (../../sb/CCollateralCapErc20.sol#2022-2038) is not in mixedCase
Function CToken._acceptAdmin() (../../sb/CCollateralCapErc20.sol#2045-2065) is not in mixedCase
Function CToken._setComptroller(ComptrollerInterface) (../../sb/CCollateralCapErc20.sol#2072-2089) is not in mixedCase
Function CToken._setReserveFactor(uint256) (../../sb/CCollateralCapErc20.sol#2096-2104) is not in mixedCase
Function CToken._reduceReserves(uint256) (../../sb/CCollateralCapErc20.sol#2200-2208) is not in mixedCase
Function CToken._setInterestRateModel(InterestRateModel) (../../sb/CCollateralCapErc20.sol#2263-2271) is not in mixedCase
Variable ComptrollerV2Storage._mintGuardianPaused (../../sb/CCollateralCapErc20.sol#2478) is not in mixedCase
Variable ComptrollerV2Storage._borrowGuardianPaused (../../sb/CCollateralCapErc20.sol#2479) is not in mixedCase
Function CCollateralCapErc20._addReserves(uint256) (../../sb/CCollateralCapErc20.sol#2657-2659) is not in mixedCase
Function CCollateralCapErc20._setCollateralCap(uint256) (../../sb/CCollateralCapErc20.sol#2665-2670) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Variable CToken.seize(address,address,uint256).seizeTokens (../../sb/CCollateralCapErc20.sol#2010) is too similar to CToken.seizeInternal(address,address,address,uint256).seizerToken (../../sb/CCollateralCapErc20.sol#2359)
Variable CToken.liquidateBorrowFresh(address,address,uint256,CTokenInterface).seizeTokens (../../sb/CCollateralCapErc20.sol#1974) is too similar to CToken.seizeInternal(address,address,address,uint256).seizerToken (../../sb/CCollateralCapErc20.sol#2359)
Variable CTokenInterface.seize(address,address,uint256).seizeTokens (../../sb/CCollateralCapErc20.sol#370) is too similar to CToken.seizeInternal(address,address,address,uint256).seizerToken (../../sb/CCollateralCapErc20.sol#2359)
Variable CToken.seizeInternal(address,address,address,uint256).seizeTokens (../../sb/CCollateralCapErc20.sol#2359) is too similar to CToken.seizeInternal(address,address,address,uint256).seizerToken (../../sb/CCollateralCapErc20.sol#2359)
Variable CToken.seize(address,address,uint256).seizeTokens (../../sb/CCollateralCapErc20.sol#2010) is too similar to CCollateralCapErc20.seizeInternal(address,address,address,uint256).seizerToken (../../sb/CCollateralCapErc20.sol#3185)
Variable CTokenInterface.seize(address,address,uint256).seizeTokens (../../sb/CCollateralCapErc20.sol#370) is too similar to CCollateralCapErc20.seizeInternal(address,address,address,uint256).seizerToken (../../sb/CCollateralCapErc20.sol#3185)
Variable CToken.seizeInternal(address,address,address,uint256).seizeTokens (../../sb/CCollateralCapErc20.sol#2359) is too similar to CCollateralCapErc20.seizeInternal(address,address,address,uint256).seizerToken (../../sb/CCollateralCapErc20.sol#3185)
Variable CToken.liquidateBorrowFresh(address,address,uint256,CTokenInterface).seizeTokens (../../sb/CCollateralCapErc20.sol#1974) is too similar to CCollateralCapErc20.seizeInternal(address,address,address,uint256).seizerToken (../../sb/CCollateralCapErc20.sol#3185)
Variable CCollateralCapErc20.seizeInternal(address,address,address,uint256).seizeTokens (../../sb/CCollateralCapErc20.sol#3185) is too similar to CToken.seizeInternal(address,address,address,uint256).seizerToken (../../sb/CCollateralCapErc20.sol#2359)
Variable CCollateralCapErc20.seizeInternal(address,address,address,uint256).seizeTokens (../../sb/CCollateralCapErc20.sol#3185) is too similar to CCollateralCapErc20.seizeInternal(address,address,address,uint256).seizerToken (../../sb/CCollateralCapErc20.sol#3185)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#variable-names-too-similar

Exponential.sqrt(uint256) (../../sb/CCollateralCapErc20.sol#1128-1170) uses literals with too many digits:
	- xx >= 0x100000000000000000000000000000000 (../../sb/CCollateralCapErc20.sol#1133)
Exponential.sqrt(uint256) (../../sb/CCollateralCapErc20.sol#1128-1170) uses literals with too many digits:
	- xx >= 0x10000000000000000 (../../sb/CCollateralCapErc20.sol#1137)
Exponential.sqrt(uint256) (../../sb/CCollateralCapErc20.sol#1128-1170) uses literals with too many digits:
	- xx >= 0x100000000 (../../sb/CCollateralCapErc20.sol#1141)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits

CErc20Storage.implementation (../../sb/CCollateralCapErc20.sol#225) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant

_setImplementation(address,bool,bytes) should be declared external:
	- CDelegatorInterface._setImplementation(address,bool,bytes) (../../sb/CCollateralCapErc20.sol#455)
Moreover, the following function parameters should change its data location:
becomeImplementationData location should be calldata
_becomeImplementation(bytes) should be declared external:
	- CDelegateInterface._becomeImplementation(bytes) (../../sb/CCollateralCapErc20.sol#464)
Moreover, the following function parameters should change its data location:
data location should be calldata
initialize(address,ComptrollerInterface,InterestRateModel,uint256,string,string,uint8) should be declared external:
	- CCollateralCapErc20.initialize(address,ComptrollerInterface,InterestRateModel,uint256,string,string,uint8) (../../sb/CCollateralCapErc20.sol#2561-2574)
Moreover, the following function parameters should change its data location:
name_ location should be calldata
symbol_ location should be calldata
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external
/sb/CCollateralCapErc20.sol analyzed (29 contracts with 93 detectors), 144 result(s) found
