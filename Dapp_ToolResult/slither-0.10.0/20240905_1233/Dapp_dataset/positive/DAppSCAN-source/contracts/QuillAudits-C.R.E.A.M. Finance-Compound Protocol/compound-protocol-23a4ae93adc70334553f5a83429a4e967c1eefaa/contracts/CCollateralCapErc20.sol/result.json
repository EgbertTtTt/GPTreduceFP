{
    "errors": [],
    "fails": [],
    "findings": [
        {
            "confidence": "Medium",
            "contract": "CCollateralCapErc20",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-C.R.E.A.M. Finance-Compound Protocol/compound-protocol-23a4ae93adc70334553f5a83429a4e967c1eefaa/contracts/CCollateralCapErc20.sol",
            "function": "mintFresh",
            "impact": "Medium",
            "line": 3007,
            "line_end": 3070,
            "message": "Reentrancy in CCollateralCapErc20.mintFresh(address,uint256) (CCollateralCapErc20.sol#3007-3070):\n\tExternal calls:\n\t- allowed = comptroller.mintAllowed(address(this),minter,mintAmount) (CCollateralCapErc20.sol#3012)\n\t- vars.actualMintAmount = doTransferIn(minter,mintAmount) (CCollateralCapErc20.sol#3038)\n\t\t- token.transferFrom(from,address(this),amount) (CCollateralCapErc20.sol#2804)\n\tState variables written after the call(s):\n\t- increaseUserCollateralInternal(minter,vars.mintTokens) (CCollateralCapErc20.sol#3058)\n\t\t- accountCollateralTokens[account] = add_(accountCollateralTokens[account],amount) (CCollateralCapErc20.sol#2963)\n\t\t- accountCollateralTokens[account] = add_(accountCollateralTokens[account],gap) (CCollateralCapErc20.sol#2972)\n\tCCollateralCapStorage.accountCollateralTokens (CCollateralCapErc20.sol#245) can be used in cross function reentrancies:\n\t- CCollateralCapStorage.accountCollateralTokens (CCollateralCapErc20.sol#245)\n\t- CCollateralCapErc20.decreaseUserCollateralInternal(address,uint256) (CCollateralCapErc20.sol#2985-2992)\n\t- CCollateralCapErc20.getCTokenBalanceInternal(address) (CCollateralCapErc20.sol#2939-2948)\n\t- CCollateralCapErc20.increaseUserCollateralInternal(address,uint256) (CCollateralCapErc20.sol#2956-2978)\n\t- CCollateralCapErc20.initializeAccountCollateralTokens(address) (CCollateralCapErc20.sol#2773-2790)\n\t- CCollateralCapErc20.redeemFresh(address,uint256,uint256) (CCollateralCapErc20.sol#3086-3173)\n\t- CCollateralCapErc20.registerCollateral(address) (CCollateralCapErc20.sol#2722-2730)\n\t- CCollateralCapErc20.seizeInternal(address,address,address,uint256) (CCollateralCapErc20.sol#3185-3223)\n\t- CCollateralCapErc20.unregisterCollateral(address) (CCollateralCapErc20.sol#2737-2744)\n\t- accountTokens[minter] = add_(accountTokens[minter],vars.mintTokens) (CCollateralCapErc20.sol#3052)\n\tCTokenStorage.accountTokens (CCollateralCapErc20.sol#193) can be used in cross function reentrancies:\n\t- CToken.balanceOf(address) (CCollateralCapErc20.sol#1402-1404)\n\t- CToken.balanceOfUnderlying(address) (CCollateralCapErc20.sol#1412-1415)\n\t- CCollateralCapErc20.getCTokenBalanceInternal(address) (CCollateralCapErc20.sol#2939-2948)\n\t- CCollateralCapErc20.initializeAccountCollateralTokens(address) (CCollateralCapErc20.sol#2773-2790)\n\t- CCollateralCapErc20.mintFresh(address,uint256) (CCollateralCapErc20.sol#3007-3070)\n\t- CCollateralCapErc20.redeemFresh(address,uint256,uint256) (CCollateralCapErc20.sol#3086-3173)\n\t- CCollateralCapErc20.registerCollateral(address) (CCollateralCapErc20.sol#2722-2730)\n\t- CCollateralCapErc20.seizeInternal(address,address,address,uint256) (CCollateralCapErc20.sol#3185-3223)\n\t- increaseUserCollateralInternal(minter,vars.mintTokens) (CCollateralCapErc20.sol#3058)\n\t\t- totalCollateralTokens = totalCollateralTokensNew (CCollateralCapErc20.sol#2962)\n\t\t- totalCollateralTokens = add_(totalCollateralTokens,gap) (CCollateralCapErc20.sol#2971)\n\tCCollateralCapStorage.totalCollateralTokens (CCollateralCapErc20.sol#239) can be used in cross function reentrancies:\n\t- CCollateralCapErc20.decreaseUserCollateralInternal(address,uint256) (CCollateralCapErc20.sol#2985-2992)\n\t- CCollateralCapErc20.increaseUserCollateralInternal(address,uint256) (CCollateralCapErc20.sol#2956-2978)\n\t- CCollateralCapErc20.initializeAccountCollateralTokens(address) (CCollateralCapErc20.sol#2773-2790)\n\t- CCollateralCapStorage.totalCollateralTokens (CCollateralCapErc20.sol#239)\n\t- totalSupply = add_(totalSupply,vars.mintTokens) (CCollateralCapErc20.sol#3051)\n\tCTokenStorage.totalSupply (CCollateralCapErc20.sol#188) can be used in cross function reentrancies:\n\t- CToken.exchangeRateStoredInternal() (CCollateralCapErc20.sol#1567-1585)\n\t- CCollateralCapErc20.mintFresh(address,uint256) (CCollateralCapErc20.sol#3007-3070)\n\t- CCollateralCapErc20.redeemFresh(address,uint256,uint256) (CCollateralCapErc20.sol#3086-3173)\n\t- CTokenStorage.totalSupply (CCollateralCapErc20.sol#188)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "CCollateralCapErc20",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-C.R.E.A.M. Finance-Compound Protocol/compound-protocol-23a4ae93adc70334553f5a83429a4e967c1eefaa/contracts/CCollateralCapErc20.sol",
            "function": "redeemFresh",
            "impact": "Medium",
            "line": 3086,
            "line_end": 3173,
            "message": "Reentrancy in CCollateralCapErc20.redeemFresh(address,uint256,uint256) (CCollateralCapErc20.sol#3086-3173):\n\tExternal calls:\n\t- doTransferOut(redeemer,vars.redeemAmount) (CCollateralCapErc20.sol#3148)\n\t\t- token.transfer(to,amount) (CCollateralCapErc20.sol#2840)\n\t- decreaseUserCollateralInternal(redeemer,collateralTokens) (CCollateralCapErc20.sol#3162)\n\t\t- require(bool,string)(comptroller.redeemAllowed(address(this),account,amount) == 0,comptroller rejection) (CCollateralCapErc20.sol#2986)\n\tState variables written after the call(s):\n\t- decreaseUserCollateralInternal(redeemer,collateralTokens) (CCollateralCapErc20.sol#3162)\n\t\t- accountCollateralTokens[account] = sub_(accountCollateralTokens[account],amount) (CCollateralCapErc20.sol#2989)\n\tCCollateralCapStorage.accountCollateralTokens (CCollateralCapErc20.sol#245) can be used in cross function reentrancies:\n\t- CCollateralCapStorage.accountCollateralTokens (CCollateralCapErc20.sol#245)\n\t- CCollateralCapErc20.decreaseUserCollateralInternal(address,uint256) (CCollateralCapErc20.sol#2985-2992)\n\t- CCollateralCapErc20.getCTokenBalanceInternal(address) (CCollateralCapErc20.sol#2939-2948)\n\t- CCollateralCapErc20.increaseUserCollateralInternal(address,uint256) (CCollateralCapErc20.sol#2956-2978)\n\t- CCollateralCapErc20.initializeAccountCollateralTokens(address) (CCollateralCapErc20.sol#2773-2790)\n\t- CCollateralCapErc20.redeemFresh(address,uint256,uint256) (CCollateralCapErc20.sol#3086-3173)\n\t- CCollateralCapErc20.registerCollateral(address) (CCollateralCapErc20.sol#2722-2730)\n\t- CCollateralCapErc20.seizeInternal(address,address,address,uint256) (CCollateralCapErc20.sol#3185-3223)\n\t- CCollateralCapErc20.unregisterCollateral(address) (CCollateralCapErc20.sol#2737-2744)\n\t- decreaseUserCollateralInternal(redeemer,collateralTokens) (CCollateralCapErc20.sol#3162)\n\t\t- totalCollateralTokens = sub_(totalCollateralTokens,amount) (CCollateralCapErc20.sol#2988)\n\tCCollateralCapStorage.totalCollateralTokens (CCollateralCapErc20.sol#239) can be used in cross function reentrancies:\n\t- CCollateralCapErc20.decreaseUserCollateralInternal(address,uint256) (CCollateralCapErc20.sol#2985-2992)\n\t- CCollateralCapErc20.increaseUserCollateralInternal(address,uint256) (CCollateralCapErc20.sol#2956-2978)\n\t- CCollateralCapErc20.initializeAccountCollateralTokens(address) (CCollateralCapErc20.sol#2773-2790)\n\t- CCollateralCapStorage.totalCollateralTokens (CCollateralCapErc20.sol#239)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "CCollateralCapErc20",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-C.R.E.A.M. Finance-Compound Protocol/compound-protocol-23a4ae93adc70334553f5a83429a4e967c1eefaa/contracts/CCollateralCapErc20.sol",
            "function": "redeemFresh",
            "impact": "Medium",
            "line": 3086,
            "line_end": 3173,
            "message": "Reentrancy in CCollateralCapErc20.redeemFresh(address,uint256,uint256) (CCollateralCapErc20.sol#3086-3173):\n\tExternal calls:\n\t- doTransferOut(redeemer,vars.redeemAmount) (CCollateralCapErc20.sol#3148)\n\t\t- token.transfer(to,amount) (CCollateralCapErc20.sol#2840)\n\tState variables written after the call(s):\n\t- accountTokens[redeemer] = sub_(accountTokens[redeemer],vars.redeemTokens) (CCollateralCapErc20.sol#3156)\n\tCTokenStorage.accountTokens (CCollateralCapErc20.sol#193) can be used in cross function reentrancies:\n\t- CToken.balanceOf(address) (CCollateralCapErc20.sol#1402-1404)\n\t- CToken.balanceOfUnderlying(address) (CCollateralCapErc20.sol#1412-1415)\n\t- CCollateralCapErc20.getCTokenBalanceInternal(address) (CCollateralCapErc20.sol#2939-2948)\n\t- CCollateralCapErc20.initializeAccountCollateralTokens(address) (CCollateralCapErc20.sol#2773-2790)\n\t- CCollateralCapErc20.mintFresh(address,uint256) (CCollateralCapErc20.sol#3007-3070)\n\t- CCollateralCapErc20.redeemFresh(address,uint256,uint256) (CCollateralCapErc20.sol#3086-3173)\n\t- CCollateralCapErc20.registerCollateral(address) (CCollateralCapErc20.sol#2722-2730)\n\t- CCollateralCapErc20.seizeInternal(address,address,address,uint256) (CCollateralCapErc20.sol#3185-3223)\n\t- totalSupply = sub_(totalSupply,vars.redeemTokens) (CCollateralCapErc20.sol#3155)\n\tCTokenStorage.totalSupply (CCollateralCapErc20.sol#188) can be used in cross function reentrancies:\n\t- CToken.exchangeRateStoredInternal() (CCollateralCapErc20.sol#1567-1585)\n\t- CCollateralCapErc20.mintFresh(address,uint256) (CCollateralCapErc20.sol#3007-3070)\n\t- CCollateralCapErc20.redeemFresh(address,uint256,uint256) (CCollateralCapErc20.sol#3086-3173)\n\t- CTokenStorage.totalSupply (CCollateralCapErc20.sol#188)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "CCollateralCapErc20",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-C.R.E.A.M. Finance-Compound Protocol/compound-protocol-23a4ae93adc70334553f5a83429a4e967c1eefaa/contracts/CCollateralCapErc20.sol",
            "function": "flashLoan",
            "impact": "Medium",
            "line": 2690,
            "line_end": 2714,
            "message": "Reentrancy in CCollateralCapErc20.flashLoan(address,uint256,bytes) (CCollateralCapErc20.sol#2690-2714):\n\tExternal calls:\n\t- doTransferOut(address(uint160(receiver)),amount) (CCollateralCapErc20.sol#2699)\n\t\t- token.transfer(to,amount) (CCollateralCapErc20.sol#2840)\n\t- IFlashloanReceiver(receiver).executeOperation(msg.sender,underlying,amount,totalFee,params) (CCollateralCapErc20.sol#2702)\n\tState variables written after the call(s):\n\t- internalCash = add_(cashBefore,totalFee) (CCollateralCapErc20.sol#2711)\n\tCSupplyCapStorage.internalCash (CCollateralCapErc20.sol#232) can be used in cross function reentrancies:\n\t- CCollateralCapErc20.doTransferIn(address,uint256) (CCollateralCapErc20.sol#2801-2827)\n\t- CCollateralCapErc20.doTransferOut(address,uint256) (CCollateralCapErc20.sol#2838-2858)\n\t- CCollateralCapErc20.getCashPrior() (CCollateralCapErc20.sol#2754-2756)\n\t- CSupplyCapStorage.internalCash (CCollateralCapErc20.sol#232)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "CCollateralCapErc20",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-C.R.E.A.M. Finance-Compound Protocol/compound-protocol-23a4ae93adc70334553f5a83429a4e967c1eefaa/contracts/CCollateralCapErc20.sol",
            "function": "seizeInternal",
            "impact": "Medium",
            "line": 3185,
            "line_end": 3223,
            "message": "Reentrancy in CCollateralCapErc20.seizeInternal(address,address,address,uint256) (CCollateralCapErc20.sol#3185-3223):\n\tExternal calls:\n\t- allowed = comptroller.seizeAllowed(address(this),seizerToken,liquidator,borrower,seizeTokens) (CCollateralCapErc20.sol#3191)\n\tState variables written after the call(s):\n\t- accountCollateralTokens[borrower] = sub_(accountCollateralTokens[borrower],seizeTokens) (CCollateralCapErc20.sol#3210)\n\tCCollateralCapStorage.accountCollateralTokens (CCollateralCapErc20.sol#245) can be used in cross function reentrancies:\n\t- CCollateralCapStorage.accountCollateralTokens (CCollateralCapErc20.sol#245)\n\t- CCollateralCapErc20.decreaseUserCollateralInternal(address,uint256) (CCollateralCapErc20.sol#2985-2992)\n\t- CCollateralCapErc20.getCTokenBalanceInternal(address) (CCollateralCapErc20.sol#2939-2948)\n\t- CCollateralCapErc20.increaseUserCollateralInternal(address,uint256) (CCollateralCapErc20.sol#2956-2978)\n\t- CCollateralCapErc20.initializeAccountCollateralTokens(address) (CCollateralCapErc20.sol#2773-2790)\n\t- CCollateralCapErc20.redeemFresh(address,uint256,uint256) (CCollateralCapErc20.sol#3086-3173)\n\t- CCollateralCapErc20.registerCollateral(address) (CCollateralCapErc20.sol#2722-2730)\n\t- CCollateralCapErc20.seizeInternal(address,address,address,uint256) (CCollateralCapErc20.sol#3185-3223)\n\t- CCollateralCapErc20.unregisterCollateral(address) (CCollateralCapErc20.sol#2737-2744)\n\t- accountCollateralTokens[liquidator] = add_(accountCollateralTokens[liquidator],seizeTokens) (CCollateralCapErc20.sol#3211)\n\tCCollateralCapStorage.accountCollateralTokens (CCollateralCapErc20.sol#245) can be used in cross function reentrancies:\n\t- CCollateralCapStorage.accountCollateralTokens (CCollateralCapErc20.sol#245)\n\t- CCollateralCapErc20.decreaseUserCollateralInternal(address,uint256) (CCollateralCapErc20.sol#2985-2992)\n\t- CCollateralCapErc20.getCTokenBalanceInternal(address) (CCollateralCapErc20.sol#2939-2948)\n\t- CCollateralCapErc20.increaseUserCollateralInternal(address,uint256) (CCollateralCapErc20.sol#2956-2978)\n\t- CCollateralCapErc20.initializeAccountCollateralTokens(address) (CCollateralCapErc20.sol#2773-2790)\n\t- CCollateralCapErc20.redeemFresh(address,uint256,uint256) (CCollateralCapErc20.sol#3086-3173)\n\t- CCollateralCapErc20.registerCollateral(address) (CCollateralCapErc20.sol#2722-2730)\n\t- CCollateralCapErc20.seizeInternal(address,address,address,uint256) (CCollateralCapErc20.sol#3185-3223)\n\t- CCollateralCapErc20.unregisterCollateral(address) (CCollateralCapErc20.sol#2737-2744)\n\t- accountTokens[borrower] = sub_(accountTokens[borrower],seizeTokens) (CCollateralCapErc20.sol#3208)\n\tCTokenStorage.accountTokens (CCollateralCapErc20.sol#193) can be used in cross function reentrancies:\n\t- CToken.balanceOf(address) (CCollateralCapErc20.sol#1402-1404)\n\t- CToken.balanceOfUnderlying(address) (CCollateralCapErc20.sol#1412-1415)\n\t- CCollateralCapErc20.getCTokenBalanceInternal(address) (CCollateralCapErc20.sol#2939-2948)\n\t- CCollateralCapErc20.initializeAccountCollateralTokens(address) (CCollateralCapErc20.sol#2773-2790)\n\t- CCollateralCapErc20.mintFresh(address,uint256) (CCollateralCapErc20.sol#3007-3070)\n\t- CCollateralCapErc20.redeemFresh(address,uint256,uint256) (CCollateralCapErc20.sol#3086-3173)\n\t- CCollateralCapErc20.registerCollateral(address) (CCollateralCapErc20.sol#2722-2730)\n\t- CCollateralCapErc20.seizeInternal(address,address,address,uint256) (CCollateralCapErc20.sol#3185-3223)\n\t- accountTokens[liquidator] = add_(accountTokens[liquidator],seizeTokens) (CCollateralCapErc20.sol#3209)\n\tCTokenStorage.accountTokens (CCollateralCapErc20.sol#193) can be used in cross function reentrancies:\n\t- CToken.balanceOf(address) (CCollateralCapErc20.sol#1402-1404)\n\t- CToken.balanceOfUnderlying(address) (CCollateralCapErc20.sol#1412-1415)\n\t- CCollateralCapErc20.getCTokenBalanceInternal(address) (CCollateralCapErc20.sol#2939-2948)\n\t- CCollateralCapErc20.initializeAccountCollateralTokens(address) (CCollateralCapErc20.sol#2773-2790)\n\t- CCollateralCapErc20.mintFresh(address,uint256) (CCollateralCapErc20.sol#3007-3070)\n\t- CCollateralCapErc20.redeemFresh(address,uint256,uint256) (CCollateralCapErc20.sol#3086-3173)\n\t- CCollateralCapErc20.registerCollateral(address) (CCollateralCapErc20.sol#2722-2730)\n\t- CCollateralCapErc20.seizeInternal(address,address,address,uint256) (CCollateralCapErc20.sol#3185-3223)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "CToken",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-C.R.E.A.M. Finance-Compound Protocol/compound-protocol-23a4ae93adc70334553f5a83429a4e967c1eefaa/contracts/CCollateralCapErc20.sol",
            "function": "liquidateBorrowInternal",
            "impact": "Medium",
            "line": 1904,
            "line_end": 1919,
            "message": "Reentrancy in CToken.liquidateBorrowInternal(address,uint256,CTokenInterface) (CCollateralCapErc20.sol#1904-1919):\n\tExternal calls:\n\t- error = cTokenCollateral.accrueInterest() (CCollateralCapErc20.sol#1911)\n\t- liquidateBorrowFresh(msg.sender,borrower,repayAmount,cTokenCollateral) (CCollateralCapErc20.sol#1918)\n\t\t- allowed = comptroller.repayBorrowAllowed(address(this),payer,borrower,repayAmount) (CCollateralCapErc20.sol#1835)\n\t\t- allowed = comptroller.liquidateBorrowAllowed(address(this),address(cTokenCollateral),liquidator,borrower,repayAmount) (CCollateralCapErc20.sol#1932)\n\t\t- seizeError = cTokenCollateral.seize(liquidator,borrower,seizeTokens) (CCollateralCapErc20.sol#1985)\n\tState variables written after the call(s):\n\t- liquidateBorrowFresh(msg.sender,borrower,repayAmount,cTokenCollateral) (CCollateralCapErc20.sol#1918)\n\t\t- totalBorrows = vars.totalBorrowsNew (CCollateralCapErc20.sol#1884)\n\tCTokenStorage.totalBorrows (CCollateralCapErc20.sol#178) can be used in cross function reentrancies:\n\t- CToken.accrueInterest() (CCollateralCapErc20.sol#1600-1652)\n\t- CToken.borrowRatePerBlock() (CCollateralCapErc20.sol#1443-1445)\n\t- CToken.estimateBorrowRatePerBlockAfterChange(uint256,bool) (CCollateralCapErc20.sol#1459-1471)\n\t- CToken.estimateSupplyRatePerBlockAfterChange(uint256,bool) (CCollateralCapErc20.sol#1477-1490)\n\t- CToken.exchangeRateStoredInternal() (CCollateralCapErc20.sol#1567-1585)\n\t- CToken.supplyRatePerBlock() (CCollateralCapErc20.sol#1451-1453)\n\t- CTokenStorage.totalBorrows (CCollateralCapErc20.sol#178)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "CCollateralCapErc20",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-C.R.E.A.M. Finance-Compound Protocol/compound-protocol-23a4ae93adc70334553f5a83429a4e967c1eefaa/contracts/CCollateralCapErc20.sol",
            "function": "transferTokens",
            "impact": "Medium",
            "line": 2869,
            "line_end": 2932,
            "message": "Reentrancy in CCollateralCapErc20.transferTokens(address,address,address,uint256) (CCollateralCapErc20.sol#2869-2932):\n\tExternal calls:\n\t- allowed = comptroller.transferAllowed(address(this),src,dst,collateralTokens) (CCollateralCapErc20.sol#2890)\n\tState variables written after the call(s):\n\t- accountCollateralTokens[src] = sub_(accountCollateralTokens[src],collateralTokens) (CCollateralCapErc20.sol#2913)\n\tCCollateralCapStorage.accountCollateralTokens (CCollateralCapErc20.sol#245) can be used in cross function reentrancies:\n\t- CCollateralCapStorage.accountCollateralTokens (CCollateralCapErc20.sol#245)\n\t- CCollateralCapErc20.decreaseUserCollateralInternal(address,uint256) (CCollateralCapErc20.sol#2985-2992)\n\t- CCollateralCapErc20.getCTokenBalanceInternal(address) (CCollateralCapErc20.sol#2939-2948)\n\t- CCollateralCapErc20.increaseUserCollateralInternal(address,uint256) (CCollateralCapErc20.sol#2956-2978)\n\t- CCollateralCapErc20.initializeAccountCollateralTokens(address) (CCollateralCapErc20.sol#2773-2790)\n\t- CCollateralCapErc20.redeemFresh(address,uint256,uint256) (CCollateralCapErc20.sol#3086-3173)\n\t- CCollateralCapErc20.registerCollateral(address) (CCollateralCapErc20.sol#2722-2730)\n\t- CCollateralCapErc20.seizeInternal(address,address,address,uint256) (CCollateralCapErc20.sol#3185-3223)\n\t- CCollateralCapErc20.unregisterCollateral(address) (CCollateralCapErc20.sol#2737-2744)\n\t- accountCollateralTokens[dst] = add_(accountCollateralTokens[dst],collateralTokens) (CCollateralCapErc20.sol#2914)\n\tCCollateralCapStorage.accountCollateralTokens (CCollateralCapErc20.sol#245) can be used in cross function reentrancies:\n\t- CCollateralCapStorage.accountCollateralTokens (CCollateralCapErc20.sol#245)\n\t- CCollateralCapErc20.decreaseUserCollateralInternal(address,uint256) (CCollateralCapErc20.sol#2985-2992)\n\t- CCollateralCapErc20.getCTokenBalanceInternal(address) (CCollateralCapErc20.sol#2939-2948)\n\t- CCollateralCapErc20.increaseUserCollateralInternal(address,uint256) (CCollateralCapErc20.sol#2956-2978)\n\t- CCollateralCapErc20.initializeAccountCollateralTokens(address) (CCollateralCapErc20.sol#2773-2790)\n\t- CCollateralCapErc20.redeemFresh(address,uint256,uint256) (CCollateralCapErc20.sol#3086-3173)\n\t- CCollateralCapErc20.registerCollateral(address) (CCollateralCapErc20.sol#2722-2730)\n\t- CCollateralCapErc20.seizeInternal(address,address,address,uint256) (CCollateralCapErc20.sol#3185-3223)\n\t- CCollateralCapErc20.unregisterCollateral(address) (CCollateralCapErc20.sol#2737-2744)\n\t- accountTokens[src] = sub_(accountTokens[src],tokens) (CCollateralCapErc20.sol#2910)\n\tCTokenStorage.accountTokens (CCollateralCapErc20.sol#193) can be used in cross function reentrancies:\n\t- CToken.balanceOf(address) (CCollateralCapErc20.sol#1402-1404)\n\t- CToken.balanceOfUnderlying(address) (CCollateralCapErc20.sol#1412-1415)\n\t- CCollateralCapErc20.getCTokenBalanceInternal(address) (CCollateralCapErc20.sol#2939-2948)\n\t- CCollateralCapErc20.initializeAccountCollateralTokens(address) (CCollateralCapErc20.sol#2773-2790)\n\t- CCollateralCapErc20.mintFresh(address,uint256) (CCollateralCapErc20.sol#3007-3070)\n\t- CCollateralCapErc20.redeemFresh(address,uint256,uint256) (CCollateralCapErc20.sol#3086-3173)\n\t- CCollateralCapErc20.registerCollateral(address) (CCollateralCapErc20.sol#2722-2730)\n\t- CCollateralCapErc20.seizeInternal(address,address,address,uint256) (CCollateralCapErc20.sol#3185-3223)\n\t- accountTokens[dst] = add_(accountTokens[dst],tokens) (CCollateralCapErc20.sol#2911)\n\tCTokenStorage.accountTokens (CCollateralCapErc20.sol#193) can be used in cross function reentrancies:\n\t- CToken.balanceOf(address) (CCollateralCapErc20.sol#1402-1404)\n\t- CToken.balanceOfUnderlying(address) (CCollateralCapErc20.sol#1412-1415)\n\t- CCollateralCapErc20.getCTokenBalanceInternal(address) (CCollateralCapErc20.sol#2939-2948)\n\t- CCollateralCapErc20.initializeAccountCollateralTokens(address) (CCollateralCapErc20.sol#2773-2790)\n\t- CCollateralCapErc20.mintFresh(address,uint256) (CCollateralCapErc20.sol#3007-3070)\n\t- CCollateralCapErc20.redeemFresh(address,uint256,uint256) (CCollateralCapErc20.sol#3086-3173)\n\t- CCollateralCapErc20.registerCollateral(address) (CCollateralCapErc20.sol#2722-2730)\n\t- CCollateralCapErc20.seizeInternal(address,address,address,uint256) (CCollateralCapErc20.sol#3185-3223)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "CCollateralCapErc20",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-C.R.E.A.M. Finance-Compound Protocol/compound-protocol-23a4ae93adc70334553f5a83429a4e967c1eefaa/contracts/CCollateralCapErc20.sol",
            "function": "initialize",
            "impact": "Medium",
            "line": 2561,
            "line_end": 2574,
            "message": "CCollateralCapErc20.initialize(address,ComptrollerInterface,InterestRateModel,uint256,string,string,uint8) (CCollateralCapErc20.sol#2561-2574) ignores return value by EIP20Interface(underlying).totalSupply() (CCollateralCapErc20.sol#2573)\n",
            "name": "unused-return",
            "check": "FP"
        },
        {
            "confidence": "High",
            "contract": "Exponential",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-C.R.E.A.M. Finance-Compound Protocol/compound-protocol-23a4ae93adc70334553f5a83429a4e967c1eefaa/contracts/CCollateralCapErc20.sol",
            "function": "fraction",
            "impact": "Low",
            "line": 892,
            "message": "Exponential.divScalarByExpTruncate(uint256,Exponential.Exp).fraction (CCollateralCapErc20.sol#892) shadows:\n\t- Exponential.fraction(uint256,uint256) (CCollateralCapErc20.sol#1122-1124) (function)\n",
            "name": "shadowing-local",
            "check": "FP"
        },
        {
            "confidence": "High",
            "contract": "Exponential",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-C.R.E.A.M. Finance-Compound Protocol/compound-protocol-23a4ae93adc70334553f5a83429a4e967c1eefaa/contracts/CCollateralCapErc20.sol",
            "function": "fraction",
            "impact": "Low",
            "line": 921,
            "message": "Exponential.div_ScalarByExpTruncate(uint256,Exponential.Exp).fraction (CCollateralCapErc20.sol#921) shadows:\n\t- Exponential.fraction(uint256,uint256) (CCollateralCapErc20.sol#1122-1124) (function)\n",
            "name": "shadowing-local",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "CToken",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-C.R.E.A.M. Finance-Compound Protocol/compound-protocol-23a4ae93adc70334553f5a83429a4e967c1eefaa/contracts/CCollateralCapErc20.sol",
            "function": "borrowFresh",
            "impact": "Low",
            "line": 1729,
            "line_end": 1782,
            "message": "Reentrancy in CToken.borrowFresh(address,uint256) (CCollateralCapErc20.sol#1729-1782):\n\tExternal calls:\n\t- allowed = comptroller.borrowAllowed(address(this),borrower,borrowAmount) (CCollateralCapErc20.sol#1731)\n\tState variables written after the call(s):\n\t- accountBorrows[borrower].principal = vars.accountBorrowsNew (CCollateralCapErc20.sol#1770)\n\t- accountBorrows[borrower].interestIndex = borrowIndex (CCollateralCapErc20.sol#1771)\n\t- totalBorrows = vars.totalBorrowsNew (CCollateralCapErc20.sol#1772)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "CCollateralCapErc20",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-C.R.E.A.M. Finance-Compound Protocol/compound-protocol-23a4ae93adc70334553f5a83429a4e967c1eefaa/contracts/CCollateralCapErc20.sol",
            "function": "transferTokens",
            "impact": "Low",
            "line": 2869,
            "line_end": 2932,
            "message": "Reentrancy in CCollateralCapErc20.transferTokens(address,address,address,uint256) (CCollateralCapErc20.sol#2869-2932):\n\tExternal calls:\n\t- allowed = comptroller.transferAllowed(address(this),src,dst,collateralTokens) (CCollateralCapErc20.sol#2890)\n\tState variables written after the call(s):\n\t- transferAllowances[src][spender] = allowanceNew (CCollateralCapErc20.sol#2922)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "CCollateralCapErc20",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-C.R.E.A.M. Finance-Compound Protocol/compound-protocol-23a4ae93adc70334553f5a83429a4e967c1eefaa/contracts/CCollateralCapErc20.sol",
            "function": "decreaseUserCollateralInternal",
            "impact": "Low",
            "line": 2985,
            "line_end": 2992,
            "message": "Reentrancy in CCollateralCapErc20.decreaseUserCollateralInternal(address,uint256) (CCollateralCapErc20.sol#2985-2992):\n\tExternal calls:\n\t- require(bool,string)(comptroller.redeemAllowed(address(this),account,amount) == 0,comptroller rejection) (CCollateralCapErc20.sol#2986)\n\tState variables written after the call(s):\n\t- accountCollateralTokens[account] = sub_(accountCollateralTokens[account],amount) (CCollateralCapErc20.sol#2989)\n\t- totalCollateralTokens = sub_(totalCollateralTokens,amount) (CCollateralCapErc20.sol#2988)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "CCollateralCapErc20",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-C.R.E.A.M. Finance-Compound Protocol/compound-protocol-23a4ae93adc70334553f5a83429a4e967c1eefaa/contracts/CCollateralCapErc20.sol",
            "function": "doTransferIn",
            "impact": "Low",
            "line": 2801,
            "line_end": 2827,
            "message": "Reentrancy in CCollateralCapErc20.doTransferIn(address,uint256) (CCollateralCapErc20.sol#2801-2827):\n\tExternal calls:\n\t- token.transferFrom(from,address(this),amount) (CCollateralCapErc20.sol#2804)\n\tState variables written after the call(s):\n\t- internalCash = add_(internalCash,transferredIn) (CCollateralCapErc20.sol#2825)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "CToken",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-C.R.E.A.M. Finance-Compound Protocol/compound-protocol-23a4ae93adc70334553f5a83429a4e967c1eefaa/contracts/CCollateralCapErc20.sol",
            "function": "repayBorrowFresh",
            "impact": "Low",
            "line": 1833,
            "line_end": 1894,
            "message": "Reentrancy in CToken.repayBorrowFresh(address,address,uint256) (CCollateralCapErc20.sol#1833-1894):\n\tExternal calls:\n\t- allowed = comptroller.repayBorrowAllowed(address(this),payer,borrower,repayAmount) (CCollateralCapErc20.sol#1835)\n\tState variables written after the call(s):\n\t- accountBorrows[borrower].principal = vars.accountBorrowsNew (CCollateralCapErc20.sol#1882)\n\t- accountBorrows[borrower].interestIndex = borrowIndex (CCollateralCapErc20.sol#1883)\n\t- totalBorrows = vars.totalBorrowsNew (CCollateralCapErc20.sol#1884)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "CCollateralCapErc20",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-C.R.E.A.M. Finance-Compound Protocol/compound-protocol-23a4ae93adc70334553f5a83429a4e967c1eefaa/contracts/CCollateralCapErc20.sol",
            "function": "flashLoan",
            "impact": "Low",
            "line": 2690,
            "line_end": 2714,
            "message": "Reentrancy in CCollateralCapErc20.flashLoan(address,uint256,bytes) (CCollateralCapErc20.sol#2690-2714):\n\tExternal calls:\n\t- doTransferOut(address(uint160(receiver)),amount) (CCollateralCapErc20.sol#2699)\n\t\t- token.transfer(to,amount) (CCollateralCapErc20.sol#2840)\n\t- IFlashloanReceiver(receiver).executeOperation(msg.sender,underlying,amount,totalFee,params) (CCollateralCapErc20.sol#2702)\n\tState variables written after the call(s):\n\t- totalReserves = add_(totalReserves,reservesFee) (CCollateralCapErc20.sol#2710)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "CCollateralCapErc20",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-C.R.E.A.M. Finance-Compound Protocol/compound-protocol-23a4ae93adc70334553f5a83429a4e967c1eefaa/contracts/CCollateralCapErc20.sol",
            "function": "doTransferOut",
            "impact": "Low",
            "line": 2838,
            "line_end": 2858,
            "message": "Reentrancy in CCollateralCapErc20.doTransferOut(address,uint256) (CCollateralCapErc20.sol#2838-2858):\n\tExternal calls:\n\t- token.transfer(to,amount) (CCollateralCapErc20.sol#2840)\n\tState variables written after the call(s):\n\t- internalCash = sub_(internalCash,amount) (CCollateralCapErc20.sol#2857)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "CCollateralCapErc20",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-C.R.E.A.M. Finance-Compound Protocol/compound-protocol-23a4ae93adc70334553f5a83429a4e967c1eefaa/contracts/CCollateralCapErc20.sol",
            "function": "seizeInternal",
            "impact": "Low",
            "line": 3185,
            "line_end": 3223,
            "message": "Reentrancy in CCollateralCapErc20.seizeInternal(address,address,address,uint256) (CCollateralCapErc20.sol#3185-3223):\n\tExternal calls:\n\t- allowed = comptroller.seizeAllowed(address(this),seizerToken,liquidator,borrower,seizeTokens) (CCollateralCapErc20.sol#3191)\n\tEvent emitted after the call(s):\n\t- Failure(uint256(err),uint256(info),opaqueError) (CCollateralCapErc20.sol#656)\n\t\t- failOpaque(Error.COMPTROLLER_REJECTION,FailureInfo.LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,allowed) (CCollateralCapErc20.sol#3193)\n\t- Failure(uint256(err),uint256(info),0) (CCollateralCapErc20.sol#647)\n\t\t- fail(Error.INVALID_ACCOUNT_PAIR,FailureInfo.LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER) (CCollateralCapErc20.sol#3198)\n\t- Transfer(borrower,liquidator,seizeTokens) (CCollateralCapErc20.sol#3214)\n\t- UserCollateralChanged(borrower,accountCollateralTokens[borrower]) (CCollateralCapErc20.sol#3215)\n\t- UserCollateralChanged(liquidator,accountCollateralTokens[liquidator]) (CCollateralCapErc20.sol#3216)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "CCollateralCapErc20",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-C.R.E.A.M. Finance-Compound Protocol/compound-protocol-23a4ae93adc70334553f5a83429a4e967c1eefaa/contracts/CCollateralCapErc20.sol",
            "function": "redeemFresh",
            "impact": "Low",
            "line": 3086,
            "line_end": 3173,
            "message": "Reentrancy in CCollateralCapErc20.redeemFresh(address,uint256,uint256) (CCollateralCapErc20.sol#3086-3173):\n\tExternal calls:\n\t- doTransferOut(redeemer,vars.redeemAmount) (CCollateralCapErc20.sol#3148)\n\t\t- token.transfer(to,amount) (CCollateralCapErc20.sol#2840)\n\t- decreaseUserCollateralInternal(redeemer,collateralTokens) (CCollateralCapErc20.sol#3162)\n\t\t- require(bool,string)(comptroller.redeemAllowed(address(this),account,amount) == 0,comptroller rejection) (CCollateralCapErc20.sol#2986)\n\tEvent emitted after the call(s):\n\t- Redeem(redeemer,vars.redeemAmount,vars.redeemTokens) (CCollateralCapErc20.sol#3167)\n\t- Transfer(redeemer,address(this),vars.redeemTokens) (CCollateralCapErc20.sol#3166)\n\t- UserCollateralChanged(account,accountCollateralTokens[account]) (CCollateralCapErc20.sol#2991)\n\t\t- decreaseUserCollateralInternal(redeemer,collateralTokens) (CCollateralCapErc20.sol#3162)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "CToken",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-C.R.E.A.M. Finance-Compound Protocol/compound-protocol-23a4ae93adc70334553f5a83429a4e967c1eefaa/contracts/CCollateralCapErc20.sol",
            "function": "borrowFresh",
            "impact": "Low",
            "line": 1729,
            "line_end": 1782,
            "message": "Reentrancy in CToken.borrowFresh(address,uint256) (CCollateralCapErc20.sol#1729-1782):\n\tExternal calls:\n\t- allowed = comptroller.borrowAllowed(address(this),borrower,borrowAmount) (CCollateralCapErc20.sol#1731)\n\tEvent emitted after the call(s):\n\t- Borrow(borrower,borrowAmount,vars.accountBorrowsNew,vars.totalBorrowsNew) (CCollateralCapErc20.sol#1775)\n\t- Failure(uint256(err),uint256(info),0) (CCollateralCapErc20.sol#647)\n\t\t- fail(Error.MARKET_NOT_FRESH,FailureInfo.BORROW_FRESHNESS_CHECK) (CCollateralCapErc20.sol#1738)\n\t- Failure(uint256(err),uint256(info),0) (CCollateralCapErc20.sol#647)\n\t\t- fail(Error.TOKEN_INSUFFICIENT_CASH,FailureInfo.BORROW_CASH_NOT_AVAILABLE) (CCollateralCapErc20.sol#1743)\n\t- Failure(uint256(err),uint256(info),opaqueError) (CCollateralCapErc20.sol#656)\n\t\t- failOpaque(Error.COMPTROLLER_REJECTION,FailureInfo.BORROW_COMPTROLLER_REJECTION,allowed) (CCollateralCapErc20.sol#1733)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "CToken",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-C.R.E.A.M. Finance-Compound Protocol/compound-protocol-23a4ae93adc70334553f5a83429a4e967c1eefaa/contracts/CCollateralCapErc20.sol",
            "function": "repayBorrowFresh",
            "impact": "Low",
            "line": 1833,
            "line_end": 1894,
            "message": "Reentrancy in CToken.repayBorrowFresh(address,address,uint256) (CCollateralCapErc20.sol#1833-1894):\n\tExternal calls:\n\t- allowed = comptroller.repayBorrowAllowed(address(this),payer,borrower,repayAmount) (CCollateralCapErc20.sol#1835)\n\tEvent emitted after the call(s):\n\t- Failure(uint256(err),uint256(info),opaqueError) (CCollateralCapErc20.sol#656)\n\t\t- (failOpaque(Error.COMPTROLLER_REJECTION,FailureInfo.REPAY_BORROW_COMPTROLLER_REJECTION,allowed),0) (CCollateralCapErc20.sol#1837)\n\t- Failure(uint256(err),uint256(info),0) (CCollateralCapErc20.sol#647)\n\t\t- (fail(Error.MARKET_NOT_FRESH,FailureInfo.REPAY_BORROW_FRESHNESS_CHECK),0) (CCollateralCapErc20.sol#1842)\n\t- RepayBorrow(payer,borrower,vars.actualRepayAmount,vars.accountBorrowsNew,vars.totalBorrowsNew) (CCollateralCapErc20.sol#1887)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "CToken",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-C.R.E.A.M. Finance-Compound Protocol/compound-protocol-23a4ae93adc70334553f5a83429a4e967c1eefaa/contracts/CCollateralCapErc20.sol",
            "function": "liquidateBorrowFresh",
            "impact": "Low",
            "line": 1930,
            "line_end": 1999,
            "message": "Reentrancy in CToken.liquidateBorrowFresh(address,address,uint256,CTokenInterface) (CCollateralCapErc20.sol#1930-1999):\n\tExternal calls:\n\t- allowed = comptroller.liquidateBorrowAllowed(address(this),address(cTokenCollateral),liquidator,borrower,repayAmount) (CCollateralCapErc20.sol#1932)\n\tEvent emitted after the call(s):\n\t- Failure(uint256(err),uint256(info),0) (CCollateralCapErc20.sol#647)\n\t\t- (fail(Error.MARKET_NOT_FRESH,FailureInfo.LIQUIDATE_FRESHNESS_CHECK),0) (CCollateralCapErc20.sol#1939)\n\t- Failure(uint256(err),uint256(info),0) (CCollateralCapErc20.sol#647)\n\t\t- (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED,FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_ZERO),0) (CCollateralCapErc20.sol#1954)\n\t- Failure(uint256(err),uint256(info),opaqueError) (CCollateralCapErc20.sol#656)\n\t\t- (failOpaque(Error.COMPTROLLER_REJECTION,FailureInfo.LIQUIDATE_COMPTROLLER_REJECTION,allowed),0) (CCollateralCapErc20.sol#1934)\n\t- Failure(uint256(err),uint256(info),0) (CCollateralCapErc20.sol#647)\n\t\t- (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED,FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX),0) (CCollateralCapErc20.sol#1959)\n\t- Failure(uint256(err),uint256(info),0) (CCollateralCapErc20.sol#647)\n\t\t- (fail(Error.MARKET_NOT_FRESH,FailureInfo.LIQUIDATE_COLLATERAL_FRESHNESS_CHECK),0) (CCollateralCapErc20.sol#1944)\n\t- Failure(uint256(err),uint256(info),0) (CCollateralCapErc20.sol#647)\n\t\t- (fail(Error.INVALID_ACCOUNT_PAIR,FailureInfo.LIQUIDATE_LIQUIDATOR_IS_BORROWER),0) (CCollateralCapErc20.sol#1949)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "CCollateralCapErc20",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-C.R.E.A.M. Finance-Compound Protocol/compound-protocol-23a4ae93adc70334553f5a83429a4e967c1eefaa/contracts/CCollateralCapErc20.sol",
            "function": "mintFresh",
            "impact": "Low",
            "line": 3007,
            "line_end": 3070,
            "message": "Reentrancy in CCollateralCapErc20.mintFresh(address,uint256) (CCollateralCapErc20.sol#3007-3070):\n\tExternal calls:\n\t- allowed = comptroller.mintAllowed(address(this),minter,mintAmount) (CCollateralCapErc20.sol#3012)\n\t- vars.actualMintAmount = doTransferIn(minter,mintAmount) (CCollateralCapErc20.sol#3038)\n\t\t- token.transferFrom(from,address(this),amount) (CCollateralCapErc20.sol#2804)\n\tEvent emitted after the call(s):\n\t- Mint(minter,vars.actualMintAmount,vars.mintTokens) (CCollateralCapErc20.sol#3062)\n\t- Transfer(address(this),minter,vars.mintTokens) (CCollateralCapErc20.sol#3063)\n\t- UserCollateralChanged(account,accountCollateralTokens[account]) (CCollateralCapErc20.sol#2965)\n\t\t- increaseUserCollateralInternal(minter,vars.mintTokens) (CCollateralCapErc20.sol#3058)\n\t- UserCollateralChanged(account,accountCollateralTokens[account]) (CCollateralCapErc20.sol#2974)\n\t\t- increaseUserCollateralInternal(minter,vars.mintTokens) (CCollateralCapErc20.sol#3058)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "CCollateralCapErc20",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-C.R.E.A.M. Finance-Compound Protocol/compound-protocol-23a4ae93adc70334553f5a83429a4e967c1eefaa/contracts/CCollateralCapErc20.sol",
            "function": "mintFresh",
            "impact": "Low",
            "line": 3007,
            "line_end": 3070,
            "message": "Reentrancy in CCollateralCapErc20.mintFresh(address,uint256) (CCollateralCapErc20.sol#3007-3070):\n\tExternal calls:\n\t- allowed = comptroller.mintAllowed(address(this),minter,mintAmount) (CCollateralCapErc20.sol#3012)\n\tEvent emitted after the call(s):\n\t- Failure(uint256(err),uint256(info),0) (CCollateralCapErc20.sol#647)\n\t\t- (fail(Error.MARKET_NOT_FRESH,FailureInfo.MINT_FRESHNESS_CHECK),0) (CCollateralCapErc20.sol#3019)\n\t- Failure(uint256(err),uint256(info),opaqueError) (CCollateralCapErc20.sol#656)\n\t\t- (failOpaque(Error.COMPTROLLER_REJECTION,FailureInfo.MINT_COMPTROLLER_REJECTION,allowed),0) (CCollateralCapErc20.sol#3014)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "CToken",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-C.R.E.A.M. Finance-Compound Protocol/compound-protocol-23a4ae93adc70334553f5a83429a4e967c1eefaa/contracts/CCollateralCapErc20.sol",
            "function": "liquidateBorrowFresh",
            "impact": "Low",
            "line": 1930,
            "line_end": 1999,
            "message": "Reentrancy in CToken.liquidateBorrowFresh(address,address,uint256,CTokenInterface) (CCollateralCapErc20.sol#1930-1999):\n\tExternal calls:\n\t- allowed = comptroller.liquidateBorrowAllowed(address(this),address(cTokenCollateral),liquidator,borrower,repayAmount) (CCollateralCapErc20.sol#1932)\n\t- (repayBorrowError,actualRepayAmount) = repayBorrowFresh(liquidator,borrower,repayAmount) (CCollateralCapErc20.sol#1964)\n\t\t- allowed = comptroller.repayBorrowAllowed(address(this),payer,borrower,repayAmount) (CCollateralCapErc20.sol#1835)\n\t- seizeError = cTokenCollateral.seize(liquidator,borrower,seizeTokens) (CCollateralCapErc20.sol#1985)\n\tEvent emitted after the call(s):\n\t- LiquidateBorrow(liquidator,borrower,actualRepayAmount,address(cTokenCollateral),seizeTokens) (CCollateralCapErc20.sol#1992)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "CToken",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-C.R.E.A.M. Finance-Compound Protocol/compound-protocol-23a4ae93adc70334553f5a83429a4e967c1eefaa/contracts/CCollateralCapErc20.sol",
            "function": "liquidateBorrowFresh",
            "impact": "Low",
            "line": 1930,
            "line_end": 1999,
            "message": "Reentrancy in CToken.liquidateBorrowFresh(address,address,uint256,CTokenInterface) (CCollateralCapErc20.sol#1930-1999):\n\tExternal calls:\n\t- allowed = comptroller.liquidateBorrowAllowed(address(this),address(cTokenCollateral),liquidator,borrower,repayAmount) (CCollateralCapErc20.sol#1932)\n\t- (repayBorrowError,actualRepayAmount) = repayBorrowFresh(liquidator,borrower,repayAmount) (CCollateralCapErc20.sol#1964)\n\t\t- allowed = comptroller.repayBorrowAllowed(address(this),payer,borrower,repayAmount) (CCollateralCapErc20.sol#1835)\n\tEvent emitted after the call(s):\n\t- Failure(uint256(err),uint256(info),0) (CCollateralCapErc20.sol#647)\n\t\t- (fail(TokenErrorReporter.Error(repayBorrowError),FailureInfo.LIQUIDATE_REPAY_BORROW_FRESH_FAILED),0) (CCollateralCapErc20.sol#1966)\n\t- Failure(uint256(err),uint256(info),opaqueError) (CCollateralCapErc20.sol#656)\n\t\t- (repayBorrowError,actualRepayAmount) = repayBorrowFresh(liquidator,borrower,repayAmount) (CCollateralCapErc20.sol#1964)\n\t- Failure(uint256(err),uint256(info),0) (CCollateralCapErc20.sol#647)\n\t\t- (repayBorrowError,actualRepayAmount) = repayBorrowFresh(liquidator,borrower,repayAmount) (CCollateralCapErc20.sol#1964)\n\t- RepayBorrow(payer,borrower,vars.actualRepayAmount,vars.accountBorrowsNew,vars.totalBorrowsNew) (CCollateralCapErc20.sol#1887)\n\t\t- (repayBorrowError,actualRepayAmount) = repayBorrowFresh(liquidator,borrower,repayAmount) (CCollateralCapErc20.sol#1964)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "CCollateralCapErc20",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-C.R.E.A.M. Finance-Compound Protocol/compound-protocol-23a4ae93adc70334553f5a83429a4e967c1eefaa/contracts/CCollateralCapErc20.sol",
            "function": "decreaseUserCollateralInternal",
            "impact": "Low",
            "line": 2985,
            "line_end": 2992,
            "message": "Reentrancy in CCollateralCapErc20.decreaseUserCollateralInternal(address,uint256) (CCollateralCapErc20.sol#2985-2992):\n\tExternal calls:\n\t- require(bool,string)(comptroller.redeemAllowed(address(this),account,amount) == 0,comptroller rejection) (CCollateralCapErc20.sol#2986)\n\tEvent emitted after the call(s):\n\t- UserCollateralChanged(account,accountCollateralTokens[account]) (CCollateralCapErc20.sol#2991)\n",
            "name": "reentrancy-events",
            "check": "FP"
        }
    ],
    "infos": [],
    "parser": {
        "id": "slither-0.10.0",
        "mode": "solidity",
        "version": "2024/04/30"
    }
}