'solc --version' running
'solc /sb/Pluteus (1).sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes --allow-paths .,/sb' running
Compilation warnings/errors on /sb/Pluteus (1).sol:
Warning: Contract code size is 26869 bytes and exceeds 24576 bytes (a limit introduced in Spurious Dragon). This contract may not be deployable on Mainnet. Consider enabling the optimizer (with a low "runs" value!), turning off revert strings, or using libraries.
   --> /sb/Pluteus (1).sol:681:1:
    |
681 | contract Pluteus is Context, IERC20, Ownable, ITimelockable {
    | ^ (Relevant source part starts here and spans across multiple lines).



Reentrancy in Pluteus._transfer(address,address,uint256) (../../sb/Pluteus (1).sol#1067-1103):
	External calls:
	- swapAndLiquify(contractTokenBalance) (../../sb/Pluteus (1).sol#1093)
		- pancakeswapV2Router.addLiquidityBNB{value: bnbAmount}(address(this),tokenAmount,0,0,address(this),block.timestamp) (../../sb/Pluteus (1).sol#1142-1149)
		- pancakeswapV2Router.swapExactTokensForBNBSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (../../sb/Pluteus (1).sol#1122-1128)
	External calls sending eth:
	- swapAndLiquify(contractTokenBalance) (../../sb/Pluteus (1).sol#1093)
		- pancakeswapV2Router.addLiquidityBNB{value: bnbAmount}(address(this),tokenAmount,0,0,address(this),block.timestamp) (../../sb/Pluteus (1).sol#1142-1149)
	State variables written after the call(s):
	- _tokenTransfer(from,to,amount,takeFee) (../../sb/Pluteus (1).sol#1102)
		- _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity) (../../sb/Pluteus (1).sol#1016)
		- _rOwned[PLUTEUS_ADDRESS] = _rOwned[PLUTEUS_ADDRESS] + rPluteus (../../sb/Pluteus (1).sol#860)
		- _rOwned[sender] = _rOwned[sender].sub(rAmount) (../../sb/Pluteus (1).sol#1172)
		- _rOwned[sender] = _rOwned[sender].sub(rAmount) (../../sb/Pluteus (1).sol#1182)
		- _rOwned[sender] = _rOwned[sender].sub(rAmount) (../../sb/Pluteus (1).sol#925)
		- _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount) (../../sb/Pluteus (1).sol#1173)
		- _rOwned[sender] = _rOwned[sender].sub(rAmount) (../../sb/Pluteus (1).sol#1194)
		- _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount) (../../sb/Pluteus (1).sol#1195)
		- _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount) (../../sb/Pluteus (1).sol#1184)
		- _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount) (../../sb/Pluteus (1).sol#927)
	Pluteus._rOwned (../../sb/Pluteus (1).sol#685) can be used in cross function reentrancies:
	- Pluteus._getCurrentSupply() (../../sb/Pluteus (1).sol#1001-1011)
	- Pluteus._sharePluteus(uint256) (../../sb/Pluteus (1).sol#857-863)
	- Pluteus._takeLiquidity(uint256) (../../sb/Pluteus (1).sol#1013-1019)
	- Pluteus._transferBothExcluded(address,address,uint256) (../../sb/Pluteus (1).sol#922-932)
	- Pluteus._transferFromExcluded(address,address,uint256) (../../sb/Pluteus (1).sol#1191-1200)
	- Pluteus._transferStandard(address,address,uint256) (../../sb/Pluteus (1).sol#1170-1178)
	- Pluteus._transferToExcluded(address,address,uint256) (../../sb/Pluteus (1).sol#1180-1189)
	- Pluteus.balanceOf(address) (../../sb/Pluteus (1).sol#772-775)
	- Pluteus.constructor() (../../sb/Pluteus (1).sol#737-754)
	- Pluteus.deliver(uint256) (../../sb/Pluteus (1).sol#848-855)
	- Pluteus.excludeFromReward(address) (../../sb/Pluteus (1).sol#900-907)
	- Pluteus.releaseTimelockedFunds(address,uint256) (../../sb/Pluteus (1).sol#823-828)
	- _tokenTransfer(from,to,amount,takeFee) (../../sb/Pluteus (1).sol#1102)
		- _rTotal = _rTotal.sub(rFee) (../../sb/Pluteus (1).sol#969)
	Pluteus._rTotal (../../sb/Pluteus (1).sol#696) can be used in cross function reentrancies:
	- Pluteus._getCurrentSupply() (../../sb/Pluteus (1).sol#1001-1011)
	- Pluteus._reflectFee(uint256,uint256) (../../sb/Pluteus (1).sol#968-971)
	- Pluteus.constructor() (../../sb/Pluteus (1).sol#737-754)
	- Pluteus.deliver(uint256) (../../sb/Pluteus (1).sol#848-855)
	- Pluteus.tokenFromReflection(uint256) (../../sb/Pluteus (1).sol#894-898)
	- _tokenTransfer(from,to,amount,takeFee) (../../sb/Pluteus (1).sol#1102)
		- _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity) (../../sb/Pluteus (1).sol#1018)
		- _tOwned[PLUTEUS_ADDRESS] = _tOwned[PLUTEUS_ADDRESS] + tPluteus (../../sb/Pluteus (1).sol#862)
		- _tOwned[sender] = _tOwned[sender].sub(tAmount) (../../sb/Pluteus (1).sol#1193)
		- _tOwned[sender] = _tOwned[sender].sub(tAmount) (../../sb/Pluteus (1).sol#924)
		- _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount) (../../sb/Pluteus (1).sol#1183)
		- _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount) (../../sb/Pluteus (1).sol#926)
	Pluteus._tOwned (../../sb/Pluteus (1).sol#686) can be used in cross function reentrancies:
	- Pluteus._getCurrentSupply() (../../sb/Pluteus (1).sol#1001-1011)
	- Pluteus._sharePluteus(uint256) (../../sb/Pluteus (1).sol#857-863)
	- Pluteus._takeLiquidity(uint256) (../../sb/Pluteus (1).sol#1013-1019)
	- Pluteus._transferBothExcluded(address,address,uint256) (../../sb/Pluteus (1).sol#922-932)
	- Pluteus._transferFromExcluded(address,address,uint256) (../../sb/Pluteus (1).sol#1191-1200)
	- Pluteus._transferToExcluded(address,address,uint256) (../../sb/Pluteus (1).sol#1180-1189)
	- Pluteus.balanceOf(address) (../../sb/Pluteus (1).sol#772-775)
	- Pluteus.burnToken(uint256,address) (../../sb/Pluteus (1).sol#865-877)
	- Pluteus.excludeFromReward(address) (../../sb/Pluteus (1).sol#900-907)
	- Pluteus.includeInReward(address) (../../sb/Pluteus (1).sol#909-920)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities

Pluteus (../../sb/Pluteus (1).sol#681-1217) has incorrect ERC20 function interface:IERC20.transferFrom(address,address,uint256) (../../sb/Pluteus (1).sol#66)
Pluteus (../../sb/Pluteus (1).sol#681-1217) has incorrect ERC20 function interface:Pluteus.transferFrom(address,address,uint256) (../../sb/Pluteus (1).sol#802-816)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-erc20-interface

Pluteus.addLiquidity(uint256,uint256) (../../sb/Pluteus (1).sol#1137-1150) ignores return value by pancakeswapV2Router.addLiquidityBNB{value: bnbAmount}(address(this),tokenAmount,0,0,address(this),block.timestamp) (../../sb/Pluteus (1).sol#1142-1149)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return

Pluteus.allowance(address,address).owner (../../sb/Pluteus (1).sol#782) shadows:
	- Ownable.owner() (../../sb/Pluteus (1).sol#419-421) (function)
Pluteus._approve(address,address,uint256).owner (../../sb/Pluteus (1).sol#1059) shadows:
	- Ownable.owner() (../../sb/Pluteus (1).sol#419-421) (function)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing

Pluteus.setTaxFeePercent(uint256) (../../sb/Pluteus (1).sol#942-944) should emit an event for: 
	- _taxFee = taxFee (../../sb/Pluteus (1).sol#943) 
Pluteus.setLiquidityFeePercent(uint256) (../../sb/Pluteus (1).sol#946-948) should emit an event for: 
	- _liquidityFee = liquidityFee (../../sb/Pluteus (1).sol#947) 
Pluteus.setPluteusFundPercent(uint256) (../../sb/Pluteus (1).sol#950-952) should emit an event for: 
	- _pluteusFund = pluteusFund (../../sb/Pluteus (1).sol#951) 
Pluteus.setMaxTxPercent(uint256) (../../sb/Pluteus (1).sol#954-958) should emit an event for: 
	- _maxTxAmount = _tTotal.mul(maxTxPercent).div(10 ** 2) (../../sb/Pluteus (1).sol#955-957) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-arithmetic

Pluteus.setPluteusFundAddress(address).newAddress (../../sb/Pluteus (1).sol#1202) lacks a zero-check on :
		- PLUTEUS_ADDRESS = newAddress (../../sb/Pluteus (1).sol#1203)
Pluteus.withdrawLeftoverBnb(address).to (../../sb/Pluteus (1).sol#1212) lacks a zero-check on :
		- address(to).transfer(leftover) (../../sb/Pluteus (1).sol#1214)
TokenTimelock.constructor(address,address,uint256).token_ (../../sb/Pluteus (1).sol#1224) lacks a zero-check on :
		- _token = token_ (../../sb/Pluteus (1).sol#1227)
TokenTimelock.constructor(address,address,uint256).beneficiary_ (../../sb/Pluteus (1).sol#1224) lacks a zero-check on :
		- _beneficiary = beneficiary_ (../../sb/Pluteus (1).sol#1228)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

Reentrancy in Pluteus._transfer(address,address,uint256) (../../sb/Pluteus (1).sol#1067-1103):
	External calls:
	- swapAndLiquify(contractTokenBalance) (../../sb/Pluteus (1).sol#1093)
		- pancakeswapV2Router.addLiquidityBNB{value: bnbAmount}(address(this),tokenAmount,0,0,address(this),block.timestamp) (../../sb/Pluteus (1).sol#1142-1149)
		- pancakeswapV2Router.swapExactTokensForBNBSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (../../sb/Pluteus (1).sol#1122-1128)
	External calls sending eth:
	- swapAndLiquify(contractTokenBalance) (../../sb/Pluteus (1).sol#1093)
		- pancakeswapV2Router.addLiquidityBNB{value: bnbAmount}(address(this),tokenAmount,0,0,address(this),block.timestamp) (../../sb/Pluteus (1).sol#1142-1149)
	State variables written after the call(s):
	- _tokenTransfer(from,to,amount,takeFee) (../../sb/Pluteus (1).sol#1102)
		- _liquidityFee = _previousLiquidityFee (../../sb/Pluteus (1).sol#1051)
		- _liquidityFee = 0 (../../sb/Pluteus (1).sol#1045)
	- _tokenTransfer(from,to,amount,takeFee) (../../sb/Pluteus (1).sol#1102)
		- _pluteusFund = _previousPluteusFund (../../sb/Pluteus (1).sol#1052)
		- _pluteusFund = 0 (../../sb/Pluteus (1).sol#1046)
	- _tokenTransfer(from,to,amount,takeFee) (../../sb/Pluteus (1).sol#1102)
		- _previousLiquidityFee = _liquidityFee (../../sb/Pluteus (1).sol#1041)
	- _tokenTransfer(from,to,amount,takeFee) (../../sb/Pluteus (1).sol#1102)
		- _previousPluteusFund = _pluteusFund (../../sb/Pluteus (1).sol#1042)
	- _tokenTransfer(from,to,amount,takeFee) (../../sb/Pluteus (1).sol#1102)
		- _previousTaxFee = _taxFee (../../sb/Pluteus (1).sol#1040)
	- _tokenTransfer(from,to,amount,takeFee) (../../sb/Pluteus (1).sol#1102)
		- _tFeeTotal = _tFeeTotal.add(tFee) (../../sb/Pluteus (1).sol#970)
	- _tokenTransfer(from,to,amount,takeFee) (../../sb/Pluteus (1).sol#1102)
		- _taxFee = _previousTaxFee (../../sb/Pluteus (1).sol#1050)
		- _taxFee = 0 (../../sb/Pluteus (1).sol#1044)
Reentrancy in Pluteus.swapAndLiquify(uint256) (../../sb/Pluteus (1).sol#1105-1113):
	External calls:
	- swapTokensForBnb(half) (../../sb/Pluteus (1).sol#1109)
		- pancakeswapV2Router.swapExactTokensForBNBSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (../../sb/Pluteus (1).sol#1122-1128)
	- addLiquidity(otherHalf,newBalance) (../../sb/Pluteus (1).sol#1111)
		- pancakeswapV2Router.addLiquidityBNB{value: bnbAmount}(address(this),tokenAmount,0,0,address(this),block.timestamp) (../../sb/Pluteus (1).sol#1142-1149)
	External calls sending eth:
	- addLiquidity(otherHalf,newBalance) (../../sb/Pluteus (1).sol#1111)
		- pancakeswapV2Router.addLiquidityBNB{value: bnbAmount}(address(this),tokenAmount,0,0,address(this),block.timestamp) (../../sb/Pluteus (1).sol#1142-1149)
	State variables written after the call(s):
	- addLiquidity(otherHalf,newBalance) (../../sb/Pluteus (1).sol#1111)
		- _allowances[owner][spender] = amount (../../sb/Pluteus (1).sol#1063)
Reentrancy in Pluteus.transferFrom(address,address,uint256) (../../sb/Pluteus (1).sol#802-816):
	External calls:
	- _transfer(sender,recipient,amount) (../../sb/Pluteus (1).sol#813)
		- pancakeswapV2Router.addLiquidityBNB{value: bnbAmount}(address(this),tokenAmount,0,0,address(this),block.timestamp) (../../sb/Pluteus (1).sol#1142-1149)
		- pancakeswapV2Router.swapExactTokensForBNBSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (../../sb/Pluteus (1).sol#1122-1128)
	External calls sending eth:
	- _transfer(sender,recipient,amount) (../../sb/Pluteus (1).sol#813)
		- pancakeswapV2Router.addLiquidityBNB{value: bnbAmount}(address(this),tokenAmount,0,0,address(this),block.timestamp) (../../sb/Pluteus (1).sol#1142-1149)
	State variables written after the call(s):
	- _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,ERC20: transfer amount exceeds allowance)) (../../sb/Pluteus (1).sol#814)
		- _allowances[owner][spender] = amount (../../sb/Pluteus (1).sol#1063)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

Reentrancy in Pluteus._transfer(address,address,uint256) (../../sb/Pluteus (1).sol#1067-1103):
	External calls:
	- swapAndLiquify(contractTokenBalance) (../../sb/Pluteus (1).sol#1093)
		- pancakeswapV2Router.addLiquidityBNB{value: bnbAmount}(address(this),tokenAmount,0,0,address(this),block.timestamp) (../../sb/Pluteus (1).sol#1142-1149)
		- pancakeswapV2Router.swapExactTokensForBNBSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (../../sb/Pluteus (1).sol#1122-1128)
	External calls sending eth:
	- swapAndLiquify(contractTokenBalance) (../../sb/Pluteus (1).sol#1093)
		- pancakeswapV2Router.addLiquidityBNB{value: bnbAmount}(address(this),tokenAmount,0,0,address(this),block.timestamp) (../../sb/Pluteus (1).sol#1142-1149)
	Event emitted after the call(s):
	- Transfer(sender,recipient,tTransferAmount) (../../sb/Pluteus (1).sol#1177)
		- _tokenTransfer(from,to,amount,takeFee) (../../sb/Pluteus (1).sol#1102)
	- Transfer(sender,recipient,tTransferAmount) (../../sb/Pluteus (1).sol#1188)
		- _tokenTransfer(from,to,amount,takeFee) (../../sb/Pluteus (1).sol#1102)
	- Transfer(sender,recipient,tTransferAmount) (../../sb/Pluteus (1).sol#1199)
		- _tokenTransfer(from,to,amount,takeFee) (../../sb/Pluteus (1).sol#1102)
	- Transfer(sender,recipient,tTransferAmount) (../../sb/Pluteus (1).sol#931)
		- _tokenTransfer(from,to,amount,takeFee) (../../sb/Pluteus (1).sol#1102)
Reentrancy in Pluteus.swapAndLiquify(uint256) (../../sb/Pluteus (1).sol#1105-1113):
	External calls:
	- swapTokensForBnb(half) (../../sb/Pluteus (1).sol#1109)
		- pancakeswapV2Router.swapExactTokensForBNBSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (../../sb/Pluteus (1).sol#1122-1128)
	- addLiquidity(otherHalf,newBalance) (../../sb/Pluteus (1).sol#1111)
		- pancakeswapV2Router.addLiquidityBNB{value: bnbAmount}(address(this),tokenAmount,0,0,address(this),block.timestamp) (../../sb/Pluteus (1).sol#1142-1149)
	External calls sending eth:
	- addLiquidity(otherHalf,newBalance) (../../sb/Pluteus (1).sol#1111)
		- pancakeswapV2Router.addLiquidityBNB{value: bnbAmount}(address(this),tokenAmount,0,0,address(this),block.timestamp) (../../sb/Pluteus (1).sol#1142-1149)
	Event emitted after the call(s):
	- Approval(owner,spender,amount) (../../sb/Pluteus (1).sol#1064)
		- addLiquidity(otherHalf,newBalance) (../../sb/Pluteus (1).sol#1111)
	- SwapAndLiquify(half,newBalance,otherHalf) (../../sb/Pluteus (1).sol#1112)
Reentrancy in Pluteus.transferFrom(address,address,uint256) (../../sb/Pluteus (1).sol#802-816):
	External calls:
	- _transfer(sender,recipient,amount) (../../sb/Pluteus (1).sol#813)
		- pancakeswapV2Router.addLiquidityBNB{value: bnbAmount}(address(this),tokenAmount,0,0,address(this),block.timestamp) (../../sb/Pluteus (1).sol#1142-1149)
		- pancakeswapV2Router.swapExactTokensForBNBSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (../../sb/Pluteus (1).sol#1122-1128)
	External calls sending eth:
	- _transfer(sender,recipient,amount) (../../sb/Pluteus (1).sol#813)
		- pancakeswapV2Router.addLiquidityBNB{value: bnbAmount}(address(this),tokenAmount,0,0,address(this),block.timestamp) (../../sb/Pluteus (1).sol#1142-1149)
	Event emitted after the call(s):
	- Approval(owner,spender,amount) (../../sb/Pluteus (1).sol#1064)
		- _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,ERC20: transfer amount exceeds allowance)) (../../sb/Pluteus (1).sol#814)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

Ownable.unlock() (../../sb/Pluteus (1).sol#467-472) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp > _lockTime,Contract is locked until 7 days) (../../sb/Pluteus (1).sol#469)
Pluteus.transferFrom(address,address,uint256) (../../sb/Pluteus (1).sol#802-816) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(! isContract(recipient),Pluteus funds can only be cashed out to EOAs) (../../sb/Pluteus (1).sol#804)
Pluteus._transfer(address,address,uint256) (../../sb/Pluteus (1).sol#1067-1103) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(to != address(0),ERC20: transfer to the zero address) (../../sb/Pluteus (1).sol#1073)
	- from != owner() && to != owner() (../../sb/Pluteus (1).sol#1075)
Pluteus.addLiquidity(uint256,uint256) (../../sb/Pluteus (1).sol#1137-1150) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp >= liquidityReleaseTime,Liquidity funds locked) (../../sb/Pluteus (1).sol#1140)
TokenTimelock.constructor(address,address,uint256) (../../sb/Pluteus (1).sol#1224-1230) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(releaseTime_ > block.timestamp,TokenTimelock: release time is before current time) (../../sb/Pluteus (1).sol#1226)
TokenTimelock.release() (../../sb/Pluteus (1).sol#1244-1252) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp >= _releaseTime,TokenTimelock: current time is before release time) (../../sb/Pluteus (1).sol#1246)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

Address.isContract(address) (../../sb/Pluteus (1).sol#271-280) uses assembly
	- INLINE ASM (../../sb/Pluteus (1).sol#278)
Address._functionCallWithValue(address,bytes,uint256,string) (../../sb/Pluteus (1).sol#364-385) uses assembly
	- INLINE ASM (../../sb/Pluteus (1).sol#377-380)
Pluteus.isContract(address) (../../sb/Pluteus (1).sol#794-800) uses assembly
	- INLINE ASM (../../sb/Pluteus (1).sol#796-798)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage

Pluteus.includeInReward(address) (../../sb/Pluteus (1).sol#909-920) has costly operations inside a loop:
	- _excluded.pop() (../../sb/Pluteus (1).sol#916)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#costly-operations-inside-a-loop

Address._functionCallWithValue(address,bytes,uint256,string) (../../sb/Pluteus (1).sol#364-385) is never used and should be removed
Address.functionCall(address,bytes) (../../sb/Pluteus (1).sol#324-326) is never used and should be removed
Address.functionCall(address,bytes,string) (../../sb/Pluteus (1).sol#334-336) is never used and should be removed
Address.functionCallWithValue(address,bytes,uint256) (../../sb/Pluteus (1).sol#349-351) is never used and should be removed
Address.functionCallWithValue(address,bytes,uint256,string) (../../sb/Pluteus (1).sol#359-362) is never used and should be removed
Address.isContract(address) (../../sb/Pluteus (1).sol#271-280) is never used and should be removed
Address.sendValue(address,uint256) (../../sb/Pluteus (1).sol#298-304) is never used and should be removed
Context._msgData() (../../sb/Pluteus (1).sol#244-247) is never used and should be removed
SafeMath.mod(uint256,uint256) (../../sb/Pluteus (1).sol#217-219) is never used and should be removed
SafeMath.mod(uint256,uint256,string) (../../sb/Pluteus (1).sol#233-236) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code

Pluteus._rTotal (../../sb/Pluteus (1).sol#696) is set pre-construction with a non-constant function or state variable:
	- (MAX - (MAX % _tTotal))
Pluteus._previousTaxFee (../../sb/Pluteus (1).sol#705) is set pre-construction with a non-constant function or state variable:
	- _taxFee
Pluteus._previousLiquidityFee (../../sb/Pluteus (1).sol#708) is set pre-construction with a non-constant function or state variable:
	- _liquidityFee
Pluteus._previousPluteusFund (../../sb/Pluteus (1).sol#711) is set pre-construction with a non-constant function or state variable:
	- _pluteusFund
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#function-initializing-state

Pragma version^0.8.1 (../../sb/Pluteus (1).sol#1) allows old versions
solc-0.8.27 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Low level call in Address.sendValue(address,uint256) (../../sb/Pluteus (1).sol#298-304):
	- (success) = recipient.call{value: amount}() (../../sb/Pluteus (1).sol#302)
Low level call in Address._functionCallWithValue(address,bytes,uint256,string) (../../sb/Pluteus (1).sol#364-385):
	- (success,returndata) = target.call{value: weiValue}(data) (../../sb/Pluteus (1).sol#368)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls

Function IPancakeswapV2Pair.DOMAIN_SEPARATOR() (../../sb/Pluteus (1).sol#506) is not in mixedCase
Function IPancakeswapV2Pair.PERMIT_TYPEHASH() (../../sb/Pluteus (1).sol#507) is not in mixedCase
Function IPancakeswapV2Pair.MINIMUM_LIQUIDITY() (../../sb/Pluteus (1).sol#524) is not in mixedCase
Function IPancakeswapV2Router01.WBNB() (../../sb/Pluteus (1).sol#544) is not in mixedCase
Parameter Pluteus.isContract(address)._addr (../../sb/Pluteus (1).sol#794) is not in mixedCase
Parameter Pluteus.setSwapAndLiquifyEnabled(bool)._enabled (../../sb/Pluteus (1).sol#960) is not in mixedCase
Parameter Pluteus.calculateTaxFee(uint256)._amount (../../sb/Pluteus (1).sol#1021) is not in mixedCase
Parameter Pluteus.calculateLiquidityFee(uint256)._amount (../../sb/Pluteus (1).sol#1027) is not in mixedCase
Parameter Pluteus.calculatePluteusFund(uint256)._amount (../../sb/Pluteus (1).sol#1033) is not in mixedCase
Constant Pluteus._name (../../sb/Pluteus (1).sol#700) is not in UPPER_CASE_WITH_UNDERSCORES
Constant Pluteus._symbol (../../sb/Pluteus (1).sol#701) is not in UPPER_CASE_WITH_UNDERSCORES
Constant Pluteus._decimals (../../sb/Pluteus (1).sol#702) is not in UPPER_CASE_WITH_UNDERSCORES
Variable Pluteus._taxFee (../../sb/Pluteus (1).sol#704) is not in mixedCase
Variable Pluteus._liquidityFee (../../sb/Pluteus (1).sol#707) is not in mixedCase
Variable Pluteus._pluteusFund (../../sb/Pluteus (1).sol#710) is not in mixedCase
Variable Pluteus.PLUTEUS_ADDRESS (../../sb/Pluteus (1).sol#712) is not in mixedCase
Variable Pluteus._maxTxAmount (../../sb/Pluteus (1).sol#720) is not in mixedCase
Constant Pluteus.numTokensSellToAddToLiquidity (../../sb/Pluteus (1).sol#721) is not in UPPER_CASE_WITH_UNDERSCORES
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Redundant expression "this (../../sb/Pluteus (1).sol#245)" inContext (../../sb/Pluteus (1).sol#239-248)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#redundant-statements

Reentrancy in Pluteus.withdrawLeftoverBnb(address) (../../sb/Pluteus (1).sol#1212-1216):
	External calls:
	- address(to).transfer(leftover) (../../sb/Pluteus (1).sol#1214)
	Event emitted after the call(s):
	- LeftoverCashed(to,leftover) (../../sb/Pluteus (1).sol#1215)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-4

Variable IPancakeswapV2Router01.addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256).amountADesired (../../sb/Pluteus (1).sol#549) is too similar to IPancakeswapV2Router01.addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256).amountBDesired (../../sb/Pluteus (1).sol#550)
Variable Pluteus._transferToExcluded(address,address,uint256).rTransferAmount (../../sb/Pluteus (1).sol#1181) is too similar to Pluteus._getTValues(uint256).tTransferAmount (../../sb/Pluteus (1).sol#983)
Variable Pluteus.reflectionFromToken(uint256,bool).rTransferAmount (../../sb/Pluteus (1).sol#889) is too similar to Pluteus._transferToExcluded(address,address,uint256).tTransferAmount (../../sb/Pluteus (1).sol#1181)
Variable Pluteus.reflectionFromToken(uint256,bool).rTransferAmount (../../sb/Pluteus (1).sol#889) is too similar to Pluteus._getTValues(uint256).tTransferAmount (../../sb/Pluteus (1).sol#983)
Variable Pluteus._transferToExcluded(address,address,uint256).rTransferAmount (../../sb/Pluteus (1).sol#1181) is too similar to Pluteus._transferToExcluded(address,address,uint256).tTransferAmount (../../sb/Pluteus (1).sol#1181)
Variable Pluteus._transferStandard(address,address,uint256).rTransferAmount (../../sb/Pluteus (1).sol#1171) is too similar to Pluteus._transferStandard(address,address,uint256).tTransferAmount (../../sb/Pluteus (1).sol#1171)
Variable Pluteus._getRValues(uint256,uint256,uint256,uint256,uint256).rTransferAmount (../../sb/Pluteus (1).sol#992) is too similar to Pluteus._transferFromExcluded(address,address,uint256).tTransferAmount (../../sb/Pluteus (1).sol#1192)
Variable Pluteus._transferFromExcluded(address,address,uint256).rTransferAmount (../../sb/Pluteus (1).sol#1192) is too similar to Pluteus._transferFromExcluded(address,address,uint256).tTransferAmount (../../sb/Pluteus (1).sol#1192)
Variable Pluteus._getValues(uint256).rTransferAmount (../../sb/Pluteus (1).sol#975) is too similar to Pluteus._transferFromExcluded(address,address,uint256).tTransferAmount (../../sb/Pluteus (1).sol#1192)
Variable Pluteus._getRValues(uint256,uint256,uint256,uint256,uint256).rTransferAmount (../../sb/Pluteus (1).sol#992) is too similar to Pluteus._getTValues(uint256).tTransferAmount (../../sb/Pluteus (1).sol#983)
Variable Pluteus._transferFromExcluded(address,address,uint256).rTransferAmount (../../sb/Pluteus (1).sol#1192) is too similar to Pluteus._getTValues(uint256).tTransferAmount (../../sb/Pluteus (1).sol#983)
Variable Pluteus._getValues(uint256).rTransferAmount (../../sb/Pluteus (1).sol#975) is too similar to Pluteus._getTValues(uint256).tTransferAmount (../../sb/Pluteus (1).sol#983)
Variable Pluteus._getValues(uint256).rTransferAmount (../../sb/Pluteus (1).sol#975) is too similar to Pluteus._transferToExcluded(address,address,uint256).tTransferAmount (../../sb/Pluteus (1).sol#1181)
Variable Pluteus._transferStandard(address,address,uint256).rTransferAmount (../../sb/Pluteus (1).sol#1171) is too similar to Pluteus._transferFromExcluded(address,address,uint256).tTransferAmount (../../sb/Pluteus (1).sol#1192)
Variable Pluteus._getValues(uint256).rTransferAmount (../../sb/Pluteus (1).sol#975) is too similar to Pluteus._transferStandard(address,address,uint256).tTransferAmount (../../sb/Pluteus (1).sol#1171)
Variable Pluteus.reflectionFromToken(uint256,bool).rTransferAmount (../../sb/Pluteus (1).sol#889) is too similar to Pluteus._transferFromExcluded(address,address,uint256).tTransferAmount (../../sb/Pluteus (1).sol#1192)
Variable Pluteus._transferToExcluded(address,address,uint256).rTransferAmount (../../sb/Pluteus (1).sol#1181) is too similar to Pluteus._transferFromExcluded(address,address,uint256).tTransferAmount (../../sb/Pluteus (1).sol#1192)
Variable Pluteus._transferStandard(address,address,uint256).rTransferAmount (../../sb/Pluteus (1).sol#1171) is too similar to Pluteus._transferToExcluded(address,address,uint256).tTransferAmount (../../sb/Pluteus (1).sol#1181)
Variable Pluteus._transferStandard(address,address,uint256).rTransferAmount (../../sb/Pluteus (1).sol#1171) is too similar to Pluteus._getTValues(uint256).tTransferAmount (../../sb/Pluteus (1).sol#983)
Variable Pluteus._getRValues(uint256,uint256,uint256,uint256,uint256).rTransferAmount (../../sb/Pluteus (1).sol#992) is too similar to Pluteus._transferBothExcluded(address,address,uint256).tTransferAmount (../../sb/Pluteus (1).sol#923)
Variable Pluteus._transferToExcluded(address,address,uint256).rTransferAmount (../../sb/Pluteus (1).sol#1181) is too similar to Pluteus._transferBothExcluded(address,address,uint256).tTransferAmount (../../sb/Pluteus (1).sol#923)
Variable Pluteus._transferBothExcluded(address,address,uint256).rTransferAmount (../../sb/Pluteus (1).sol#923) is too similar to Pluteus._transferToExcluded(address,address,uint256).tTransferAmount (../../sb/Pluteus (1).sol#1181)
Variable Pluteus.reflectionFromToken(uint256,bool).rTransferAmount (../../sb/Pluteus (1).sol#889) is too similar to Pluteus._transferBothExcluded(address,address,uint256).tTransferAmount (../../sb/Pluteus (1).sol#923)
Variable Pluteus._transferFromExcluded(address,address,uint256).rTransferAmount (../../sb/Pluteus (1).sol#1192) is too similar to Pluteus._getValues(uint256).tTransferAmount (../../sb/Pluteus (1).sol#974)
Variable Pluteus._transferStandard(address,address,uint256).rTransferAmount (../../sb/Pluteus (1).sol#1171) is too similar to Pluteus._transferBothExcluded(address,address,uint256).tTransferAmount (../../sb/Pluteus (1).sol#923)
Variable Pluteus._transferFromExcluded(address,address,uint256).rTransferAmount (../../sb/Pluteus (1).sol#1192) is too similar to Pluteus._transferStandard(address,address,uint256).tTransferAmount (../../sb/Pluteus (1).sol#1171)
Variable Pluteus._getValues(uint256).rTransferAmount (../../sb/Pluteus (1).sol#975) is too similar to Pluteus._transferBothExcluded(address,address,uint256).tTransferAmount (../../sb/Pluteus (1).sol#923)
Variable Pluteus._transferBothExcluded(address,address,uint256).rTransferAmount (../../sb/Pluteus (1).sol#923) is too similar to Pluteus._getTValues(uint256).tTransferAmount (../../sb/Pluteus (1).sol#983)
Variable Pluteus._transferBothExcluded(address,address,uint256).rTransferAmount (../../sb/Pluteus (1).sol#923) is too similar to Pluteus._transferBothExcluded(address,address,uint256).tTransferAmount (../../sb/Pluteus (1).sol#923)
Variable Pluteus._transferFromExcluded(address,address,uint256).rTransferAmount (../../sb/Pluteus (1).sol#1192) is too similar to Pluteus._transferToExcluded(address,address,uint256).tTransferAmount (../../sb/Pluteus (1).sol#1181)
Variable Pluteus._transferBothExcluded(address,address,uint256).rTransferAmount (../../sb/Pluteus (1).sol#923) is too similar to Pluteus._transferFromExcluded(address,address,uint256).tTransferAmount (../../sb/Pluteus (1).sol#1192)
Variable Pluteus._transferToExcluded(address,address,uint256).rTransferAmount (../../sb/Pluteus (1).sol#1181) is too similar to Pluteus._getValues(uint256).tTransferAmount (../../sb/Pluteus (1).sol#974)
Variable Pluteus._getRValues(uint256,uint256,uint256,uint256,uint256).rTransferAmount (../../sb/Pluteus (1).sol#992) is too similar to Pluteus._transferStandard(address,address,uint256).tTransferAmount (../../sb/Pluteus (1).sol#1171)
Variable Pluteus.reflectionFromToken(uint256,bool).rTransferAmount (../../sb/Pluteus (1).sol#889) is too similar to Pluteus._getValues(uint256).tTransferAmount (../../sb/Pluteus (1).sol#974)
Variable Pluteus._transferToExcluded(address,address,uint256).rTransferAmount (../../sb/Pluteus (1).sol#1181) is too similar to Pluteus._transferStandard(address,address,uint256).tTransferAmount (../../sb/Pluteus (1).sol#1171)
Variable Pluteus._getRValues(uint256,uint256,uint256,uint256,uint256).rTransferAmount (../../sb/Pluteus (1).sol#992) is too similar to Pluteus._getValues(uint256).tTransferAmount (../../sb/Pluteus (1).sol#974)
Variable Pluteus.reflectionFromToken(uint256,bool).rTransferAmount (../../sb/Pluteus (1).sol#889) is too similar to Pluteus._transferStandard(address,address,uint256).tTransferAmount (../../sb/Pluteus (1).sol#1171)
Variable Pluteus._transferStandard(address,address,uint256).rTransferAmount (../../sb/Pluteus (1).sol#1171) is too similar to Pluteus._getValues(uint256).tTransferAmount (../../sb/Pluteus (1).sol#974)
Variable Pluteus._getValues(uint256).rTransferAmount (../../sb/Pluteus (1).sol#975) is too similar to Pluteus._getValues(uint256).tTransferAmount (../../sb/Pluteus (1).sol#974)
Variable Pluteus._getRValues(uint256,uint256,uint256,uint256,uint256).rTransferAmount (../../sb/Pluteus (1).sol#992) is too similar to Pluteus._transferToExcluded(address,address,uint256).tTransferAmount (../../sb/Pluteus (1).sol#1181)
Variable Pluteus._transferFromExcluded(address,address,uint256).rTransferAmount (../../sb/Pluteus (1).sol#1192) is too similar to Pluteus._transferBothExcluded(address,address,uint256).tTransferAmount (../../sb/Pluteus (1).sol#923)
Variable Pluteus._transferBothExcluded(address,address,uint256).rTransferAmount (../../sb/Pluteus (1).sol#923) is too similar to Pluteus._transferStandard(address,address,uint256).tTransferAmount (../../sb/Pluteus (1).sol#1171)
Variable Pluteus._transferBothExcluded(address,address,uint256).rTransferAmount (../../sb/Pluteus (1).sol#923) is too similar to Pluteus._getValues(uint256).tTransferAmount (../../sb/Pluteus (1).sol#974)
Variable TokenTimelock._beneficiary (../../sb/Pluteus (1).sol#1221) is too similar to TokenTimelock.constructor(address,address,uint256).beneficiary_ (../../sb/Pluteus (1).sol#1224)
Variable TokenTimelock._releaseTime (../../sb/Pluteus (1).sol#1222) is too similar to TokenTimelock.constructor(address,address,uint256).releaseTime_ (../../sb/Pluteus (1).sol#1224)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#variable-names-too-similar

Loop condition i < _excluded.length (../../sb/Pluteus (1).sol#1004) should use cached array length instead of referencing `length` member of the storage array.
 Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#cache-array-length

Pluteus.liquidityReleaseTime (../../sb/Pluteus (1).sol#1131) should be immutable 
TokenTimelock._beneficiary (../../sb/Pluteus (1).sol#1221) should be immutable 
TokenTimelock._releaseTime (../../sb/Pluteus (1).sol#1222) should be immutable 
TokenTimelock._token (../../sb/Pluteus (1).sol#1220) should be immutable 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-immutable
/sb/Pluteus (1).sol analyzed (12 contracts with 93 detectors), 118 result(s) found
