'solc --version' running
'solc /sb/CDEX_rewards.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/sb' running
Compilation warnings/errors on /sb/CDEX_rewards.sol:
/sb/CDEX_rewards.sol:29:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function ReentrancyGuard() internal {
    ^ (Relevant source part starts here and spans across multiple lines).
/sb/CDEX_rewards.sol:58:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function Owned(address _owner) public {
    ^ (Relevant source part starts here and spans across multiple lines).
/sb/CDEX_rewards.sol:93:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function Pausable() internal {
    ^ (Relevant source part starts here and spans across multiple lines).
/sb/CDEX_rewards.sol:278:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function CDEXStakingPool(
    ^ (Relevant source part starts here and spans across multiple lines).


CDEXStakingPool.depositTokens(uint256) (../../sb/CDEX_rewards.sol#489-500) uses arbitrary from in transferFrom: CDEXToken.transferFrom(owner,address(this),amount) (../../sb/CDEX_rewards.sol#497)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#arbitrary-from-in-transferfrom

CDEXStakingPool.stake(uint256) (../../sb/CDEX_rewards.sol#365-393) ignores return value by CDEXToken.transferFrom(msg.sender,address(this),amount) (../../sb/CDEX_rewards.sol#390)
CDEXStakingPool.depositTokens(uint256) (../../sb/CDEX_rewards.sol#489-500) ignores return value by CDEXToken.transferFrom(owner,address(this),amount) (../../sb/CDEX_rewards.sol#497)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-transfer

CDEXTokenContract (../../sb/CDEX_rewards.sol#224-230) has incorrect ERC20 function interface:CDEXTokenContract.transfer(address,uint256) (../../sb/CDEX_rewards.sol#227)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-erc20-interface

Reentrancy in CDEXStakingPool.exit() (../../sb/CDEX_rewards.sol#461-464):
	External calls:
	- withdraw(_balances[msg.sender]) (../../sb/CDEX_rewards.sol#462)
		- CDEXRanking.remove(_balances[msg.sender],msg.sender) (../../sb/CDEX_rewards.sol#407)
		- CDEXRanking.insert(_balances[msg.sender],msg.sender) (../../sb/CDEX_rewards.sol#415)
		- CDEXToken.transfer(msg.sender,amount) (../../sb/CDEX_rewards.sol#419)
	- getReward() (../../sb/CDEX_rewards.sol#463)
		- CDEXToken.transfer(msg.sender,reward.add(loyaltyBonus)) (../../sb/CDEX_rewards.sol#450)
	State variables written after the call(s):
	- getReward() (../../sb/CDEX_rewards.sol#463)
		- _status = _ENTERED (../../sb/CDEX_rewards.sol#44)
		- _status = _NOT_ENTERED (../../sb/CDEX_rewards.sol#50)
	ReentrancyGuard._status (../../sb/CDEX_rewards.sol#27) can be used in cross function reentrancies:
	- ReentrancyGuard.nonReentrant() (../../sb/CDEX_rewards.sol#40-51)
	- getReward() (../../sb/CDEX_rewards.sol#463)
		- lastUpdateTime = lastTimeRewardApplicable() (../../sb/CDEX_rewards.sol#599)
	CDEXStakingPool.lastUpdateTime (../../sb/CDEX_rewards.sol#249) can be used in cross function reentrancies:
	- CDEXStakingPool.lastUpdateTime (../../sb/CDEX_rewards.sol#249)
	- CDEXStakingPool.notifyRewardAmount(uint256) (../../sb/CDEX_rewards.sol#506-536)
	- CDEXStakingPool.rewardPerToken() (../../sb/CDEX_rewards.sol#310-322)
	- CDEXStakingPool.updateReward(address) (../../sb/CDEX_rewards.sol#597-605)
	- getReward() (../../sb/CDEX_rewards.sol#463)
		- rewardPerTokenStored = rewardPerToken() (../../sb/CDEX_rewards.sol#598)
	CDEXStakingPool.rewardPerTokenStored (../../sb/CDEX_rewards.sol#250) can be used in cross function reentrancies:
	- CDEXStakingPool.rewardPerToken() (../../sb/CDEX_rewards.sol#310-322)
	- CDEXStakingPool.rewardPerTokenStored (../../sb/CDEX_rewards.sol#250)
	- CDEXStakingPool.updateReward(address) (../../sb/CDEX_rewards.sol#597-605)
	- getReward() (../../sb/CDEX_rewards.sol#463)
		- rewards[account] = earned(account) (../../sb/CDEX_rewards.sol#601)
		- rewards[msg.sender] = 0 (../../sb/CDEX_rewards.sol#436)
	CDEXStakingPool.rewards (../../sb/CDEX_rewards.sol#265) can be used in cross function reentrancies:
	- CDEXStakingPool.earned(address) (../../sb/CDEX_rewards.sol#326-332)
	- CDEXStakingPool.getReward() (../../sb/CDEX_rewards.sol#426-458)
	- CDEXStakingPool.rewards (../../sb/CDEX_rewards.sol#265)
	- CDEXStakingPool.updateReward(address) (../../sb/CDEX_rewards.sol#597-605)
	- getReward() (../../sb/CDEX_rewards.sol#463)
		- userRewardPerTokenPaid[account] = rewardPerTokenStored (../../sb/CDEX_rewards.sol#602)
	CDEXStakingPool.userRewardPerTokenPaid (../../sb/CDEX_rewards.sol#264) can be used in cross function reentrancies:
	- CDEXStakingPool.earned(address) (../../sb/CDEX_rewards.sol#326-332)
	- CDEXStakingPool.updateReward(address) (../../sb/CDEX_rewards.sol#597-605)
	- CDEXStakingPool.userRewardPerTokenPaid (../../sb/CDEX_rewards.sol#264)
Reentrancy in CDEXStakingPool.stake(uint256) (../../sb/CDEX_rewards.sol#365-393):
	External calls:
	- CDEXRanking.insert(amount,msg.sender) (../../sb/CDEX_rewards.sol#379)
	- CDEXRanking.remove(_balances[msg.sender],msg.sender) (../../sb/CDEX_rewards.sol#382)
	- CDEXRanking.insert(_balances[msg.sender].add(amount),msg.sender) (../../sb/CDEX_rewards.sol#384)
	State variables written after the call(s):
	- _balances[msg.sender] = _balances[msg.sender].add(amount) (../../sb/CDEX_rewards.sol#387)
	CDEXStakingPool._balances (../../sb/CDEX_rewards.sol#269) can be used in cross function reentrancies:
	- CDEXStakingPool.balanceOf(address) (../../sb/CDEX_rewards.sol#298-300)
	- CDEXStakingPool.earned(address) (../../sb/CDEX_rewards.sol#326-332)
	- CDEXStakingPool.exit() (../../sb/CDEX_rewards.sol#461-464)
	- CDEXStakingPool.getReward() (../../sb/CDEX_rewards.sol#426-458)
	- CDEXStakingPool.withdraw(uint256) (../../sb/CDEX_rewards.sol#398-422)
Reentrancy in CDEXStakingPool.withdraw(uint256) (../../sb/CDEX_rewards.sol#398-422):
	External calls:
	- CDEXRanking.remove(_balances[msg.sender],msg.sender) (../../sb/CDEX_rewards.sol#407)
	State variables written after the call(s):
	- _balances[msg.sender] = _balances[msg.sender].sub(amount) (../../sb/CDEX_rewards.sol#409)
	CDEXStakingPool._balances (../../sb/CDEX_rewards.sol#269) can be used in cross function reentrancies:
	- CDEXStakingPool.balanceOf(address) (../../sb/CDEX_rewards.sol#298-300)
	- CDEXStakingPool.earned(address) (../../sb/CDEX_rewards.sol#326-332)
	- CDEXStakingPool.exit() (../../sb/CDEX_rewards.sol#461-464)
	- CDEXStakingPool.getReward() (../../sb/CDEX_rewards.sol#426-458)
	- CDEXStakingPool.withdraw(uint256) (../../sb/CDEX_rewards.sol#398-422)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1

CDEXStakingPool.getReward().loyaltyBonus (../../sb/CDEX_rewards.sol#432) is a local variable never initialized
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-local-variables

Owned.nominateNewOwner(address)._owner (../../sb/CDEX_rewards.sol#64) lacks a zero-check on :
		- nominatedOwner = _owner (../../sb/CDEX_rewards.sol#65)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

Reentrancy in CDEXStakingPool.withdraw(uint256) (../../sb/CDEX_rewards.sol#398-422):
	External calls:
	- CDEXRanking.remove(_balances[msg.sender],msg.sender) (../../sb/CDEX_rewards.sol#407)
	State variables written after the call(s):
	- totalMembers -= 1 (../../sb/CDEX_rewards.sol#412)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

Reentrancy in CDEXStakingPool.depositTokens(uint256) (../../sb/CDEX_rewards.sol#489-500):
	External calls:
	- CDEXToken.transferFrom(owner,address(this),amount) (../../sb/CDEX_rewards.sol#497)
	Event emitted after the call(s):
	- RewardsDeposited(owner,address(this),amount) (../../sb/CDEX_rewards.sol#499)
Reentrancy in CDEXStakingPool.exit() (../../sb/CDEX_rewards.sol#461-464):
	External calls:
	- withdraw(_balances[msg.sender]) (../../sb/CDEX_rewards.sol#462)
		- CDEXRanking.remove(_balances[msg.sender],msg.sender) (../../sb/CDEX_rewards.sol#407)
		- CDEXRanking.insert(_balances[msg.sender],msg.sender) (../../sb/CDEX_rewards.sol#415)
		- CDEXToken.transfer(msg.sender,amount) (../../sb/CDEX_rewards.sol#419)
	- getReward() (../../sb/CDEX_rewards.sol#463)
		- CDEXToken.transfer(msg.sender,reward.add(loyaltyBonus)) (../../sb/CDEX_rewards.sol#450)
	Event emitted after the call(s):
	- LoyaltyBonusPaid(msg.sender,loyaltyBonus) (../../sb/CDEX_rewards.sol#455)
		- getReward() (../../sb/CDEX_rewards.sol#463)
	- RewardPaid(msg.sender,reward) (../../sb/CDEX_rewards.sol#452)
		- getReward() (../../sb/CDEX_rewards.sol#463)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

CDEXStakingPool.min(uint256,uint256) (../../sb/CDEX_rewards.sol#342-344) uses timestamp for comparisons
	Dangerous comparisons:
	- a < b (../../sb/CDEX_rewards.sol#343)
CDEXStakingPool.notifyRewardAmount(uint256) (../../sb/CDEX_rewards.sol#506-536) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp >= periodFinish (../../sb/CDEX_rewards.sol#518)
	- require(bool)(rewardRate <= depositedRewardTokens.div(rewardsDuration)) (../../sb/CDEX_rewards.sol#529)
CDEXStakingPool.setRewardsDuration(uint256) (../../sb/CDEX_rewards.sol#541-548) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(block.timestamp > periodFinish) (../../sb/CDEX_rewards.sol#543)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

SafeMath.mod(uint256,uint256) (../../sb/CDEX_rewards.sol#217-220) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code

Pragma version^0.4.21 (../../sb/CDEX_rewards.sol#1) allows old versions
solc-0.4.26 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Parameter Owned.nominateNewOwner(address)._owner (../../sb/CDEX_rewards.sol#64) is not in mixedCase
Parameter Pausable.setPaused(bool)._paused (../../sb/CDEX_rewards.sol#103) is not in mixedCase
Parameter CDEXStakingPool.setTokenContract(address)._contractAddress (../../sb/CDEX_rewards.sol#471) is not in mixedCase
Parameter CDEXStakingPool.setRankingContract(address)._contractAddress (../../sb/CDEX_rewards.sol#478) is not in mixedCase
Parameter CDEXStakingPool.setRewardsDuration(uint256)._rewardsDuration (../../sb/CDEX_rewards.sol#541) is not in mixedCase
Parameter CDEXStakingPool.setLoyaltyTiers(uint256,uint256,uint256)._loyaltyTier1 (../../sb/CDEX_rewards.sol#555) is not in mixedCase
Parameter CDEXStakingPool.setLoyaltyTiers(uint256,uint256,uint256)._loyaltyTier2 (../../sb/CDEX_rewards.sol#556) is not in mixedCase
Parameter CDEXStakingPool.setLoyaltyTiers(uint256,uint256,uint256)._loyaltyTier3 (../../sb/CDEX_rewards.sol#557) is not in mixedCase
Parameter CDEXStakingPool.setLoyaltyTiersBonus(uint256,uint256,uint256)._loyaltyTier1Bonus (../../sb/CDEX_rewards.sol#575) is not in mixedCase
Parameter CDEXStakingPool.setLoyaltyTiersBonus(uint256,uint256,uint256)._loyaltyTier2Bonus (../../sb/CDEX_rewards.sol#576) is not in mixedCase
Parameter CDEXStakingPool.setLoyaltyTiersBonus(uint256,uint256,uint256)._loyaltyTier3Bonus (../../sb/CDEX_rewards.sol#577) is not in mixedCase
Variable CDEXStakingPool.CDEXToken (../../sb/CDEX_rewards.sol#244) is not in mixedCase
Variable CDEXStakingPool.CDEXRanking (../../sb/CDEX_rewards.sol#245) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Variable CDEXStakingPool.setLoyaltyTiers(uint256,uint256,uint256)._loyaltyTier1 (../../sb/CDEX_rewards.sol#555) is too similar to CDEXStakingPool.setLoyaltyTiers(uint256,uint256,uint256)._loyaltyTier2 (../../sb/CDEX_rewards.sol#556)
Variable CDEXStakingPool.setLoyaltyTiersBonus(uint256,uint256,uint256)._loyaltyTier1Bonus (../../sb/CDEX_rewards.sol#575) is too similar to CDEXStakingPool.setLoyaltyTiersBonus(uint256,uint256,uint256)._loyaltyTier2Bonus (../../sb/CDEX_rewards.sol#576)
Variable CDEXStakingPool.setLoyaltyTiersBonus(uint256,uint256,uint256)._loyaltyTier1Bonus (../../sb/CDEX_rewards.sol#575) is too similar to CDEXStakingPool.setLoyaltyTiersBonus(uint256,uint256,uint256)._loyaltyTier3Bonus (../../sb/CDEX_rewards.sol#577)
Variable CDEXStakingPool.setLoyaltyTiersBonus(uint256,uint256,uint256)._loyaltyTier2Bonus (../../sb/CDEX_rewards.sol#576) is too similar to CDEXStakingPool.setLoyaltyTiersBonus(uint256,uint256,uint256)._loyaltyTier3Bonus (../../sb/CDEX_rewards.sol#577)
Variable CDEXStakingPool.setLoyaltyTiers(uint256,uint256,uint256)._loyaltyTier1 (../../sb/CDEX_rewards.sol#555) is too similar to CDEXStakingPool.setLoyaltyTiers(uint256,uint256,uint256)._loyaltyTier3 (../../sb/CDEX_rewards.sol#557)
Variable CDEXStakingPool.setLoyaltyTiers(uint256,uint256,uint256)._loyaltyTier2 (../../sb/CDEX_rewards.sol#556) is too similar to CDEXStakingPool.setLoyaltyTiers(uint256,uint256,uint256)._loyaltyTier3 (../../sb/CDEX_rewards.sol#557)
Variable CDEXStakingPool.loyaltyTier1 (../../sb/CDEX_rewards.sol#253) is too similar to CDEXStakingPool.loyaltyTier2 (../../sb/CDEX_rewards.sol#254)
Variable CDEXStakingPool.loyaltyTier1 (../../sb/CDEX_rewards.sol#253) is too similar to CDEXStakingPool.loyaltyTier3 (../../sb/CDEX_rewards.sol#255)
Variable CDEXStakingPool.loyaltyTier1Bonus (../../sb/CDEX_rewards.sol#258) is too similar to CDEXStakingPool.loyaltyTier2Bonus (../../sb/CDEX_rewards.sol#259)
Variable CDEXStakingPool.loyaltyTier1Bonus (../../sb/CDEX_rewards.sol#258) is too similar to CDEXStakingPool.loyaltyTier3Bonus (../../sb/CDEX_rewards.sol#260)
Variable CDEXStakingPool.loyaltyTier2Bonus (../../sb/CDEX_rewards.sol#259) is too similar to CDEXStakingPool.loyaltyTier3Bonus (../../sb/CDEX_rewards.sol#260)
Variable CDEXStakingPool.loyaltyTier2 (../../sb/CDEX_rewards.sol#254) is too similar to CDEXStakingPool.loyaltyTier3 (../../sb/CDEX_rewards.sol#255)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#variable-names-too-similar

CDEXStakingPool.slitherConstructorVariables() (../../sb/CDEX_rewards.sol#240-620) uses literals with too many digits:
	- loyaltyTier1 = 100000000 * 1e8 (../../sb/CDEX_rewards.sol#253)
CDEXStakingPool.slitherConstructorVariables() (../../sb/CDEX_rewards.sol#240-620) uses literals with too many digits:
	- loyaltyTier2 = 10000000 * 1e8 (../../sb/CDEX_rewards.sol#254)
CDEXStakingPool.slitherConstructorVariables() (../../sb/CDEX_rewards.sol#240-620) uses literals with too many digits:
	- loyaltyTier3 = 1000000 * 1e8 (../../sb/CDEX_rewards.sol#255)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits
/sb/CDEX_rewards.sol analyzed (7 contracts with 93 detectors), 46 result(s) found
