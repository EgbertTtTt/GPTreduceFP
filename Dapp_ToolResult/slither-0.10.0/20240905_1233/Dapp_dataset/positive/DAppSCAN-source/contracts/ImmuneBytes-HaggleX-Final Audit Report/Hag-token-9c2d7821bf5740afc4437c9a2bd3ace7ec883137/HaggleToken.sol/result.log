'solc --version' running
'solc /sb/HaggleToken.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/sb' running

HaggleXToken.withdrawStakeReward(uint256) (../../sb/HaggleToken.sol#1020-1027) uses a dangerous strict equality:
	- require(bool,string)(isStakeLocked(stake_) == true,Withdrawal no longer available, you can only Unstake now!) (../../sb/HaggleToken.sol#1021)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities

HaggleXToken.stake(uint256,uint256).temp (../../sb/HaggleToken.sol#1060) is a local variable never initialized
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-local-variables

Owned.transferOwnership(address).newOwner (../../sb/HaggleToken.sol#273) lacks a zero-check on :
		- _newOwner = newOwner (../../sb/HaggleToken.sol#274)
HaggleXToken.setMinter(address).minter_ (../../sb/HaggleToken.sol#806) lacks a zero-check on :
		- _minter = minter_ (../../sb/HaggleToken.sol#807)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

HaggleXToken.isStakeLocked(uint256) (../../sb/HaggleToken.sol#885-888) uses timestamp for comparisons
	Dangerous comparisons:
	- stakingTime < _stakingOptions[_staking[_msgSender()][stake_].stakeType].lockedTime (../../sb/HaggleToken.sol#887)
HaggleXToken.getRemainingLockTime(uint256) (../../sb/HaggleToken.sol#893-900) uses timestamp for comparisons
	Dangerous comparisons:
	- stakingTime < _stakingOptions[_staking[_msgSender()][stake_].stakeType].lockedTime (../../sb/HaggleToken.sol#895)
HaggleXToken.withdrawStakeReward(uint256) (../../sb/HaggleToken.sol#1020-1027) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(isStakeLocked(stake_) == true,Withdrawal no longer available, you can only Unstake now!) (../../sb/HaggleToken.sol#1021)
	- require(bool,string)(block.timestamp >= _staking[_msgSender()][stake_].lastWithdrawTime + 600,Not yet time to withdraw reward) (../../sb/HaggleToken.sol#1022)
HaggleXToken.withdrawLeadershipBoardReward() (../../sb/HaggleToken.sol#1029-1035) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp >= lastWithdrawTime + 600,Not yet time to withdraw Leadership Board reward) (../../sb/HaggleToken.sol#1031)
HaggleXToken.withdrawUBIReward() (../../sb/HaggleToken.sol#1037-1043) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp >= lastWithdrawTime + 600,Not yet time to withdraw Leadership Board reward) (../../sb/HaggleToken.sol#1039)
HaggleXToken.withdrawDevelopmentReward() (../../sb/HaggleToken.sol#1045-1051) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp >= lastWithdrawTime + 600,Not yet time to withdraw Leadership Board reward) (../../sb/HaggleToken.sol#1047)
HaggleXToken.unstake(uint256) (../../sb/HaggleToken.sol#1078-1086) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(isStakeLocked(stake_) != true,HaggleX Token:Stake still locked!) (../../sb/HaggleToken.sol#1079)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

ERC20._pause() (../../sb/HaggleToken.sol#505-508) compares to a boolean constant:
	-require(bool,string)(_paused == false,HaggleX Token: token transfer is unavailable) (../../sb/HaggleToken.sol#506)
ERC20._unpause() (../../sb/HaggleToken.sol#513-516) compares to a boolean constant:
	-require(bool,string)(_paused == true,HaggleX Token: token transfer is available) (../../sb/HaggleToken.sol#514)
ERC20._blacklist(address) (../../sb/HaggleToken.sol#521-524) compares to a boolean constant:
	-require(bool,string)(_blacklists[_address] == false,HaggleX Token: account already blacklisted) (../../sb/HaggleToken.sol#522)
ERC20._whitelist(address) (../../sb/HaggleToken.sol#529-532) compares to a boolean constant:
	-require(bool,string)(_blacklists[_address] == true,HaggleX Token: account already whitelisted) (../../sb/HaggleToken.sol#530)
ERC20._transfer(address,address,uint256) (../../sb/HaggleToken.sol#551-564) compares to a boolean constant:
	-require(bool,string)(_blacklists[recipient] == false,HaggleX Token: sender account already blacklisted) (../../sb/HaggleToken.sol#556)
ERC20._transfer(address,address,uint256) (../../sb/HaggleToken.sol#551-564) compares to a boolean constant:
	-require(bool,string)(_blacklists[sender] == false,HaggleX Token: sender account already blacklisted) (../../sb/HaggleToken.sol#555)
ERC20._transfer(address,address,uint256) (../../sb/HaggleToken.sol#551-564) compares to a boolean constant:
	-require(bool,string)(_paused == false,HaggleX Token: token contract is not available) (../../sb/HaggleToken.sol#554)
ERC20._mint(address,uint256) (../../sb/HaggleToken.sol#575-587) compares to a boolean constant:
	-require(bool,string)(_blacklists[account] == false,HaggleX Token: account to mint to already blacklisted) (../../sb/HaggleToken.sol#578)
ERC20._mint(address,uint256) (../../sb/HaggleToken.sol#575-587) compares to a boolean constant:
	-require(bool,string)(_paused == false,HaggleX Token: token contract is not available) (../../sb/HaggleToken.sol#577)
ERC20._burn(address,uint256) (../../sb/HaggleToken.sol#600-612) compares to a boolean constant:
	-require(bool,string)(_paused == false,HaggleX Token: token contract is not available) (../../sb/HaggleToken.sol#602)
ERC20._burn(address,uint256) (../../sb/HaggleToken.sol#600-612) compares to a boolean constant:
	-require(bool,string)(_blacklists[account] == false,HaggleX Token: account to burn from already blacklisted) (../../sb/HaggleToken.sol#603)
ERC20._approve(address,address,uint256) (../../sb/HaggleToken.sol#628-639) compares to a boolean constant:
	-require(bool,string)(_blacklists[spender] == false,HaggleX Token: spender account already blacklisted) (../../sb/HaggleToken.sol#633)
ERC20._approve(address,address,uint256) (../../sb/HaggleToken.sol#628-639) compares to a boolean constant:
	-require(bool,string)(_paused == false,HaggleX Token: token contract approve is not available) (../../sb/HaggleToken.sol#631)
ERC20._approve(address,address,uint256) (../../sb/HaggleToken.sol#628-639) compares to a boolean constant:
	-require(bool,string)(_blacklists[owner] == false,HaggleX Token: owner account already blacklisted) (../../sb/HaggleToken.sol#632)
HaggleXToken.withdrawStakeReward(uint256) (../../sb/HaggleToken.sol#1020-1027) compares to a boolean constant:
	-require(bool,string)(isStakeLocked(stake_) == true,Withdrawal no longer available, you can only Unstake now!) (../../sb/HaggleToken.sol#1021)
HaggleXToken.unstake(uint256) (../../sb/HaggleToken.sol#1078-1086) compares to a boolean constant:
	-require(bool,string)(isStakeLocked(stake_) != true,HaggleX Token:Stake still locked!) (../../sb/HaggleToken.sol#1079)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#boolean-equality

ERC20._mint(address,uint256) (../../sb/HaggleToken.sol#575-587) has costly operations inside a loop:
	- _totalSupply = _totalSupply.add(amount) (../../sb/HaggleToken.sol#584)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#costly-operations-inside-a-loop

Context._msgData() (../../sb/HaggleToken.sol#20-23) is never used and should be removed
ERC20._setupDecimals(uint8) (../../sb/HaggleToken.sol#648-650) is never used and should be removed
SafeMath.mod(uint256,uint256) (../../sb/HaggleToken.sol#160-162) is never used and should be removed
SafeMath.mod(uint256,uint256,string) (../../sb/HaggleToken.sol#176-179) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code

Pragma version0.6.12 (../../sb/HaggleToken.sol#1) allows old versions
solc-0.6.12 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Variable Owned._owner (../../sb/HaggleToken.sol#263) is not in mixedCase
Variable Owned._newOwner (../../sb/HaggleToken.sol#264) is not in mixedCase
Parameter ERC20.blacklisted(address)._address (../../sb/HaggleToken.sol#408) is not in mixedCase
Event HaggleXToken.staked(address,uint256,uint256) (../../sb/HaggleToken.sol#672) is not in CapWords
Event HaggleXToken.unstaked(address,uint256) (../../sb/HaggleToken.sol#673) is not in CapWords
Parameter HaggleXToken.blacklist(address)._address (../../sb/HaggleToken.sol#827) is not in mixedCase
Parameter HaggleXToken.whitelist(address)._address (../../sb/HaggleToken.sol#834) is not in mixedCase
Parameter HaggleXToken.mintToMultipleAddresses(address[],uint256)._addresses (../../sb/HaggleToken.sol#873) is not in mixedCase
Parameter HaggleXToken.mintToMultipleAddresses(address[],uint256)._amount (../../sb/HaggleToken.sol#873) is not in mixedCase
Variable HaggleXToken.STAKERS_PERCENTAGE (../../sb/HaggleToken.sol#680) is not in mixedCase
Variable HaggleXToken.LEADERSHIP_BOARD_PERCENTAGE (../../sb/HaggleToken.sol#681) is not in mixedCase
Variable HaggleXToken.UNIVERSAL_BASIC_INCOME_PERCENTAGE (../../sb/HaggleToken.sol#682) is not in mixedCase
Variable HaggleXToken.DEVELOPMENT_PERCENTAGE (../../sb/HaggleToken.sol#683) is not in mixedCase
Variable HaggleXToken.CORE_TEAM (../../sb/HaggleToken.sol#686) is not in mixedCase
Variable HaggleXToken.ADVISORS (../../sb/HaggleToken.sol#687) is not in mixedCase
Variable HaggleXToken.CORE_INVESTORS (../../sb/HaggleToken.sol#688) is not in mixedCase
Variable HaggleXToken.RESERVE (../../sb/HaggleToken.sol#689) is not in mixedCase
Variable HaggleXToken.CHARITY (../../sb/HaggleToken.sol#690) is not in mixedCase
Variable HaggleXToken.FOUNDING_STAFF (../../sb/HaggleToken.sol#691) is not in mixedCase
Variable HaggleXToken.AIRGRAB (../../sb/HaggleToken.sol#692) is not in mixedCase
Variable HaggleXToken.LEADERSHIP_BOARD (../../sb/HaggleToken.sol#694) is not in mixedCase
Variable HaggleXToken.UNIVERSAL_BASIC_INCOME (../../sb/HaggleToken.sol#695) is not in mixedCase
Variable HaggleXToken.DEVELOPMENT (../../sb/HaggleToken.sol#696) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Redundant expression "this (../../sb/HaggleToken.sol#21)" inContext (../../sb/HaggleToken.sol#15-24)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#redundant-statements

HaggleXToken.constructor() (../../sb/HaggleToken.sol#717-758) uses literals with too many digits:
	- _mint(CORE_TEAM,100000000000000000000000) (../../sb/HaggleToken.sol#750)
HaggleXToken.constructor() (../../sb/HaggleToken.sol#717-758) uses literals with too many digits:
	- _mint(RESERVE,100000000000000000000000) (../../sb/HaggleToken.sol#753)
HaggleXToken.constructor() (../../sb/HaggleToken.sol#717-758) uses literals with too many digits:
	- _mint(AIRGRAB,100000000000000000000000) (../../sb/HaggleToken.sol#756)
HaggleXToken.getHalvedReward() (../../sb/HaggleToken.sol#960-1001) uses literals with too many digits:
	- getTotalSupply() >= 1000000000000000000000000 && getTotalSupply() <= 1116800000000000000000000 (../../sb/HaggleToken.sol#964)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits

HaggleXToken.ADVISORS (../../sb/HaggleToken.sol#687) should be constant 
HaggleXToken.AIRGRAB (../../sb/HaggleToken.sol#692) should be constant 
HaggleXToken.CHARITY (../../sb/HaggleToken.sol#690) should be constant 
HaggleXToken.CORE_INVESTORS (../../sb/HaggleToken.sol#688) should be constant 
HaggleXToken.CORE_TEAM (../../sb/HaggleToken.sol#686) should be constant 
HaggleXToken.DEVELOPMENT (../../sb/HaggleToken.sol#696) should be constant 
HaggleXToken.DEVELOPMENT_PERCENTAGE (../../sb/HaggleToken.sol#683) should be constant 
HaggleXToken.FOUNDING_STAFF (../../sb/HaggleToken.sol#691) should be constant 
HaggleXToken.LEADERSHIP_BOARD (../../sb/HaggleToken.sol#694) should be constant 
HaggleXToken.LEADERSHIP_BOARD_PERCENTAGE (../../sb/HaggleToken.sol#681) should be constant 
HaggleXToken.RESERVE (../../sb/HaggleToken.sol#689) should be constant 
HaggleXToken.STAKERS_PERCENTAGE (../../sb/HaggleToken.sol#680) should be constant 
HaggleXToken.UNIVERSAL_BASIC_INCOME (../../sb/HaggleToken.sol#695) should be constant 
HaggleXToken.UNIVERSAL_BASIC_INCOME_PERCENTAGE (../../sb/HaggleToken.sol#682) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant
/sb/HaggleToken.sol analyzed (6 contracts with 93 detectors), 76 result(s) found
