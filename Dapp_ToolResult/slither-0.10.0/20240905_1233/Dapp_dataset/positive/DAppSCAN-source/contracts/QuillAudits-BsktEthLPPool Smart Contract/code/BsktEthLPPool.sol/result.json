{
    "errors": [],
    "fails": [],
    "findings": [
        {
            "confidence": "Medium",
            "contract": "BsktEthLPPool",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-BsktEthLPPool Smart Contract/code/BsktEthLPPool.sol",
            "function": "exit",
            "impact": "Medium",
            "line": 459,
            "line_end": 462,
            "message": "Reentrancy in BsktEthLPPool.exit() (BsktEthLPPool.sol#459-462):\n\tExternal calls:\n\t- withdraw(balanceOf(_msgSender())) (BsktEthLPPool.sol#460)\n\t\t- BSKTASREWARD.safeTransfer(_msgSender(),amount) (BsktEthLPPool.sol#373)\n\t\t- (success,returndata) = address(token).call(data) (BsktEthLPPool.sol#333)\n\t- getReward() (BsktEthLPPool.sol#461)\n\t\t- STAKEBSKT.safeTransfer(_msgSender(),reward) (BsktEthLPPool.sol#471)\n\t\t- (success,returndata) = address(token).call(data) (BsktEthLPPool.sol#333)\n\tState variables written after the call(s):\n\t- getReward() (BsktEthLPPool.sol#461)\n\t\t- _status = _ENTERED (BsktEthLPPool.sol#42)\n\t\t- _status = _NOT_ENTERED (BsktEthLPPool.sol#48)\n\tReentrancyGuard._status (BsktEthLPPool.sol#24) can be used in cross function reentrancies:\n\t- ReentrancyGuard.nonReentrant() (BsktEthLPPool.sol#37-49)\n\t- getReward() (BsktEthLPPool.sol#461)\n\t\t- lastUpdateTime = lastTimeRewardApplicable() (BsktEthLPPool.sol#408)\n\tBsktEthLPPool.lastUpdateTime (BsktEthLPPool.sol#385) can be used in cross function reentrancies:\n\t- BsktEthLPPool.lastUpdateTime (BsktEthLPPool.sol#385)\n\t- BsktEthLPPool.notifyRewardRate(uint256) (BsktEthLPPool.sol#479-490)\n\t- BsktEthLPPool.rewardPerToken() (BsktEthLPPool.sol#420-432)\n\t- BsktEthLPPool.updateReward(address) (BsktEthLPPool.sol#406-414)\n\t- getReward() (BsktEthLPPool.sol#461)\n\t\t- rewardPerTokenStored = rewardPerToken() (BsktEthLPPool.sol#407)\n\tBsktEthLPPool.rewardPerTokenStored (BsktEthLPPool.sol#386) can be used in cross function reentrancies:\n\t- BsktEthLPPool.rewardPerToken() (BsktEthLPPool.sol#420-432)\n\t- BsktEthLPPool.rewardPerTokenStored (BsktEthLPPool.sol#386)\n\t- BsktEthLPPool.updateReward(address) (BsktEthLPPool.sol#406-414)\n\t- getReward() (BsktEthLPPool.sol#461)\n\t\t- rewards[_msgSender()] = 0 (BsktEthLPPool.sol#469)\n\t\t- rewards[account] = earned(account) (BsktEthLPPool.sol#410)\n\tBsktEthLPPool.rewards (BsktEthLPPool.sol#391) can be used in cross function reentrancies:\n\t- BsktEthLPPool.earned(address) (BsktEthLPPool.sol#434-439)\n\t- BsktEthLPPool.rewards (BsktEthLPPool.sol#391)\n\t- BsktEthLPPool.updateReward(address) (BsktEthLPPool.sol#406-414)\n\t- getReward() (BsktEthLPPool.sol#461)\n\t\t- userRewardPerTokenPaid[account] = rewardPerTokenStored (BsktEthLPPool.sol#411)\n\tBsktEthLPPool.userRewardPerTokenPaid (BsktEthLPPool.sol#390) can be used in cross function reentrancies:\n\t- BsktEthLPPool.earned(address) (BsktEthLPPool.sol#434-439)\n\t- BsktEthLPPool.updateReward(address) (BsktEthLPPool.sol#406-414)\n\t- BsktEthLPPool.userRewardPerTokenPaid (BsktEthLPPool.sol#390)\n",
            "name": "reentrancy-no-eth",
            "check": "TP"
        },
        {
            "confidence": "Medium",
            "contract": "BsktEthLPPool",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-BsktEthLPPool Smart Contract/code/BsktEthLPPool.sol",
            "function": "notifyRewardRate",
            "impact": "Low",
            "line": 479,
            "line_end": 490,
            "message": "BsktEthLPPool.notifyRewardRate(uint256) (BsktEthLPPool.sol#479-490) should emit an event for: \n\t- rewardRate = _reward.div(duration) (BsktEthLPPool.sol#483) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "BsktEthLPPool",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-BsktEthLPPool Smart Contract/code/BsktEthLPPool.sol",
            "function": "stake",
            "impact": "Low",
            "line": 441,
            "line_end": 446,
            "message": "Reentrancy in BsktEthLPPool.stake(uint256) (BsktEthLPPool.sol#441-446):\n\tExternal calls:\n\t- super.stake(amount) (BsktEthLPPool.sol#443)\n\t\t- BSKTASREWARD.safeTransferFrom(_msgSender(),address(this),amount) (BsktEthLPPool.sol#367)\n\t\t- (success,returndata) = address(token).call(data) (BsktEthLPPool.sol#333)\n\tEvent emitted after the call(s):\n\t- Staked(_msgSender(),amount) (BsktEthLPPool.sol#445)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "BsktEthLPPool",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-BsktEthLPPool Smart Contract/code/BsktEthLPPool.sol",
            "function": "withdraw",
            "impact": "Low",
            "line": 448,
            "line_end": 456,
            "message": "Reentrancy in BsktEthLPPool.withdraw(uint256) (BsktEthLPPool.sol#448-456):\n\tExternal calls:\n\t- super.withdraw(amount) (BsktEthLPPool.sol#453)\n\t\t- BSKTASREWARD.safeTransfer(_msgSender(),amount) (BsktEthLPPool.sol#373)\n\t\t- (success,returndata) = address(token).call(data) (BsktEthLPPool.sol#333)\n\tEvent emitted after the call(s):\n\t- Withdrawn(_msgSender(),amount) (BsktEthLPPool.sol#455)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "BsktEthLPPool",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-BsktEthLPPool Smart Contract/code/BsktEthLPPool.sol",
            "function": "getReward",
            "impact": "Low",
            "line": 465,
            "line_end": 476,
            "message": "BsktEthLPPool.getReward() (BsktEthLPPool.sol#465-476) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- reward > 0 (BsktEthLPPool.sol#468)\n",
            "name": "timestamp",
            "check": "TP"
        }
    ],
    "infos": [],
    "parser": {
        "id": "slither-0.10.0",
        "mode": "solidity",
        "version": "2024/04/30"
    }
}