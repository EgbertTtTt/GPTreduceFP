{
    "errors": [],
    "fails": [],
    "findings": [
        {
            "confidence": "Medium",
            "contract": "LPGauge",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-StackerVC/StackerVC_VentureFund001-3cfb98b21f4731dfd62993feb7c7d1540837f59b/contracts/Token/LPGauge.sol",
            "function": "withdraw",
            "impact": "High",
            "line": 687,
            "line_end": 705,
            "message": "Reentrancy in LPGauge.withdraw(uint256) (LPGauge.sol#687-705):\n\tExternal calls:\n\t- _claimSTACK(msg.sender) (LPGauge.sol#688)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (LPGauge.sol#536)\n\t\t- (success,returndata) = target.call{value: value}(data) (LPGauge.sol#404)\n\t\t- IMinter(STACK).minters(address(this)) (LPGauge.sol#740)\n\t\t- IERC20(STACK).safeTransfer(_user,_tokensGive) (LPGauge.sol#725)\n\t\t- IMinter(STACK).mint(address(this),_tokensToMint) (LPGauge.sol#762)\n\tExternal calls sending eth:\n\t- _claimSTACK(msg.sender) (LPGauge.sol#688)\n\t\t- (success,returndata) = target.call{value: value}(data) (LPGauge.sol#404)\n\tState variables written after the call(s):\n\t- balances[msg.sender] = _state (LPGauge.sol#702)\n\tLPGauge.balances (LPGauge.sol#639) can be used in cross function reentrancies:\n\t- LPGauge.balances (LPGauge.sol#639)\n\t- deposited = deposited.sub(_amount) (LPGauge.sol#697)\n\tLPGauge.deposited (LPGauge.sol#623) can be used in cross function reentrancies:\n\t- LPGauge._kick() (LPGauge.sol#729-768)\n\t- LPGauge.deposited (LPGauge.sol#623)\n",
            "name": "reentrancy-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "LPGauge",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-StackerVC/StackerVC_VentureFund001-3cfb98b21f4731dfd62993feb7c7d1540837f59b/contracts/Token/LPGauge.sol",
            "function": "deposit",
            "impact": "High",
            "line": 671,
            "line_end": 685,
            "message": "Reentrancy in LPGauge.deposit(uint256) (LPGauge.sol#671-685):\n\tExternal calls:\n\t- _claimSTACK(msg.sender) (LPGauge.sol#674)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (LPGauge.sol#536)\n\t\t- (success,returndata) = target.call{value: value}(data) (LPGauge.sol#404)\n\t\t- IMinter(STACK).minters(address(this)) (LPGauge.sol#740)\n\t\t- IERC20(STACK).safeTransfer(_user,_tokensGive) (LPGauge.sol#725)\n\t\t- IMinter(STACK).mint(address(this),_tokensToMint) (LPGauge.sol#762)\n\t- IERC20(token).safeTransferFrom(msg.sender,address(this),_amount) (LPGauge.sol#676)\n\tExternal calls sending eth:\n\t- _claimSTACK(msg.sender) (LPGauge.sol#674)\n\t\t- (success,returndata) = target.call{value: value}(data) (LPGauge.sol#404)\n\tState variables written after the call(s):\n\t- balances[msg.sender] = _state (LPGauge.sol#684)\n\tLPGauge.balances (LPGauge.sol#639) can be used in cross function reentrancies:\n\t- LPGauge.balances (LPGauge.sol#639)\n\t- deposited = deposited.add(_amount) (LPGauge.sol#680)\n\tLPGauge.deposited (LPGauge.sol#623) can be used in cross function reentrancies:\n\t- LPGauge._kick() (LPGauge.sol#729-768)\n\t- LPGauge.deposited (LPGauge.sol#623)\n",
            "name": "reentrancy-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "LPGauge",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-StackerVC/StackerVC_VentureFund001-3cfb98b21f4731dfd62993feb7c7d1540837f59b/contracts/Token/LPGauge.sol",
            "function": "setEmissionRate",
            "impact": "Medium",
            "line": 657,
            "line_end": 661,
            "message": "Reentrancy in LPGauge.setEmissionRate(uint256) (LPGauge.sol#657-661):\n\tExternal calls:\n\t- _kick() (LPGauge.sol#659)\n\t\t- IMinter(STACK).minters(address(this)) (LPGauge.sol#740)\n\t\t- IMinter(STACK).mint(address(this),_tokensToMint) (LPGauge.sol#762)\n\tState variables written after the call(s):\n\t- emissionRate = _new (LPGauge.sol#660)\n\tLPGauge.emissionRate (LPGauge.sol#621) can be used in cross function reentrancies:\n\t- LPGauge._kick() (LPGauge.sol#729-768)\n\t- LPGauge.constructor(address,address,uint256) (LPGauge.sol#644-650)\n\t- LPGauge.emissionRate (LPGauge.sol#621)\n\t- LPGauge.setEmissionRate(uint256) (LPGauge.sol#657-661)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "LPGauge",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-StackerVC/StackerVC_VentureFund001-3cfb98b21f4731dfd62993feb7c7d1540837f59b/contracts/Token/LPGauge.sol",
            "function": "_kick",
            "impact": "Medium",
            "line": 729,
            "line_end": 768,
            "message": "Reentrancy in LPGauge._kick() (LPGauge.sol#729-768):\n\tExternal calls:\n\t- IMinter(STACK).minters(address(this)) (LPGauge.sol#740)\n\t- IMinter(STACK).mint(address(this),_tokensToMint) (LPGauge.sol#762)\n\tState variables written after the call(s):\n\t- lastBlock = block.number (LPGauge.sol#767)\n\tLPGauge.lastBlock (LPGauge.sol#631) can be used in cross function reentrancies:\n\t- LPGauge._kick() (LPGauge.sol#729-768)\n\t- LPGauge.lastBlock (LPGauge.sol#631)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "LPGauge",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-StackerVC/StackerVC_VentureFund001-3cfb98b21f4731dfd62993feb7c7d1540837f59b/contracts/Token/LPGauge.sol",
            "function": "setEmissionRate",
            "impact": "Low",
            "line": 657,
            "line_end": 661,
            "message": "LPGauge.setEmissionRate(uint256) (LPGauge.sol#657-661) should emit an event for: \n\t- emissionRate = _new (LPGauge.sol#660) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "LPGauge",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-StackerVC/StackerVC_VentureFund001-3cfb98b21f4731dfd62993feb7c7d1540837f59b/contracts/Token/LPGauge.sol",
            "function": "setEndBlock",
            "impact": "Low",
            "line": 663,
            "line_end": 669,
            "message": "LPGauge.setEndBlock(uint256) (LPGauge.sol#663-669) should emit an event for: \n\t- endBlock = _block (LPGauge.sol#668) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "LPGauge",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-StackerVC/StackerVC_VentureFund001-3cfb98b21f4731dfd62993feb7c7d1540837f59b/contracts/Token/LPGauge.sol",
            "function": "_claimSTACK",
            "impact": "Low",
            "line": 711,
            "line_end": 727,
            "message": "Reentrancy in LPGauge._claimSTACK(address) (LPGauge.sol#711-727):\n\tExternal calls:\n\t- _kick() (LPGauge.sol#712)\n\t\t- IMinter(STACK).minters(address(this)) (LPGauge.sol#740)\n\t\t- IMinter(STACK).mint(address(this),_tokensToMint) (LPGauge.sol#762)\n\tState variables written after the call(s):\n\t- balances[_user] = _state (LPGauge.sol#723)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "LPGauge",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-StackerVC/StackerVC_VentureFund001-3cfb98b21f4731dfd62993feb7c7d1540837f59b/contracts/Token/LPGauge.sol",
            "function": "_kick",
            "impact": "Low",
            "line": 729,
            "line_end": 768,
            "message": "Reentrancy in LPGauge._kick() (LPGauge.sol#729-768):\n\tExternal calls:\n\t- IMinter(STACK).minters(address(this)) (LPGauge.sol#740)\n\tState variables written after the call(s):\n\t- tokensAccrued = tokensAccrued.add(_tokensToMint.mul(1e18).div(_totalDeposited)) (LPGauge.sol#761)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        }
    ],
    "infos": [],
    "parser": {
        "id": "slither-0.10.0",
        "mode": "solidity",
        "version": "2024/04/30"
    }
}