'solc --version' running
'solc /sb/InvestorAMO_V2.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/sb' running
Compilation warnings/errors on /sb/InvestorAMO_V2.sol:
Warning: Documentation tag on non-public state variables will be disallowed in 0.7.0. You will need to use the @dev tag explicitly.
    --> /sb/InvestorAMO_V2.sol:3153:5:
     |
3153 |     /// @notice Allowance amounts on behalf of others
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Warning: Documentation tag on non-public state variables will be disallowed in 0.7.0. You will need to use the @dev tag explicitly.
    --> /sb/InvestorAMO_V2.sol:3156:5:
     |
3156 |     /// @notice Official record of token balances for each account
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Warning: Contract code size exceeds 24576 bytes (a limit introduced in Spurious Dragon). This contract may not be deployable on mainnet. Consider enabling the optimizer (with a low "runs" value!), turning off revert strings, or using libraries.
    --> /sb/InvestorAMO_V2.sol:2685:1:
     |
2685 | contract FraxPool is AccessControl {
     | ^ (Relevant source part starts here and spans across multiple lines).

Warning: Contract code size exceeds 24576 bytes (a limit introduced in Spurious Dragon). This contract may not be deployable on mainnet. Consider enabling the optimizer (with a low "runs" value!), turning off revert strings, or using libraries.
    --> /sb/InvestorAMO_V2.sol:3684:1:
     |
3684 | contract InvestorAMO_V2 is AccessControl {
     | ^ (Relevant source part starts here and spans across multiple lines).



UniswapV2OracleLibrary.currentBlockTimestamp() (../../sb/InvestorAMO_V2.sol#1965-1967) uses a weak PRNG: "uint32(block.timestamp % 2 ** 32) (../../sb/InvestorAMO_V2.sol#1966)" 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#weak-PRNG

FraxPool.mint1t1FRAX(uint256,uint256) (../../sb/InvestorAMO_V2.sol#2841-2858) ignores return value by collateral_token.transferFrom(msg.sender,address(this),collateral_amount) (../../sb/InvestorAMO_V2.sol#2856)
FraxPool.mintFractionalFRAX(uint256,uint256,uint256) (../../sb/InvestorAMO_V2.sol#2879-2905) ignores return value by collateral_token.transferFrom(msg.sender,address(this),collateral_amount) (../../sb/InvestorAMO_V2.sol#2903)
FraxPool.collectRedemption() (../../sb/InvestorAMO_V2.sol#2993-3025) ignores return value by FXS.transfer(msg.sender,FXSAmount) (../../sb/InvestorAMO_V2.sol#3019)
FraxPool.collectRedemption() (../../sb/InvestorAMO_V2.sol#2993-3025) ignores return value by collateral_token.transfer(msg.sender,CollateralAmount) (../../sb/InvestorAMO_V2.sol#3023)
FraxPool.recollateralizeFRAX(uint256,uint256) (../../sb/InvestorAMO_V2.sol#3032-3057) ignores return value by collateral_token.transferFrom(msg.sender,address(this),collateral_units_precision) (../../sb/InvestorAMO_V2.sol#3054)
FraxPool.buyBackFXS(uint256,uint256) (../../sb/InvestorAMO_V2.sol#3061-3079) ignores return value by collateral_token.transfer(msg.sender,collateral_precision) (../../sb/InvestorAMO_V2.sol#3078)
InvestorAMO_V2.giveCollatBack(uint256) (../../sb/InvestorAMO_V2.sol#3892-3904) ignores return value by collateral_token.transfer(address(pool),amount) (../../sb/InvestorAMO_V2.sol#3903)
InvestorAMO_V2.withdrawRewards() (../../sb/InvestorAMO_V2.sol#3978-3982) ignores return value by COMP.transfer(custodian_address,COMP.balanceOf(address(this))) (../../sb/InvestorAMO_V2.sol#3979)
InvestorAMO_V2.withdrawRewards() (../../sb/InvestorAMO_V2.sol#3978-3982) ignores return value by stkAAVE.transfer(custodian_address,stkAAVE.balanceOf(address(this))) (../../sb/InvestorAMO_V2.sol#3980)
InvestorAMO_V2.withdrawRewards() (../../sb/InvestorAMO_V2.sol#3978-3982) ignores return value by AAVE.transfer(custodian_address,AAVE.balanceOf(address(this))) (../../sb/InvestorAMO_V2.sol#3981)
InvestorAMO_V2.emergencyRecoverERC20(address,uint256) (../../sb/InvestorAMO_V2.sol#4021-4027) ignores return value by ERC20(tokenAddress).transfer(custodian_address,tokenAmount) (../../sb/InvestorAMO_V2.sol#4025)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-transfer

FRAXStablecoin.oracle_price(FRAXStablecoin.PriceChoice) (../../sb/InvestorAMO_V2.sol#2354-2369) performs a multiplication on the result of a division:
	- eth_usd_price = uint256(eth_usd_pricer.getLatestPrice()).mul(PRICE_PRECISION).div(uint256(10) ** eth_usd_pricer_decimals) (../../sb/InvestorAMO_V2.sol#2356)
	- eth_usd_price.mul(PRICE_PRECISION).div(price_vs_eth) (../../sb/InvestorAMO_V2.sol#2368)
FraxPoolLibrary.calcMintFractionalFRAX(FraxPoolLibrary.MintFF_Params) (../../sb/InvestorAMO_V2.sol#2587-2610) performs a multiplication on the result of a division:
	- c_dollar_value_d18 = params.collateral_amount.mul(params.col_price_usd).div(1e6) (../../sb/InvestorAMO_V2.sol#2597)
	- calculated_fxs_dollar_value_d18 = (c_dollar_value_d18.mul(1e6).div(params.col_ratio)).sub(c_dollar_value_d18) (../../sb/InvestorAMO_V2.sol#2600-2602)
FraxPoolLibrary.calcBuyBackFXS(FraxPoolLibrary.BuybackFXS_Params) (../../sb/InvestorAMO_V2.sol#2617-2633) performs a multiplication on the result of a division:
	- fxs_dollar_value_d18 = params.FXS_amount.mul(params.fxs_price_usd).div(1e6) (../../sb/InvestorAMO_V2.sol#2622)
	- collateral_equivalent_d18 = fxs_dollar_value_d18.mul(1e6).div(params.col_price_usd) (../../sb/InvestorAMO_V2.sol#2626)
FraxPoolLibrary.calcRecollateralizeFRAXInner(uint256,uint256,uint256,uint256,uint256) (../../sb/InvestorAMO_V2.sol#2644-2664) performs a multiplication on the result of a division:
	- effective_collateral_ratio = global_collat_value.mul(1e6).div(frax_total_supply) (../../sb/InvestorAMO_V2.sol#2652)
	- recollat_possible = (global_collateral_ratio.mul(frax_total_supply).sub(frax_total_supply.mul(effective_collateral_ratio))).div(1e6) (../../sb/InvestorAMO_V2.sol#2653)
FraxPoolLibrary.calcRecollateralizeFRAXInner(uint256,uint256,uint256,uint256,uint256) (../../sb/InvestorAMO_V2.sol#2644-2664) performs a multiplication on the result of a division:
	- recollat_possible = (global_collateral_ratio.mul(frax_total_supply).sub(frax_total_supply.mul(effective_collateral_ratio))).div(1e6) (../../sb/InvestorAMO_V2.sol#2653)
	- amount_to_recollat = recollat_possible (../../sb/InvestorAMO_V2.sol#2659)
	- (amount_to_recollat.mul(1e6).div(col_price),amount_to_recollat) (../../sb/InvestorAMO_V2.sol#2662)
FraxPool.collatDollarBalance() (../../sb/InvestorAMO_V2.sol#2798-2808) performs a multiplication on the result of a division:
	- collat_usd_price = eth_usd_price.mul(PRICE_PRECISION).div(eth_collat_price) (../../sb/InvestorAMO_V2.sol#2805)
	- (collateral_token.balanceOf(address(this)).sub(unclaimedPoolCollateral)).mul(10 ** missing_decimals).mul(collat_usd_price).div(PRICE_PRECISION) (../../sb/InvestorAMO_V2.sol#2806)
FraxPool.redeemFractionalFRAX(uint256,uint256,uint256) (../../sb/InvestorAMO_V2.sol#2932-2965) performs a multiplication on the result of a division:
	- FRAX_amount_post_fee = (FRAX_amount.mul(uint256(1e6).sub(redemption_fee))).div(PRICE_PRECISION) (../../sb/InvestorAMO_V2.sol#2939)
	- fxs_dollar_value_d18 = FRAX_amount_post_fee.sub(FRAX_amount_post_fee.mul(global_collateral_ratio).div(PRICE_PRECISION)) (../../sb/InvestorAMO_V2.sol#2941)
FraxPool.redeemFractionalFRAX(uint256,uint256,uint256) (../../sb/InvestorAMO_V2.sol#2932-2965) performs a multiplication on the result of a division:
	- FRAX_amount_precision = FRAX_amount_post_fee.div(10 ** missing_decimals) (../../sb/InvestorAMO_V2.sol#2945)
	- collateral_dollar_value = FRAX_amount_precision.mul(global_collateral_ratio).div(PRICE_PRECISION) (../../sb/InvestorAMO_V2.sol#2946)
FraxPool.redeemFractionalFRAX(uint256,uint256,uint256) (../../sb/InvestorAMO_V2.sol#2932-2965) performs a multiplication on the result of a division:
	- collateral_dollar_value = FRAX_amount_precision.mul(global_collateral_ratio).div(PRICE_PRECISION) (../../sb/InvestorAMO_V2.sol#2946)
	- collateral_amount = collateral_dollar_value.mul(PRICE_PRECISION).div(col_price_usd) (../../sb/InvestorAMO_V2.sol#2947)
FraxPool.redeemAlgorithmicFRAX(uint256,uint256) (../../sb/InvestorAMO_V2.sol#2968-2988) performs a multiplication on the result of a division:
	- fxs_dollar_value_d18 = (fxs_dollar_value_d18.mul(uint256(1e6).sub(redemption_fee))).div(PRICE_PRECISION) (../../sb/InvestorAMO_V2.sol#2975)
	- fxs_amount = fxs_dollar_value_d18.mul(PRICE_PRECISION).div(fxs_price) (../../sb/InvestorAMO_V2.sol#2977)
InvestorAMO_V2.collatDollarBalance() (../../sb/InvestorAMO_V2.sol#3844-3860) performs a multiplication on the result of a division:
	- collat_usd_price = eth_usd_price.mul(PRICE_PRECISION).div(eth_collat_price) (../../sb/InvestorAMO_V2.sol#3857)
	- borrowed_balance.mul(10 ** missing_decimals).mul(collat_usd_price).div(PRICE_PRECISION) (../../sb/InvestorAMO_V2.sol#3858)
InvestorAMO_V2.mintRedeemPart1(uint256) (../../sb/InvestorAMO_V2.sol#3867-3886) performs a multiplication on the result of a division:
	- redeem_amount_E6 = (frax_amount.mul(uint256(1e6).sub(redemption_fee))).div(1e6).div(10 ** missing_decimals) (../../sb/InvestorAMO_V2.sol#3872)
	- expected_collat_amount = redeem_amount_E6.mul(global_collateral_ratio).div(1e6) (../../sb/InvestorAMO_V2.sol#3873)
InvestorAMO_V2.mintRedeemPart1(uint256) (../../sb/InvestorAMO_V2.sol#3867-3886) performs a multiplication on the result of a division:
	- expected_collat_amount = redeem_amount_E6.mul(global_collateral_ratio).div(1e6) (../../sb/InvestorAMO_V2.sol#3873)
	- expected_collat_amount = expected_collat_amount.mul(1e6).div(col_price_usd) (../../sb/InvestorAMO_V2.sol#3874)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply

FRAXShares._writeCheckpoint(address,uint32,uint96,uint96) (../../sb/InvestorAMO_V2.sol#1738-1749) uses a dangerous strict equality:
	- nCheckpoints > 0 && checkpoints[voter][nCheckpoints - 1].fromBlock == blockNumber (../../sb/InvestorAMO_V2.sol#1741)
Comp._writeCheckpoint(address,uint32,uint96,uint96) (../../sb/InvestorAMO_V2.sol#3398-3409) uses a dangerous strict equality:
	- nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber (../../sb/InvestorAMO_V2.sol#3401)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities

FixedPoint.mul(FixedPoint.uq112x112,uint256).z (../../sb/InvestorAMO_V2.sol#1926) is a local variable never initialized
FraxPool.collectRedemption().FXSAmount (../../sb/InvestorAMO_V2.sol#2997) is a local variable never initialized
FRAXStablecoin.oracle_price(FRAXStablecoin.PriceChoice).price_vs_eth (../../sb/InvestorAMO_V2.sol#2357) is a local variable never initialized
FraxPool.collectRedemption().CollateralAmount (../../sb/InvestorAMO_V2.sol#2998) is a local variable never initialized
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-local-variables

UniswapV2Library.getReserves(address,address,address) (../../sb/InvestorAMO_V2.sol#2019-2023) ignores return value by (reserve0,reserve1) = IUniswapV2Pair(pairFor(factory,tokenA,tokenB)).getReserves() (../../sb/InvestorAMO_V2.sol#2021)
ChainlinkETHUSDPriceConsumer.getLatestPrice() (../../sb/InvestorAMO_V2.sol#2223-2232) ignores return value by (price) = priceFeed.latestRoundData() (../../sb/InvestorAMO_V2.sol#2224-2230)
InvestorAMO_V2.mintRedeemPart1(uint256) (../../sb/InvestorAMO_V2.sol#3867-3886) ignores return value by FRAX.approve(address(pool),frax_amount) (../../sb/InvestorAMO_V2.sol#3884)
InvestorAMO_V2.burnFXS(uint256) (../../sb/InvestorAMO_V2.sol#3906-3909) ignores return value by FXS.approve(address(this),amount) (../../sb/InvestorAMO_V2.sol#3907)
InvestorAMO_V2.yDepositUSDC(uint256) (../../sb/InvestorAMO_V2.sol#3913-3917) ignores return value by collateral_token.approve(address(yUSDC_V2),USDC_amount) (../../sb/InvestorAMO_V2.sol#3915)
InvestorAMO_V2.aaveDepositUSDC(uint256) (../../sb/InvestorAMO_V2.sol#3926-3930) ignores return value by collateral_token.approve(address(aaveUSDC_Pool),USDC_amount) (../../sb/InvestorAMO_V2.sol#3928)
InvestorAMO_V2.aaveWithdrawUSDC(uint256) (../../sb/InvestorAMO_V2.sol#3933-3935) ignores return value by aaveUSDC_Pool.withdraw(collateral_address,aUSDC_amount,address(this)) (../../sb/InvestorAMO_V2.sol#3934)
InvestorAMO_V2.aaveCollect_stkAAVE() (../../sb/InvestorAMO_V2.sol#3938-3943) ignores return value by AAVEIncentivesController.claimRewards(the_assets,rewards_balance,address(this)) (../../sb/InvestorAMO_V2.sol#3942)
InvestorAMO_V2.compoundMint_cUSDC(uint256) (../../sb/InvestorAMO_V2.sol#3958-3962) ignores return value by collateral_token.approve(address(cUSDC),USDC_amount) (../../sb/InvestorAMO_V2.sol#3960)
InvestorAMO_V2.compoundMint_cUSDC(uint256) (../../sb/InvestorAMO_V2.sol#3958-3962) ignores return value by cUSDC.mint(USDC_amount) (../../sb/InvestorAMO_V2.sol#3961)
InvestorAMO_V2.compoundRedeem_cUSDC(uint256) (../../sb/InvestorAMO_V2.sol#3965-3968) ignores return value by cUSDC.redeem(cUSDC_amount) (../../sb/InvestorAMO_V2.sol#3967)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return

ERC20.constructor(string,string).name (../../sb/InvestorAMO_V2.sol#769) shadows:
	- ERC20.name() (../../sb/InvestorAMO_V2.sol#778-780) (function)
ERC20.constructor(string,string).symbol (../../sb/InvestorAMO_V2.sol#769) shadows:
	- ERC20.symbol() (../../sb/InvestorAMO_V2.sol#786-788) (function)
FRAXStablecoin.oracle_price(FRAXStablecoin.PriceChoice).eth_usd_price (../../sb/InvestorAMO_V2.sol#2356) shadows:
	- FRAXStablecoin.eth_usd_price() (../../sb/InvestorAMO_V2.sol#2381-2383) (function)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing

FRAXShares.setTimelock(address) (../../sb/InvestorAMO_V2.sol#1587-1589) should emit an event for: 
	- timelock_address = new_timelock (../../sb/InvestorAMO_V2.sol#1588) 
FRAXShares.setOwner(address) (../../sb/InvestorAMO_V2.sol#1599-1601) should emit an event for: 
	- owner_address = _owner_address (../../sb/InvestorAMO_V2.sol#1600) 
UniswapPairOracle.setOwner(address) (../../sb/InvestorAMO_V2.sol#2117-2119) should emit an event for: 
	- owner_address = _owner_address (../../sb/InvestorAMO_V2.sol#2118) 
UniswapPairOracle.setTimelock(address) (../../sb/InvestorAMO_V2.sol#2121-2123) should emit an event for: 
	- timelock_address = _timelock_address (../../sb/InvestorAMO_V2.sol#2122) 
FRAXStablecoin.setOwner(address) (../../sb/InvestorAMO_V2.sol#2480-2482) should emit an event for: 
	- owner_address = _owner_address (../../sb/InvestorAMO_V2.sol#2481) 
	- owner_address = _owner_address (../../sb/InvestorAMO_V2.sol#2481) 
FRAXStablecoin.setTimelock(address) (../../sb/InvestorAMO_V2.sol#2514-2516) should emit an event for: 
	- timelock_address = new_timelock (../../sb/InvestorAMO_V2.sol#2515) 
	- timelock_address = new_timelock (../../sb/InvestorAMO_V2.sol#2515) 
FRAXStablecoin.setController(address) (../../sb/InvestorAMO_V2.sol#2518-2520) should emit an event for: 
	- controller_address = _controller_address (../../sb/InvestorAMO_V2.sol#2519) 
FraxPool.setTimelock(address) (../../sb/InvestorAMO_V2.sol#3125-3127) should emit an event for: 
	- timelock_address = new_timelock (../../sb/InvestorAMO_V2.sol#3126) 
FraxPool.setOwner(address) (../../sb/InvestorAMO_V2.sol#3129-3131) should emit an event for: 
	- owner_address = _owner_address (../../sb/InvestorAMO_V2.sol#3130) 
InvestorAMO_V2.setTimelock(address) (../../sb/InvestorAMO_V2.sol#3986-3988) should emit an event for: 
	- timelock_address = new_timelock (../../sb/InvestorAMO_V2.sol#3987) 
InvestorAMO_V2.setOwner(address) (../../sb/InvestorAMO_V2.sol#3990-3992) should emit an event for: 
	- owner_address = _owner_address (../../sb/InvestorAMO_V2.sol#3991) 
InvestorAMO_V2.setMiscRewardsCustodian(address) (../../sb/InvestorAMO_V2.sol#3998-4000) should emit an event for: 
	- custodian_address = _custodian_address (../../sb/InvestorAMO_V2.sol#3999) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-access-control

UniswapPairOracle.setPeriod(uint256) (../../sb/InvestorAMO_V2.sol#2125-2127) should emit an event for: 
	- PERIOD = _period (../../sb/InvestorAMO_V2.sol#2126) 
UniswapPairOracle.setConsultLeniency(uint256) (../../sb/InvestorAMO_V2.sol#2129-2131) should emit an event for: 
	- CONSULT_LENIENCY = _consult_leniency (../../sb/InvestorAMO_V2.sol#2130) 
FRAXStablecoin.setRedemptionFee(uint256) (../../sb/InvestorAMO_V2.sol#2484-2486) should emit an event for: 
	- redemption_fee = red_fee (../../sb/InvestorAMO_V2.sol#2485) 
FRAXStablecoin.setMintingFee(uint256) (../../sb/InvestorAMO_V2.sol#2488-2490) should emit an event for: 
	- minting_fee = min_fee (../../sb/InvestorAMO_V2.sol#2489) 
FRAXStablecoin.setFraxStep(uint256) (../../sb/InvestorAMO_V2.sol#2492-2494) should emit an event for: 
	- frax_step = _new_step (../../sb/InvestorAMO_V2.sol#2493) 
FRAXStablecoin.setPriceTarget(uint256) (../../sb/InvestorAMO_V2.sol#2496-2498) should emit an event for: 
	- price_target = _new_price_target (../../sb/InvestorAMO_V2.sol#2497) 
FRAXStablecoin.setRefreshCooldown(uint256) (../../sb/InvestorAMO_V2.sol#2500-2502) should emit an event for: 
	- refresh_cooldown = _new_cooldown (../../sb/InvestorAMO_V2.sol#2501) 
FRAXStablecoin.setETHUSDOracle(address) (../../sb/InvestorAMO_V2.sol#2508-2512) should emit an event for: 
	- eth_usd_pricer_decimals = eth_usd_pricer.getDecimals() (../../sb/InvestorAMO_V2.sol#2511) 
FRAXStablecoin.setPriceBand(uint256) (../../sb/InvestorAMO_V2.sol#2522-2524) should emit an event for: 
	- price_band = _price_band (../../sb/InvestorAMO_V2.sol#2523) 
FraxPool.toggleCollateralPrice(uint256) (../../sb/InvestorAMO_V2.sol#3103-3112) should emit an event for: 
	- pausedPrice = _new_price (../../sb/InvestorAMO_V2.sol#3107) 
	- pausedPrice = 0 (../../sb/InvestorAMO_V2.sol#3109) 
FraxPool.setPoolParameters(uint256,uint256,uint256,uint256,uint256,uint256,uint256) (../../sb/InvestorAMO_V2.sol#3115-3123) should emit an event for: 
	- pool_ceiling = new_ceiling (../../sb/InvestorAMO_V2.sol#3116) 
	- bonus_rate = new_bonus_rate (../../sb/InvestorAMO_V2.sol#3117) 
	- redemption_delay = new_redemption_delay (../../sb/InvestorAMO_V2.sol#3118) 
	- minting_fee = new_mint_fee (../../sb/InvestorAMO_V2.sol#3119) 
	- redemption_fee = new_redeem_fee (../../sb/InvestorAMO_V2.sol#3120) 
	- buyback_fee = new_buyback_fee (../../sb/InvestorAMO_V2.sol#3121) 
	- recollat_fee = new_recollat_fee (../../sb/InvestorAMO_V2.sol#3122) 
InvestorAMO_V2.mintRedeemPart1(uint256) (../../sb/InvestorAMO_V2.sol#3867-3886) should emit an event for: 
	- borrowed_balance = borrowed_balance.add(expected_collat_amount) (../../sb/InvestorAMO_V2.sol#3877) 
InvestorAMO_V2.giveCollatBack(uint256) (../../sb/InvestorAMO_V2.sol#3892-3904) should emit an event for: 
	- borrowed_balance = borrowed_balance.sub(amount) (../../sb/InvestorAMO_V2.sol#3895) 
	- borrowed_balance = 0 (../../sb/InvestorAMO_V2.sol#3899) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-arithmetic

FRAXShares.constructor(string,string,address,address,address)._owner_address (../../sb/InvestorAMO_V2.sol#1566) lacks a zero-check on :
		- owner_address = _owner_address (../../sb/InvestorAMO_V2.sol#1571)
FRAXShares.constructor(string,string,address,address,address)._oracle_address (../../sb/InvestorAMO_V2.sol#1565) lacks a zero-check on :
		- oracle_address = _oracle_address (../../sb/InvestorAMO_V2.sol#1572)
FRAXShares.constructor(string,string,address,address,address)._timelock_address (../../sb/InvestorAMO_V2.sol#1567) lacks a zero-check on :
		- timelock_address = _timelock_address (../../sb/InvestorAMO_V2.sol#1573)
FRAXShares.setOracle(address).new_oracle (../../sb/InvestorAMO_V2.sol#1583) lacks a zero-check on :
		- oracle_address = new_oracle (../../sb/InvestorAMO_V2.sol#1584)
FRAXShares.setTimelock(address).new_timelock (../../sb/InvestorAMO_V2.sol#1587) lacks a zero-check on :
		- timelock_address = new_timelock (../../sb/InvestorAMO_V2.sol#1588)
FRAXShares.setOwner(address)._owner_address (../../sb/InvestorAMO_V2.sol#1599) lacks a zero-check on :
		- owner_address = _owner_address (../../sb/InvestorAMO_V2.sol#1600)
UniswapPairOracle.constructor(address,address,address,address,address)._owner_address (../../sb/InvestorAMO_V2.sol#2101) lacks a zero-check on :
		- owner_address = _owner_address (../../sb/InvestorAMO_V2.sol#2113)
UniswapPairOracle.constructor(address,address,address,address,address)._timelock_address (../../sb/InvestorAMO_V2.sol#2101) lacks a zero-check on :
		- timelock_address = _timelock_address (../../sb/InvestorAMO_V2.sol#2114)
UniswapPairOracle.setOwner(address)._owner_address (../../sb/InvestorAMO_V2.sol#2117) lacks a zero-check on :
		- owner_address = _owner_address (../../sb/InvestorAMO_V2.sol#2118)
UniswapPairOracle.setTimelock(address)._timelock_address (../../sb/InvestorAMO_V2.sol#2121) lacks a zero-check on :
		- timelock_address = _timelock_address (../../sb/InvestorAMO_V2.sol#2122)
FRAXStablecoin.constructor(string,string,address,address)._creator_address (../../sb/InvestorAMO_V2.sol#2331) lacks a zero-check on :
		- creator_address = _creator_address (../../sb/InvestorAMO_V2.sol#2336)
		- owner_address = _creator_address (../../sb/InvestorAMO_V2.sol#2340)
FRAXStablecoin.constructor(string,string,address,address)._timelock_address (../../sb/InvestorAMO_V2.sol#2332) lacks a zero-check on :
		- timelock_address = _timelock_address (../../sb/InvestorAMO_V2.sol#2337)
FRAXStablecoin.setOwner(address)._owner_address (../../sb/InvestorAMO_V2.sol#2480) lacks a zero-check on :
		- owner_address = _owner_address (../../sb/InvestorAMO_V2.sol#2481)
FRAXStablecoin.setFXSAddress(address)._fxs_address (../../sb/InvestorAMO_V2.sol#2504) lacks a zero-check on :
		- fxs_address = _fxs_address (../../sb/InvestorAMO_V2.sol#2505)
FRAXStablecoin.setETHUSDOracle(address)._eth_usd_consumer_address (../../sb/InvestorAMO_V2.sol#2508) lacks a zero-check on :
		- eth_usd_consumer_address = _eth_usd_consumer_address (../../sb/InvestorAMO_V2.sol#2509)
FRAXStablecoin.setTimelock(address).new_timelock (../../sb/InvestorAMO_V2.sol#2514) lacks a zero-check on :
		- timelock_address = new_timelock (../../sb/InvestorAMO_V2.sol#2515)
FRAXStablecoin.setController(address)._controller_address (../../sb/InvestorAMO_V2.sol#2518) lacks a zero-check on :
		- controller_address = _controller_address (../../sb/InvestorAMO_V2.sol#2519)
FRAXStablecoin.setFRAXEthOracle(address,address)._frax_oracle_addr (../../sb/InvestorAMO_V2.sol#2527) lacks a zero-check on :
		- frax_eth_oracle_address = _frax_oracle_addr (../../sb/InvestorAMO_V2.sol#2528)
FRAXStablecoin.setFRAXEthOracle(address,address)._weth_address (../../sb/InvestorAMO_V2.sol#2527) lacks a zero-check on :
		- weth_address = _weth_address (../../sb/InvestorAMO_V2.sol#2530)
FRAXStablecoin.setFXSEthOracle(address,address)._fxs_oracle_addr (../../sb/InvestorAMO_V2.sol#2534) lacks a zero-check on :
		- fxs_eth_oracle_address = _fxs_oracle_addr (../../sb/InvestorAMO_V2.sol#2535)
FRAXStablecoin.setFXSEthOracle(address,address)._weth_address (../../sb/InvestorAMO_V2.sol#2534) lacks a zero-check on :
		- weth_address = _weth_address (../../sb/InvestorAMO_V2.sol#2537)
FraxPool.constructor(address,address,address,address,address,uint256)._frax_contract_address (../../sb/InvestorAMO_V2.sol#2769) lacks a zero-check on :
		- frax_contract_address = _frax_contract_address (../../sb/InvestorAMO_V2.sol#2778)
FraxPool.constructor(address,address,address,address,address,uint256)._fxs_contract_address (../../sb/InvestorAMO_V2.sol#2770) lacks a zero-check on :
		- fxs_contract_address = _fxs_contract_address (../../sb/InvestorAMO_V2.sol#2779)
FraxPool.constructor(address,address,address,address,address,uint256)._collateral_address (../../sb/InvestorAMO_V2.sol#2771) lacks a zero-check on :
		- collateral_address = _collateral_address (../../sb/InvestorAMO_V2.sol#2780)
FraxPool.constructor(address,address,address,address,address,uint256)._timelock_address (../../sb/InvestorAMO_V2.sol#2773) lacks a zero-check on :
		- timelock_address = _timelock_address (../../sb/InvestorAMO_V2.sol#2781)
FraxPool.constructor(address,address,address,address,address,uint256)._creator_address (../../sb/InvestorAMO_V2.sol#2772) lacks a zero-check on :
		- owner_address = _creator_address (../../sb/InvestorAMO_V2.sol#2782)
FraxPool.setCollatETHOracle(address,address)._collateral_weth_oracle_address (../../sb/InvestorAMO_V2.sol#2834) lacks a zero-check on :
		- collat_eth_oracle_address = _collateral_weth_oracle_address (../../sb/InvestorAMO_V2.sol#2835)
FraxPool.setCollatETHOracle(address,address)._weth_address (../../sb/InvestorAMO_V2.sol#2834) lacks a zero-check on :
		- weth_address = _weth_address (../../sb/InvestorAMO_V2.sol#2837)
FraxPool.setTimelock(address).new_timelock (../../sb/InvestorAMO_V2.sol#3125) lacks a zero-check on :
		- timelock_address = new_timelock (../../sb/InvestorAMO_V2.sol#3126)
FraxPool.setOwner(address)._owner_address (../../sb/InvestorAMO_V2.sol#3129) lacks a zero-check on :
		- owner_address = _owner_address (../../sb/InvestorAMO_V2.sol#3130)
InvestorAMO_V2.constructor(address,address,address,address,address,address,address)._pool_address (../../sb/InvestorAMO_V2.sol#3753) lacks a zero-check on :
		- pool_address = _pool_address (../../sb/InvestorAMO_V2.sol#3761)
InvestorAMO_V2.constructor(address,address,address,address,address,address,address)._collateral_address (../../sb/InvestorAMO_V2.sol#3754) lacks a zero-check on :
		- collateral_address = _collateral_address (../../sb/InvestorAMO_V2.sol#3763)
InvestorAMO_V2.constructor(address,address,address,address,address,address,address)._timelock_address (../../sb/InvestorAMO_V2.sol#3757) lacks a zero-check on :
		- timelock_address = _timelock_address (../../sb/InvestorAMO_V2.sol#3765)
InvestorAMO_V2.constructor(address,address,address,address,address,address,address)._owner_address (../../sb/InvestorAMO_V2.sol#3755) lacks a zero-check on :
		- owner_address = _owner_address (../../sb/InvestorAMO_V2.sol#3766)
InvestorAMO_V2.constructor(address,address,address,address,address,address,address)._custodian_address (../../sb/InvestorAMO_V2.sol#3756) lacks a zero-check on :
		- custodian_address = _custodian_address (../../sb/InvestorAMO_V2.sol#3767)
InvestorAMO_V2.setTimelock(address).new_timelock (../../sb/InvestorAMO_V2.sol#3986) lacks a zero-check on :
		- timelock_address = new_timelock (../../sb/InvestorAMO_V2.sol#3987)
InvestorAMO_V2.setOwner(address)._owner_address (../../sb/InvestorAMO_V2.sol#3990) lacks a zero-check on :
		- owner_address = _owner_address (../../sb/InvestorAMO_V2.sol#3991)
InvestorAMO_V2.setWethAddress(address)._weth_address (../../sb/InvestorAMO_V2.sol#3994) lacks a zero-check on :
		- weth_address = _weth_address (../../sb/InvestorAMO_V2.sol#3995)
InvestorAMO_V2.setMiscRewardsCustodian(address)._custodian_address (../../sb/InvestorAMO_V2.sol#3998) lacks a zero-check on :
		- custodian_address = _custodian_address (../../sb/InvestorAMO_V2.sol#3999)
InvestorAMO_V2.setPool(address)._pool_address (../../sb/InvestorAMO_V2.sol#4002) lacks a zero-check on :
		- pool_address = _pool_address (../../sb/InvestorAMO_V2.sol#4003)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

FRAXStablecoin.globalCollateralValue() (../../sb/InvestorAMO_V2.sol#2401-2412) has external calls inside a loop: total_collateral_value_d18 = total_collateral_value_d18.add(FraxPool(frax_pools_array[i]).collatDollarBalance()) (../../sb/InvestorAMO_V2.sol#2407)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop

Reentrancy in InvestorAMO_V2.emergencyRecoverERC20(address,uint256) (../../sb/InvestorAMO_V2.sol#4021-4027):
	External calls:
	- ERC20(tokenAddress).transfer(custodian_address,tokenAmount) (../../sb/InvestorAMO_V2.sol#4025)
	Event emitted after the call(s):
	- Recovered(tokenAddress,tokenAmount) (../../sb/InvestorAMO_V2.sol#4026)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

UniswapV2OracleLibrary.currentCumulativePrices(address) (../../sb/InvestorAMO_V2.sol#1970-1988) uses timestamp for comparisons
	Dangerous comparisons:
	- blockTimestampLast != blockTimestamp (../../sb/InvestorAMO_V2.sol#1979)
FRAXStablecoin.refreshCollateralRatio() (../../sb/InvestorAMO_V2.sol#2418-2440) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp - last_call_time >= refresh_cooldown,Must wait for the refresh cooldown since last refresh) (../../sb/InvestorAMO_V2.sol#2421)
Comp.delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32) (../../sb/InvestorAMO_V2.sol#3297-3306) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(now <= expiry,Comp::delegateBySig: signature expired) (../../sb/InvestorAMO_V2.sol#3304)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

Address.isContract(address) (../../sb/InvestorAMO_V2.sol#282-291) uses assembly
	- INLINE ASM (../../sb/InvestorAMO_V2.sol#289)
Address._verifyCallResult(bool,bytes,string) (../../sb/InvestorAMO_V2.sol#427-444) uses assembly
	- INLINE ASM (../../sb/InvestorAMO_V2.sol#436-439)
FRAXShares.getChainId() (../../sb/InvestorAMO_V2.sol#1772-1776) uses assembly
	- INLINE ASM (../../sb/InvestorAMO_V2.sol#1774)
Comp.getChainId() (../../sb/InvestorAMO_V2.sol#3432-3436) uses assembly
	- INLINE ASM (../../sb/InvestorAMO_V2.sol#3434)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage

FRAXShares.onlyPools() (../../sb/InvestorAMO_V2.sol#1550-1553) compares to a boolean constant:
	-require(bool,string)(FRAX.frax_pools(msg.sender) == true,Only frax pools can mint new FRAX) (../../sb/InvestorAMO_V2.sol#1551)
FRAXStablecoin.refreshCollateralRatio() (../../sb/InvestorAMO_V2.sol#2418-2440) compares to a boolean constant:
	-require(bool,string)(collateral_ratio_paused == false,Collateral Ratio has been paused) (../../sb/InvestorAMO_V2.sol#2419)
FRAXStablecoin.addPool(address) (../../sb/InvestorAMO_V2.sol#2457-2461) compares to a boolean constant:
	-require(bool,string)(frax_pools[pool_address] == false,address already exists) (../../sb/InvestorAMO_V2.sol#2458)
FRAXStablecoin.removePool(address) (../../sb/InvestorAMO_V2.sol#2464-2478) compares to a boolean constant:
	-require(bool,string)(frax_pools[pool_address] == true,address doesn't exist already) (../../sb/InvestorAMO_V2.sol#2465)
FRAXStablecoin.onlyPools() (../../sb/InvestorAMO_V2.sol#2307-2310) compares to a boolean constant:
	-require(bool,string)(frax_pools[msg.sender] == true,Only frax pools can call this function) (../../sb/InvestorAMO_V2.sol#2308)
FRAXStablecoin.onlyByOwnerGovernanceOrPool() (../../sb/InvestorAMO_V2.sol#2317-2324) compares to a boolean constant:
	-require(bool,string)(msg.sender == owner_address || msg.sender == timelock_address || frax_pools[msg.sender] == true,You are not the owner, the governance timelock, or a pool) (../../sb/InvestorAMO_V2.sol#2318-2322)
FraxPool.collatDollarBalance() (../../sb/InvestorAMO_V2.sol#2798-2808) compares to a boolean constant:
	-collateralPricePaused == true (../../sb/InvestorAMO_V2.sol#2799)
FraxPool.getCollateralPrice() (../../sb/InvestorAMO_V2.sol#2825-2832) compares to a boolean constant:
	-collateralPricePaused == true (../../sb/InvestorAMO_V2.sol#2826)
FraxPool.collectRedemption() (../../sb/InvestorAMO_V2.sol#2993-3025) compares to a boolean constant:
	-sendCollateral == true (../../sb/InvestorAMO_V2.sol#3021)
FraxPool.collectRedemption() (../../sb/InvestorAMO_V2.sol#2993-3025) compares to a boolean constant:
	-sendFXS == true (../../sb/InvestorAMO_V2.sol#3017)
FraxPool.recollateralizeFRAX(uint256,uint256) (../../sb/InvestorAMO_V2.sol#3032-3057) compares to a boolean constant:
	-require(bool,string)(recollateralizePaused == false,Recollateralize is paused) (../../sb/InvestorAMO_V2.sol#3033)
FraxPool.buyBackFXS(uint256,uint256) (../../sb/InvestorAMO_V2.sol#3061-3079) compares to a boolean constant:
	-require(bool,string)(buyBackPaused == false,Buyback is paused) (../../sb/InvestorAMO_V2.sol#3062)
FraxPool.toggleCollateralPrice(uint256) (../../sb/InvestorAMO_V2.sol#3103-3112) compares to a boolean constant:
	-collateralPricePaused == false (../../sb/InvestorAMO_V2.sol#3106)
FraxPool.notRedeemPaused() (../../sb/InvestorAMO_V2.sol#2756-2759) compares to a boolean constant:
	-require(bool,string)(redeemPaused == false,Redeeming is paused) (../../sb/InvestorAMO_V2.sol#2757)
FraxPool.notMintPaused() (../../sb/InvestorAMO_V2.sol#2761-2764) compares to a boolean constant:
	-require(bool,string)(mintPaused == false,Minting is paused) (../../sb/InvestorAMO_V2.sol#2762)
InvestorAMO_V2.collatDollarBalance() (../../sb/InvestorAMO_V2.sol#3844-3860) compares to a boolean constant:
	-pool.collateralPricePaused() == true (../../sb/InvestorAMO_V2.sol#3850)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#boolean-equality

AccessControl._setRoleAdmin(bytes32,bytes32) (../../sb/InvestorAMO_V2.sol#1481-1484) is never used and should be removed
Address._verifyCallResult(bool,bytes,string) (../../sb/InvestorAMO_V2.sol#427-444) is never used and should be removed
Address.functionCall(address,bytes) (../../sb/InvestorAMO_V2.sol#335-337) is never used and should be removed
Address.functionCall(address,bytes,string) (../../sb/InvestorAMO_V2.sol#345-347) is never used and should be removed
Address.functionCallWithValue(address,bytes,uint256) (../../sb/InvestorAMO_V2.sol#360-362) is never used and should be removed
Address.functionCallWithValue(address,bytes,uint256,string) (../../sb/InvestorAMO_V2.sol#370-377) is never used and should be removed
Address.functionDelegateCall(address,bytes) (../../sb/InvestorAMO_V2.sol#409-411) is never used and should be removed
Address.functionDelegateCall(address,bytes,string) (../../sb/InvestorAMO_V2.sol#419-425) is never used and should be removed
Address.functionStaticCall(address,bytes) (../../sb/InvestorAMO_V2.sol#385-387) is never used and should be removed
Address.functionStaticCall(address,bytes,string) (../../sb/InvestorAMO_V2.sol#395-401) is never used and should be removed
Address.isContract(address) (../../sb/InvestorAMO_V2.sol#282-291) is never used and should be removed
Address.sendValue(address,uint256) (../../sb/InvestorAMO_V2.sol#309-315) is never used and should be removed
Babylonian.sqrt(uint256) (../../sb/InvestorAMO_V2.sol#1874-1886) is never used and should be removed
Context._msgData() (../../sb/InvestorAMO_V2.sol#180-183) is never used and should be removed
ERC20._burnFrom(address,uint256) (../../sb/InvestorAMO_V2.sol#1027-1030) is never used and should be removed
ERC20._mint(address,uint256) (../../sb/InvestorAMO_V2.sol#941-949) is never used and should be removed
EnumerableSet.add(EnumerableSet.UintSet,uint256) (../../sb/InvestorAMO_V2.sol#1246-1248) is never used and should be removed
EnumerableSet.at(EnumerableSet.UintSet,uint256) (../../sb/InvestorAMO_V2.sol#1284-1286) is never used and should be removed
EnumerableSet.contains(EnumerableSet.UintSet,uint256) (../../sb/InvestorAMO_V2.sol#1263-1265) is never used and should be removed
EnumerableSet.length(EnumerableSet.UintSet) (../../sb/InvestorAMO_V2.sol#1270-1272) is never used and should be removed
EnumerableSet.remove(EnumerableSet.UintSet,uint256) (../../sb/InvestorAMO_V2.sol#1256-1258) is never used and should be removed
FRAXShares.getChainId() (../../sb/InvestorAMO_V2.sol#1772-1776) is never used and should be removed
FRAXShares.safe96(uint256,string) (../../sb/InvestorAMO_V2.sol#1756-1759) is never used and should be removed
FixedPoint.decode(FixedPoint.uq112x112) (../../sb/InvestorAMO_V2.sol#1939-1941) is never used and should be removed
FixedPoint.div(FixedPoint.uq112x112,uint112) (../../sb/InvestorAMO_V2.sol#1918-1921) is never used and should be removed
FixedPoint.encode(uint112) (../../sb/InvestorAMO_V2.sol#1908-1910) is never used and should be removed
FixedPoint.encode144(uint144) (../../sb/InvestorAMO_V2.sol#1913-1915) is never used and should be removed
FixedPoint.reciprocal(FixedPoint.uq112x112) (../../sb/InvestorAMO_V2.sol#1949-1952) is never used and should be removed
FixedPoint.sqrt(FixedPoint.uq112x112) (../../sb/InvestorAMO_V2.sol#1955-1957) is never used and should be removed
SafeMath.mod(uint256,uint256) (../../sb/InvestorAMO_V2.sol#138-140) is never used and should be removed
SafeMath.mod(uint256,uint256,string) (../../sb/InvestorAMO_V2.sol#155-158) is never used and should be removed
UniswapV2Library.getAmountIn(uint256,uint256,uint256) (../../sb/InvestorAMO_V2.sol#2043-2049) is never used and should be removed
UniswapV2Library.getAmountOut(uint256,uint256,uint256) (../../sb/InvestorAMO_V2.sol#2033-2040) is never used and should be removed
UniswapV2Library.getAmountsIn(address,uint256,address[]) (../../sb/InvestorAMO_V2.sol#2063-2071) is never used and should be removed
UniswapV2Library.getAmountsOut(address,uint256,address[]) (../../sb/InvestorAMO_V2.sol#2052-2060) is never used and should be removed
UniswapV2Library.getReserves(address,address,address) (../../sb/InvestorAMO_V2.sol#2019-2023) is never used and should be removed
UniswapV2Library.pairForCreate2(address,address,address) (../../sb/InvestorAMO_V2.sol#2008-2016) is never used and should be removed
UniswapV2Library.quote(uint256,uint256,uint256) (../../sb/InvestorAMO_V2.sol#2026-2030) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code

Pragma version0.6.11 (../../sb/InvestorAMO_V2.sol#1) allows old versions
solc-0.6.11 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Low level call in Address.sendValue(address,uint256) (../../sb/InvestorAMO_V2.sol#309-315):
	- (success) = recipient.call{value: amount}() (../../sb/InvestorAMO_V2.sol#313)
Low level call in Address.functionCallWithValue(address,bytes,uint256,string) (../../sb/InvestorAMO_V2.sol#370-377):
	- (success,returndata) = target.call{value: value}(data) (../../sb/InvestorAMO_V2.sol#375)
Low level call in Address.functionStaticCall(address,bytes,string) (../../sb/InvestorAMO_V2.sol#395-401):
	- (success,returndata) = target.staticcall(data) (../../sb/InvestorAMO_V2.sol#399)
Low level call in Address.functionDelegateCall(address,bytes,string) (../../sb/InvestorAMO_V2.sol#419-425):
	- (success,returndata) = target.delegatecall(data) (../../sb/InvestorAMO_V2.sol#423)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls

Parameter FRAXShares.setOracle(address).new_oracle (../../sb/InvestorAMO_V2.sol#1583) is not in mixedCase
Parameter FRAXShares.setTimelock(address).new_timelock (../../sb/InvestorAMO_V2.sol#1587) is not in mixedCase
Parameter FRAXShares.setFRAXAddress(address).frax_contract_address (../../sb/InvestorAMO_V2.sol#1591) is not in mixedCase
Parameter FRAXShares.setFXSMinDAO(uint256).min_FXS (../../sb/InvestorAMO_V2.sol#1595) is not in mixedCase
Parameter FRAXShares.setOwner(address)._owner_address (../../sb/InvestorAMO_V2.sol#1599) is not in mixedCase
Function FRAXShares.pool_mint(address,uint256) (../../sb/InvestorAMO_V2.sol#1608-1619) is not in mixedCase
Parameter FRAXShares.pool_mint(address,uint256).m_address (../../sb/InvestorAMO_V2.sol#1608) is not in mixedCase
Parameter FRAXShares.pool_mint(address,uint256).m_amount (../../sb/InvestorAMO_V2.sol#1608) is not in mixedCase
Function FRAXShares.pool_burn_from(address,uint256) (../../sb/InvestorAMO_V2.sol#1622-1633) is not in mixedCase
Parameter FRAXShares.pool_burn_from(address,uint256).b_address (../../sb/InvestorAMO_V2.sol#1622) is not in mixedCase
Parameter FRAXShares.pool_burn_from(address,uint256).b_amount (../../sb/InvestorAMO_V2.sol#1622) is not in mixedCase
Variable FRAXShares.FRAXStablecoinAdd (../../sb/InvestorAMO_V2.sol#1524) is not in mixedCase
Variable FRAXShares.FXS_DAO_min (../../sb/InvestorAMO_V2.sol#1527) is not in mixedCase
Variable FRAXShares.owner_address (../../sb/InvestorAMO_V2.sol#1529) is not in mixedCase
Variable FRAXShares.oracle_address (../../sb/InvestorAMO_V2.sol#1530) is not in mixedCase
Variable FRAXShares.timelock_address (../../sb/InvestorAMO_V2.sol#1531) is not in mixedCase
Variable FRAXShares.FRAX (../../sb/InvestorAMO_V2.sol#1532) is not in mixedCase
Function IUniswapV2Pair.DOMAIN_SEPARATOR() (../../sb/InvestorAMO_V2.sol#1822) is not in mixedCase
Function IUniswapV2Pair.PERMIT_TYPEHASH() (../../sb/InvestorAMO_V2.sol#1823) is not in mixedCase
Function IUniswapV2Pair.MINIMUM_LIQUIDITY() (../../sb/InvestorAMO_V2.sol#1840) is not in mixedCase
Struct FixedPoint.uq112x112 (../../sb/InvestorAMO_V2.sol#1893-1895) is not in CapWords
Struct FixedPoint.uq144x112 (../../sb/InvestorAMO_V2.sol#1899-1901) is not in CapWords
Parameter UniswapPairOracle.setOwner(address)._owner_address (../../sb/InvestorAMO_V2.sol#2117) is not in mixedCase
Parameter UniswapPairOracle.setTimelock(address)._timelock_address (../../sb/InvestorAMO_V2.sol#2121) is not in mixedCase
Parameter UniswapPairOracle.setPeriod(uint256)._period (../../sb/InvestorAMO_V2.sol#2125) is not in mixedCase
Parameter UniswapPairOracle.setConsultLeniency(uint256)._consult_leniency (../../sb/InvestorAMO_V2.sol#2129) is not in mixedCase
Parameter UniswapPairOracle.setAllowStaleConsults(bool)._allow_stale_consults (../../sb/InvestorAMO_V2.sol#2133) is not in mixedCase
Variable UniswapPairOracle.owner_address (../../sb/InvestorAMO_V2.sol#2079) is not in mixedCase
Variable UniswapPairOracle.timelock_address (../../sb/InvestorAMO_V2.sol#2080) is not in mixedCase
Variable UniswapPairOracle.PERIOD (../../sb/InvestorAMO_V2.sol#2082) is not in mixedCase
Variable UniswapPairOracle.CONSULT_LENIENCY (../../sb/InvestorAMO_V2.sol#2083) is not in mixedCase
Variable UniswapPairOracle.ALLOW_STALE_CONSULTS (../../sb/InvestorAMO_V2.sol#2084) is not in mixedCase
Function FRAXStablecoin.oracle_price(FRAXStablecoin.PriceChoice) (../../sb/InvestorAMO_V2.sol#2354-2369) is not in mixedCase
Function FRAXStablecoin.frax_price() (../../sb/InvestorAMO_V2.sol#2372-2374) is not in mixedCase
Function FRAXStablecoin.fxs_price() (../../sb/InvestorAMO_V2.sol#2377-2379) is not in mixedCase
Function FRAXStablecoin.eth_usd_price() (../../sb/InvestorAMO_V2.sol#2381-2383) is not in mixedCase
Function FRAXStablecoin.frax_info() (../../sb/InvestorAMO_V2.sol#2387-2398) is not in mixedCase
Function FRAXStablecoin.pool_burn_from(address,uint256) (../../sb/InvestorAMO_V2.sol#2445-2448) is not in mixedCase
Parameter FRAXStablecoin.pool_burn_from(address,uint256).b_address (../../sb/InvestorAMO_V2.sol#2445) is not in mixedCase
Parameter FRAXStablecoin.pool_burn_from(address,uint256).b_amount (../../sb/InvestorAMO_V2.sol#2445) is not in mixedCase
Function FRAXStablecoin.pool_mint(address,uint256) (../../sb/InvestorAMO_V2.sol#2451-2454) is not in mixedCase
Parameter FRAXStablecoin.pool_mint(address,uint256).m_address (../../sb/InvestorAMO_V2.sol#2451) is not in mixedCase
Parameter FRAXStablecoin.pool_mint(address,uint256).m_amount (../../sb/InvestorAMO_V2.sol#2451) is not in mixedCase
Parameter FRAXStablecoin.addPool(address).pool_address (../../sb/InvestorAMO_V2.sol#2457) is not in mixedCase
Parameter FRAXStablecoin.removePool(address).pool_address (../../sb/InvestorAMO_V2.sol#2464) is not in mixedCase
Parameter FRAXStablecoin.setOwner(address)._owner_address (../../sb/InvestorAMO_V2.sol#2480) is not in mixedCase
Parameter FRAXStablecoin.setRedemptionFee(uint256).red_fee (../../sb/InvestorAMO_V2.sol#2484) is not in mixedCase
Parameter FRAXStablecoin.setMintingFee(uint256).min_fee (../../sb/InvestorAMO_V2.sol#2488) is not in mixedCase
Parameter FRAXStablecoin.setFraxStep(uint256)._new_step (../../sb/InvestorAMO_V2.sol#2492) is not in mixedCase
Parameter FRAXStablecoin.setPriceTarget(uint256)._new_price_target (../../sb/InvestorAMO_V2.sol#2496) is not in mixedCase
Parameter FRAXStablecoin.setRefreshCooldown(uint256)._new_cooldown (../../sb/InvestorAMO_V2.sol#2500) is not in mixedCase
Parameter FRAXStablecoin.setFXSAddress(address)._fxs_address (../../sb/InvestorAMO_V2.sol#2504) is not in mixedCase
Parameter FRAXStablecoin.setETHUSDOracle(address)._eth_usd_consumer_address (../../sb/InvestorAMO_V2.sol#2508) is not in mixedCase
Parameter FRAXStablecoin.setTimelock(address).new_timelock (../../sb/InvestorAMO_V2.sol#2514) is not in mixedCase
Parameter FRAXStablecoin.setController(address)._controller_address (../../sb/InvestorAMO_V2.sol#2518) is not in mixedCase
Parameter FRAXStablecoin.setPriceBand(uint256)._price_band (../../sb/InvestorAMO_V2.sol#2522) is not in mixedCase
Parameter FRAXStablecoin.setFRAXEthOracle(address,address)._frax_oracle_addr (../../sb/InvestorAMO_V2.sol#2527) is not in mixedCase
Parameter FRAXStablecoin.setFRAXEthOracle(address,address)._weth_address (../../sb/InvestorAMO_V2.sol#2527) is not in mixedCase
Parameter FRAXStablecoin.setFXSEthOracle(address,address)._fxs_oracle_addr (../../sb/InvestorAMO_V2.sol#2534) is not in mixedCase
Parameter FRAXStablecoin.setFXSEthOracle(address,address)._weth_address (../../sb/InvestorAMO_V2.sol#2534) is not in mixedCase
Variable FRAXStablecoin.eth_usd_pricer (../../sb/InvestorAMO_V2.sol#2261) is not in mixedCase
Variable FRAXStablecoin.eth_usd_pricer_decimals (../../sb/InvestorAMO_V2.sol#2262) is not in mixedCase
Variable FRAXStablecoin.owner_address (../../sb/InvestorAMO_V2.sol#2268) is not in mixedCase
Variable FRAXStablecoin.creator_address (../../sb/InvestorAMO_V2.sol#2269) is not in mixedCase
Variable FRAXStablecoin.timelock_address (../../sb/InvestorAMO_V2.sol#2270) is not in mixedCase
Variable FRAXStablecoin.controller_address (../../sb/InvestorAMO_V2.sol#2271) is not in mixedCase
Variable FRAXStablecoin.fxs_address (../../sb/InvestorAMO_V2.sol#2272) is not in mixedCase
Variable FRAXStablecoin.frax_eth_oracle_address (../../sb/InvestorAMO_V2.sol#2273) is not in mixedCase
Variable FRAXStablecoin.fxs_eth_oracle_address (../../sb/InvestorAMO_V2.sol#2274) is not in mixedCase
Variable FRAXStablecoin.weth_address (../../sb/InvestorAMO_V2.sol#2275) is not in mixedCase
Variable FRAXStablecoin.eth_usd_consumer_address (../../sb/InvestorAMO_V2.sol#2276) is not in mixedCase
Variable FRAXStablecoin.frax_pools_array (../../sb/InvestorAMO_V2.sol#2280) is not in mixedCase
Variable FRAXStablecoin.frax_pools (../../sb/InvestorAMO_V2.sol#2283) is not in mixedCase
Variable FRAXStablecoin.global_collateral_ratio (../../sb/InvestorAMO_V2.sol#2288) is not in mixedCase
Variable FRAXStablecoin.redemption_fee (../../sb/InvestorAMO_V2.sol#2289) is not in mixedCase
Variable FRAXStablecoin.minting_fee (../../sb/InvestorAMO_V2.sol#2290) is not in mixedCase
Variable FRAXStablecoin.frax_step (../../sb/InvestorAMO_V2.sol#2291) is not in mixedCase
Variable FRAXStablecoin.refresh_cooldown (../../sb/InvestorAMO_V2.sol#2292) is not in mixedCase
Variable FRAXStablecoin.price_target (../../sb/InvestorAMO_V2.sol#2293) is not in mixedCase
Variable FRAXStablecoin.price_band (../../sb/InvestorAMO_V2.sol#2294) is not in mixedCase
Variable FRAXStablecoin.DEFAULT_ADMIN_ADDRESS (../../sb/InvestorAMO_V2.sol#2296) is not in mixedCase
Variable FRAXStablecoin.collateral_ratio_paused (../../sb/InvestorAMO_V2.sol#2298) is not in mixedCase
Variable FRAXStablecoin.last_call_time (../../sb/InvestorAMO_V2.sol#2417) is not in mixedCase
Struct FraxPoolLibrary.MintFF_Params (../../sb/InvestorAMO_V2.sol#2561-2567) is not in CapWords
Struct FraxPoolLibrary.BuybackFXS_Params (../../sb/InvestorAMO_V2.sol#2569-2574) is not in CapWords
Parameter FraxPoolLibrary.calcMint1t1FRAX(uint256,uint256).col_price (../../sb/InvestorAMO_V2.sol#2578) is not in mixedCase
Parameter FraxPoolLibrary.calcMint1t1FRAX(uint256,uint256).collateral_amount_d18 (../../sb/InvestorAMO_V2.sol#2578) is not in mixedCase
Parameter FraxPoolLibrary.calcMintAlgorithmicFRAX(uint256,uint256).fxs_price_usd (../../sb/InvestorAMO_V2.sol#2582) is not in mixedCase
Parameter FraxPoolLibrary.calcMintAlgorithmicFRAX(uint256,uint256).fxs_amount_d18 (../../sb/InvestorAMO_V2.sol#2582) is not in mixedCase
Parameter FraxPoolLibrary.calcRedeem1t1FRAX(uint256,uint256).col_price_usd (../../sb/InvestorAMO_V2.sol#2612) is not in mixedCase
Parameter FraxPoolLibrary.calcRedeem1t1FRAX(uint256,uint256).FRAX_amount (../../sb/InvestorAMO_V2.sol#2612) is not in mixedCase
Parameter FraxPoolLibrary.recollateralizeAmount(uint256,uint256,uint256).total_supply (../../sb/InvestorAMO_V2.sol#2637) is not in mixedCase
Parameter FraxPoolLibrary.recollateralizeAmount(uint256,uint256,uint256).global_collateral_ratio (../../sb/InvestorAMO_V2.sol#2637) is not in mixedCase
Parameter FraxPoolLibrary.recollateralizeAmount(uint256,uint256,uint256).global_collat_value (../../sb/InvestorAMO_V2.sol#2637) is not in mixedCase
Parameter FraxPoolLibrary.calcRecollateralizeFRAXInner(uint256,uint256,uint256,uint256,uint256).collateral_amount (../../sb/InvestorAMO_V2.sol#2645) is not in mixedCase
Parameter FraxPoolLibrary.calcRecollateralizeFRAXInner(uint256,uint256,uint256,uint256,uint256).col_price (../../sb/InvestorAMO_V2.sol#2646) is not in mixedCase
Parameter FraxPoolLibrary.calcRecollateralizeFRAXInner(uint256,uint256,uint256,uint256,uint256).global_collat_value (../../sb/InvestorAMO_V2.sol#2647) is not in mixedCase
Parameter FraxPoolLibrary.calcRecollateralizeFRAXInner(uint256,uint256,uint256,uint256,uint256).frax_total_supply (../../sb/InvestorAMO_V2.sol#2648) is not in mixedCase
Parameter FraxPoolLibrary.calcRecollateralizeFRAXInner(uint256,uint256,uint256,uint256,uint256).global_collateral_ratio (../../sb/InvestorAMO_V2.sol#2649) is not in mixedCase
Parameter FraxPool.setCollatETHOracle(address,address)._collateral_weth_oracle_address (../../sb/InvestorAMO_V2.sol#2834) is not in mixedCase
Parameter FraxPool.setCollatETHOracle(address,address)._weth_address (../../sb/InvestorAMO_V2.sol#2834) is not in mixedCase
Parameter FraxPool.mint1t1FRAX(uint256,uint256).collateral_amount (../../sb/InvestorAMO_V2.sol#2841) is not in mixedCase
Parameter FraxPool.mint1t1FRAX(uint256,uint256).FRAX_out_min (../../sb/InvestorAMO_V2.sol#2841) is not in mixedCase
Parameter FraxPool.mintAlgorithmicFRAX(uint256,uint256).fxs_amount_d18 (../../sb/InvestorAMO_V2.sol#2861) is not in mixedCase
Parameter FraxPool.mintAlgorithmicFRAX(uint256,uint256).FRAX_out_min (../../sb/InvestorAMO_V2.sol#2861) is not in mixedCase
Parameter FraxPool.mintFractionalFRAX(uint256,uint256,uint256).collateral_amount (../../sb/InvestorAMO_V2.sol#2879) is not in mixedCase
Parameter FraxPool.mintFractionalFRAX(uint256,uint256,uint256).fxs_amount (../../sb/InvestorAMO_V2.sol#2879) is not in mixedCase
Parameter FraxPool.mintFractionalFRAX(uint256,uint256,uint256).FRAX_out_min (../../sb/InvestorAMO_V2.sol#2879) is not in mixedCase
Parameter FraxPool.redeem1t1FRAX(uint256,uint256).FRAX_amount (../../sb/InvestorAMO_V2.sol#2908) is not in mixedCase
Parameter FraxPool.redeem1t1FRAX(uint256,uint256).COLLATERAL_out_min (../../sb/InvestorAMO_V2.sol#2908) is not in mixedCase
Parameter FraxPool.redeemFractionalFRAX(uint256,uint256,uint256).FRAX_amount (../../sb/InvestorAMO_V2.sol#2932) is not in mixedCase
Parameter FraxPool.redeemFractionalFRAX(uint256,uint256,uint256).FXS_out_min (../../sb/InvestorAMO_V2.sol#2932) is not in mixedCase
Parameter FraxPool.redeemFractionalFRAX(uint256,uint256,uint256).COLLATERAL_out_min (../../sb/InvestorAMO_V2.sol#2932) is not in mixedCase
Parameter FraxPool.redeemAlgorithmicFRAX(uint256,uint256).FRAX_amount (../../sb/InvestorAMO_V2.sol#2968) is not in mixedCase
Parameter FraxPool.redeemAlgorithmicFRAX(uint256,uint256).FXS_out_min (../../sb/InvestorAMO_V2.sol#2968) is not in mixedCase
Parameter FraxPool.recollateralizeFRAX(uint256,uint256).collateral_amount (../../sb/InvestorAMO_V2.sol#3032) is not in mixedCase
Parameter FraxPool.recollateralizeFRAX(uint256,uint256).FXS_out_min (../../sb/InvestorAMO_V2.sol#3032) is not in mixedCase
Parameter FraxPool.buyBackFXS(uint256,uint256).FXS_amount (../../sb/InvestorAMO_V2.sol#3061) is not in mixedCase
Parameter FraxPool.buyBackFXS(uint256,uint256).COLLATERAL_out_min (../../sb/InvestorAMO_V2.sol#3061) is not in mixedCase
Parameter FraxPool.toggleCollateralPrice(uint256)._new_price (../../sb/InvestorAMO_V2.sol#3103) is not in mixedCase
Parameter FraxPool.setPoolParameters(uint256,uint256,uint256,uint256,uint256,uint256,uint256).new_ceiling (../../sb/InvestorAMO_V2.sol#3115) is not in mixedCase
Parameter FraxPool.setPoolParameters(uint256,uint256,uint256,uint256,uint256,uint256,uint256).new_bonus_rate (../../sb/InvestorAMO_V2.sol#3115) is not in mixedCase
Parameter FraxPool.setPoolParameters(uint256,uint256,uint256,uint256,uint256,uint256,uint256).new_redemption_delay (../../sb/InvestorAMO_V2.sol#3115) is not in mixedCase
Parameter FraxPool.setPoolParameters(uint256,uint256,uint256,uint256,uint256,uint256,uint256).new_mint_fee (../../sb/InvestorAMO_V2.sol#3115) is not in mixedCase
Parameter FraxPool.setPoolParameters(uint256,uint256,uint256,uint256,uint256,uint256,uint256).new_redeem_fee (../../sb/InvestorAMO_V2.sol#3115) is not in mixedCase
Parameter FraxPool.setPoolParameters(uint256,uint256,uint256,uint256,uint256,uint256,uint256).new_buyback_fee (../../sb/InvestorAMO_V2.sol#3115) is not in mixedCase
Parameter FraxPool.setPoolParameters(uint256,uint256,uint256,uint256,uint256,uint256,uint256).new_recollat_fee (../../sb/InvestorAMO_V2.sol#3115) is not in mixedCase
Parameter FraxPool.setTimelock(address).new_timelock (../../sb/InvestorAMO_V2.sol#3125) is not in mixedCase
Parameter FraxPool.setOwner(address)._owner_address (../../sb/InvestorAMO_V2.sol#3129) is not in mixedCase
Variable FraxPool.collateral_token (../../sb/InvestorAMO_V2.sol#2690) is not in mixedCase
Variable FraxPool.collateral_address (../../sb/InvestorAMO_V2.sol#2691) is not in mixedCase
Variable FraxPool.owner_address (../../sb/InvestorAMO_V2.sol#2692) is not in mixedCase
Variable FraxPool.frax_contract_address (../../sb/InvestorAMO_V2.sol#2694) is not in mixedCase
Variable FraxPool.fxs_contract_address (../../sb/InvestorAMO_V2.sol#2695) is not in mixedCase
Variable FraxPool.timelock_address (../../sb/InvestorAMO_V2.sol#2696) is not in mixedCase
Variable FraxPool.FXS (../../sb/InvestorAMO_V2.sol#2697) is not in mixedCase
Variable FraxPool.FRAX (../../sb/InvestorAMO_V2.sol#2698) is not in mixedCase
Variable FraxPool.collat_eth_oracle_address (../../sb/InvestorAMO_V2.sol#2701) is not in mixedCase
Variable FraxPool.weth_address (../../sb/InvestorAMO_V2.sol#2702) is not in mixedCase
Variable FraxPool.minting_fee (../../sb/InvestorAMO_V2.sol#2704) is not in mixedCase
Variable FraxPool.redemption_fee (../../sb/InvestorAMO_V2.sol#2705) is not in mixedCase
Variable FraxPool.buyback_fee (../../sb/InvestorAMO_V2.sol#2706) is not in mixedCase
Variable FraxPool.recollat_fee (../../sb/InvestorAMO_V2.sol#2707) is not in mixedCase
Variable FraxPool.missing_decimals (../../sb/InvestorAMO_V2.sol#2721) is not in mixedCase
Variable FraxPool.pool_ceiling (../../sb/InvestorAMO_V2.sol#2724) is not in mixedCase
Variable FraxPool.bonus_rate (../../sb/InvestorAMO_V2.sol#2730) is not in mixedCase
Variable FraxPool.redemption_delay (../../sb/InvestorAMO_V2.sol#2733) is not in mixedCase
Contract IyUSDC_V2_Partial (../../sb/InvestorAMO_V2.sol#3441-3448) is not in CapWords
Contract IAAVELendingPool_Partial (../../sb/InvestorAMO_V2.sol#3453-3490) is not in CapWords
Contract IAAVE_aUSDC_Partial (../../sb/InvestorAMO_V2.sol#3495-3497) is not in CapWords
Contract IERC20_Detailed (../../sb/InvestorAMO_V2.sol#3503-3576) is not in CapWords
Function IERC20_Detailed._name() (../../sb/InvestorAMO_V2.sol#3504) is not in mixedCase
Function IERC20_Detailed._symbol() (../../sb/InvestorAMO_V2.sol#3505) is not in mixedCase
Function IERC20_Detailed._decimals() (../../sb/InvestorAMO_V2.sol#3506) is not in mixedCase
Function IStakedAave.COOLDOWN_SECONDS() (../../sb/InvestorAMO_V2.sol#3579) is not in mixedCase
Function IAaveIncentivesControllerPartial.REWARD_TOKEN() (../../sb/InvestorAMO_V2.sol#3638) is not in mixedCase
Contract IcUSDC_Partial (../../sb/InvestorAMO_V2.sol#3652-3663) is not in CapWords
Contract InvestorAMO_V2 (../../sb/InvestorAMO_V2.sol#3684-4034) is not in CapWords
Function InvestorAMO_V2.aaveCooldown_Show_Cooldowns() (../../sb/InvestorAMO_V2.sol#3829-3831) is not in mixedCase
Function InvestorAMO_V2.aaveCooldown_Time_Left() (../../sb/InvestorAMO_V2.sol#3834-3839) is not in mixedCase
Parameter InvestorAMO_V2.mintRedeemPart1(uint256).frax_amount (../../sb/InvestorAMO_V2.sol#3867) is not in mixedCase
Parameter InvestorAMO_V2.yDepositUSDC(uint256).USDC_amount (../../sb/InvestorAMO_V2.sol#3913) is not in mixedCase
Parameter InvestorAMO_V2.yWithdrawUSDC(uint256).yUSDC_amount (../../sb/InvestorAMO_V2.sol#3920) is not in mixedCase
Parameter InvestorAMO_V2.aaveDepositUSDC(uint256).USDC_amount (../../sb/InvestorAMO_V2.sol#3926) is not in mixedCase
Parameter InvestorAMO_V2.aaveWithdrawUSDC(uint256).aUSDC_amount (../../sb/InvestorAMO_V2.sol#3933) is not in mixedCase
Function InvestorAMO_V2.aaveCollect_stkAAVE() (../../sb/InvestorAMO_V2.sol#3938-3943) is not in mixedCase
Function InvestorAMO_V2.aaveCooldown_stkAAVE() (../../sb/InvestorAMO_V2.sol#3946-3948) is not in mixedCase
Function InvestorAMO_V2.aaveCollect_Cooldowned_AAVE() (../../sb/InvestorAMO_V2.sol#3951-3954) is not in mixedCase
Function InvestorAMO_V2.compoundMint_cUSDC(uint256) (../../sb/InvestorAMO_V2.sol#3958-3962) is not in mixedCase
Parameter InvestorAMO_V2.compoundMint_cUSDC(uint256).USDC_amount (../../sb/InvestorAMO_V2.sol#3958) is not in mixedCase
Function InvestorAMO_V2.compoundRedeem_cUSDC(uint256) (../../sb/InvestorAMO_V2.sol#3965-3968) is not in mixedCase
Parameter InvestorAMO_V2.compoundRedeem_cUSDC(uint256).cUSDC_amount (../../sb/InvestorAMO_V2.sol#3965) is not in mixedCase
Parameter InvestorAMO_V2.setTimelock(address).new_timelock (../../sb/InvestorAMO_V2.sol#3986) is not in mixedCase
Parameter InvestorAMO_V2.setOwner(address)._owner_address (../../sb/InvestorAMO_V2.sol#3990) is not in mixedCase
Parameter InvestorAMO_V2.setWethAddress(address)._weth_address (../../sb/InvestorAMO_V2.sol#3994) is not in mixedCase
Parameter InvestorAMO_V2.setMiscRewardsCustodian(address)._custodian_address (../../sb/InvestorAMO_V2.sol#3998) is not in mixedCase
Parameter InvestorAMO_V2.setPool(address)._pool_address (../../sb/InvestorAMO_V2.sol#4002) is not in mixedCase
Parameter InvestorAMO_V2.setBorrowCap(uint256)._borrow_cap (../../sb/InvestorAMO_V2.sol#4007) is not in mixedCase
Parameter InvestorAMO_V2.setAllowedStrategies(bool,bool,bool)._yearn (../../sb/InvestorAMO_V2.sol#4015) is not in mixedCase
Parameter InvestorAMO_V2.setAllowedStrategies(bool,bool,bool)._aave (../../sb/InvestorAMO_V2.sol#4015) is not in mixedCase
Parameter InvestorAMO_V2.setAllowedStrategies(bool,bool,bool)._compound (../../sb/InvestorAMO_V2.sol#4015) is not in mixedCase
Variable InvestorAMO_V2.collateral_token (../../sb/InvestorAMO_V2.sol#3689) is not in mixedCase
Variable InvestorAMO_V2.FXS (../../sb/InvestorAMO_V2.sol#3690) is not in mixedCase
Variable InvestorAMO_V2.FRAX (../../sb/InvestorAMO_V2.sol#3691) is not in mixedCase
Variable InvestorAMO_V2.yUSDC_V2 (../../sb/InvestorAMO_V2.sol#3695) is not in mixedCase
Variable InvestorAMO_V2.aaveUSDC_Pool (../../sb/InvestorAMO_V2.sol#3696) is not in mixedCase
Variable InvestorAMO_V2.aaveUSDC_Token (../../sb/InvestorAMO_V2.sol#3697) is not in mixedCase
Variable InvestorAMO_V2.COMP (../../sb/InvestorAMO_V2.sol#3701) is not in mixedCase
Variable InvestorAMO_V2.AAVE (../../sb/InvestorAMO_V2.sol#3702) is not in mixedCase
Variable InvestorAMO_V2.CompController (../../sb/InvestorAMO_V2.sol#3704) is not in mixedCase
Variable InvestorAMO_V2.AAVEIncentivesController (../../sb/InvestorAMO_V2.sol#3705) is not in mixedCase
Variable InvestorAMO_V2.collateral_address (../../sb/InvestorAMO_V2.sol#3707) is not in mixedCase
Variable InvestorAMO_V2.pool_address (../../sb/InvestorAMO_V2.sol#3708) is not in mixedCase
Variable InvestorAMO_V2.owner_address (../../sb/InvestorAMO_V2.sol#3709) is not in mixedCase
Variable InvestorAMO_V2.timelock_address (../../sb/InvestorAMO_V2.sol#3710) is not in mixedCase
Variable InvestorAMO_V2.custodian_address (../../sb/InvestorAMO_V2.sol#3711) is not in mixedCase
Variable InvestorAMO_V2.weth_address (../../sb/InvestorAMO_V2.sol#3712) is not in mixedCase
Variable InvestorAMO_V2.missing_decimals (../../sb/InvestorAMO_V2.sol#3714) is not in mixedCase
Variable InvestorAMO_V2.PRICE_PRECISION (../../sb/InvestorAMO_V2.sol#3715) is not in mixedCase
Variable InvestorAMO_V2.borrow_cap (../../sb/InvestorAMO_V2.sol#3718) is not in mixedCase
Variable InvestorAMO_V2.borrowed_balance (../../sb/InvestorAMO_V2.sol#3721) is not in mixedCase
Variable InvestorAMO_V2.borrowed_historical (../../sb/InvestorAMO_V2.sol#3722) is not in mixedCase
Variable InvestorAMO_V2.paid_back_historical (../../sb/InvestorAMO_V2.sol#3723) is not in mixedCase
Variable InvestorAMO_V2.allow_yearn (../../sb/InvestorAMO_V2.sol#3726) is not in mixedCase
Variable InvestorAMO_V2.allow_aave (../../sb/InvestorAMO_V2.sol#3727) is not in mixedCase
Variable InvestorAMO_V2.allow_compound (../../sb/InvestorAMO_V2.sol#3728) is not in mixedCase
Variable InvestorAMO_V2.MAX_UINT256 (../../sb/InvestorAMO_V2.sol#3734) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Redundant expression "this (../../sb/InvestorAMO_V2.sol#181)" inContext (../../sb/InvestorAMO_V2.sol#171-184)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#redundant-statements

Variable UniswapV2OracleLibrary.currentCumulativePrices(address).price0Cumulative (../../sb/InvestorAMO_V2.sol#1972) is too similar to UniswapV2OracleLibrary.currentCumulativePrices(address).price1Cumulative (../../sb/InvestorAMO_V2.sol#1972)
Variable UniswapPairOracle.price0Average (../../sb/InvestorAMO_V2.sol#2093) is too similar to UniswapPairOracle.price1Average (../../sb/InvestorAMO_V2.sol#2094)
Variable UniswapPairOracle.update().price0Cumulative (../../sb/InvestorAMO_V2.sol#2145) is too similar to UniswapPairOracle.update().price1Cumulative (../../sb/InvestorAMO_V2.sol#2145)
Variable UniswapPairOracle.price0CumulativeLast (../../sb/InvestorAMO_V2.sol#2090) is too similar to UniswapPairOracle.price1CumulativeLast (../../sb/InvestorAMO_V2.sol#2091)
Variable FRAXStablecoin.COLLATERAL_RATIO_PAUSER (../../sb/InvestorAMO_V2.sol#2297) is too similar to FRAXStablecoin.collateral_ratio_paused (../../sb/InvestorAMO_V2.sol#2298)
Variable FraxPool.constructor(address,address,address,address,address,uint256)._fxs_contract_address (../../sb/InvestorAMO_V2.sol#2770) is too similar to FraxPool.frax_contract_address (../../sb/InvestorAMO_V2.sol#2694)
Variable InvestorAMO_V2.aaveWithdrawUSDC(uint256).aUSDC_amount (../../sb/InvestorAMO_V2.sol#3933) is too similar to InvestorAMO_V2.compoundRedeem_cUSDC(uint256).cUSDC_amount (../../sb/InvestorAMO_V2.sol#3965)
Variable InvestorAMO_V2.aaveWithdrawUSDC(uint256).aUSDC_amount (../../sb/InvestorAMO_V2.sol#3933) is too similar to InvestorAMO_V2.yWithdrawUSDC(uint256).yUSDC_amount (../../sb/InvestorAMO_V2.sol#3920)
Variable InvestorAMO_V2.compoundRedeem_cUSDC(uint256).cUSDC_amount (../../sb/InvestorAMO_V2.sol#3965) is too similar to InvestorAMO_V2.yWithdrawUSDC(uint256).yUSDC_amount (../../sb/InvestorAMO_V2.sol#3920)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#variable-names-too-similar

FRAXShares.slitherConstructorConstantVariables() (../../sb/InvestorAMO_V2.sol#1516-1789) uses literals with too many digits:
	- genesis_supply = 100000000e18 (../../sb/InvestorAMO_V2.sol#1526)
FRAXStablecoin.constructor(string,string,address,address) (../../sb/InvestorAMO_V2.sol#2328-2349) uses literals with too many digits:
	- global_collateral_ratio = 1000000 (../../sb/InvestorAMO_V2.sol#2345)
FRAXStablecoin.constructor(string,string,address,address) (../../sb/InvestorAMO_V2.sol#2328-2349) uses literals with too many digits:
	- price_target = 1000000 (../../sb/InvestorAMO_V2.sol#2347)
FRAXStablecoin.refreshCollateralRatio() (../../sb/InvestorAMO_V2.sol#2418-2440) uses literals with too many digits:
	- global_collateral_ratio.add(frax_step) >= 1000000 (../../sb/InvestorAMO_V2.sol#2432)
FRAXStablecoin.refreshCollateralRatio() (../../sb/InvestorAMO_V2.sol#2418-2440) uses literals with too many digits:
	- global_collateral_ratio = 1000000 (../../sb/InvestorAMO_V2.sol#2433)
FRAXStablecoin.slitherConstructorConstantVariables() (../../sb/InvestorAMO_V2.sol#2256-2551) uses literals with too many digits:
	- genesis_supply = 2000000e18 (../../sb/InvestorAMO_V2.sol#2277)
FraxPool.mintFractionalFRAX(uint256,uint256,uint256) (../../sb/InvestorAMO_V2.sol#2879-2905) uses literals with too many digits:
	- require(bool,string)(global_collateral_ratio < COLLATERAL_RATIO_MAX && global_collateral_ratio > 0,Collateral ratio needs to be between .000001 and .999999) (../../sb/InvestorAMO_V2.sol#2883)
FraxPool.redeemFractionalFRAX(uint256,uint256,uint256) (../../sb/InvestorAMO_V2.sol#2932-2965) uses literals with too many digits:
	- require(bool,string)(global_collateral_ratio < COLLATERAL_RATIO_MAX && global_collateral_ratio > 0,Collateral ratio needs to be between .000001 and .999999) (../../sb/InvestorAMO_V2.sol#2936)
Comp.slitherConstructorConstantVariables() (../../sb/InvestorAMO_V2.sol#3140-3437) uses literals with too many digits:
	- totalSupply = 10000000e18 (../../sb/InvestorAMO_V2.sol#3151)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits

FraxPoolLibrary.PRICE_PRECISION (../../sb/InvestorAMO_V2.sol#2557) is never used in FraxPoolLibrary (../../sb/InvestorAMO_V2.sol#2553-2666)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-state-variable

Loop condition i < frax_pools_array.length (../../sb/InvestorAMO_V2.sol#2404) should use cached array length instead of referencing `length` member of the storage array.
 Loop condition i < frax_pools_array.length (../../sb/InvestorAMO_V2.sol#2472) should use cached array length instead of referencing `length` member of the storage array.
 Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#cache-array-length

FRAXShares.FRAXStablecoinAdd (../../sb/InvestorAMO_V2.sol#1524) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant

ChainlinkETHUSDPriceConsumer.priceFeed (../../sb/InvestorAMO_V2.sol#2213) should be immutable 
ERC20._decimals (../../sb/InvestorAMO_V2.sol#758) should be immutable 
FRAXStablecoin.DEFAULT_ADMIN_ADDRESS (../../sb/InvestorAMO_V2.sol#2296) should be immutable 
FRAXStablecoin.creator_address (../../sb/InvestorAMO_V2.sol#2269) should be immutable 
FraxPool.FRAX (../../sb/InvestorAMO_V2.sol#2698) should be immutable 
FraxPool.FXS (../../sb/InvestorAMO_V2.sol#2697) should be immutable 
FraxPool.collateral_address (../../sb/InvestorAMO_V2.sol#2691) should be immutable 
FraxPool.collateral_token (../../sb/InvestorAMO_V2.sol#2690) should be immutable 
FraxPool.frax_contract_address (../../sb/InvestorAMO_V2.sol#2694) should be immutable 
FraxPool.fxs_contract_address (../../sb/InvestorAMO_V2.sol#2695) should be immutable 
InvestorAMO_V2.AAVE (../../sb/InvestorAMO_V2.sol#3702) should be immutable 
InvestorAMO_V2.AAVEIncentivesController (../../sb/InvestorAMO_V2.sol#3705) should be immutable 
InvestorAMO_V2.COMP (../../sb/InvestorAMO_V2.sol#3701) should be immutable 
InvestorAMO_V2.CompController (../../sb/InvestorAMO_V2.sol#3704) should be immutable 
InvestorAMO_V2.FRAX (../../sb/InvestorAMO_V2.sol#3691) should be immutable 
InvestorAMO_V2.FXS (../../sb/InvestorAMO_V2.sol#3690) should be immutable 
InvestorAMO_V2.MAX_UINT256 (../../sb/InvestorAMO_V2.sol#3734) should be immutable 
InvestorAMO_V2.PRICE_PRECISION (../../sb/InvestorAMO_V2.sol#3715) should be immutable 
InvestorAMO_V2.aaveUSDC_Pool (../../sb/InvestorAMO_V2.sol#3696) should be immutable 
InvestorAMO_V2.aaveUSDC_Token (../../sb/InvestorAMO_V2.sol#3697) should be immutable 
InvestorAMO_V2.cUSDC (../../sb/InvestorAMO_V2.sol#3698) should be immutable 
InvestorAMO_V2.collateral_address (../../sb/InvestorAMO_V2.sol#3707) should be immutable 
InvestorAMO_V2.collateral_token (../../sb/InvestorAMO_V2.sol#3689) should be immutable 
InvestorAMO_V2.missing_decimals (../../sb/InvestorAMO_V2.sol#3714) should be immutable 
InvestorAMO_V2.stkAAVE (../../sb/InvestorAMO_V2.sol#3703) should be immutable 
InvestorAMO_V2.yUSDC_V2 (../../sb/InvestorAMO_V2.sol#3695) should be immutable 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-immutable
/sb/InvestorAMO_V2.sol analyzed (31 contracts with 93 detectors), 435 result(s) found
