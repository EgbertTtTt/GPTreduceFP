{
    "errors": [],
    "fails": [],
    "findings": [
        {
            "confidence": "Medium",
            "contract": "DevelopmentFund",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Inspex-FairLaunch, Token, Vault & Workers/Meow-Finance-4a4f13efaf5e5fbed74c0ed23b665751e655d715/contracts/token/MeowMining.sol",
            "function": "lock",
            "impact": "High",
            "line": 1289,
            "line_end": 1296,
            "message": "Reentrancy in DevelopmentFund.lock(uint256) (MeowMining.sol#1289-1296):\n\tExternal calls:\n\t- Meow.safeTransferFrom(msg.sender,address(this),_amount) (MeowMining.sol#1290)\n\t- unlock() (MeowMining.sol#1291)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (MeowMining.sol#536)\n\t\t- (success,returndata) = target.call{value: value}(data) (MeowMining.sol#404)\n\t\t- Meow.safeTransfer(devaddr,amount) (MeowMining.sol#1318)\n\tExternal calls sending eth:\n\t- unlock() (MeowMining.sol#1291)\n\t\t- (success,returndata) = target.call{value: value}(data) (MeowMining.sol#404)\n\tState variables written after the call(s):\n\t- lockTo = block.timestamp.add(lockPeriod) (MeowMining.sol#1294)\n\tDevelopmentFund.lockTo (MeowMining.sol#1275) can be used in cross function reentrancies:\n\t- DevelopmentFund.availableUnlock() (MeowMining.sol#1299-1307)\n\t- DevelopmentFund.lock(uint256) (MeowMining.sol#1289-1296)\n\t- DevelopmentFund.lockTo (MeowMining.sol#1275)\n\t- lockedAmount = lockedAmount.add(_amount) (MeowMining.sol#1293)\n\tDevelopmentFund.lockedAmount (MeowMining.sol#1271) can be used in cross function reentrancies:\n\t- DevelopmentFund.availableUnlock() (MeowMining.sol#1299-1307)\n\t- DevelopmentFund.lock(uint256) (MeowMining.sol#1289-1296)\n\t- DevelopmentFund.lockedAmount (MeowMining.sol#1271)\n\t- DevelopmentFund.unlock() (MeowMining.sol#1310-1320)\n",
            "name": "reentrancy-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MeowMining",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Inspex-FairLaunch, Token, Vault & Workers/Meow-Finance-4a4f13efaf5e5fbed74c0ed23b665751e655d715/contracts/token/MeowMining.sol",
            "function": "lock",
            "impact": "Medium",
            "line": 1576,
            "line_end": 1589,
            "message": "Reentrancy in MeowMining.lock(uint256,address,uint256) (MeowMining.sol#1576-1589):\n\tExternal calls:\n\t- unlock(_pid,_holder) (MeowMining.sol#1581)\n\t\t- require(bool,string)(meow.transfer(_to,meowBal),MeowMining::safeMeowTransfer:: failed to transfer MEOW.) (MeowMining.sol#1639)\n\t\t- require(bool,string)(meow.transfer(_to,_amount),MeowMining::safeMeowTransfer:: failed to transfer MEOW.) (MeowMining.sol#1641)\n\tState variables written after the call(s):\n\t- totalLock = totalLock.add(_amount) (MeowMining.sol#1586)\n\tMeowMining.totalLock (MeowMining.sol#1380) can be used in cross function reentrancies:\n\t- MeowMining.totalLock (MeowMining.sol#1380)\n\t- MeowMining.unlock(uint256,address) (MeowMining.sol#1608-1621)\n\t- user.lockedAmount = user.lockedAmount.add(_amount) (MeowMining.sol#1584)\n\tMeowMining.userInfo (MeowMining.sol#1370) can be used in cross function reentrancies:\n\t- MeowMining.availableUnlock(uint256,address) (MeowMining.sol#1592-1601)\n\t- MeowMining.pendingMeow(uint256,address) (MeowMining.sol#1460-1471)\n\t- MeowMining.unlock(uint256,address) (MeowMining.sol#1608-1621)\n\t- MeowMining.userInfo (MeowMining.sol#1370)\n\t- user.lockTo = block.timestamp.add(lockPeriod) (MeowMining.sol#1585)\n\tMeowMining.userInfo (MeowMining.sol#1370) can be used in cross function reentrancies:\n\t- MeowMining.availableUnlock(uint256,address) (MeowMining.sol#1592-1601)\n\t- MeowMining.pendingMeow(uint256,address) (MeowMining.sol#1460-1471)\n\t- MeowMining.unlock(uint256,address) (MeowMining.sol#1608-1621)\n\t- MeowMining.userInfo (MeowMining.sol#1370)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MeowMining",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Inspex-FairLaunch, Token, Vault & Workers/Meow-Finance-4a4f13efaf5e5fbed74c0ed23b665751e655d715/contracts/token/MeowMining.sol",
            "function": "setMeowPerSecond",
            "impact": "Medium",
            "line": 1421,
            "line_end": 1424,
            "message": "Reentrancy in MeowMining.setMeowPerSecond(uint256) (MeowMining.sol#1421-1424):\n\tExternal calls:\n\t- massUpdatePools() (MeowMining.sol#1422)\n\t\t- require(bool,string)(meow.transfer(_to,meowBal),MeowMining::safeMeowTransfer:: failed to transfer MEOW.) (MeowMining.sol#1639)\n\t\t- require(bool,string)(meow.transfer(_to,_amount),MeowMining::safeMeowTransfer:: failed to transfer MEOW.) (MeowMining.sol#1641)\n\t\t- meow.mint(address(this),devfund) (MeowMining.sol#1491)\n\t\t- meow.mint(address(this),meowReward) (MeowMining.sol#1492)\n\t\t- developmentFund.lock(devfund.mul(lockShare).div(10000)) (MeowMining.sol#1494)\n\tState variables written after the call(s):\n\t- meowPerSecond = _meowPerSecond (MeowMining.sol#1423)\n\tMeowMining.meowPerSecond (MeowMining.sol#1365) can be used in cross function reentrancies:\n\t- MeowMining.constructor(MeowToken,uint256,uint256,uint256,uint256,address,DevelopmentFund) (MeowMining.sol#1395-1413)\n\t- MeowMining.meowPerSecond (MeowMining.sol#1365)\n\t- MeowMining.pendingMeow(uint256,address) (MeowMining.sol#1460-1471)\n\t- MeowMining.setMeowPerSecond(uint256) (MeowMining.sol#1421-1424)\n\t- MeowMining.updatePool(uint256) (MeowMining.sol#1482-1499)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MeowMining",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Inspex-FairLaunch, Token, Vault & Workers/Meow-Finance-4a4f13efaf5e5fbed74c0ed23b665751e655d715/contracts/token/MeowMining.sol",
            "function": "_withdraw",
            "impact": "Medium",
            "line": 1533,
            "line_end": 1551,
            "message": "Reentrancy in MeowMining._withdraw(address,uint256,uint256) (MeowMining.sol#1533-1551):\n\tExternal calls:\n\t- updatePool(_pid) (MeowMining.sol#1542)\n\t\t- require(bool,string)(meow.transfer(_to,meowBal),MeowMining::safeMeowTransfer:: failed to transfer MEOW.) (MeowMining.sol#1639)\n\t\t- require(bool,string)(meow.transfer(_to,_amount),MeowMining::safeMeowTransfer:: failed to transfer MEOW.) (MeowMining.sol#1641)\n\t\t- meow.mint(address(this),devfund) (MeowMining.sol#1491)\n\t\t- meow.mint(address(this),meowReward) (MeowMining.sol#1492)\n\t\t- developmentFund.lock(devfund.mul(lockShare).div(10000)) (MeowMining.sol#1494)\n\t- _harvest(_for,_pid) (MeowMining.sol#1543)\n\t\t- require(bool,string)(meow.transfer(_to,meowBal),MeowMining::safeMeowTransfer:: failed to transfer MEOW.) (MeowMining.sol#1639)\n\t\t- require(bool,string)(meow.transfer(_to,_amount),MeowMining::safeMeowTransfer:: failed to transfer MEOW.) (MeowMining.sol#1641)\n\tState variables written after the call(s):\n\t- _harvest(_for,_pid) (MeowMining.sol#1543)\n\t\t- user.lastUnlockTime = block.timestamp (MeowMining.sol#1610)\n\t\t- user.lockedAmount = user.lockedAmount.add(_amount) (MeowMining.sol#1584)\n\t\t- user.lockTo = block.timestamp.add(lockPeriod) (MeowMining.sol#1585)\n\t\t- user.lockedAmount = user.lockedAmount.sub(amount) (MeowMining.sol#1616)\n\tMeowMining.userInfo (MeowMining.sol#1370) can be used in cross function reentrancies:\n\t- MeowMining.availableUnlock(uint256,address) (MeowMining.sol#1592-1601)\n\t- MeowMining.pendingMeow(uint256,address) (MeowMining.sol#1460-1471)\n\t- MeowMining.unlock(uint256,address) (MeowMining.sol#1608-1621)\n\t- MeowMining.userInfo (MeowMining.sol#1370)\n\t- user.amount = user.amount.sub(_amount) (MeowMining.sol#1544)\n\tMeowMining.userInfo (MeowMining.sol#1370) can be used in cross function reentrancies:\n\t- MeowMining.availableUnlock(uint256,address) (MeowMining.sol#1592-1601)\n\t- MeowMining.pendingMeow(uint256,address) (MeowMining.sol#1460-1471)\n\t- MeowMining.unlock(uint256,address) (MeowMining.sol#1608-1621)\n\t- MeowMining.userInfo (MeowMining.sol#1370)\n\t- user.rewardDebt = user.amount.mul(pool.accMeowPerShare).div(ACC_MEOW_PRECISION) (MeowMining.sol#1545)\n\tMeowMining.userInfo (MeowMining.sol#1370) can be used in cross function reentrancies:\n\t- MeowMining.availableUnlock(uint256,address) (MeowMining.sol#1592-1601)\n\t- MeowMining.pendingMeow(uint256,address) (MeowMining.sol#1460-1471)\n\t- MeowMining.unlock(uint256,address) (MeowMining.sol#1608-1621)\n\t- MeowMining.userInfo (MeowMining.sol#1370)\n\t- user.fundedBy = address(0) (MeowMining.sol#1546)\n\tMeowMining.userInfo (MeowMining.sol#1370) can be used in cross function reentrancies:\n\t- MeowMining.availableUnlock(uint256,address) (MeowMining.sol#1592-1601)\n\t- MeowMining.pendingMeow(uint256,address) (MeowMining.sol#1460-1471)\n\t- MeowMining.unlock(uint256,address) (MeowMining.sol#1608-1621)\n\t- MeowMining.userInfo (MeowMining.sol#1370)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MeowMining",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Inspex-FairLaunch, Token, Vault & Workers/Meow-Finance-4a4f13efaf5e5fbed74c0ed23b665751e655d715/contracts/token/MeowMining.sol",
            "function": "setPool",
            "impact": "Medium",
            "line": 1440,
            "line_end": 1444,
            "message": "Reentrancy in MeowMining.setPool(uint256,uint256) (MeowMining.sol#1440-1444):\n\tExternal calls:\n\t- massUpdatePools() (MeowMining.sol#1441)\n\t\t- require(bool,string)(meow.transfer(_to,meowBal),MeowMining::safeMeowTransfer:: failed to transfer MEOW.) (MeowMining.sol#1639)\n\t\t- require(bool,string)(meow.transfer(_to,_amount),MeowMining::safeMeowTransfer:: failed to transfer MEOW.) (MeowMining.sol#1641)\n\t\t- meow.mint(address(this),devfund) (MeowMining.sol#1491)\n\t\t- meow.mint(address(this),meowReward) (MeowMining.sol#1492)\n\t\t- developmentFund.lock(devfund.mul(lockShare).div(10000)) (MeowMining.sol#1494)\n\tState variables written after the call(s):\n\t- poolInfo[_pid].allocPoint = _allocPoint (MeowMining.sol#1443)\n\tMeowMining.poolInfo (MeowMining.sol#1368) can be used in cross function reentrancies:\n\t- MeowMining.addPool(uint256,address) (MeowMining.sol#1427-1437)\n\t- MeowMining.massUpdatePools() (MeowMining.sol#1474-1479)\n\t- MeowMining.pendingMeow(uint256,address) (MeowMining.sol#1460-1471)\n\t- MeowMining.poolInfo (MeowMining.sol#1368)\n\t- MeowMining.poolLength() (MeowMining.sol#1446-1448)\n\t- MeowMining.setPool(uint256,uint256) (MeowMining.sol#1440-1444)\n\t- MeowMining.updatePool(uint256) (MeowMining.sol#1482-1499)\n\t- totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint) (MeowMining.sol#1442)\n\tMeowMining.totalAllocPoint (MeowMining.sol#1374) can be used in cross function reentrancies:\n\t- MeowMining.addPool(uint256,address) (MeowMining.sol#1427-1437)\n\t- MeowMining.constructor(MeowToken,uint256,uint256,uint256,uint256,address,DevelopmentFund) (MeowMining.sol#1395-1413)\n\t- MeowMining.pendingMeow(uint256,address) (MeowMining.sol#1460-1471)\n\t- MeowMining.setPool(uint256,uint256) (MeowMining.sol#1440-1444)\n\t- MeowMining.totalAllocPoint (MeowMining.sol#1374)\n\t- MeowMining.updatePool(uint256) (MeowMining.sol#1482-1499)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MeowMining",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Inspex-FairLaunch, Token, Vault & Workers/Meow-Finance-4a4f13efaf5e5fbed74c0ed23b665751e655d715/contracts/token/MeowMining.sol",
            "function": "emergencyWithdraw",
            "impact": "Medium",
            "line": 1624,
            "line_end": 1633,
            "message": "Reentrancy in MeowMining.emergencyWithdraw(uint256) (MeowMining.sol#1624-1633):\n\tExternal calls:\n\t- IERC20(pool.stakeToken).safeTransfer(address(msg.sender),user.amount) (MeowMining.sol#1628)\n\tState variables written after the call(s):\n\t- user.amount = 0 (MeowMining.sol#1630)\n\tMeowMining.userInfo (MeowMining.sol#1370) can be used in cross function reentrancies:\n\t- MeowMining.availableUnlock(uint256,address) (MeowMining.sol#1592-1601)\n\t- MeowMining.pendingMeow(uint256,address) (MeowMining.sol#1460-1471)\n\t- MeowMining.unlock(uint256,address) (MeowMining.sol#1608-1621)\n\t- MeowMining.userInfo (MeowMining.sol#1370)\n\t- user.rewardDebt = 0 (MeowMining.sol#1631)\n\tMeowMining.userInfo (MeowMining.sol#1370) can be used in cross function reentrancies:\n\t- MeowMining.availableUnlock(uint256,address) (MeowMining.sol#1592-1601)\n\t- MeowMining.pendingMeow(uint256,address) (MeowMining.sol#1460-1471)\n\t- MeowMining.unlock(uint256,address) (MeowMining.sol#1608-1621)\n\t- MeowMining.userInfo (MeowMining.sol#1370)\n\t- user.fundedBy = address(0) (MeowMining.sol#1632)\n\tMeowMining.userInfo (MeowMining.sol#1370) can be used in cross function reentrancies:\n\t- MeowMining.availableUnlock(uint256,address) (MeowMining.sol#1592-1601)\n\t- MeowMining.pendingMeow(uint256,address) (MeowMining.sol#1460-1471)\n\t- MeowMining.unlock(uint256,address) (MeowMining.sol#1608-1621)\n\t- MeowMining.userInfo (MeowMining.sol#1370)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MeowMining",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Inspex-FairLaunch, Token, Vault & Workers/Meow-Finance-4a4f13efaf5e5fbed74c0ed23b665751e655d715/contracts/token/MeowMining.sol",
            "function": "updatePool",
            "impact": "Medium",
            "line": 1482,
            "line_end": 1499,
            "message": "Reentrancy in MeowMining.updatePool(uint256) (MeowMining.sol#1482-1499):\n\tExternal calls:\n\t- meow.mint(address(this),devfund) (MeowMining.sol#1491)\n\t- meow.mint(address(this),meowReward) (MeowMining.sol#1492)\n\t- safeMeowTransfer(devaddr,devfund.mul(preShare).div(10000)) (MeowMining.sol#1493)\n\t\t- require(bool,string)(meow.transfer(_to,meowBal),MeowMining::safeMeowTransfer:: failed to transfer MEOW.) (MeowMining.sol#1639)\n\t\t- require(bool,string)(meow.transfer(_to,_amount),MeowMining::safeMeowTransfer:: failed to transfer MEOW.) (MeowMining.sol#1641)\n\t- developmentFund.lock(devfund.mul(lockShare).div(10000)) (MeowMining.sol#1494)\n\tState variables written after the call(s):\n\t- pool.accMeowPerShare = pool.accMeowPerShare.add(meowReward.mul(ACC_MEOW_PRECISION).div(stakeTokenSupply)) (MeowMining.sol#1495)\n\tMeowMining.poolInfo (MeowMining.sol#1368) can be used in cross function reentrancies:\n\t- MeowMining.addPool(uint256,address) (MeowMining.sol#1427-1437)\n\t- MeowMining.massUpdatePools() (MeowMining.sol#1474-1479)\n\t- MeowMining.pendingMeow(uint256,address) (MeowMining.sol#1460-1471)\n\t- MeowMining.poolInfo (MeowMining.sol#1368)\n\t- MeowMining.poolLength() (MeowMining.sol#1446-1448)\n\t- MeowMining.setPool(uint256,uint256) (MeowMining.sol#1440-1444)\n\t- MeowMining.updatePool(uint256) (MeowMining.sol#1482-1499)\n\t- pool.lastRewardTime = block.timestamp (MeowMining.sol#1497)\n\tMeowMining.poolInfo (MeowMining.sol#1368) can be used in cross function reentrancies:\n\t- MeowMining.addPool(uint256,address) (MeowMining.sol#1427-1437)\n\t- MeowMining.massUpdatePools() (MeowMining.sol#1474-1479)\n\t- MeowMining.pendingMeow(uint256,address) (MeowMining.sol#1460-1471)\n\t- MeowMining.poolInfo (MeowMining.sol#1368)\n\t- MeowMining.poolLength() (MeowMining.sol#1446-1448)\n\t- MeowMining.setPool(uint256,uint256) (MeowMining.sol#1440-1444)\n\t- MeowMining.updatePool(uint256) (MeowMining.sol#1482-1499)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MeowMining",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Inspex-FairLaunch, Token, Vault & Workers/Meow-Finance-4a4f13efaf5e5fbed74c0ed23b665751e655d715/contracts/token/MeowMining.sol",
            "function": "addPool",
            "impact": "Medium",
            "line": 1427,
            "line_end": 1437,
            "message": "Reentrancy in MeowMining.addPool(uint256,address) (MeowMining.sol#1427-1437):\n\tExternal calls:\n\t- massUpdatePools() (MeowMining.sol#1428)\n\t\t- require(bool,string)(meow.transfer(_to,meowBal),MeowMining::safeMeowTransfer:: failed to transfer MEOW.) (MeowMining.sol#1639)\n\t\t- require(bool,string)(meow.transfer(_to,_amount),MeowMining::safeMeowTransfer:: failed to transfer MEOW.) (MeowMining.sol#1641)\n\t\t- meow.mint(address(this),devfund) (MeowMining.sol#1491)\n\t\t- meow.mint(address(this),meowReward) (MeowMining.sol#1492)\n\t\t- developmentFund.lock(devfund.mul(lockShare).div(10000)) (MeowMining.sol#1494)\n\tState variables written after the call(s):\n\t- poolInfo.push(PoolInfo({stakeToken:_stakeToken,allocPoint:_allocPoint,lastRewardTime:lastRewardTime,accMeowPerShare:0})) (MeowMining.sol#1433-1435)\n\tMeowMining.poolInfo (MeowMining.sol#1368) can be used in cross function reentrancies:\n\t- MeowMining.addPool(uint256,address) (MeowMining.sol#1427-1437)\n\t- MeowMining.massUpdatePools() (MeowMining.sol#1474-1479)\n\t- MeowMining.pendingMeow(uint256,address) (MeowMining.sol#1460-1471)\n\t- MeowMining.poolInfo (MeowMining.sol#1368)\n\t- MeowMining.poolLength() (MeowMining.sol#1446-1448)\n\t- MeowMining.setPool(uint256,uint256) (MeowMining.sol#1440-1444)\n\t- MeowMining.updatePool(uint256) (MeowMining.sol#1482-1499)\n\t- totalAllocPoint = totalAllocPoint.add(_allocPoint) (MeowMining.sol#1432)\n\tMeowMining.totalAllocPoint (MeowMining.sol#1374) can be used in cross function reentrancies:\n\t- MeowMining.addPool(uint256,address) (MeowMining.sol#1427-1437)\n\t- MeowMining.constructor(MeowToken,uint256,uint256,uint256,uint256,address,DevelopmentFund) (MeowMining.sol#1395-1413)\n\t- MeowMining.pendingMeow(uint256,address) (MeowMining.sol#1460-1471)\n\t- MeowMining.setPool(uint256,uint256) (MeowMining.sol#1440-1444)\n\t- MeowMining.totalAllocPoint (MeowMining.sol#1374)\n\t- MeowMining.updatePool(uint256) (MeowMining.sol#1482-1499)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MeowMining",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Inspex-FairLaunch, Token, Vault & Workers/Meow-Finance-4a4f13efaf5e5fbed74c0ed23b665751e655d715/contracts/token/MeowMining.sol",
            "function": "harvest",
            "impact": "Medium",
            "line": 1554,
            "line_end": 1560,
            "message": "Reentrancy in MeowMining.harvest(uint256) (MeowMining.sol#1554-1560):\n\tExternal calls:\n\t- updatePool(_pid) (MeowMining.sol#1557)\n\t\t- require(bool,string)(meow.transfer(_to,meowBal),MeowMining::safeMeowTransfer:: failed to transfer MEOW.) (MeowMining.sol#1639)\n\t\t- require(bool,string)(meow.transfer(_to,_amount),MeowMining::safeMeowTransfer:: failed to transfer MEOW.) (MeowMining.sol#1641)\n\t\t- meow.mint(address(this),devfund) (MeowMining.sol#1491)\n\t\t- meow.mint(address(this),meowReward) (MeowMining.sol#1492)\n\t\t- developmentFund.lock(devfund.mul(lockShare).div(10000)) (MeowMining.sol#1494)\n\t- _harvest(msg.sender,_pid) (MeowMining.sol#1558)\n\t\t- require(bool,string)(meow.transfer(_to,meowBal),MeowMining::safeMeowTransfer:: failed to transfer MEOW.) (MeowMining.sol#1639)\n\t\t- require(bool,string)(meow.transfer(_to,_amount),MeowMining::safeMeowTransfer:: failed to transfer MEOW.) (MeowMining.sol#1641)\n\tState variables written after the call(s):\n\t- _harvest(msg.sender,_pid) (MeowMining.sol#1558)\n\t\t- user.lastUnlockTime = block.timestamp (MeowMining.sol#1610)\n\t\t- user.lockedAmount = user.lockedAmount.add(_amount) (MeowMining.sol#1584)\n\t\t- user.lockTo = block.timestamp.add(lockPeriod) (MeowMining.sol#1585)\n\t\t- user.lockedAmount = user.lockedAmount.sub(amount) (MeowMining.sol#1616)\n\tMeowMining.userInfo (MeowMining.sol#1370) can be used in cross function reentrancies:\n\t- MeowMining.availableUnlock(uint256,address) (MeowMining.sol#1592-1601)\n\t- MeowMining.pendingMeow(uint256,address) (MeowMining.sol#1460-1471)\n\t- MeowMining.unlock(uint256,address) (MeowMining.sol#1608-1621)\n\t- MeowMining.userInfo (MeowMining.sol#1370)\n\t- user.rewardDebt = user.amount.mul(pool.accMeowPerShare).div(ACC_MEOW_PRECISION) (MeowMining.sol#1559)\n\tMeowMining.userInfo (MeowMining.sol#1370) can be used in cross function reentrancies:\n\t- MeowMining.availableUnlock(uint256,address) (MeowMining.sol#1592-1601)\n\t- MeowMining.pendingMeow(uint256,address) (MeowMining.sol#1460-1471)\n\t- MeowMining.unlock(uint256,address) (MeowMining.sol#1608-1621)\n\t- MeowMining.userInfo (MeowMining.sol#1370)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MeowMining",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Inspex-FairLaunch, Token, Vault & Workers/Meow-Finance-4a4f13efaf5e5fbed74c0ed23b665751e655d715/contracts/token/MeowMining.sol",
            "function": "deposit",
            "impact": "Medium",
            "line": 1502,
            "line_end": 1518,
            "message": "Reentrancy in MeowMining.deposit(address,uint256,uint256) (MeowMining.sol#1502-1518):\n\tExternal calls:\n\t- updatePool(_pid) (MeowMining.sol#1511)\n\t\t- require(bool,string)(meow.transfer(_to,meowBal),MeowMining::safeMeowTransfer:: failed to transfer MEOW.) (MeowMining.sol#1639)\n\t\t- require(bool,string)(meow.transfer(_to,_amount),MeowMining::safeMeowTransfer:: failed to transfer MEOW.) (MeowMining.sol#1641)\n\t\t- meow.mint(address(this),devfund) (MeowMining.sol#1491)\n\t\t- meow.mint(address(this),meowReward) (MeowMining.sol#1492)\n\t\t- developmentFund.lock(devfund.mul(lockShare).div(10000)) (MeowMining.sol#1494)\n\t- _harvest(_for,_pid) (MeowMining.sol#1512)\n\t\t- require(bool,string)(meow.transfer(_to,meowBal),MeowMining::safeMeowTransfer:: failed to transfer MEOW.) (MeowMining.sol#1639)\n\t\t- require(bool,string)(meow.transfer(_to,_amount),MeowMining::safeMeowTransfer:: failed to transfer MEOW.) (MeowMining.sol#1641)\n\t- IERC20(pool.stakeToken).safeTransferFrom(address(msg.sender),address(this),_amount) (MeowMining.sol#1514)\n\tState variables written after the call(s):\n\t- user.amount = user.amount.add(_amount) (MeowMining.sol#1515)\n\tMeowMining.userInfo (MeowMining.sol#1370) can be used in cross function reentrancies:\n\t- MeowMining.availableUnlock(uint256,address) (MeowMining.sol#1592-1601)\n\t- MeowMining.pendingMeow(uint256,address) (MeowMining.sol#1460-1471)\n\t- MeowMining.unlock(uint256,address) (MeowMining.sol#1608-1621)\n\t- MeowMining.userInfo (MeowMining.sol#1370)\n\t- user.rewardDebt = user.amount.mul(pool.accMeowPerShare).div(ACC_MEOW_PRECISION) (MeowMining.sol#1516)\n\tMeowMining.userInfo (MeowMining.sol#1370) can be used in cross function reentrancies:\n\t- MeowMining.availableUnlock(uint256,address) (MeowMining.sol#1592-1601)\n\t- MeowMining.pendingMeow(uint256,address) (MeowMining.sol#1460-1471)\n\t- MeowMining.unlock(uint256,address) (MeowMining.sol#1608-1621)\n\t- MeowMining.userInfo (MeowMining.sol#1370)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MeowMining",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Inspex-FairLaunch, Token, Vault & Workers/Meow-Finance-4a4f13efaf5e5fbed74c0ed23b665751e655d715/contracts/token/MeowMining.sol",
            "function": "deposit",
            "impact": "Medium",
            "line": 1502,
            "line_end": 1518,
            "message": "Reentrancy in MeowMining.deposit(address,uint256,uint256) (MeowMining.sol#1502-1518):\n\tExternal calls:\n\t- updatePool(_pid) (MeowMining.sol#1511)\n\t\t- require(bool,string)(meow.transfer(_to,meowBal),MeowMining::safeMeowTransfer:: failed to transfer MEOW.) (MeowMining.sol#1639)\n\t\t- require(bool,string)(meow.transfer(_to,_amount),MeowMining::safeMeowTransfer:: failed to transfer MEOW.) (MeowMining.sol#1641)\n\t\t- meow.mint(address(this),devfund) (MeowMining.sol#1491)\n\t\t- meow.mint(address(this),meowReward) (MeowMining.sol#1492)\n\t\t- developmentFund.lock(devfund.mul(lockShare).div(10000)) (MeowMining.sol#1494)\n\t- _harvest(_for,_pid) (MeowMining.sol#1512)\n\t\t- require(bool,string)(meow.transfer(_to,meowBal),MeowMining::safeMeowTransfer:: failed to transfer MEOW.) (MeowMining.sol#1639)\n\t\t- require(bool,string)(meow.transfer(_to,_amount),MeowMining::safeMeowTransfer:: failed to transfer MEOW.) (MeowMining.sol#1641)\n\tState variables written after the call(s):\n\t- _harvest(_for,_pid) (MeowMining.sol#1512)\n\t\t- user.lastUnlockTime = block.timestamp (MeowMining.sol#1610)\n\t\t- user.lockedAmount = user.lockedAmount.add(_amount) (MeowMining.sol#1584)\n\t\t- user.lockTo = block.timestamp.add(lockPeriod) (MeowMining.sol#1585)\n\t\t- user.lockedAmount = user.lockedAmount.sub(amount) (MeowMining.sol#1616)\n\tMeowMining.userInfo (MeowMining.sol#1370) can be used in cross function reentrancies:\n\t- MeowMining.availableUnlock(uint256,address) (MeowMining.sol#1592-1601)\n\t- MeowMining.pendingMeow(uint256,address) (MeowMining.sol#1460-1471)\n\t- MeowMining.unlock(uint256,address) (MeowMining.sol#1608-1621)\n\t- MeowMining.userInfo (MeowMining.sol#1370)\n\t- user.fundedBy = msg.sender (MeowMining.sol#1513)\n\tMeowMining.userInfo (MeowMining.sol#1370) can be used in cross function reentrancies:\n\t- MeowMining.availableUnlock(uint256,address) (MeowMining.sol#1592-1601)\n\t- MeowMining.pendingMeow(uint256,address) (MeowMining.sol#1460-1471)\n\t- MeowMining.unlock(uint256,address) (MeowMining.sol#1608-1621)\n\t- MeowMining.userInfo (MeowMining.sol#1370)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MeowMining",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Inspex-FairLaunch, Token, Vault & Workers/Meow-Finance-4a4f13efaf5e5fbed74c0ed23b665751e655d715/contracts/token/MeowMining.sol",
            "function": "constructor",
            "impact": "Medium",
            "line": 1395,
            "line_end": 1413,
            "message": "MeowMining.constructor(MeowToken,uint256,uint256,uint256,uint256,address,DevelopmentFund) (MeowMining.sol#1395-1413) ignores return value by meow.approve(address(_developmentFund),uint256(- 1)) (MeowMining.sol#1412)\n",
            "name": "unused-return",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MeowMining",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Inspex-FairLaunch, Token, Vault & Workers/Meow-Finance-4a4f13efaf5e5fbed74c0ed23b665751e655d715/contracts/token/MeowMining.sol",
            "function": "setPool",
            "impact": "Low",
            "line": 1440,
            "line_end": 1444,
            "message": "MeowMining.setPool(uint256,uint256) (MeowMining.sol#1440-1444) should emit an event for: \n\t- totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint) (MeowMining.sol#1442) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MeowMining",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Inspex-FairLaunch, Token, Vault & Workers/Meow-Finance-4a4f13efaf5e5fbed74c0ed23b665751e655d715/contracts/token/MeowMining.sol",
            "function": "addPool",
            "impact": "Low",
            "line": 1427,
            "line_end": 1437,
            "message": "MeowMining.addPool(uint256,address) (MeowMining.sol#1427-1437) should emit an event for: \n\t- totalAllocPoint = totalAllocPoint.add(_allocPoint) (MeowMining.sol#1432) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MeowMining",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Inspex-FairLaunch, Token, Vault & Workers/Meow-Finance-4a4f13efaf5e5fbed74c0ed23b665751e655d715/contracts/token/MeowMining.sol",
            "function": "setMeowPerSecond",
            "impact": "Low",
            "line": 1421,
            "line_end": 1424,
            "message": "MeowMining.setMeowPerSecond(uint256) (MeowMining.sol#1421-1424) should emit an event for: \n\t- meowPerSecond = _meowPerSecond (MeowMining.sol#1423) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MeowMining",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Inspex-FairLaunch, Token, Vault & Workers/Meow-Finance-4a4f13efaf5e5fbed74c0ed23b665751e655d715/contracts/token/MeowMining.sol",
            "function": "updatePool",
            "impact": "Low",
            "line": 1482,
            "line_end": 1499,
            "message": "MeowMining.updatePool(uint256) (MeowMining.sol#1482-1499) has external calls inside a loop: meow.mint(address(this),devfund) (MeowMining.sol#1491)\n",
            "name": "calls-loop",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MeowMining",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Inspex-FairLaunch, Token, Vault & Workers/Meow-Finance-4a4f13efaf5e5fbed74c0ed23b665751e655d715/contracts/token/MeowMining.sol",
            "function": "updatePool",
            "impact": "Low",
            "line": 1482,
            "line_end": 1499,
            "message": "MeowMining.updatePool(uint256) (MeowMining.sol#1482-1499) has external calls inside a loop: stakeTokenSupply = IERC20(pool.stakeToken).balanceOf(address(this)) (MeowMining.sol#1485)\n",
            "name": "calls-loop",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MeowMining",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Inspex-FairLaunch, Token, Vault & Workers/Meow-Finance-4a4f13efaf5e5fbed74c0ed23b665751e655d715/contracts/token/MeowMining.sol",
            "function": "updatePool",
            "impact": "Low",
            "line": 1482,
            "line_end": 1499,
            "message": "MeowMining.updatePool(uint256) (MeowMining.sol#1482-1499) has external calls inside a loop: developmentFund.lock(devfund.mul(lockShare).div(10000)) (MeowMining.sol#1494)\n",
            "name": "calls-loop",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MeowMining",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Inspex-FairLaunch, Token, Vault & Workers/Meow-Finance-4a4f13efaf5e5fbed74c0ed23b665751e655d715/contracts/token/MeowMining.sol",
            "function": "safeMeowTransfer",
            "impact": "Low",
            "line": 1636,
            "line_end": 1643,
            "message": "MeowMining.safeMeowTransfer(address,uint256) (MeowMining.sol#1636-1643) has external calls inside a loop: require(bool,string)(meow.transfer(_to,meowBal),MeowMining::safeMeowTransfer:: failed to transfer MEOW.) (MeowMining.sol#1639)\n",
            "name": "calls-loop",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MeowMining",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Inspex-FairLaunch, Token, Vault & Workers/Meow-Finance-4a4f13efaf5e5fbed74c0ed23b665751e655d715/contracts/token/MeowMining.sol",
            "function": "safeMeowTransfer",
            "impact": "Low",
            "line": 1636,
            "line_end": 1643,
            "message": "MeowMining.safeMeowTransfer(address,uint256) (MeowMining.sol#1636-1643) has external calls inside a loop: require(bool,string)(meow.transfer(_to,_amount),MeowMining::safeMeowTransfer:: failed to transfer MEOW.) (MeowMining.sol#1641)\n",
            "name": "calls-loop",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MeowMining",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Inspex-FairLaunch, Token, Vault & Workers/Meow-Finance-4a4f13efaf5e5fbed74c0ed23b665751e655d715/contracts/token/MeowMining.sol",
            "function": "safeMeowTransfer",
            "impact": "Low",
            "line": 1636,
            "line_end": 1643,
            "message": "MeowMining.safeMeowTransfer(address,uint256) (MeowMining.sol#1636-1643) has external calls inside a loop: meowBal = meow.balanceOf(address(this)) (MeowMining.sol#1637)\n",
            "name": "calls-loop",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MeowMining",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Inspex-FairLaunch, Token, Vault & Workers/Meow-Finance-4a4f13efaf5e5fbed74c0ed23b665751e655d715/contracts/token/MeowMining.sol",
            "function": "updatePool",
            "impact": "Low",
            "line": 1482,
            "line_end": 1499,
            "message": "MeowMining.updatePool(uint256) (MeowMining.sol#1482-1499) has external calls inside a loop: meow.mint(address(this),meowReward) (MeowMining.sol#1492)\n",
            "name": "calls-loop",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MeowMining",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Inspex-FairLaunch, Token, Vault & Workers/Meow-Finance-4a4f13efaf5e5fbed74c0ed23b665751e655d715/contracts/token/MeowMining.sol",
            "function": "addPool",
            "impact": "Low",
            "line": 1427,
            "line_end": 1437,
            "message": "Reentrancy in MeowMining.addPool(uint256,address) (MeowMining.sol#1427-1437):\n\tExternal calls:\n\t- massUpdatePools() (MeowMining.sol#1428)\n\t\t- require(bool,string)(meow.transfer(_to,meowBal),MeowMining::safeMeowTransfer:: failed to transfer MEOW.) (MeowMining.sol#1639)\n\t\t- require(bool,string)(meow.transfer(_to,_amount),MeowMining::safeMeowTransfer:: failed to transfer MEOW.) (MeowMining.sol#1641)\n\t\t- meow.mint(address(this),devfund) (MeowMining.sol#1491)\n\t\t- meow.mint(address(this),meowReward) (MeowMining.sol#1492)\n\t\t- developmentFund.lock(devfund.mul(lockShare).div(10000)) (MeowMining.sol#1494)\n\tState variables written after the call(s):\n\t- isPoolExist[_stakeToken] = true (MeowMining.sol#1436)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MeowMining",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Inspex-FairLaunch, Token, Vault & Workers/Meow-Finance-4a4f13efaf5e5fbed74c0ed23b665751e655d715/contracts/token/MeowMining.sol",
            "function": "unlock",
            "impact": "Low",
            "line": 1608,
            "line_end": 1621,
            "message": "Reentrancy in MeowMining.unlock(uint256,address) (MeowMining.sol#1608-1621):\n\tExternal calls:\n\t- safeMeowTransfer(_holder,amount) (MeowMining.sol#1618)\n\t\t- require(bool,string)(meow.transfer(_to,meowBal),MeowMining::safeMeowTransfer:: failed to transfer MEOW.) (MeowMining.sol#1639)\n\t\t- require(bool,string)(meow.transfer(_to,_amount),MeowMining::safeMeowTransfer:: failed to transfer MEOW.) (MeowMining.sol#1641)\n\tEvent emitted after the call(s):\n\t- Unlock(_holder,_pid,amount) (MeowMining.sol#1619)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MeowMining",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Inspex-FairLaunch, Token, Vault & Workers/Meow-Finance-4a4f13efaf5e5fbed74c0ed23b665751e655d715/contracts/token/MeowMining.sol",
            "function": "availableUnlock",
            "impact": "Low",
            "line": 1592,
            "line_end": 1601,
            "message": "MeowMining.availableUnlock(uint256,address) (MeowMining.sol#1592-1601) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp >= user.lockTo (MeowMining.sol#1594)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "DevelopmentFund",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Inspex-FairLaunch, Token, Vault & Workers/Meow-Finance-4a4f13efaf5e5fbed74c0ed23b665751e655d715/contracts/token/MeowMining.sol",
            "function": "unlock",
            "impact": "Low",
            "line": 1310,
            "line_end": 1320,
            "message": "DevelopmentFund.unlock() (MeowMining.sol#1310-1320) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- amount > 0 (MeowMining.sol#1313)\n\t- amount > Meow.balanceOf(address(this)) (MeowMining.sol#1314)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MeowMining",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Inspex-FairLaunch, Token, Vault & Workers/Meow-Finance-4a4f13efaf5e5fbed74c0ed23b665751e655d715/contracts/token/MeowMining.sol",
            "function": "updatePool",
            "impact": "Low",
            "line": 1482,
            "line_end": 1499,
            "message": "MeowMining.updatePool(uint256) (MeowMining.sol#1482-1499) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp > pool.lastRewardTime (MeowMining.sol#1484)\n\t- stakeTokenSupply > 0 && totalAllocPoint > 0 (MeowMining.sol#1486)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MeowToken",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Inspex-FairLaunch, Token, Vault & Workers/Meow-Finance-4a4f13efaf5e5fbed74c0ed23b665751e655d715/contracts/token/MeowMining.sol",
            "function": "manualMint",
            "impact": "Low",
            "line": 1021,
            "line_end": 1027,
            "message": "MeowToken.manualMint(address,uint256) (MeowMining.sol#1021-1027) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(block.timestamp >= manualMintAllowedAfter,MeowToken::manualMint:: manualMint not allowed yet.) (MeowMining.sol#1022)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MeowMining",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Inspex-FairLaunch, Token, Vault & Workers/Meow-Finance-4a4f13efaf5e5fbed74c0ed23b665751e655d715/contracts/token/MeowMining.sol",
            "function": "constructor",
            "impact": "Low",
            "line": 1395,
            "line_end": 1413,
            "message": "MeowMining.constructor(MeowToken,uint256,uint256,uint256,uint256,address,DevelopmentFund) (MeowMining.sol#1395-1413) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp > _startTime (MeowMining.sol#1407)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MeowMining",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Inspex-FairLaunch, Token, Vault & Workers/Meow-Finance-4a4f13efaf5e5fbed74c0ed23b665751e655d715/contracts/token/MeowMining.sol",
            "function": "pendingMeow",
            "impact": "Low",
            "line": 1460,
            "line_end": 1471,
            "message": "MeowMining.pendingMeow(uint256,address) (MeowMining.sol#1460-1471) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp > pool.lastRewardTime && stakeTokenSupply > 0 && totalAllocPoint > 0 (MeowMining.sol#1465)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MeowToken",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Inspex-FairLaunch, Token, Vault & Workers/Meow-Finance-4a4f13efaf5e5fbed74c0ed23b665751e655d715/contracts/token/MeowMining.sol",
            "function": "delegateBySig",
            "impact": "Low",
            "line": 1120,
            "line_end": 1141,
            "message": "MeowToken.delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32) (MeowMining.sol#1120-1141) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(now <= expiry,MEOW::delegateBySig: signature expired) (MeowMining.sol#1139)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MeowMining",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Inspex-FairLaunch, Token, Vault & Workers/Meow-Finance-4a4f13efaf5e5fbed74c0ed23b665751e655d715/contracts/token/MeowMining.sol",
            "function": "safeMeowTransfer",
            "impact": "Low",
            "line": 1636,
            "line_end": 1643,
            "message": "MeowMining.safeMeowTransfer(address,uint256) (MeowMining.sol#1636-1643) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- _amount > meowBal (MeowMining.sol#1638)\n\t- require(bool,string)(meow.transfer(_to,_amount),MeowMining::safeMeowTransfer:: failed to transfer MEOW.) (MeowMining.sol#1641)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MeowMining",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Inspex-FairLaunch, Token, Vault & Workers/Meow-Finance-4a4f13efaf5e5fbed74c0ed23b665751e655d715/contracts/token/MeowMining.sol",
            "function": "massUpdatePools",
            "impact": "Low",
            "line": 1474,
            "line_end": 1479,
            "message": "MeowMining.massUpdatePools() (MeowMining.sol#1474-1479) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- pid < length (MeowMining.sol#1476)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "DevelopmentFund",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Inspex-FairLaunch, Token, Vault & Workers/Meow-Finance-4a4f13efaf5e5fbed74c0ed23b665751e655d715/contracts/token/MeowMining.sol",
            "function": "availableUnlock",
            "impact": "Low",
            "line": 1299,
            "line_end": 1307,
            "message": "DevelopmentFund.availableUnlock() (MeowMining.sol#1299-1307) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp >= lockTo (MeowMining.sol#1300)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MeowMining",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Inspex-FairLaunch, Token, Vault & Workers/Meow-Finance-4a4f13efaf5e5fbed74c0ed23b665751e655d715/contracts/token/MeowMining.sol",
            "function": "addPool",
            "impact": "Low",
            "line": 1427,
            "line_end": 1437,
            "message": "MeowMining.addPool(uint256,address) (MeowMining.sol#1427-1437) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp > startTime (MeowMining.sol#1431)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MeowMining",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Inspex-FairLaunch, Token, Vault & Workers/Meow-Finance-4a4f13efaf5e5fbed74c0ed23b665751e655d715/contracts/token/MeowMining.sol",
            "function": "unlock",
            "impact": "Low",
            "line": 1608,
            "line_end": 1621,
            "message": "MeowMining.unlock(uint256,address) (MeowMining.sol#1608-1621) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- amount > 0 (MeowMining.sol#1612)\n\t- amount > meow.balanceOf(address(this)) (MeowMining.sol#1613)\n",
            "name": "timestamp",
            "check": "FP"
        }
    ],
    "infos": [],
    "parser": {
        "id": "slither-0.10.0",
        "mode": "solidity",
        "version": "2024/04/30"
    }
}