'solc --version' running
'solc /sb/FountainBase.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/sb' running

Reentrancy in FountainBase._beforeTokenTransfer(address,address,uint256) (../../sb/FountainBase.sol#1839-1865):
	External calls:
	- _withdrawAngel(from,angel,amount) (../../sb/FountainBase.sol#1849)
		- angel.withdraw(info.pid,amount,user) (../../sb/FountainBase.sol#1897)
	- _emergencyWithdrawAngel(from,angel_scope_1) (../../sb/FountainBase.sol#1854)
		- angel.emergencyWithdraw(info.pid,user) (../../sb/FountainBase.sol#1926)
	- _depositAngel(to,angel_scope_4,amount) (../../sb/FountainBase.sol#1862)
		- angel.deposit(info.pid,amount,user) (../../sb/FountainBase.sol#1881)
	State variables written after the call(s):
	- _depositAngel(to,angel_scope_4,amount) (../../sb/FountainBase.sol#1862)
		- info.totalBalance = info.totalBalance.add(amount) (../../sb/FountainBase.sol#1882)
	FountainBase._angelInfos (../../sb/FountainBase.sol#1628) can be used in cross function reentrancies:
	- FountainBase._depositAngel(address,IAngel,uint256) (../../sb/FountainBase.sol#1870-1883)
	- FountainBase._emergencyWithdrawAngel(address,IAngel) (../../sb/FountainBase.sol#1915-1928)
	- FountainBase._harvestAngel(IAngel,address,address) (../../sb/FountainBase.sol#1901-1913)
	- FountainBase._withdrawAngel(address,IAngel,uint256) (../../sb/FountainBase.sol#1886-1899)
	- FountainBase.angelInfo(IAngel) (../../sb/FountainBase.sol#1666-1670)
	- FountainBase.setPoolId(uint256) (../../sb/FountainBase.sol#1676-1687)
	- _depositAngel(to,angel_scope_4,amount) (../../sb/FountainBase.sol#1862)
		- _status = _ENTERED (../../sb/FountainBase.sol#55)
		- _status = _NOT_ENTERED (../../sb/FountainBase.sol#61)
	ReentrancyGuard._status (../../sb/FountainBase.sol#37) can be used in cross function reentrancies:
	- ReentrancyGuard.nonReentrant() (../../sb/FountainBase.sol#50-62)
Reentrancy in FountainBase._depositAngel(address,IAngel,uint256) (../../sb/FountainBase.sol#1870-1883):
	External calls:
	- angel.deposit(info.pid,amount,user) (../../sb/FountainBase.sol#1881)
	State variables written after the call(s):
	- info.totalBalance = info.totalBalance.add(amount) (../../sb/FountainBase.sol#1882)
	FountainBase._angelInfos (../../sb/FountainBase.sol#1628) can be used in cross function reentrancies:
	- FountainBase._depositAngel(address,IAngel,uint256) (../../sb/FountainBase.sol#1870-1883)
	- FountainBase._emergencyWithdrawAngel(address,IAngel) (../../sb/FountainBase.sol#1915-1928)
	- FountainBase._harvestAngel(IAngel,address,address) (../../sb/FountainBase.sol#1901-1913)
	- FountainBase._withdrawAngel(address,IAngel,uint256) (../../sb/FountainBase.sol#1886-1899)
	- FountainBase.angelInfo(IAngel) (../../sb/FountainBase.sol#1666-1670)
	- FountainBase.setPoolId(uint256) (../../sb/FountainBase.sol#1676-1687)
Reentrancy in FountainBase._emergencyWithdrawAngel(address,IAngel) (../../sb/FountainBase.sol#1915-1928):
	External calls:
	- angel.emergencyWithdraw(info.pid,user) (../../sb/FountainBase.sol#1926)
	State variables written after the call(s):
	- info.totalBalance = info.totalBalance.sub(amount) (../../sb/FountainBase.sol#1927)
	FountainBase._angelInfos (../../sb/FountainBase.sol#1628) can be used in cross function reentrancies:
	- FountainBase._depositAngel(address,IAngel,uint256) (../../sb/FountainBase.sol#1870-1883)
	- FountainBase._emergencyWithdrawAngel(address,IAngel) (../../sb/FountainBase.sol#1915-1928)
	- FountainBase._harvestAngel(IAngel,address,address) (../../sb/FountainBase.sol#1901-1913)
	- FountainBase._withdrawAngel(address,IAngel,uint256) (../../sb/FountainBase.sol#1886-1899)
	- FountainBase.angelInfo(IAngel) (../../sb/FountainBase.sol#1666-1670)
	- FountainBase.setPoolId(uint256) (../../sb/FountainBase.sol#1676-1687)
Reentrancy in FountainBase._withdrawAngel(address,IAngel,uint256) (../../sb/FountainBase.sol#1886-1899):
	External calls:
	- angel.withdraw(info.pid,amount,user) (../../sb/FountainBase.sol#1897)
	State variables written after the call(s):
	- info.totalBalance = info.totalBalance.sub(amount) (../../sb/FountainBase.sol#1898)
	FountainBase._angelInfos (../../sb/FountainBase.sol#1628) can be used in cross function reentrancies:
	- FountainBase._depositAngel(address,IAngel,uint256) (../../sb/FountainBase.sol#1870-1883)
	- FountainBase._emergencyWithdrawAngel(address,IAngel) (../../sb/FountainBase.sol#1915-1928)
	- FountainBase._harvestAngel(IAngel,address,address) (../../sb/FountainBase.sol#1901-1913)
	- FountainBase._withdrawAngel(address,IAngel,uint256) (../../sb/FountainBase.sol#1886-1899)
	- FountainBase.angelInfo(IAngel) (../../sb/FountainBase.sol#1666-1670)
	- FountainBase.setPoolId(uint256) (../../sb/FountainBase.sol#1676-1687)
Reentrancy in FountainBase.quitAllAngel() (../../sb/FountainBase.sol#1825-1834):
	External calls:
	- _withdrawAngel(_msgSender(),angel,balanceOf(_msgSender())) (../../sb/FountainBase.sol#1831)
		- angel.withdraw(info.pid,amount,user) (../../sb/FountainBase.sol#1897)
	State variables written after the call(s):
	- delete _joinedAngels[_msgSender()] (../../sb/FountainBase.sol#1833)
	FountainBase._joinedAngels (../../sb/FountainBase.sol#1626) can be used in cross function reentrancies:
	- FountainBase._beforeTokenTransfer(address,address,uint256) (../../sb/FountainBase.sol#1839-1865)
	- FountainBase._joinAngel(IAngel,address) (../../sb/FountainBase.sol#1930-1941)
	- FountainBase.harvestAll() (../../sb/FountainBase.sol#1760-1768)
	- FountainBase.joinedAngel(address) (../../sb/FountainBase.sol#1657-1659)
	- FountainBase.quitAllAngel() (../../sb/FountainBase.sol#1825-1834)
	- FountainBase.quitAngel(IAngel) (../../sb/FountainBase.sol#1798-1822)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1

ERC20Permit.constructor(string).name (../../sb/FountainBase.sol#1532) shadows:
	- ERC20.name() (../../sb/FountainBase.sol#966-968) (function)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing

FountainBase._harvestAngel(IAngel,address,address) (../../sb/FountainBase.sol#1901-1913) has external calls inside a loop: angel.harvest(info.pid,from,to) (../../sb/FountainBase.sol#1912)
FountainBase._depositAngel(address,IAngel,uint256) (../../sb/FountainBase.sol#1870-1883) has external calls inside a loop: angel.deposit(info.pid,amount,user) (../../sb/FountainBase.sol#1881)
FountainBase._withdrawAngel(address,IAngel,uint256) (../../sb/FountainBase.sol#1886-1899) has external calls inside a loop: angel.withdraw(info.pid,amount,user) (../../sb/FountainBase.sol#1897)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop

Reentrancy in FountainBase.deposit(uint256) (../../sb/FountainBase.sol#1694-1702):
	External calls:
	- _mint(_msgSender(),amount) (../../sb/FountainBase.sol#1696)
		- angel.deposit(info.pid,amount,user) (../../sb/FountainBase.sol#1881)
		- angel.withdraw(info.pid,amount,user) (../../sb/FountainBase.sol#1897)
		- angel.emergencyWithdraw(info.pid,user) (../../sb/FountainBase.sol#1926)
	- stakingToken.safeTransferFrom(_msgSender(),address(this),amount) (../../sb/FountainBase.sol#1699)
	Event emitted after the call(s):
	- Deposit(_msgSender(),amount,_msgSender()) (../../sb/FountainBase.sol#1701)
Reentrancy in FountainBase.depositTo(uint256,address) (../../sb/FountainBase.sol#1710-1717):
	External calls:
	- _mint(to,amount) (../../sb/FountainBase.sol#1712)
		- angel.deposit(info.pid,amount,user) (../../sb/FountainBase.sol#1881)
		- angel.withdraw(info.pid,amount,user) (../../sb/FountainBase.sol#1897)
		- angel.emergencyWithdraw(info.pid,user) (../../sb/FountainBase.sol#1926)
	- stakingToken.safeTransferFrom(_msgSender(),address(this),amount) (../../sb/FountainBase.sol#1715)
	Event emitted after the call(s):
	- Deposit(_msgSender(),amount,to) (../../sb/FountainBase.sol#1716)
Reentrancy in FountainBase.emergencyWithdraw() (../../sb/FountainBase.sol#1771-1780):
	External calls:
	- _burn(_msgSender(),type()(uint256).max) (../../sb/FountainBase.sol#1775)
		- angel.deposit(info.pid,amount,user) (../../sb/FountainBase.sol#1881)
		- angel.withdraw(info.pid,amount,user) (../../sb/FountainBase.sol#1897)
		- angel.emergencyWithdraw(info.pid,user) (../../sb/FountainBase.sol#1926)
	- stakingToken.safeTransfer(_msgSender(),amount) (../../sb/FountainBase.sol#1778)
	Event emitted after the call(s):
	- EmergencyWithdraw(_msgSender(),amount,_msgSender()) (../../sb/FountainBase.sol#1779)
Reentrancy in FountainBase.harvest(IAngel) (../../sb/FountainBase.sol#1754-1757):
	External calls:
	- _harvestAngel(angel,_msgSender(),_msgSender()) (../../sb/FountainBase.sol#1755)
		- angel.harvest(info.pid,from,to) (../../sb/FountainBase.sol#1912)
	Event emitted after the call(s):
	- Harvest(_msgSender()) (../../sb/FountainBase.sol#1756)
Reentrancy in FountainBase.harvestAll() (../../sb/FountainBase.sol#1760-1768):
	External calls:
	- _harvestAngel(angel,_msgSender(),_msgSender()) (../../sb/FountainBase.sol#1765)
		- angel.harvest(info.pid,from,to) (../../sb/FountainBase.sol#1912)
	Event emitted after the call(s):
	- Harvest(_msgSender()) (../../sb/FountainBase.sol#1767)
Reentrancy in FountainBase.quitAllAngel() (../../sb/FountainBase.sol#1825-1834):
	External calls:
	- _withdrawAngel(_msgSender(),angel,balanceOf(_msgSender())) (../../sb/FountainBase.sol#1831)
		- angel.withdraw(info.pid,amount,user) (../../sb/FountainBase.sol#1897)
	Event emitted after the call(s):
	- Quit(_msgSender(),address(angel)) (../../sb/FountainBase.sol#1829)
Reentrancy in FountainBase.withdraw(uint256) (../../sb/FountainBase.sol#1723-1733):
	External calls:
	- _burn(_msgSender(),amount) (../../sb/FountainBase.sol#1728)
		- angel.deposit(info.pid,amount,user) (../../sb/FountainBase.sol#1881)
		- angel.withdraw(info.pid,amount,user) (../../sb/FountainBase.sol#1897)
		- angel.emergencyWithdraw(info.pid,user) (../../sb/FountainBase.sol#1926)
	- stakingToken.safeTransfer(_msgSender(),amount) (../../sb/FountainBase.sol#1731)
	Event emitted after the call(s):
	- Withdraw(_msgSender(),amount,_msgSender()) (../../sb/FountainBase.sol#1732)
Reentrancy in FountainBase.withdrawTo(uint256,address) (../../sb/FountainBase.sol#1740-1750):
	External calls:
	- _burn(_msgSender(),amount) (../../sb/FountainBase.sol#1745)
		- angel.deposit(info.pid,amount,user) (../../sb/FountainBase.sol#1881)
		- angel.withdraw(info.pid,amount,user) (../../sb/FountainBase.sol#1897)
		- angel.emergencyWithdraw(info.pid,user) (../../sb/FountainBase.sol#1926)
	- stakingToken.safeTransfer(to,amount) (../../sb/FountainBase.sol#1748)
	Event emitted after the call(s):
	- Withdraw(_msgSender(),amount,to) (../../sb/FountainBase.sol#1749)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

ERC20Permit.permit(address,address,uint256,uint256,uint8,bytes32,bytes32) (../../sb/FountainBase.sol#1537-1568) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp <= deadline,ERC20Permit: expired deadline) (../../sb/FountainBase.sol#1547)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

Address.isContract(address) (../../sb/FountainBase.sol#371-380) uses assembly
	- INLINE ASM (../../sb/FountainBase.sol#378)
Address._verifyCallResult(bool,bytes,string) (../../sb/FountainBase.sol#516-533) uses assembly
	- INLINE ASM (../../sb/FountainBase.sol#525-528)
ECDSA.recover(bytes32,bytes) (../../sb/FountainBase.sol#1304-1325) uses assembly
	- INLINE ASM (../../sb/FountainBase.sol#1318-1322)
EIP712._getChainId() (../../sb/FountainBase.sol#1497-1503) uses assembly
	- INLINE ASM (../../sb/FountainBase.sol#1500-1502)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage

FountainBase.setPoolId(uint256) (../../sb/FountainBase.sol#1676-1687) compares to a boolean constant:
	-_requireMsg(info.isSet == false,setPoolId,Fountain: angel is set) (../../sb/FountainBase.sol#1679)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#boolean-equality

ReentrancyGuard.nonReentrant() (../../sb/FountainBase.sol#50-62) has costly operations inside a loop:
	- _status = _ENTERED (../../sb/FountainBase.sol#55)
ReentrancyGuard.nonReentrant() (../../sb/FountainBase.sol#50-62) has costly operations inside a loop:
	- _status = _NOT_ENTERED (../../sb/FountainBase.sol#61)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#costly-operations-inside-a-loop

Address.functionCall(address,bytes) (../../sb/FountainBase.sol#424-426) is never used and should be removed
Address.functionCallWithValue(address,bytes,uint256) (../../sb/FountainBase.sol#449-451) is never used and should be removed
Address.functionDelegateCall(address,bytes) (../../sb/FountainBase.sol#498-500) is never used and should be removed
Address.functionDelegateCall(address,bytes,string) (../../sb/FountainBase.sol#508-514) is never used and should be removed
Address.functionStaticCall(address,bytes) (../../sb/FountainBase.sol#474-476) is never used and should be removed
Address.functionStaticCall(address,bytes,string) (../../sb/FountainBase.sol#484-490) is never used and should be removed
Address.sendValue(address,uint256) (../../sb/FountainBase.sol#398-404) is never used and should be removed
Context._msgData() (../../sb/FountainBase.sol#905-908) is never used and should be removed
Counters.decrement(Counters.Counter) (../../sb/FountainBase.sol#1396-1398) is never used and should be removed
ECDSA.recover(bytes32,bytes) (../../sb/FountainBase.sol#1304-1325) is never used and should be removed
ECDSA.toEthSignedMessageHash(bytes32) (../../sb/FountainBase.sol#1359-1363) is never used and should be removed
ERC20._beforeTokenTransfer(address,address,uint256) (../../sb/FountainBase.sol#1276-1280) is never used and should be removed
ERC20._setupDecimals(uint8) (../../sb/FountainBase.sol#1258-1260) is never used and should be removed
ErrorMsg._requireMsg(bool,string) (../../sb/FountainBase.sol#861-866) is never used and should be removed
ErrorMsg._revertMsg(string) (../../sb/FountainBase.sol#885-887) is never used and should be removed
SafeERC20.safeApprove(IERC20,address,uint256) (../../sb/FountainBase.sol#579-596) is never used and should be removed
SafeERC20.safeDecreaseAllowance(IERC20,address,uint256) (../../sb/FountainBase.sol#615-633) is never used and should be removed
SafeERC20.safeIncreaseAllowance(IERC20,address,uint256) (../../sb/FountainBase.sol#598-613) is never used and should be removed
SafeMath.div(uint256,uint256) (../../sb/FountainBase.sol#269-272) is never used and should be removed
SafeMath.div(uint256,uint256,string) (../../sb/FountainBase.sol#324-327) is never used and should be removed
SafeMath.mod(uint256,uint256) (../../sb/FountainBase.sol#286-289) is never used and should be removed
SafeMath.mod(uint256,uint256,string) (../../sb/FountainBase.sol#344-347) is never used and should be removed
SafeMath.mul(uint256,uint256) (../../sb/FountainBase.sol#250-255) is never used and should be removed
SafeMath.tryAdd(uint256,uint256) (../../sb/FountainBase.sol#158-162) is never used and should be removed
SafeMath.tryDiv(uint256,uint256) (../../sb/FountainBase.sol#194-197) is never used and should be removed
SafeMath.tryMod(uint256,uint256) (../../sb/FountainBase.sol#204-207) is never used and should be removed
SafeMath.tryMul(uint256,uint256) (../../sb/FountainBase.sol#179-187) is never used and should be removed
SafeMath.trySub(uint256,uint256) (../../sb/FountainBase.sol#169-172) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code

Pragma version0.6.12 (../../sb/FountainBase.sol#1) allows old versions
solc-0.6.12 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Low level call in Address.sendValue(address,uint256) (../../sb/FountainBase.sol#398-404):
	- (success) = recipient.call{value: amount}() (../../sb/FountainBase.sol#402)
Low level call in Address.functionCallWithValue(address,bytes,uint256,string) (../../sb/FountainBase.sol#459-466):
	- (success,returndata) = target.call{value: value}(data) (../../sb/FountainBase.sol#464)
Low level call in Address.functionStaticCall(address,bytes,string) (../../sb/FountainBase.sol#484-490):
	- (success,returndata) = target.staticcall(data) (../../sb/FountainBase.sol#488)
Low level call in Address.functionDelegateCall(address,bytes,string) (../../sb/FountainBase.sol#508-514):
	- (success,returndata) = target.delegatecall(data) (../../sb/FountainBase.sol#512)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls

Function IERC20Permit.DOMAIN_SEPARATOR() (../../sb/FountainBase.sol#741) is not in mixedCase
Variable EIP712._CACHED_DOMAIN_SEPARATOR (../../sb/FountainBase.sol#1424) is not in mixedCase
Variable EIP712._CACHED_CHAIN_ID (../../sb/FountainBase.sol#1425) is not in mixedCase
Variable EIP712._HASHED_NAME (../../sb/FountainBase.sol#1427) is not in mixedCase
Variable EIP712._HASHED_VERSION (../../sb/FountainBase.sol#1428) is not in mixedCase
Variable EIP712._TYPE_HASH (../../sb/FountainBase.sol#1429) is not in mixedCase
Function ERC20Permit.DOMAIN_SEPARATOR() (../../sb/FountainBase.sol#1581-1583) is not in mixedCase
Variable ERC20Permit._PERMIT_TYPEHASH (../../sb/FountainBase.sol#1522-1525) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Redundant expression "this (../../sb/FountainBase.sol#906)" inContext (../../sb/FountainBase.sol#900-909)
Redundant expression "this (../../sb/FountainBase.sol#1498)" inEIP712 (../../sb/FountainBase.sol#1420-1504)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#redundant-statements

Variable FountainBase._beforeTokenTransfer(address,address,uint256).angel_scope_1 (../../sb/FountainBase.sol#1853) is too similar to FountainBase._beforeTokenTransfer(address,address,uint256).angel_scope_4 (../../sb/FountainBase.sol#1861)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#variable-names-too-similar
/sb/FountainBase.sol analyzed (19 contracts with 93 detectors), 70 result(s) found
