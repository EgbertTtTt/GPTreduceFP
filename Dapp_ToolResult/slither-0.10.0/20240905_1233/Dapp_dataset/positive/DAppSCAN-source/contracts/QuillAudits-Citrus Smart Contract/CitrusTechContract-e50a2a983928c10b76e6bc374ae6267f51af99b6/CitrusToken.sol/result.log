'solc --version' running
'solc /sb/CitrusToken.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/sb' running

TimeLock.release() (../../sb/CitrusToken.sol#125-138) ignores return value by BEP(address(this)).transfer(msg.sender,amount) (../../sb/CitrusToken.sol#132)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-transfer

Owned.changeOwnership(address) (../../sb/CitrusToken.sol#15-17) should emit an event for: 
	- owner = _newOwner (../../sb/CitrusToken.sol#16) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-access-control

Owned.changeOwnership(address)._newOwner (../../sb/CitrusToken.sol#15) lacks a zero-check on :
		- owner = _newOwner (../../sb/CitrusToken.sol#16)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

TimeLock.release() (../../sb/CitrusToken.sol#125-138) has external calls inside a loop: BEP(address(this)).transfer(msg.sender,amount) (../../sb/CitrusToken.sol#132)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop

TimeLock.release() (../../sb/CitrusToken.sol#125-138) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp >= (loc.time + loc.lockedAt),TimeLock: Release time not reached) (../../sb/CitrusToken.sol#130)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

Pragma version0.8.4 (../../sb/CitrusToken.sol#1) allows old versions
solc-0.8.4 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Parameter Owned.changeOwnership(address)._newOwner (../../sb/CitrusToken.sol#15) is not in mixedCase
Parameter BEP20.balanceOf(address)._owner (../../sb/CitrusToken.sol#43) is not in mixedCase
Parameter BEP20.transfer(address,uint256)._to (../../sb/CitrusToken.sol#45) is not in mixedCase
Parameter BEP20.transfer(address,uint256)._amount (../../sb/CitrusToken.sol#45) is not in mixedCase
Parameter BEP20.transferFrom(address,address,uint256)._from (../../sb/CitrusToken.sol#53) is not in mixedCase
Parameter BEP20.transferFrom(address,address,uint256)._to (../../sb/CitrusToken.sol#53) is not in mixedCase
Parameter BEP20.transferFrom(address,address,uint256)._amount (../../sb/CitrusToken.sol#53) is not in mixedCase
Parameter BEP20.approve(address,uint256)._spender (../../sb/CitrusToken.sol#62) is not in mixedCase
Parameter BEP20.approve(address,uint256)._amount (../../sb/CitrusToken.sol#62) is not in mixedCase
Parameter BEP20.allowance(address,address)._owner (../../sb/CitrusToken.sol#68) is not in mixedCase
Parameter BEP20.allowance(address,address)._spender (../../sb/CitrusToken.sol#68) is not in mixedCase
Parameter TimeLock.timelock(address,uint256,uint256)._lockAccount (../../sb/CitrusToken.sol#115) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Citrus.constructor() (../../sb/CitrusToken.sol#161-169) uses literals with too many digits:
	- totalSupply = 383000000 * 10 ** 18 (../../sb/CitrusToken.sol#165)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits

BEP20.decimals (../../sb/CitrusToken.sol#36) should be immutable 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-immutable
/sb/CitrusToken.sol analyzed (5 contracts with 93 detectors), 21 result(s) found
