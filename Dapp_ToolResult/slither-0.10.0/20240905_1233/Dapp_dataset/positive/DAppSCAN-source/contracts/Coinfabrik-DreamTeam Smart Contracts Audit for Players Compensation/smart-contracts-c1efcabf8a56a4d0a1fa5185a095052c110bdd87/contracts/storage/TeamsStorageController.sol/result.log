'solc --version' running
'solc /sb/TeamsStorageController.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/sb' running
Compilation warnings/errors on /sb/TeamsStorageController.sol:
/sb/TeamsStorageController.sol:6:5: Warning: Functions in interfaces should be declared external.
    function transferOwnership (address newOwner) public; // Owners only: revoke access from the calling account and grant access to newOwner
    ^---------------------------------------------------^
/sb/TeamsStorageController.sol:7:5: Warning: Functions in interfaces should be declared external.
    function grantAccess (address newOwner) public; // Owners only: just grant access to newOwner without revoking the access from the current owner
    ^---------------------------------------------^
/sb/TeamsStorageController.sol:8:5: Warning: Functions in interfaces should be declared external.
    function revokeAccess (address previousOwner) public; // Just revoke access from the current owner
    ^---------------------------------------------------^
/sb/TeamsStorageController.sol:9:5: Warning: Functions in interfaces should be declared external.
    function isOwner (address addr) public view returns(bool);
    ^--------------------------------------------------------^
/sb/TeamsStorageController.sol:10:5: Warning: Functions in interfaces should be declared external.
    function getUint (bytes32 record) public view returns (uint);
    ^-----------------------------------------------------------^
/sb/TeamsStorageController.sol:11:5: Warning: Functions in interfaces should be declared external.
    function getString (bytes32 record) public view returns (string);
    ^---------------------------------------------------------------^
/sb/TeamsStorageController.sol:12:5: Warning: Functions in interfaces should be declared external.
    function getAddress (bytes32 record) public view returns (address);
    ^-----------------------------------------------------------------^
/sb/TeamsStorageController.sol:13:5: Warning: Functions in interfaces should be declared external.
    function getBytes (bytes32 record) public view returns (bytes);
    ^-------------------------------------------------------------^
/sb/TeamsStorageController.sol:14:5: Warning: Functions in interfaces should be declared external.
    function getBoolean (bytes32 record) public view returns (bool);
    ^--------------------------------------------------------------^
/sb/TeamsStorageController.sol:15:5: Warning: Functions in interfaces should be declared external.
    function getInt (bytes32 record) public view returns (int);
    ^---------------------------------------------------------^
/sb/TeamsStorageController.sol:16:5: Warning: Functions in interfaces should be declared external.
    function setString (bytes32 record, string value) public;
    ^-------------------------------------------------------^
/sb/TeamsStorageController.sol:17:5: Warning: Functions in interfaces should be declared external.
    function setUint (bytes32 record, uint value) public;
    ^---------------------------------------------------^
/sb/TeamsStorageController.sol:18:5: Warning: Functions in interfaces should be declared external.
    function setAddress (bytes32 record, address value) public;
    ^---------------------------------------------------------^
/sb/TeamsStorageController.sol:19:5: Warning: Functions in interfaces should be declared external.
    function setBytes (bytes32 record, bytes value) public;
    ^-----------------------------------------------------^
/sb/TeamsStorageController.sol:20:5: Warning: Functions in interfaces should be declared external.
    function setBoolean (bytes32 record, bool value) public;
    ^------------------------------------------------------^
/sb/TeamsStorageController.sol:21:5: Warning: Functions in interfaces should be declared external.
    function setInt (bytes32 record, int value) public;
    ^-------------------------------------------------^
/sb/TeamsStorageController.sol:61:45: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return StorageInterface(db).getUint(keccak256(Storage.teams));
                                            ^----------------------^
/sb/TeamsStorageController.sol:61:45: Warning: The provided argument of type enum TeamsStorageController.Storage is not implicitly convertible to expected type bytes memory.
        return StorageInterface(db).getUint(keccak256(Storage.teams));
                                            ^----------------------^
/sb/TeamsStorageController.sol:68:52: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
            addr = StorageInterface(db).getAddress(keccak256(Storage.teams, teamId, i));
                                                   ^---------------------------------^
/sb/TeamsStorageController.sol:78:45: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return StorageInterface(db).getUint(keccak256(Storage.teams, teamId, memberIndex, Member.agreementValue));
                                            ^------------------------------------------------------------------^
/sb/TeamsStorageController.sol:82:45: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return StorageInterface(db).getUint(keccak256(Storage.teams, teamId, memberIndex, Member.agreementMinutes));
                                            ^--------------------------------------------------------------------^
/sb/TeamsStorageController.sol:86:45: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return StorageInterface(db).getUint(keccak256(Storage.teams, teamId, memberIndex, Member.payoutDate));
                                            ^--------------------------------------------------------------^
/sb/TeamsStorageController.sol:90:48: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return StorageInterface(db).getAddress(keccak256(Storage.teams, teamId, memberIndex));
                                               ^-------------------------------------------^
/sb/TeamsStorageController.sol:94:45: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return StorageInterface(db).getUint(keccak256(Storage.teams, teamId));
                                            ^------------------------------^
/sb/TeamsStorageController.sol:98:48: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return StorageInterface(db).getBoolean(keccak256(Storage.teams, teamId, memberIndex));
                                               ^-------------------------------------------^
/sb/TeamsStorageController.sol:102:45: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return StorageInterface(db).getUint(keccak256(Storage.balance, teamId));
                                            ^--------------------------------^
/sb/TeamsStorageController.sol:106:38: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        StorageInterface(db).setUint(keccak256(Storage.teams, teamId, memberIndex, Member.payoutDate), date);
                                     ^--------------------------------------------------------------^
/sb/TeamsStorageController.sol:111:58: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        uint numOfMembers = StorageInterface(db).getUint(keccak256(Storage.teams, teamId)) - 1;
                                                         ^------------------------------^
/sb/TeamsStorageController.sol:114:13: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
            keccak256(Storage.teams, teamId, memberIndex),
            ^-------------------------------------------^
/sb/TeamsStorageController.sol:115:45: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
            StorageInterface(db).getAddress(keccak256(Storage.teams, teamId, numOfMembers))
                                            ^--------------------------------------------^
/sb/TeamsStorageController.sol:117:41: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        StorageInterface(db).setAddress(keccak256(Storage.teams, teamId, numOfMembers), 0x0);
                                        ^--------------------------------------------^
/sb/TeamsStorageController.sol:119:13: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
            keccak256(Storage.teams, teamId, memberIndex, Member.agreementMinutes),
            ^--------------------------------------------------------------------^
/sb/TeamsStorageController.sol:120:42: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
            StorageInterface(db).getUint(keccak256(Storage.teams, teamId, numOfMembers, Member.agreementMinutes))
                                         ^---------------------------------------------------------------------^
/sb/TeamsStorageController.sol:122:38: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        StorageInterface(db).setUint(keccak256(Storage.teams, teamId, numOfMembers, Member.agreementMinutes), 0);
                                     ^---------------------------------------------------------------------^
/sb/TeamsStorageController.sol:124:13: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
            keccak256(Storage.teams, teamId, memberIndex, Member.agreementValue),
            ^------------------------------------------------------------------^
/sb/TeamsStorageController.sol:125:42: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
            StorageInterface(db).getUint(keccak256(Storage.teams, teamId, numOfMembers, Member.agreementValue))
                                         ^-------------------------------------------------------------------^
/sb/TeamsStorageController.sol:127:38: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        StorageInterface(db).setUint(keccak256(Storage.teams, teamId, numOfMembers, Member.agreementValue), 0);
                                     ^-------------------------------------------------------------------^
/sb/TeamsStorageController.sol:129:13: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
            keccak256(Storage.teams, teamId, memberIndex, Member.payoutDate),
            ^--------------------------------------------------------------^
/sb/TeamsStorageController.sol:130:42: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
            StorageInterface(db).getUint(keccak256(Storage.teams, teamId, numOfMembers, Member.payoutDate))
                                         ^---------------------------------------------------------------^
/sb/TeamsStorageController.sol:132:38: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        StorageInterface(db).setUint(keccak256(Storage.teams, teamId, numOfMembers, Member.payoutDate), 0);
                                     ^---------------------------------------------------------------^
/sb/TeamsStorageController.sol:134:13: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
            keccak256(Storage.teams, teamId, memberIndex),
            ^-------------------------------------------^
/sb/TeamsStorageController.sol:135:45: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
            StorageInterface(db).getBoolean(keccak256(Storage.teams, teamId, numOfMembers))
                                            ^--------------------------------------------^
/sb/TeamsStorageController.sol:137:41: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        StorageInterface(db).setBoolean(keccak256(Storage.teams, teamId, numOfMembers), false);
                                        ^--------------------------------------------^
/sb/TeamsStorageController.sol:138:38: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        StorageInterface(db).setUint(keccak256(Storage.teams, teamId), numOfMembers);
                                     ^------------------------------^
/sb/TeamsStorageController.sol:142:52: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        uint teamId = StorageInterface(db).getUint(keccak256(Storage.teams));
                                                   ^----------------------^
/sb/TeamsStorageController.sol:142:52: Warning: The provided argument of type enum TeamsStorageController.Storage is not implicitly convertible to expected type bytes memory.
        uint teamId = StorageInterface(db).getUint(keccak256(Storage.teams));
                                                   ^----------------------^
/sb/TeamsStorageController.sol:143:38: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        StorageInterface(db).setUint(keccak256(Storage.teams), teamId + 1);
                                     ^----------------------^
/sb/TeamsStorageController.sol:143:38: Warning: The provided argument of type enum TeamsStorageController.Storage is not implicitly convertible to expected type bytes memory.
        StorageInterface(db).setUint(keccak256(Storage.teams), teamId + 1);
                                     ^----------------------^
/sb/TeamsStorageController.sol:144:41: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        StorageInterface(db).setAddress(keccak256(Storage.teamOwner, teamId), teamOwnerAccount);
                                        ^----------------------------------^
/sb/TeamsStorageController.sol:150:13: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
            keccak256(Storage.balance, teamId),
            ^--------------------------------^
/sb/TeamsStorageController.sol:151:42: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
            StorageInterface(db).getUint(keccak256(Storage.balance, teamId)) + toAdd
                                         ^--------------------------------^
/sb/TeamsStorageController.sol:156:46: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        require(StorageInterface(db).getUint(keccak256(Storage.balance, teamId)) >= toSub);
                                             ^--------------------------------^
/sb/TeamsStorageController.sol:158:13: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
            keccak256(Storage.balance, teamId),
            ^--------------------------------^
/sb/TeamsStorageController.sol:159:42: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
            StorageInterface(db).getUint(keccak256(Storage.balance, teamId)) - toSub
                                         ^--------------------------------^
/sb/TeamsStorageController.sol:173:58: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        uint numOfMembers = StorageInterface(db).getUint(keccak256(Storage.teams, teamId));
                                                         ^------------------------------^
/sb/TeamsStorageController.sol:174:41: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        StorageInterface(db).setAddress(keccak256(Storage.teams, teamId, numOfMembers), memberAccount);
                                        ^--------------------------------------------^
/sb/TeamsStorageController.sol:176:13: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
            keccak256(Storage.teams, teamId, numOfMembers, Member.agreementMinutes), 
            ^---------------------------------------------------------------------^
/sb/TeamsStorageController.sol:180:13: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
            keccak256(Storage.teams, teamId, numOfMembers, Member.agreementValue), 
            ^-------------------------------------------------------------------^
/sb/TeamsStorageController.sol:184:13: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
            keccak256(Storage.teams, teamId, numOfMembers, Member.payoutDate), 
            ^---------------------------------------------------------------^
/sb/TeamsStorageController.sol:188:45: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
            StorageInterface(db).setBoolean(keccak256(Storage.teams, teamId, numOfMembers), true);
                                            ^--------------------------------------------^
/sb/TeamsStorageController.sol:189:38: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        StorageInterface(db).setUint(keccak256(Storage.teams, teamId), numOfMembers + 1);
                                     ^------------------------------^
/sb/TeamsStorageController.sol:201:58: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        uint numOfMembers = StorageInterface(db).getUint(keccak256(Storage.teams, teamId));
                                                         ^------------------------------^
/sb/TeamsStorageController.sol:207:52: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        teamBalance = StorageInterface(db).getUint(keccak256(Storage.balance, teamId));
                                                   ^--------------------------------^
/sb/TeamsStorageController.sol:208:53: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        teamOwner = StorageInterface(db).getAddress(keccak256(Storage.teamOwner, teamId));
                                                    ^----------------------------------^
/sb/TeamsStorageController.sol:215:17: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
                keccak256(Storage.teams, teamId, memberIndex)
                ^-------------------------------------------^
/sb/TeamsStorageController.sol:218:17: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
                keccak256(Storage.teams, teamId, memberIndex, Member.payoutDate)
                ^--------------------------------------------------------------^
/sb/TeamsStorageController.sol:221:17: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
                keccak256(Storage.teams, teamId, memberIndex, Member.agreementMinutes)
                ^--------------------------------------------------------------------^
/sb/TeamsStorageController.sol:224:17: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
                keccak256(Storage.teams, teamId, memberIndex, Member.agreementValue)
                ^------------------------------------------------------------------^
/sb/TeamsStorageController.sol:227:17: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
                keccak256(Storage.teams, teamId, memberIndex)
                ^-------------------------------------------^

Impossible to generate IR for TeamsStorageController.storageGetTeamBalance (../../sb/TeamsStorageController.sol#101-103):
 'EnumContract' object has no attribute 'type'
Impossible to generate IR for TeamsStorageController.storageIncTeamBalance (../../sb/TeamsStorageController.sol#148-153):
 'EnumContract' object has no attribute 'type'
Impossible to generate IR for TeamsStorageController.storageDecTeamBalance (../../sb/TeamsStorageController.sol#155-161):
 'EnumContract' object has no attribute 'type'
Impossible to generate IR for TeamsStorageController.storageGetTeam (../../sb/TeamsStorageController.sol#192-230):
 'EnumContract' object has no attribute 'type'

TeamsStorageController.storageAddTeam(address,address) (../../sb/TeamsStorageController.sol#141-146) is never used and should be removed
TeamsStorageController.storageAddTeamMember(address,uint256,address,uint256,uint256,bool) (../../sb/TeamsStorageController.sol#163-190) is never used and should be removed
TeamsStorageController.storageDecTeamBalance(address,uint256,uint256) (../../sb/TeamsStorageController.sol#155-161) is never used and should be removed
TeamsStorageController.storageDeleteTeamMember(address,uint256,uint256) (../../sb/TeamsStorageController.sol#110-139) is never used and should be removed
TeamsStorageController.storageGetNumberOfMembers(address,uint256) (../../sb/TeamsStorageController.sol#93-95) is never used and should be removed
TeamsStorageController.storageGetNumberOfTeams(address) (../../sb/TeamsStorageController.sol#60-62) is never used and should be removed
TeamsStorageController.storageGetTeam(address,uint256) (../../sb/TeamsStorageController.sol#192-230) is never used and should be removed
TeamsStorageController.storageGetTeamBalance(address,uint256) (../../sb/TeamsStorageController.sol#101-103) is never used and should be removed
TeamsStorageController.storageGetTeamMemberAddress(address,uint256,uint256) (../../sb/TeamsStorageController.sol#89-91) is never used and should be removed
TeamsStorageController.storageGetTeamMemberAgreementMinutes(address,uint256,uint256) (../../sb/TeamsStorageController.sol#81-83) is never used and should be removed
TeamsStorageController.storageGetTeamMemberAgreementValue(address,uint256,uint256) (../../sb/TeamsStorageController.sol#77-79) is never used and should be removed
TeamsStorageController.storageGetTeamMemberIndexByAddress(address,uint256,address) (../../sb/TeamsStorageController.sol#64-75) is never used and should be removed
TeamsStorageController.storageGetTeamMemberPayoutDate(address,uint256,uint256) (../../sb/TeamsStorageController.sol#85-87) is never used and should be removed
TeamsStorageController.storageGetTeamMemberSingleTermAgreement(address,uint256,uint256) (../../sb/TeamsStorageController.sol#97-99) is never used and should be removed
TeamsStorageController.storageIncTeamBalance(address,uint256,uint256) (../../sb/TeamsStorageController.sol#148-153) is never used and should be removed
TeamsStorageController.storageSetTeamMemberPayoutDate(address,uint256,uint256,uint256) (../../sb/TeamsStorageController.sol#105-107) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code

Pragma version^0.4.18 (../../sb/TeamsStorageController.sol#1) allows old versions
solc-0.4.26 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

setString(bytes32,string) should be declared external:
	- StorageInterface.setString(bytes32,string) (../../sb/TeamsStorageController.sol#16)
setBytes(bytes32,bytes) should be declared external:
	- StorageInterface.setBytes(bytes32,bytes) (../../sb/TeamsStorageController.sol#19)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external
/sb/TeamsStorageController.sol analyzed (2 contracts with 93 detectors), 20 result(s) found
