'solc --version' running
'solc /sb/OneSwapPair.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/sb' running
Compilation warnings/errors on /sb/OneSwapPair.sol:
Warning: Contract code size exceeds 24576 bytes (a limit introduced in Spurious Dragon). This contract may not be deployable on mainnet. Consider enabling the optimizer (with a low "runs" value!), turning off revert strings, or using libraries.
   --> /sb/OneSwapPair.sol:683:1:
    |
683 | contract OneSwapPair is OneSwapPool, IOneSwapPair {
    | ^ (Relevant source part starts here and spans across multiple lines).

Warning: Contract code size exceeds 24576 bytes (a limit introduced in Spurious Dragon). This contract may not be deployable on mainnet. Consider enabling the optimizer (with a low "runs" value!), turning off revert strings, or using libraries.
    --> /sb/OneSwapPair.sol:1429:1:
     |
1429 | contract OneSwapFactoryTEST {
     | ^ (Relevant source part starts here and spans across multiple lines).



Reentrancy in OneSwapPair._addOrder(Context,bool,RatPrice) (../../sb/OneSwapPair.sol#1196-1250):
	External calls:
	- _dealInOrderBook(ctx,isBuy,currID,orderInBook,priceInBook) (../../sb/OneSwapPair.sol#1213)
		- (success) = to.call{value: value}(new bytes(0)) (../../sb/OneSwapPair.sol#560)
		- IWETH(_immuWETH).withdraw(amount) (../../sb/OneSwapPair.sol#553)
		- (success,data) = token.call(abi.encodeWithSelector(_SELECTOR,to,value)) (../../sb/OneSwapPair.sol#545)
	External calls sending eth:
	- _dealInOrderBook(ctx,isBuy,currID,orderInBook,priceInBook) (../../sb/OneSwapPair.sol#1213)
		- (success) = to.call{value: value}(new bytes(0)) (../../sb/OneSwapPair.sol#560)
	State variables written after the call(s):
	- _setOrder(! isBuy,currID,orderInBook) (../../sb/OneSwapPair.sol#1217)
		- _buyOrders[id] = _order2uint(order) (../../sb/OneSwapPair.sol#825)
	OneSwapPair._buyOrders (../../sb/OneSwapPair.sol#686) can be used in cross function reentrancies:
	- OneSwapPair._deleteOrder(bool,uint32) (../../sb/OneSwapPair.sol#832-838)
	- OneSwapPair._getOrder(bool,uint32) (../../sb/OneSwapPair.sol#812-820)
	- OneSwapPair._hasOrder(bool,uint32) (../../sb/OneSwapPair.sol#803-809)
	- OneSwapPair._setOrder(bool,uint32,Order) (../../sb/OneSwapPair.sol#823-829)
	- OneSwapPair.getOrderList(bool,uint32,uint32) (../../sb/OneSwapPair.sol#1018-1062)
	- OneSwapPair.getPrices() (../../sb/OneSwapPair.sol#988-1015)
	- _deleteOrder(! isBuy,currID) (../../sb/OneSwapPair.sol#1221)
		- delete _buyOrders[id] (../../sb/OneSwapPair.sol#834)
	OneSwapPair._buyOrders (../../sb/OneSwapPair.sol#686) can be used in cross function reentrancies:
	- OneSwapPair._deleteOrder(bool,uint32) (../../sb/OneSwapPair.sol#832-838)
	- OneSwapPair._getOrder(bool,uint32) (../../sb/OneSwapPair.sol#812-820)
	- OneSwapPair._hasOrder(bool,uint32) (../../sb/OneSwapPair.sol#803-809)
	- OneSwapPair._setOrder(bool,uint32,Order) (../../sb/OneSwapPair.sol#823-829)
	- OneSwapPair.getOrderList(bool,uint32,uint32) (../../sb/OneSwapPair.sol#1018-1062)
	- OneSwapPair.getPrices() (../../sb/OneSwapPair.sol#988-1015)
	- _setOrder(! isBuy,currID,orderInBook) (../../sb/OneSwapPair.sol#1217)
		- _sellOrders[id] = _order2uint(order) (../../sb/OneSwapPair.sol#827)
	OneSwapPair._sellOrders (../../sb/OneSwapPair.sol#685) can be used in cross function reentrancies:
	- OneSwapPair._deleteOrder(bool,uint32) (../../sb/OneSwapPair.sol#832-838)
	- OneSwapPair._getOrder(bool,uint32) (../../sb/OneSwapPair.sol#812-820)
	- OneSwapPair._hasOrder(bool,uint32) (../../sb/OneSwapPair.sol#803-809)
	- OneSwapPair._setOrder(bool,uint32,Order) (../../sb/OneSwapPair.sol#823-829)
	- OneSwapPair.getOrderList(bool,uint32,uint32) (../../sb/OneSwapPair.sol#1018-1062)
	- OneSwapPair.getPrices() (../../sb/OneSwapPair.sol#988-1015)
	- _deleteOrder(! isBuy,currID) (../../sb/OneSwapPair.sol#1221)
		- delete _sellOrders[id] (../../sb/OneSwapPair.sol#836)
	OneSwapPair._sellOrders (../../sb/OneSwapPair.sol#685) can be used in cross function reentrancies:
	- OneSwapPair._deleteOrder(bool,uint32) (../../sb/OneSwapPair.sol#832-838)
	- OneSwapPair._getOrder(bool,uint32) (../../sb/OneSwapPair.sol#812-820)
	- OneSwapPair._hasOrder(bool,uint32) (../../sb/OneSwapPair.sol#803-809)
	- OneSwapPair._setOrder(bool,uint32,Order) (../../sb/OneSwapPair.sol#823-829)
	- OneSwapPair.getOrderList(bool,uint32,uint32) (../../sb/OneSwapPair.sol#1018-1062)
	- OneSwapPair.getPrices() (../../sb/OneSwapPair.sol#988-1015)
Reentrancy in OneSwapPair._addOrder(Context,bool,RatPrice) (../../sb/OneSwapPair.sol#1196-1250):
	External calls:
	- _dealInOrderBook(ctx,isBuy,currID,orderInBook,priceInBook) (../../sb/OneSwapPair.sol#1213)
		- (success) = to.call{value: value}(new bytes(0)) (../../sb/OneSwapPair.sol#560)
		- IWETH(_immuWETH).withdraw(amount) (../../sb/OneSwapPair.sol#553)
		- (success,data) = token.call(abi.encodeWithSelector(_SELECTOR,to,value)) (../../sb/OneSwapPair.sol#545)
	- amountToTaker = _dealWithPoolAndCollectFee(ctx,isBuy) (../../sb/OneSwapPair.sol#1236)
		- (success) = to.call{value: value}(new bytes(0)) (../../sb/OneSwapPair.sol#560)
		- IWETH(_immuWETH).withdraw(amount) (../../sb/OneSwapPair.sol#553)
		- (success,data) = token.call(abi.encodeWithSelector(_SELECTOR,to,value)) (../../sb/OneSwapPair.sol#545)
	External calls sending eth:
	- _dealInOrderBook(ctx,isBuy,currID,orderInBook,priceInBook) (../../sb/OneSwapPair.sol#1213)
		- (success) = to.call{value: value}(new bytes(0)) (../../sb/OneSwapPair.sol#560)
	- amountToTaker = _dealWithPoolAndCollectFee(ctx,isBuy) (../../sb/OneSwapPair.sol#1236)
		- (success) = to.call{value: value}(new bytes(0)) (../../sb/OneSwapPair.sol#560)
	State variables written after the call(s):
	- _insertOrderToBook(ctx,isBuy,price) (../../sb/OneSwapPair.sol#1239)
		- _buyOrders[id] = _order2uint(order) (../../sb/OneSwapPair.sol#825)
	OneSwapPair._buyOrders (../../sb/OneSwapPair.sol#686) can be used in cross function reentrancies:
	- OneSwapPair._deleteOrder(bool,uint32) (../../sb/OneSwapPair.sol#832-838)
	- OneSwapPair._getOrder(bool,uint32) (../../sb/OneSwapPair.sol#812-820)
	- OneSwapPair._hasOrder(bool,uint32) (../../sb/OneSwapPair.sol#803-809)
	- OneSwapPair._setOrder(bool,uint32,Order) (../../sb/OneSwapPair.sol#823-829)
	- OneSwapPair.getOrderList(bool,uint32,uint32) (../../sb/OneSwapPair.sol#1018-1062)
	- OneSwapPair.getPrices() (../../sb/OneSwapPair.sol#988-1015)
	- _insertOrderToBook(ctx,isBuy,price) (../../sb/OneSwapPair.sol#1239)
		- _sellOrders[id] = _order2uint(order) (../../sb/OneSwapPair.sol#827)
	OneSwapPair._sellOrders (../../sb/OneSwapPair.sol#685) can be used in cross function reentrancies:
	- OneSwapPair._deleteOrder(bool,uint32) (../../sb/OneSwapPair.sol#832-838)
	- OneSwapPair._getOrder(bool,uint32) (../../sb/OneSwapPair.sol#812-820)
	- OneSwapPair._hasOrder(bool,uint32) (../../sb/OneSwapPair.sol#803-809)
	- OneSwapPair._setOrder(bool,uint32,Order) (../../sb/OneSwapPair.sol#823-829)
	- OneSwapPair.getOrderList(bool,uint32,uint32) (../../sb/OneSwapPair.sol#1018-1062)
	- OneSwapPair.getPrices() (../../sb/OneSwapPair.sol#988-1015)
Reentrancy in OneSwapPair.addLimitOrder(bool,address,uint64,uint32,uint32,uint72) (../../sb/OneSwapPair.sol#1089-1140):
	External calls:
	- _checkRemainAmount(ctx,isBuy) (../../sb/OneSwapPair.sol#1121)
		- IWETH(_immuWETH).deposit{value: msg.value}() (../../sb/OneSwapPair.sol#1170)
	State variables written after the call(s):
	- _setBooked(ctx.bookedStock,ctx.bookedMoney,ctx.firstBuyID) (../../sb/OneSwapPair.sol#1131)
		- _bookedStockAndMoneyAndFirstBuyID = (uint256(firstBuyID) << 224) | (moneyAmount << 112) | stockAmount (../../sb/OneSwapPair.sol#540)
	OneSwapPool._bookedStockAndMoneyAndFirstBuyID (../../sb/OneSwapPair.sol#493) can be used in cross function reentrancies:
	- OneSwapPool._setBooked(uint256,uint256,uint32) (../../sb/OneSwapPair.sol#538-541)
	- OneSwapPool.getBooked() (../../sb/OneSwapPair.sol#532-537)
	- OneSwapPair.getOrderList(bool,uint32,uint32) (../../sb/OneSwapPair.sol#1018-1062)
	- OneSwapPair.getPrices() (../../sb/OneSwapPair.sol#988-1015)
	- OneSwapPool.internalStatus() (../../sb/OneSwapPair.sol#508-512)
	- inserted = _insertOrderFromGivenPos(isBuy,ctx.order,ctx.newOrderID,prevKey) (../../sb/OneSwapPair.sol#1123)
		- _buyOrders[id] = _order2uint(order) (../../sb/OneSwapPair.sol#825)
	OneSwapPair._buyOrders (../../sb/OneSwapPair.sol#686) can be used in cross function reentrancies:
	- OneSwapPair._deleteOrder(bool,uint32) (../../sb/OneSwapPair.sol#832-838)
	- OneSwapPair._getOrder(bool,uint32) (../../sb/OneSwapPair.sol#812-820)
	- OneSwapPair._hasOrder(bool,uint32) (../../sb/OneSwapPair.sol#803-809)
	- OneSwapPair._setOrder(bool,uint32,Order) (../../sb/OneSwapPair.sol#823-829)
	- OneSwapPair.getOrderList(bool,uint32,uint32) (../../sb/OneSwapPair.sol#1018-1062)
	- OneSwapPair.getPrices() (../../sb/OneSwapPair.sol#988-1015)
	- _setReserves(ctx.reserveStock,ctx.reserveMoney,ctx.firstSellID) (../../sb/OneSwapPair.sol#1133)
		- _reserveStockAndMoneyAndFirstSellID = temp (../../sb/OneSwapPair.sol#530)
	OneSwapPool._reserveStockAndMoneyAndFirstSellID (../../sb/OneSwapPair.sol#491) can be used in cross function reentrancies:
	- OneSwapPool._setReserves(uint256,uint256,uint32) (../../sb/OneSwapPair.sol#525-531)
	- OneSwapPair.getOrderList(bool,uint32,uint32) (../../sb/OneSwapPair.sol#1018-1062)
	- OneSwapPool.getReserves() (../../sb/OneSwapPair.sol#519-524)
	- OneSwapPool.internalStatus() (../../sb/OneSwapPair.sol#508-512)
	- inserted = _insertOrderFromGivenPos(isBuy,ctx.order,ctx.newOrderID,prevKey) (../../sb/OneSwapPair.sol#1123)
		- _sellOrders[id] = _order2uint(order) (../../sb/OneSwapPair.sol#827)
	OneSwapPair._sellOrders (../../sb/OneSwapPair.sol#685) can be used in cross function reentrancies:
	- OneSwapPair._deleteOrder(bool,uint32) (../../sb/OneSwapPair.sol#832-838)
	- OneSwapPair._getOrder(bool,uint32) (../../sb/OneSwapPair.sol#812-820)
	- OneSwapPair._hasOrder(bool,uint32) (../../sb/OneSwapPair.sol#803-809)
	- OneSwapPair._setOrder(bool,uint32,Order) (../../sb/OneSwapPair.sol#823-829)
	- OneSwapPair.getOrderList(bool,uint32,uint32) (../../sb/OneSwapPair.sol#1018-1062)
	- OneSwapPair.getPrices() (../../sb/OneSwapPair.sol#988-1015)
Reentrancy in OneSwapPair.addLimitOrder(bool,address,uint64,uint32,uint32,uint72) (../../sb/OneSwapPair.sol#1089-1140):
	External calls:
	- _checkRemainAmount(ctx,isBuy) (../../sb/OneSwapPair.sol#1121)
		- IWETH(_immuWETH).deposit{value: msg.value}() (../../sb/OneSwapPair.sol#1170)
	- _addOrder(ctx,isBuy,price) (../../sb/OneSwapPair.sol#1139)
		- (success) = to.call{value: value}(new bytes(0)) (../../sb/OneSwapPair.sol#560)
		- IWETH(_immuWETH).withdraw(amount) (../../sb/OneSwapPair.sol#553)
		- (success,data) = token.call(abi.encodeWithSelector(_SELECTOR,to,value)) (../../sb/OneSwapPair.sol#545)
	External calls sending eth:
	- _checkRemainAmount(ctx,isBuy) (../../sb/OneSwapPair.sol#1121)
		- IWETH(_immuWETH).deposit{value: msg.value}() (../../sb/OneSwapPair.sol#1170)
	- _addOrder(ctx,isBuy,price) (../../sb/OneSwapPair.sol#1139)
		- (success) = to.call{value: value}(new bytes(0)) (../../sb/OneSwapPair.sol#560)
	State variables written after the call(s):
	- _addOrder(ctx,isBuy,price) (../../sb/OneSwapPair.sol#1139)
		- _bookedStockAndMoneyAndFirstBuyID = (uint256(firstBuyID) << 224) | (moneyAmount << 112) | stockAmount (../../sb/OneSwapPair.sol#540)
	OneSwapPool._bookedStockAndMoneyAndFirstBuyID (../../sb/OneSwapPair.sol#493) can be used in cross function reentrancies:
	- OneSwapPool._setBooked(uint256,uint256,uint32) (../../sb/OneSwapPair.sol#538-541)
	- OneSwapPool.getBooked() (../../sb/OneSwapPair.sol#532-537)
	- OneSwapPair.getOrderList(bool,uint32,uint32) (../../sb/OneSwapPair.sol#1018-1062)
	- OneSwapPair.getPrices() (../../sb/OneSwapPair.sol#988-1015)
	- OneSwapPool.internalStatus() (../../sb/OneSwapPair.sol#508-512)
	- _addOrder(ctx,isBuy,price) (../../sb/OneSwapPair.sol#1139)
		- _buyOrders[id] = _order2uint(order) (../../sb/OneSwapPair.sol#825)
		- delete _buyOrders[id] (../../sb/OneSwapPair.sol#834)
	OneSwapPair._buyOrders (../../sb/OneSwapPair.sol#686) can be used in cross function reentrancies:
	- OneSwapPair._deleteOrder(bool,uint32) (../../sb/OneSwapPair.sol#832-838)
	- OneSwapPair._getOrder(bool,uint32) (../../sb/OneSwapPair.sol#812-820)
	- OneSwapPair._hasOrder(bool,uint32) (../../sb/OneSwapPair.sol#803-809)
	- OneSwapPair._setOrder(bool,uint32,Order) (../../sb/OneSwapPair.sol#823-829)
	- OneSwapPair.getOrderList(bool,uint32,uint32) (../../sb/OneSwapPair.sol#1018-1062)
	- OneSwapPair.getPrices() (../../sb/OneSwapPair.sol#988-1015)
	- _addOrder(ctx,isBuy,price) (../../sb/OneSwapPair.sol#1139)
		- _reserveStockAndMoneyAndFirstSellID = temp (../../sb/OneSwapPair.sol#530)
	OneSwapPool._reserveStockAndMoneyAndFirstSellID (../../sb/OneSwapPair.sol#491) can be used in cross function reentrancies:
	- OneSwapPool._setReserves(uint256,uint256,uint32) (../../sb/OneSwapPair.sol#525-531)
	- OneSwapPair.getOrderList(bool,uint32,uint32) (../../sb/OneSwapPair.sol#1018-1062)
	- OneSwapPool.getReserves() (../../sb/OneSwapPair.sol#519-524)
	- OneSwapPool.internalStatus() (../../sb/OneSwapPair.sol#508-512)
	- _addOrder(ctx,isBuy,price) (../../sb/OneSwapPair.sol#1139)
		- _sellOrders[id] = _order2uint(order) (../../sb/OneSwapPair.sol#827)
		- delete _sellOrders[id] (../../sb/OneSwapPair.sol#836)
	OneSwapPair._sellOrders (../../sb/OneSwapPair.sol#685) can be used in cross function reentrancies:
	- OneSwapPair._deleteOrder(bool,uint32) (../../sb/OneSwapPair.sol#832-838)
	- OneSwapPair._getOrder(bool,uint32) (../../sb/OneSwapPair.sol#812-820)
	- OneSwapPair._hasOrder(bool,uint32) (../../sb/OneSwapPair.sol#803-809)
	- OneSwapPair._setOrder(bool,uint32,Order) (../../sb/OneSwapPair.sol#823-829)
	- OneSwapPair.getOrderList(bool,uint32,uint32) (../../sb/OneSwapPair.sol#1018-1062)
	- OneSwapPair.getPrices() (../../sb/OneSwapPair.sol#988-1015)
Reentrancy in OneSwapPair.addMarketOrder(address,address,uint112,bool) (../../sb/OneSwapPair.sol#1142-1164):
	External calls:
	- _checkRemainAmount(ctx,isBuy) (../../sb/OneSwapPair.sol#1153)
		- IWETH(_immuWETH).deposit{value: msg.value}() (../../sb/OneSwapPair.sol#1170)
	- _addOrder(ctx,isBuy,price) (../../sb/OneSwapPair.sol#1163)
		- (success) = to.call{value: value}(new bytes(0)) (../../sb/OneSwapPair.sol#560)
		- IWETH(_immuWETH).withdraw(amount) (../../sb/OneSwapPair.sol#553)
		- (success,data) = token.call(abi.encodeWithSelector(_SELECTOR,to,value)) (../../sb/OneSwapPair.sol#545)
	External calls sending eth:
	- _checkRemainAmount(ctx,isBuy) (../../sb/OneSwapPair.sol#1153)
		- IWETH(_immuWETH).deposit{value: msg.value}() (../../sb/OneSwapPair.sol#1170)
	- _addOrder(ctx,isBuy,price) (../../sb/OneSwapPair.sol#1163)
		- (success) = to.call{value: value}(new bytes(0)) (../../sb/OneSwapPair.sol#560)
	State variables written after the call(s):
	- _addOrder(ctx,isBuy,price) (../../sb/OneSwapPair.sol#1163)
		- _bookedStockAndMoneyAndFirstBuyID = (uint256(firstBuyID) << 224) | (moneyAmount << 112) | stockAmount (../../sb/OneSwapPair.sol#540)
	OneSwapPool._bookedStockAndMoneyAndFirstBuyID (../../sb/OneSwapPair.sol#493) can be used in cross function reentrancies:
	- OneSwapPool._setBooked(uint256,uint256,uint32) (../../sb/OneSwapPair.sol#538-541)
	- OneSwapPool.getBooked() (../../sb/OneSwapPair.sol#532-537)
	- OneSwapPair.getOrderList(bool,uint32,uint32) (../../sb/OneSwapPair.sol#1018-1062)
	- OneSwapPair.getPrices() (../../sb/OneSwapPair.sol#988-1015)
	- OneSwapPool.internalStatus() (../../sb/OneSwapPair.sol#508-512)
	- _addOrder(ctx,isBuy,price) (../../sb/OneSwapPair.sol#1163)
		- _reserveStockAndMoneyAndFirstSellID = temp (../../sb/OneSwapPair.sol#530)
	OneSwapPool._reserveStockAndMoneyAndFirstSellID (../../sb/OneSwapPair.sol#491) can be used in cross function reentrancies:
	- OneSwapPool._setReserves(uint256,uint256,uint32) (../../sb/OneSwapPair.sol#525-531)
	- OneSwapPair.getOrderList(bool,uint32,uint32) (../../sb/OneSwapPair.sol#1018-1062)
	- OneSwapPool.getReserves() (../../sb/OneSwapPair.sol#519-524)
	- OneSwapPool.internalStatus() (../../sb/OneSwapPair.sol#508-512)
Reentrancy in OneSwapPair.removeOrder(bool,uint32,uint72) (../../sb/OneSwapPair.sol#855-874):
	External calls:
	- _transferToken(_immuMoneyToken,order.sender,moneyAmount,true) (../../sb/OneSwapPair.sol#868)
		- (success) = to.call{value: value}(new bytes(0)) (../../sb/OneSwapPair.sol#560)
		- IWETH(_immuWETH).withdraw(amount) (../../sb/OneSwapPair.sol#553)
		- (success,data) = token.call(abi.encodeWithSelector(_SELECTOR,to,value)) (../../sb/OneSwapPair.sol#545)
	- _transferToken(_immuStockToken,order.sender,stockAmount,true) (../../sb/OneSwapPair.sol#871)
		- (success) = to.call{value: value}(new bytes(0)) (../../sb/OneSwapPair.sol#560)
		- IWETH(_immuWETH).withdraw(amount) (../../sb/OneSwapPair.sol#553)
		- (success,data) = token.call(abi.encodeWithSelector(_SELECTOR,to,value)) (../../sb/OneSwapPair.sol#545)
	External calls sending eth:
	- _transferToken(_immuMoneyToken,order.sender,moneyAmount,true) (../../sb/OneSwapPair.sol#868)
		- (success) = to.call{value: value}(new bytes(0)) (../../sb/OneSwapPair.sol#560)
	- _transferToken(_immuStockToken,order.sender,stockAmount,true) (../../sb/OneSwapPair.sol#871)
		- (success) = to.call{value: value}(new bytes(0)) (../../sb/OneSwapPair.sol#560)
	State variables written after the call(s):
	- _setBooked(ctx.bookedStock,ctx.bookedMoney,ctx.firstBuyID) (../../sb/OneSwapPair.sol#873)
		- _bookedStockAndMoneyAndFirstBuyID = (uint256(firstBuyID) << 224) | (moneyAmount << 112) | stockAmount (../../sb/OneSwapPair.sol#540)
	OneSwapPool._bookedStockAndMoneyAndFirstBuyID (../../sb/OneSwapPair.sol#493) can be used in cross function reentrancies:
	- OneSwapPool._setBooked(uint256,uint256,uint32) (../../sb/OneSwapPair.sol#538-541)
	- OneSwapPool.getBooked() (../../sb/OneSwapPair.sol#532-537)
	- OneSwapPair.getOrderList(bool,uint32,uint32) (../../sb/OneSwapPair.sol#1018-1062)
	- OneSwapPair.getPrices() (../../sb/OneSwapPair.sol#988-1015)
	- OneSwapPool.internalStatus() (../../sb/OneSwapPair.sol#508-512)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities

OneSwapFactoryTEST.weth (../../sb/OneSwapPair.sol#1432) is never initialized. It is used in:
	- OneSwapFactoryTEST.createPair(address,address) (../../sb/OneSwapPair.sol#1439-1452)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-state-variables

OneSwapPair._tryDealInPool(Context,bool,RatPrice) (../../sb/OneSwapPair.sol#1283-1302) performs a multiplication on the result of a division:
	- currTokenCanTrade /= _immuStockUnit (../../sb/OneSwapPair.sol#1288)
	- currTokenCanTrade *= _immuStockUnit (../../sb/OneSwapPair.sol#1289)
OneSwapPair._dealInOrderBook(Context,bool,uint32,Order,RatPrice) (../../sb/OneSwapPair.sol#1305-1339) performs a multiplication on the result of a division:
	- stockAmount = ctx.remainAmount / _immuStockUnit (../../sb/OneSwapPair.sol#1314)
	- stockTrans = stockAmount * _immuStockUnit (../../sb/OneSwapPair.sol#1320)
OneSwapPair._insertOrderToBook(Context,bool,RatPrice) (../../sb/OneSwapPair.sol#1382-1421) performs a multiplication on the result of a division:
	- stockAmount = tempAmount1 / temp (../../sb/OneSwapPair.sol#1387)
	- tempAmount2 = stockAmount * temp (../../sb/OneSwapPair.sol#1388)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply

OneSwapPool._safeTransfer(address,address,uint256) (../../sb/OneSwapPair.sol#544-547) uses a dangerous strict equality:
	- require(bool,string)(success && (data.length == 0 || abi.decode(data,(bool))),OneSwap: TRANSFER_FAILED) (../../sb/OneSwapPair.sol#546)
OneSwapPool.mint(address) (../../sb/OneSwapPair.sol#587-617) uses a dangerous strict equality:
	- _totalSupply == 0 (../../sb/OneSwapPair.sol#603)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities

Reentrancy in OneSwapPool.burn(address) (../../sb/OneSwapPair.sol#620-647):
	External calls:
	- _safeTransfer(_immuStockToken,to,stockAmount) (../../sb/OneSwapPair.sol#639)
		- (success,data) = token.call(abi.encodeWithSelector(_SELECTOR,to,value)) (../../sb/OneSwapPair.sol#545)
	- _safeTransfer(_immuMoneyToken,to,moneyAmount) (../../sb/OneSwapPair.sol#640)
		- (success,data) = token.call(abi.encodeWithSelector(_SELECTOR,to,value)) (../../sb/OneSwapPair.sol#545)
	State variables written after the call(s):
	- _kLast = stockBalance.mul(moneyBalance) (../../sb/OneSwapPair.sol#645)
	OneSwapPool._kLast (../../sb/OneSwapPair.sol#495) can be used in cross function reentrancies:
	- OneSwapPool._mintFee(uint112,uint112) (../../sb/OneSwapPair.sol#565-584)
	- OneSwapPool.burn(address) (../../sb/OneSwapPair.sol#620-647)
	- OneSwapPool.internalStatus() (../../sb/OneSwapPair.sol#508-512)
	- OneSwapPool.mint(address) (../../sb/OneSwapPair.sol#587-617)
	- _setReserves(stockBalance,moneyBalance,firstSellID) (../../sb/OneSwapPair.sol#644)
		- _reserveStockAndMoneyAndFirstSellID = temp (../../sb/OneSwapPair.sol#530)
	OneSwapPool._reserveStockAndMoneyAndFirstSellID (../../sb/OneSwapPair.sol#491) can be used in cross function reentrancies:
	- OneSwapPool._setReserves(uint256,uint256,uint32) (../../sb/OneSwapPair.sol#525-531)
	- OneSwapPool.getReserves() (../../sb/OneSwapPair.sol#519-524)
	- OneSwapPool.internalStatus() (../../sb/OneSwapPair.sol#508-512)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1

OneSwapPair._uint2order(uint256).order (../../sb/OneSwapPair.sol#791) is a local variable never initialized
OneSwapPair._insertOrderFromHead(Context,bool,Order,uint32).firstOrder (../../sb/OneSwapPair.sol#945) is a local variable never initialized
OneSwapPair.addLimitOrder(bool,address,uint64,uint32,uint32,uint72).ctx (../../sb/OneSwapPair.sol#1092) is a local variable never initialized
OneSwapPair._insertOrder(bool,Order,Order,uint32,uint32).nextOrder (../../sb/OneSwapPair.sol#967) is a local variable never initialized
OneSwapPair.addMarketOrder(address,address,uint112,bool).ctx (../../sb/OneSwapPair.sol#1146) is a local variable never initialized
DecFloat32.expandPrice(uint32).price (../../sb/OneSwapPair.sol#247) is a local variable never initialized
OneSwapPair.removeOrder(bool,uint32,uint72).ctx (../../sb/OneSwapPair.sol#856) is a local variable never initialized
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-local-variables

OneSwapPool.constructor(address,address,address,bool).weth (../../sb/OneSwapPair.sol#673) lacks a zero-check on :
		- _immuWETH = weth (../../sb/OneSwapPair.sol#675)
OneSwapPool.constructor(address,address,address,bool).stockToken (../../sb/OneSwapPair.sol#673) lacks a zero-check on :
		- _immuStockToken = stockToken (../../sb/OneSwapPair.sol#676)
OneSwapPool.constructor(address,address,address,bool).moneyToken (../../sb/OneSwapPair.sol#673) lacks a zero-check on :
		- _immuMoneyToken = moneyToken (../../sb/OneSwapPair.sol#677)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

Reentrancy in OneSwapPair._addOrder(Context,bool,RatPrice) (../../sb/OneSwapPair.sol#1196-1250):
	External calls:
	- _dealInOrderBook(ctx,isBuy,currID,orderInBook,priceInBook) (../../sb/OneSwapPair.sol#1213)
		- (success) = to.call{value: value}(new bytes(0)) (../../sb/OneSwapPair.sol#560)
		- IWETH(_immuWETH).withdraw(amount) (../../sb/OneSwapPair.sol#553)
		- (success,data) = token.call(abi.encodeWithSelector(_SELECTOR,to,value)) (../../sb/OneSwapPair.sol#545)
	- amountToTaker = _dealWithPoolAndCollectFee(ctx,isBuy) (../../sb/OneSwapPair.sol#1236)
		- (success) = to.call{value: value}(new bytes(0)) (../../sb/OneSwapPair.sol#560)
		- IWETH(_immuWETH).withdraw(amount) (../../sb/OneSwapPair.sol#553)
		- (success,data) = token.call(abi.encodeWithSelector(_SELECTOR,to,value)) (../../sb/OneSwapPair.sol#545)
	External calls sending eth:
	- _dealInOrderBook(ctx,isBuy,currID,orderInBook,priceInBook) (../../sb/OneSwapPair.sol#1213)
		- (success) = to.call{value: value}(new bytes(0)) (../../sb/OneSwapPair.sol#560)
	- amountToTaker = _dealWithPoolAndCollectFee(ctx,isBuy) (../../sb/OneSwapPair.sol#1236)
		- (success) = to.call{value: value}(new bytes(0)) (../../sb/OneSwapPair.sol#560)
	State variables written after the call(s):
	- _setBooked(ctx.bookedStock,ctx.bookedMoney,ctx.firstBuyID) (../../sb/OneSwapPair.sol#1247)
		- _bookedStockAndMoneyAndFirstBuyID = (uint256(firstBuyID) << 224) | (moneyAmount << 112) | stockAmount (../../sb/OneSwapPair.sol#540)
	- _setReserves(ctx.reserveStock,ctx.reserveMoney,ctx.firstSellID) (../../sb/OneSwapPair.sol#1248)
		- _reserveStockAndMoneyAndFirstSellID = temp (../../sb/OneSwapPair.sol#530)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

Reentrancy in OneSwapPair._addOrder(Context,bool,RatPrice) (../../sb/OneSwapPair.sol#1196-1250):
	External calls:
	- _dealInOrderBook(ctx,isBuy,currID,orderInBook,priceInBook) (../../sb/OneSwapPair.sol#1213)
		- (success) = to.call{value: value}(new bytes(0)) (../../sb/OneSwapPair.sol#560)
		- IWETH(_immuWETH).withdraw(amount) (../../sb/OneSwapPair.sol#553)
		- (success,data) = token.call(abi.encodeWithSelector(_SELECTOR,to,value)) (../../sb/OneSwapPair.sol#545)
	- amountToTaker = _dealWithPoolAndCollectFee(ctx,isBuy) (../../sb/OneSwapPair.sol#1236)
		- (success) = to.call{value: value}(new bytes(0)) (../../sb/OneSwapPair.sol#560)
		- IWETH(_immuWETH).withdraw(amount) (../../sb/OneSwapPair.sol#553)
		- (success,data) = token.call(abi.encodeWithSelector(_SELECTOR,to,value)) (../../sb/OneSwapPair.sol#545)
	External calls sending eth:
	- _dealInOrderBook(ctx,isBuy,currID,orderInBook,priceInBook) (../../sb/OneSwapPair.sol#1213)
		- (success) = to.call{value: value}(new bytes(0)) (../../sb/OneSwapPair.sol#560)
	- amountToTaker = _dealWithPoolAndCollectFee(ctx,isBuy) (../../sb/OneSwapPair.sol#1236)
		- (success) = to.call{value: value}(new bytes(0)) (../../sb/OneSwapPair.sol#560)
	Event emitted after the call(s):
	- DealWithPool(data) (../../sb/OneSwapPair.sol#766)
		- amountToTaker = _dealWithPoolAndCollectFee(ctx,isBuy) (../../sb/OneSwapPair.sol#1236)
	- NewLimitOrder(data) (../../sb/OneSwapPair.sol#729)
		- _insertOrderToBook(ctx,isBuy,price) (../../sb/OneSwapPair.sol#1239)
	- Sync(temp) (../../sb/OneSwapPair.sol#528)
		- _setReserves(ctx.reserveStock,ctx.reserveMoney,ctx.firstSellID) (../../sb/OneSwapPair.sol#1248)
Reentrancy in OneSwapPair.addLimitOrder(bool,address,uint64,uint32,uint32,uint72) (../../sb/OneSwapPair.sol#1089-1140):
	External calls:
	- _checkRemainAmount(ctx,isBuy) (../../sb/OneSwapPair.sol#1121)
		- IWETH(_immuWETH).deposit{value: msg.value}() (../../sb/OneSwapPair.sol#1170)
	Event emitted after the call(s):
	- NewLimitOrder(data) (../../sb/OneSwapPair.sol#729)
		- _emitNewLimitOrder(uint64(ctx.order.sender),amount,amount,price32,ctx.newOrderID,isBuy) (../../sb/OneSwapPair.sol#1125)
	- Sync(temp) (../../sb/OneSwapPair.sol#528)
		- _setReserves(ctx.reserveStock,ctx.reserveMoney,ctx.firstSellID) (../../sb/OneSwapPair.sol#1133)
Reentrancy in OneSwapPair.addLimitOrder(bool,address,uint64,uint32,uint32,uint72) (../../sb/OneSwapPair.sol#1089-1140):
	External calls:
	- _checkRemainAmount(ctx,isBuy) (../../sb/OneSwapPair.sol#1121)
		- IWETH(_immuWETH).deposit{value: msg.value}() (../../sb/OneSwapPair.sol#1170)
	- _addOrder(ctx,isBuy,price) (../../sb/OneSwapPair.sol#1139)
		- (success) = to.call{value: value}(new bytes(0)) (../../sb/OneSwapPair.sol#560)
		- IWETH(_immuWETH).withdraw(amount) (../../sb/OneSwapPair.sol#553)
		- (success,data) = token.call(abi.encodeWithSelector(_SELECTOR,to,value)) (../../sb/OneSwapPair.sol#545)
	External calls sending eth:
	- _checkRemainAmount(ctx,isBuy) (../../sb/OneSwapPair.sol#1121)
		- IWETH(_immuWETH).deposit{value: msg.value}() (../../sb/OneSwapPair.sol#1170)
	- _addOrder(ctx,isBuy,price) (../../sb/OneSwapPair.sol#1139)
		- (success) = to.call{value: value}(new bytes(0)) (../../sb/OneSwapPair.sol#560)
	Event emitted after the call(s):
	- DealWithPool(data) (../../sb/OneSwapPair.sol#766)
		- _addOrder(ctx,isBuy,price) (../../sb/OneSwapPair.sol#1139)
	- NewLimitOrder(data) (../../sb/OneSwapPair.sol#729)
		- _addOrder(ctx,isBuy,price) (../../sb/OneSwapPair.sol#1139)
	- OrderChanged(data) (../../sb/OneSwapPair.sol#754)
		- _addOrder(ctx,isBuy,price) (../../sb/OneSwapPair.sol#1139)
	- Sync(temp) (../../sb/OneSwapPair.sol#528)
		- _addOrder(ctx,isBuy,price) (../../sb/OneSwapPair.sol#1139)
Reentrancy in OneSwapPair.addMarketOrder(address,address,uint112,bool) (../../sb/OneSwapPair.sol#1142-1164):
	External calls:
	- _checkRemainAmount(ctx,isBuy) (../../sb/OneSwapPair.sol#1153)
		- IWETH(_immuWETH).deposit{value: msg.value}() (../../sb/OneSwapPair.sol#1170)
	Event emitted after the call(s):
	- NewMarketOrder(data) (../../sb/OneSwapPair.sol#741)
		- _emitNewMarketOrder(uint136(ctx.order.sender),inAmount,isBuy) (../../sb/OneSwapPair.sol#1162)
Reentrancy in OneSwapPair.addMarketOrder(address,address,uint112,bool) (../../sb/OneSwapPair.sol#1142-1164):
	External calls:
	- _checkRemainAmount(ctx,isBuy) (../../sb/OneSwapPair.sol#1153)
		- IWETH(_immuWETH).deposit{value: msg.value}() (../../sb/OneSwapPair.sol#1170)
	- _addOrder(ctx,isBuy,price) (../../sb/OneSwapPair.sol#1163)
		- (success) = to.call{value: value}(new bytes(0)) (../../sb/OneSwapPair.sol#560)
		- IWETH(_immuWETH).withdraw(amount) (../../sb/OneSwapPair.sol#553)
		- (success,data) = token.call(abi.encodeWithSelector(_SELECTOR,to,value)) (../../sb/OneSwapPair.sol#545)
	External calls sending eth:
	- _checkRemainAmount(ctx,isBuy) (../../sb/OneSwapPair.sol#1153)
		- IWETH(_immuWETH).deposit{value: msg.value}() (../../sb/OneSwapPair.sol#1170)
	- _addOrder(ctx,isBuy,price) (../../sb/OneSwapPair.sol#1163)
		- (success) = to.call{value: value}(new bytes(0)) (../../sb/OneSwapPair.sol#560)
	Event emitted after the call(s):
	- DealWithPool(data) (../../sb/OneSwapPair.sol#766)
		- _addOrder(ctx,isBuy,price) (../../sb/OneSwapPair.sol#1163)
	- NewLimitOrder(data) (../../sb/OneSwapPair.sol#729)
		- _addOrder(ctx,isBuy,price) (../../sb/OneSwapPair.sol#1163)
	- OrderChanged(data) (../../sb/OneSwapPair.sol#754)
		- _addOrder(ctx,isBuy,price) (../../sb/OneSwapPair.sol#1163)
	- Sync(temp) (../../sb/OneSwapPair.sol#528)
		- _addOrder(ctx,isBuy,price) (../../sb/OneSwapPair.sol#1163)
Reentrancy in OneSwapPool.burn(address) (../../sb/OneSwapPair.sol#620-647):
	External calls:
	- _safeTransfer(_immuStockToken,to,stockAmount) (../../sb/OneSwapPair.sol#639)
		- (success,data) = token.call(abi.encodeWithSelector(_SELECTOR,to,value)) (../../sb/OneSwapPair.sol#545)
	- _safeTransfer(_immuMoneyToken,to,moneyAmount) (../../sb/OneSwapPair.sol#640)
		- (success,data) = token.call(abi.encodeWithSelector(_SELECTOR,to,value)) (../../sb/OneSwapPair.sol#545)
	Event emitted after the call(s):
	- Burn(msg.sender,(moneyAmount << 112) | stockAmount,to) (../../sb/OneSwapPair.sol#646)
	- Sync(temp) (../../sb/OneSwapPair.sol#528)
		- _setReserves(stockBalance,moneyBalance,firstSellID) (../../sb/OneSwapPair.sol#644)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

OneSwapPair.getOrderList(bool,uint32,uint32) (../../sb/OneSwapPair.sol#1018-1062) uses assembly
	- INLINE ASM (../../sb/OneSwapPair.sol#1039-1042)
	- INLINE ASM (../../sb/OneSwapPair.sol#1047-1049)
	- INLINE ASM (../../sb/OneSwapPair.sol#1057-1061)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage

OneSwapPair.addLimitOrder(bool,address,uint64,uint32,uint32,uint72) (../../sb/OneSwapPair.sol#1089-1140) compares to a boolean constant:
	-require(bool,string)(_immuIsOnlySwap == false,OneSwap: LIMIT_ORDER_NOT_SUPPORTED) (../../sb/OneSwapPair.sol#1091)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#boolean-equality

DecFloat32.getExpandPrice(uint256) (../../sb/OneSwapPair.sol#263-268) is never used and should be removed
OneSwapERC20._burn(address,uint256) (../../sb/OneSwapPair.sol#397-401) is never used and should be removed
SafeMath256.div(uint256,uint256) (../../sb/OneSwapPair.sol#110-112) is never used and should be removed
SafeMath256.div(uint256,uint256,string) (../../sb/OneSwapPair.sol#126-132) is never used and should be removed
SafeMath256.mod(uint256,uint256) (../../sb/OneSwapPair.sol#146-148) is never used and should be removed
SafeMath256.mod(uint256,uint256,string) (../../sb/OneSwapPair.sol#162-165) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code

Pragma version^0.6.6 (../../sb/OneSwapPair.sol#1) allows old versions
solc-0.6.12 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Low level call in OneSwapPool._safeTransfer(address,address,uint256) (../../sb/OneSwapPair.sol#544-547):
	- (success,data) = token.call(abi.encodeWithSelector(_SELECTOR,to,value)) (../../sb/OneSwapPair.sol#545)
Low level call in OneSwapPool._safeTransferETH(address,uint256) (../../sb/OneSwapPair.sol#559-562):
	- (success) = to.call{value: value}(new bytes(0)) (../../sb/OneSwapPair.sol#560)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls

Constant DecFloat32.MantissaMask (../../sb/OneSwapPair.sol#196) is not in UPPER_CASE_WITH_UNDERSCORES
Constant DecFloat32.MaxMantissa (../../sb/OneSwapPair.sol#197) is not in UPPER_CASE_WITH_UNDERSCORES
Constant DecFloat32.MinMantissa (../../sb/OneSwapPair.sol#198) is not in UPPER_CASE_WITH_UNDERSCORES
Constant DecFloat32.MinPrice (../../sb/OneSwapPair.sol#199) is not in UPPER_CASE_WITH_UNDERSCORES
Constant DecFloat32.MaxPrice (../../sb/OneSwapPair.sol#200) is not in UPPER_CASE_WITH_UNDERSCORES
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Variable OneSwapPair._insertOrderToBook(Context,bool,RatPrice).tempAmount1 (../../sb/OneSwapPair.sol#1385) is too similar to OneSwapPair._insertOrderToBook(Context,bool,RatPrice).tempAmount2 (../../sb/OneSwapPair.sol#1388)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#variable-names-too-similar

DecFloat32.powBig(uint32) (../../sb/OneSwapPair.sol#207-210) uses literals with too many digits:
	- Y = 3402823669209384634633746076162356521930955161600000001 (../../sb/OneSwapPair.sol#208)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits

DecFloat32.MantissaMask (../../sb/OneSwapPair.sol#196) is never used in DecFloat32 (../../sb/OneSwapPair.sol#195-270)
DecFloat32.MinPrice (../../sb/OneSwapPair.sol#199) is never used in DecFloat32 (../../sb/OneSwapPair.sol#195-270)
DecFloat32.MaxPrice (../../sb/OneSwapPair.sol#200) is never used in DecFloat32 (../../sb/OneSwapPair.sol#195-270)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-state-variable

OneSwapFactoryTEST.feeTo (../../sb/OneSwapPair.sol#1430) should be constant 
OneSwapFactoryTEST.feeToSetter (../../sb/OneSwapPair.sol#1431) should be constant 
OneSwapFactoryTEST.weth (../../sb/OneSwapPair.sol#1432) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant
/sb/OneSwapPair.sol analyzed (12 contracts with 93 detectors), 55 result(s) found
