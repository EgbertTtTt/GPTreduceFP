{
    "errors": [],
    "fails": [],
    "findings": [
        {
            "confidence": "Medium",
            "contract": "PerpetualLiquidatable",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualCreator.sol",
            "function": "dispute",
            "impact": "High",
            "line": 5663,
            "line_end": 5700,
            "message": "Reentrancy in PerpetualLiquidatable.dispute(uint256,address) (PerpetualCreator.sol#5663-5700):\n\tExternal calls:\n\t- fees() (PerpetualCreator.sol#5666)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (PerpetualCreator.sol#1912)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualCreator.sol#1780)\n\t\t- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (PerpetualCreator.sol#4436-4469)\n\t\t- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (PerpetualCreator.sol#4454)\n\t\t- collateralCurrency.safeIncreaseAllowance(address(store),regularFee.rawValue) (PerpetualCreator.sol#3013)\n\t\t- store.payOracleFeesErc20(address(collateralCurrency),regularFee) (PerpetualCreator.sol#3014)\n\t\t- collateralCurrency.safeTransfer(msg.sender,latePenalty.rawValue) (PerpetualCreator.sol#3018)\n\tExternal calls sending eth:\n\t- fees() (PerpetualCreator.sol#5666)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualCreator.sol#1780)\n\tState variables written after the call(s):\n\t- nonReentrant() (PerpetualCreator.sol#5667)\n\t\t- _notEntered = false (PerpetualCreator.sol#277)\n\t\t- _notEntered = true (PerpetualCreator.sol#283)\n\tLockable._notEntered (PerpetualCreator.sol#232) can be used in cross function reentrancies:\n\t- Lockable._postEntranceReset() (PerpetualCreator.sol#280-284)\n\t- Lockable._preEntranceCheck() (PerpetualCreator.sol#270-273)\n\t- Lockable._preEntranceSet() (PerpetualCreator.sol#275-278)\n",
            "name": "reentrancy-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "PerpetualLiquidatable",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualCreator.sol",
            "function": "createLiquidation",
            "impact": "High",
            "line": 5519,
            "line_end": 5651,
            "message": "Reentrancy in PerpetualLiquidatable.createLiquidation(address,FixedPoint.Unsigned,FixedPoint.Unsigned,FixedPoint.Unsigned,uint256) (PerpetualCreator.sol#5519-5651):\n\tExternal calls:\n\t- fees() (PerpetualCreator.sol#5528)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (PerpetualCreator.sol#1912)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualCreator.sol#1780)\n\t\t- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (PerpetualCreator.sol#4436-4469)\n\t\t- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (PerpetualCreator.sol#4454)\n\t\t- collateralCurrency.safeIncreaseAllowance(address(store),regularFee.rawValue) (PerpetualCreator.sol#3013)\n\t\t- store.payOracleFeesErc20(address(collateralCurrency),regularFee) (PerpetualCreator.sol#3014)\n\t\t- collateralCurrency.safeTransfer(msg.sender,latePenalty.rawValue) (PerpetualCreator.sol#3018)\n\tExternal calls sending eth:\n\t- fees() (PerpetualCreator.sol#5528)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualCreator.sol#1780)\n\tState variables written after the call(s):\n\t- nonReentrant() (PerpetualCreator.sol#5529)\n\t\t- _notEntered = false (PerpetualCreator.sol#277)\n\t\t- _notEntered = true (PerpetualCreator.sol#283)\n\tLockable._notEntered (PerpetualCreator.sol#232) can be used in cross function reentrancies:\n\t- Lockable._postEntranceReset() (PerpetualCreator.sol#280-284)\n\t- Lockable._preEntranceCheck() (PerpetualCreator.sol#270-273)\n\t- Lockable._preEntranceSet() (PerpetualCreator.sol#275-278)\n\t- _reduceSponsorPosition(sponsor,tokensLiquidated,lockedCollateral,withdrawalAmountToRemove) (PerpetualCreator.sol#5593)\n\t\t- rawTotalPositionCollateral = rawTotalPositionCollateral.sub(positionToLiquidate.rawCollateral) (PerpetualCreator.sol#5148)\n\tPerpetualPositionManager.rawTotalPositionCollateral (PerpetualCreator.sol#4586) can be used in cross function reentrancies:\n\t- PerpetualPositionManager._decrementCollateralBalances(PerpetualPositionManager.PositionData,FixedPoint.Unsigned) (PerpetualCreator.sol#5226-5232)\n\t- PerpetualPositionManager._deleteSponsorPosition(address) (PerpetualCreator.sol#5142-5158)\n\t- PerpetualPositionManager._incrementCollateralBalances(PerpetualPositionManager.PositionData,FixedPoint.Unsigned) (PerpetualCreator.sol#5214-5220)\n\t- PerpetualPositionManager._pfc() (PerpetualCreator.sol#5160-5162)\n\t- PerpetualPositionManager.rawTotalPositionCollateral (PerpetualCreator.sol#4586)\n\t- PerpetualPositionManager.totalPositionCollateral() (PerpetualCreator.sol#5083-5090)\n",
            "name": "reentrancy-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "PerpetualPositionManager",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualCreator.sol",
            "function": "settleEmergencyShutdown",
            "impact": "High",
            "line": 4970,
            "line_end": 5026,
            "message": "Reentrancy in PerpetualPositionManager.settleEmergencyShutdown() (PerpetualCreator.sol#4970-5026):\n\tExternal calls:\n\t- fees() (PerpetualCreator.sol#4973)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (PerpetualCreator.sol#1912)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualCreator.sol#1780)\n\t\t- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (PerpetualCreator.sol#4436-4469)\n\t\t- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (PerpetualCreator.sol#4454)\n\t\t- collateralCurrency.safeIncreaseAllowance(address(store),regularFee.rawValue) (PerpetualCreator.sol#3013)\n\t\t- store.payOracleFeesErc20(address(collateralCurrency),regularFee) (PerpetualCreator.sol#3014)\n\t\t- collateralCurrency.safeTransfer(msg.sender,latePenalty.rawValue) (PerpetualCreator.sol#3018)\n\tExternal calls sending eth:\n\t- fees() (PerpetualCreator.sol#4973)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualCreator.sol#1780)\n\tState variables written after the call(s):\n\t- nonReentrant() (PerpetualCreator.sol#4974)\n\t\t- _notEntered = false (PerpetualCreator.sol#277)\n\t\t- _notEntered = true (PerpetualCreator.sol#283)\n\tLockable._notEntered (PerpetualCreator.sol#232) can be used in cross function reentrancies:\n\t- Lockable._postEntranceReset() (PerpetualCreator.sol#280-284)\n\t- Lockable._preEntranceCheck() (PerpetualCreator.sol#270-273)\n\t- Lockable._preEntranceSet() (PerpetualCreator.sol#275-278)\n",
            "name": "reentrancy-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "PerpetualLiquidatable",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualCreator.sol",
            "function": "withdrawLiquidation",
            "impact": "High",
            "line": 5712,
            "line_end": 5803,
            "message": "Reentrancy in PerpetualLiquidatable.withdrawLiquidation(uint256,address) (PerpetualCreator.sol#5712-5803):\n\tExternal calls:\n\t- collateralCurrency.safeTransfer(liquidation.disputer,rewards.paidToDisputer.rawValue) (PerpetualCreator.sol#5764)\n\t- collateralCurrency.safeTransfer(liquidation.liquidator,rewards.paidToLiquidator.rawValue) (PerpetualCreator.sol#5765)\n\t- collateralCurrency.safeTransfer(liquidation.sponsor,rewards.paidToSponsor.rawValue) (PerpetualCreator.sol#5766)\n\t- collateralCurrency.safeTransfer(liquidation.liquidator,rewards.paidToLiquidator.rawValue) (PerpetualCreator.sol#5776)\n\t- collateralCurrency.safeTransfer(liquidation.liquidator,rewards.paidToLiquidator.rawValue) (PerpetualCreator.sol#5787)\n\t- fees() (PerpetualCreator.sol#5715)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (PerpetualCreator.sol#1912)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualCreator.sol#1780)\n\t\t- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (PerpetualCreator.sol#4436-4469)\n\t\t- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (PerpetualCreator.sol#4454)\n\t\t- collateralCurrency.safeIncreaseAllowance(address(store),regularFee.rawValue) (PerpetualCreator.sol#3013)\n\t\t- store.payOracleFeesErc20(address(collateralCurrency),regularFee) (PerpetualCreator.sol#3014)\n\t\t- collateralCurrency.safeTransfer(msg.sender,latePenalty.rawValue) (PerpetualCreator.sol#3018)\n\tExternal calls sending eth:\n\t- fees() (PerpetualCreator.sol#5715)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualCreator.sol#1780)\n\tState variables written after the call(s):\n\t- delete liquidations[sponsor][liquidationId] (PerpetualCreator.sol#5800)\n\tPerpetualLiquidatable.liquidations (PerpetualCreator.sol#5389) can be used in cross function reentrancies:\n\t- PerpetualLiquidatable.getLiquidations(address) (PerpetualCreator.sol#5810-5817)\n\t- PerpetualLiquidatable.liquidations (PerpetualCreator.sol#5389)\n",
            "name": "reentrancy-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "PerpetualPositionManager",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualCreator.sol",
            "function": "withdrawPassedRequest",
            "impact": "High",
            "line": 4803,
            "line_end": 4834,
            "message": "Reentrancy in PerpetualPositionManager.withdrawPassedRequest() (PerpetualCreator.sol#4803-4834):\n\tExternal calls:\n\t- fees() (PerpetualCreator.sol#4806)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (PerpetualCreator.sol#1912)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualCreator.sol#1780)\n\t\t- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (PerpetualCreator.sol#4436-4469)\n\t\t- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (PerpetualCreator.sol#4454)\n\t\t- collateralCurrency.safeIncreaseAllowance(address(store),regularFee.rawValue) (PerpetualCreator.sol#3013)\n\t\t- store.payOracleFeesErc20(address(collateralCurrency),regularFee) (PerpetualCreator.sol#3014)\n\t\t- collateralCurrency.safeTransfer(msg.sender,latePenalty.rawValue) (PerpetualCreator.sol#3018)\n\tExternal calls sending eth:\n\t- fees() (PerpetualCreator.sol#4806)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualCreator.sol#1780)\n\tState variables written after the call(s):\n\t- nonReentrant() (PerpetualCreator.sol#4807)\n\t\t- _notEntered = false (PerpetualCreator.sol#277)\n\t\t- _notEntered = true (PerpetualCreator.sol#283)\n\tLockable._notEntered (PerpetualCreator.sol#232) can be used in cross function reentrancies:\n\t- Lockable._postEntranceReset() (PerpetualCreator.sol#280-284)\n\t- Lockable._preEntranceCheck() (PerpetualCreator.sol#270-273)\n\t- Lockable._preEntranceSet() (PerpetualCreator.sol#275-278)\n",
            "name": "reentrancy-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "PerpetualLiquidatable",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualCreator.sol",
            "function": "withdrawLiquidation",
            "impact": "High",
            "line": 5712,
            "line_end": 5803,
            "message": "Reentrancy in PerpetualLiquidatable.withdrawLiquidation(uint256,address) (PerpetualCreator.sol#5712-5803):\n\tExternal calls:\n\t- fees() (PerpetualCreator.sol#5715)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (PerpetualCreator.sol#1912)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualCreator.sol#1780)\n\t\t- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (PerpetualCreator.sol#4436-4469)\n\t\t- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (PerpetualCreator.sol#4454)\n\t\t- collateralCurrency.safeIncreaseAllowance(address(store),regularFee.rawValue) (PerpetualCreator.sol#3013)\n\t\t- store.payOracleFeesErc20(address(collateralCurrency),regularFee) (PerpetualCreator.sol#3014)\n\t\t- collateralCurrency.safeTransfer(msg.sender,latePenalty.rawValue) (PerpetualCreator.sol#3018)\n\tExternal calls sending eth:\n\t- fees() (PerpetualCreator.sol#5715)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualCreator.sol#1780)\n\tState variables written after the call(s):\n\t- nonReentrant() (PerpetualCreator.sol#5716)\n\t\t- _notEntered = false (PerpetualCreator.sol#277)\n\t\t- _notEntered = true (PerpetualCreator.sol#283)\n\tLockable._notEntered (PerpetualCreator.sol#232) can be used in cross function reentrancies:\n\t- Lockable._postEntranceReset() (PerpetualCreator.sol#280-284)\n\t- Lockable._preEntranceCheck() (PerpetualCreator.sol#270-273)\n\t- Lockable._preEntranceSet() (PerpetualCreator.sol#275-278)\n",
            "name": "reentrancy-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "FundingRateApplier",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualCreator.sol",
            "function": "applyFundingRate",
            "impact": "High",
            "line": 4348,
            "line_end": 4350,
            "message": "Reentrancy in FundingRateApplier.applyFundingRate() (PerpetualCreator.sol#4348-4350):\n\tExternal calls:\n\t- _applyEffectiveFundingRate() (PerpetualCreator.sol#4349)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (PerpetualCreator.sol#1912)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualCreator.sol#1780)\n\t\t- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (PerpetualCreator.sol#4436-4469)\n\t\t- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (PerpetualCreator.sol#4454)\n\t- regularFees() (PerpetualCreator.sol#4348)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (PerpetualCreator.sol#1912)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualCreator.sol#1780)\n\t\t- collateralCurrency.safeIncreaseAllowance(address(store),regularFee.rawValue) (PerpetualCreator.sol#3013)\n\t\t- store.payOracleFeesErc20(address(collateralCurrency),regularFee) (PerpetualCreator.sol#3014)\n\t\t- collateralCurrency.safeTransfer(msg.sender,latePenalty.rawValue) (PerpetualCreator.sol#3018)\n\tExternal calls sending eth:\n\t- _applyEffectiveFundingRate() (PerpetualCreator.sol#4349)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualCreator.sol#1780)\n\t- regularFees() (PerpetualCreator.sol#4348)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualCreator.sol#1780)\n\tState variables written after the call(s):\n\t- _applyEffectiveFundingRate() (PerpetualCreator.sol#4349)\n\t\t- cumulativeFeeMultiplier = cumulativeFeeMultiplier.mul(FixedPoint.fromUnscaledUint(1).sub(effectiveFee)) (PerpetualCreator.sol#3135)\n\tFeePayer.cumulativeFeeMultiplier (PerpetualCreator.sol#2920) can be used in cross function reentrancies:\n\t- FeePayer.constructor(address,address,address) (PerpetualCreator.sol#2946-2955)\n\t- FeePayer.constructor(address,address,address) (PerpetualCreator.sol#2946-2955)\n\t- FeePayer.cumulativeFeeMultiplier (PerpetualCreator.sol#2920)\n",
            "name": "reentrancy-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "PerpetualPositionManager",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualCreator.sol",
            "function": "create",
            "impact": "High",
            "line": 4860,
            "line_end": 4898,
            "message": "Reentrancy in PerpetualPositionManager.create(FixedPoint.Unsigned,FixedPoint.Unsigned) (PerpetualCreator.sol#4860-4898):\n\tExternal calls:\n\t- fees() (PerpetualCreator.sol#4863)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (PerpetualCreator.sol#1912)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualCreator.sol#1780)\n\t\t- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (PerpetualCreator.sol#4436-4469)\n\t\t- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (PerpetualCreator.sol#4454)\n\t\t- collateralCurrency.safeIncreaseAllowance(address(store),regularFee.rawValue) (PerpetualCreator.sol#3013)\n\t\t- store.payOracleFeesErc20(address(collateralCurrency),regularFee) (PerpetualCreator.sol#3014)\n\t\t- collateralCurrency.safeTransfer(msg.sender,latePenalty.rawValue) (PerpetualCreator.sol#3018)\n\tExternal calls sending eth:\n\t- fees() (PerpetualCreator.sol#4863)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualCreator.sol#1780)\n\tState variables written after the call(s):\n\t- nonReentrant() (PerpetualCreator.sol#4864)\n\t\t- _notEntered = false (PerpetualCreator.sol#277)\n\t\t- _notEntered = true (PerpetualCreator.sol#283)\n\tLockable._notEntered (PerpetualCreator.sol#232) can be used in cross function reentrancies:\n\t- Lockable._postEntranceReset() (PerpetualCreator.sol#280-284)\n\t- Lockable._preEntranceCheck() (PerpetualCreator.sol#270-273)\n\t- Lockable._preEntranceSet() (PerpetualCreator.sol#275-278)\n",
            "name": "reentrancy-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "PerpetualPositionManager",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualCreator.sol",
            "function": "depositTo",
            "impact": "High",
            "line": 4710,
            "line_end": 4727,
            "message": "Reentrancy in PerpetualPositionManager.depositTo(address,FixedPoint.Unsigned) (PerpetualCreator.sol#4710-4727):\n\tExternal calls:\n\t- fees() (PerpetualCreator.sol#4714)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (PerpetualCreator.sol#1912)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualCreator.sol#1780)\n\t\t- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (PerpetualCreator.sol#4436-4469)\n\t\t- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (PerpetualCreator.sol#4454)\n\t\t- collateralCurrency.safeIncreaseAllowance(address(store),regularFee.rawValue) (PerpetualCreator.sol#3013)\n\t\t- store.payOracleFeesErc20(address(collateralCurrency),regularFee) (PerpetualCreator.sol#3014)\n\t\t- collateralCurrency.safeTransfer(msg.sender,latePenalty.rawValue) (PerpetualCreator.sol#3018)\n\tExternal calls sending eth:\n\t- fees() (PerpetualCreator.sol#4714)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualCreator.sol#1780)\n\tState variables written after the call(s):\n\t- nonReentrant() (PerpetualCreator.sol#4715)\n\t\t- _notEntered = false (PerpetualCreator.sol#277)\n\t\t- _notEntered = true (PerpetualCreator.sol#283)\n\tLockable._notEntered (PerpetualCreator.sol#232) can be used in cross function reentrancies:\n\t- Lockable._postEntranceReset() (PerpetualCreator.sol#280-284)\n\t- Lockable._preEntranceCheck() (PerpetualCreator.sol#270-273)\n\t- Lockable._preEntranceSet() (PerpetualCreator.sol#275-278)\n",
            "name": "reentrancy-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "PerpetualPositionManager",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualCreator.sol",
            "function": "emergencyShutdown",
            "impact": "High",
            "line": 5039,
            "line_end": 5047,
            "message": "Reentrancy in PerpetualPositionManager.emergencyShutdown() (PerpetualCreator.sol#5039-5047):\n\tExternal calls:\n\t- fees() (PerpetualCreator.sol#5039)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (PerpetualCreator.sol#1912)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualCreator.sol#1780)\n\t\t- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (PerpetualCreator.sol#4436-4469)\n\t\t- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (PerpetualCreator.sol#4454)\n\t\t- collateralCurrency.safeIncreaseAllowance(address(store),regularFee.rawValue) (PerpetualCreator.sol#3013)\n\t\t- store.payOracleFeesErc20(address(collateralCurrency),regularFee) (PerpetualCreator.sol#3014)\n\t\t- collateralCurrency.safeTransfer(msg.sender,latePenalty.rawValue) (PerpetualCreator.sol#3018)\n\tExternal calls sending eth:\n\t- fees() (PerpetualCreator.sol#5039)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualCreator.sol#1780)\n\tState variables written after the call(s):\n\t- nonReentrant() (PerpetualCreator.sol#5039)\n\t\t- _notEntered = false (PerpetualCreator.sol#277)\n\t\t- _notEntered = true (PerpetualCreator.sol#283)\n\tLockable._notEntered (PerpetualCreator.sol#232) can be used in cross function reentrancies:\n\t- Lockable._postEntranceReset() (PerpetualCreator.sol#280-284)\n\t- Lockable._preEntranceCheck() (PerpetualCreator.sol#270-273)\n\t- Lockable._preEntranceSet() (PerpetualCreator.sol#275-278)\n\t- emergencyShutdownTimestamp = getCurrentTime() (PerpetualCreator.sol#5043)\n\tFundingRateApplier.emergencyShutdownTimestamp (PerpetualCreator.sol#4274) can be used in cross function reentrancies:\n\t- FundingRateApplier._applyEffectiveFundingRate() (PerpetualCreator.sol#4479-4507)\n\t- PerpetualPositionManager._notEmergencyShutdown() (PerpetualCreator.sol#5256-5259)\n\t- FundingRateApplier.constructor(bytes32,address,address,address,FixedPoint.Unsigned,address) (PerpetualCreator.sol#4317-4336)\n\t- FundingRateApplier.constructor(bytes32,address,address,address,FixedPoint.Unsigned,address) (PerpetualCreator.sol#4317-4336)\n\t- FundingRateApplier.emergencyShutdownTimestamp (PerpetualCreator.sol#4274)\n",
            "name": "reentrancy-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "FundingRateApplier",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualCreator.sol",
            "function": "applyFundingRate",
            "impact": "High",
            "line": 4348,
            "line_end": 4350,
            "message": "Reentrancy in FundingRateApplier.applyFundingRate() (PerpetualCreator.sol#4348-4350):\n\tExternal calls:\n\t- regularFees() (PerpetualCreator.sol#4348)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (PerpetualCreator.sol#1912)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualCreator.sol#1780)\n\t\t- collateralCurrency.safeIncreaseAllowance(address(store),regularFee.rawValue) (PerpetualCreator.sol#3013)\n\t\t- store.payOracleFeesErc20(address(collateralCurrency),regularFee) (PerpetualCreator.sol#3014)\n\t\t- collateralCurrency.safeTransfer(msg.sender,latePenalty.rawValue) (PerpetualCreator.sol#3018)\n\tExternal calls sending eth:\n\t- regularFees() (PerpetualCreator.sol#4348)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualCreator.sol#1780)\n\tState variables written after the call(s):\n\t- nonReentrant() (PerpetualCreator.sol#4348)\n\t\t- _notEntered = false (PerpetualCreator.sol#277)\n\t\t- _notEntered = true (PerpetualCreator.sol#283)\n\tLockable._notEntered (PerpetualCreator.sol#232) can be used in cross function reentrancies:\n\t- Lockable._preEntranceCheck() (PerpetualCreator.sol#270-273)\n",
            "name": "reentrancy-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "PerpetualPositionManager",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualCreator.sol",
            "function": "redeem",
            "impact": "High",
            "line": 4909,
            "line_end": 4946,
            "message": "Reentrancy in PerpetualPositionManager.redeem(FixedPoint.Unsigned) (PerpetualCreator.sol#4909-4946):\n\tExternal calls:\n\t- fees() (PerpetualCreator.sol#4913)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (PerpetualCreator.sol#1912)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualCreator.sol#1780)\n\t\t- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (PerpetualCreator.sol#4436-4469)\n\t\t- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (PerpetualCreator.sol#4454)\n\t\t- collateralCurrency.safeIncreaseAllowance(address(store),regularFee.rawValue) (PerpetualCreator.sol#3013)\n\t\t- store.payOracleFeesErc20(address(collateralCurrency),regularFee) (PerpetualCreator.sol#3014)\n\t\t- collateralCurrency.safeTransfer(msg.sender,latePenalty.rawValue) (PerpetualCreator.sol#3018)\n\tExternal calls sending eth:\n\t- fees() (PerpetualCreator.sol#4913)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualCreator.sol#1780)\n\tState variables written after the call(s):\n\t- nonReentrant() (PerpetualCreator.sol#4914)\n\t\t- _notEntered = false (PerpetualCreator.sol#277)\n\t\t- _notEntered = true (PerpetualCreator.sol#283)\n\tLockable._notEntered (PerpetualCreator.sol#232) can be used in cross function reentrancies:\n\t- Lockable._postEntranceReset() (PerpetualCreator.sol#280-284)\n\t- Lockable._preEntranceCheck() (PerpetualCreator.sol#270-273)\n\t- Lockable._preEntranceSet() (PerpetualCreator.sol#275-278)\n\t- amountWithdrawn = _deleteSponsorPosition(msg.sender) (PerpetualCreator.sol#4926)\n\t\t- delete positions[sponsor] (PerpetualCreator.sol#5152)\n\tPerpetualPositionManager.positions (PerpetualCreator.sol#4578) can be used in cross function reentrancies:\n\t- PerpetualPositionManager._deleteSponsorPosition(address) (PerpetualCreator.sol#5142-5158)\n\t- PerpetualPositionManager._getPositionData(address) (PerpetualCreator.sol#5164-5171)\n\t- PerpetualPositionManager._onlyCollateralizedPosition(address) (PerpetualCreator.sol#5249-5254)\n\t- PerpetualPositionManager.getCollateral(address) (PerpetualCreator.sol#5069-5077)\n\t- PerpetualPositionManager.positions (PerpetualCreator.sol#4578)\n\t- amountWithdrawn = _deleteSponsorPosition(msg.sender) (PerpetualCreator.sol#4926)\n\t\t- rawTotalPositionCollateral = rawTotalPositionCollateral.sub(positionToLiquidate.rawCollateral) (PerpetualCreator.sol#5148)\n\tPerpetualPositionManager.rawTotalPositionCollateral (PerpetualCreator.sol#4586) can be used in cross function reentrancies:\n\t- PerpetualPositionManager._decrementCollateralBalances(PerpetualPositionManager.PositionData,FixedPoint.Unsigned) (PerpetualCreator.sol#5226-5232)\n\t- PerpetualPositionManager._deleteSponsorPosition(address) (PerpetualCreator.sol#5142-5158)\n\t- PerpetualPositionManager._incrementCollateralBalances(PerpetualPositionManager.PositionData,FixedPoint.Unsigned) (PerpetualCreator.sol#5214-5220)\n\t- PerpetualPositionManager._pfc() (PerpetualCreator.sol#5160-5162)\n\t- PerpetualPositionManager.rawTotalPositionCollateral (PerpetualCreator.sol#4586)\n\t- PerpetualPositionManager.totalPositionCollateral() (PerpetualCreator.sol#5083-5090)\n",
            "name": "reentrancy-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "FundingRateApplier",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualCreator.sol",
            "function": "proposeNewRate",
            "impact": "High",
            "line": 4357,
            "line_end": 4406,
            "message": "Reentrancy in FundingRateApplier.proposeNewRate(FixedPoint.Signed,uint256) (PerpetualCreator.sol#4357-4406):\n\tExternal calls:\n\t- fees() (PerpetualCreator.sol#4359)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (PerpetualCreator.sol#1912)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualCreator.sol#1780)\n\t\t- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (PerpetualCreator.sol#4436-4469)\n\t\t- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (PerpetualCreator.sol#4454)\n\t\t- collateralCurrency.safeIncreaseAllowance(address(store),regularFee.rawValue) (PerpetualCreator.sol#3013)\n\t\t- store.payOracleFeesErc20(address(collateralCurrency),regularFee) (PerpetualCreator.sol#3014)\n\t\t- collateralCurrency.safeTransfer(msg.sender,latePenalty.rawValue) (PerpetualCreator.sol#3018)\n\tExternal calls sending eth:\n\t- fees() (PerpetualCreator.sol#4359)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualCreator.sol#1780)\n\tState variables written after the call(s):\n\t- nonReentrant() (PerpetualCreator.sol#4360)\n\t\t- _notEntered = false (PerpetualCreator.sol#277)\n\t\t- _notEntered = true (PerpetualCreator.sol#283)\n\tLockable._notEntered (PerpetualCreator.sol#232) can be used in cross function reentrancies:\n\t- Lockable._preEntranceCheck() (PerpetualCreator.sol#270-273)\n\t- fundingRate.proposalTime = timestamp (PerpetualCreator.sol#4375)\n\tFundingRateApplier.fundingRate (PerpetualCreator.sol#4271) can be used in cross function reentrancies:\n\t- FundingRateApplier.constructor(bytes32,address,address,address,FixedPoint.Unsigned,address) (PerpetualCreator.sol#4317-4336)\n\t- FundingRateApplier.fundingRate (PerpetualCreator.sol#4271)\n",
            "name": "reentrancy-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "PerpetualLiquidatable",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualCreator.sol",
            "function": "dispute",
            "impact": "High",
            "line": 5663,
            "line_end": 5700,
            "message": "Reentrancy in PerpetualLiquidatable.dispute(uint256,address) (PerpetualCreator.sol#5663-5700):\n\tExternal calls:\n\t- _requestOraclePrice(disputedLiquidation.liquidationTime) (PerpetualCreator.sol#5684)\n\t\t- _getOracle().requestPrice(priceIdentifier,requestedTime) (PerpetualCreator.sol#5187)\n\t- _payFinalFees(msg.sender,disputedLiquidation.finalFee) (PerpetualCreator.sol#5696)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (PerpetualCreator.sol#1912)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualCreator.sol#1780)\n\t\t- collateralCurrency.safeTransferFrom(payer,address(this),amount.rawValue) (PerpetualCreator.sol#3047)\n\t\t- collateralCurrency.safeIncreaseAllowance(address(store),amount.rawValue) (PerpetualCreator.sol#3062)\n\t\t- store.payOracleFeesErc20(address(collateralCurrency),amount) (PerpetualCreator.sol#3063)\n\t- fees() (PerpetualCreator.sol#5666)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (PerpetualCreator.sol#1912)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualCreator.sol#1780)\n\t\t- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (PerpetualCreator.sol#4436-4469)\n\t\t- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (PerpetualCreator.sol#4454)\n\t\t- collateralCurrency.safeIncreaseAllowance(address(store),regularFee.rawValue) (PerpetualCreator.sol#3013)\n\t\t- store.payOracleFeesErc20(address(collateralCurrency),regularFee) (PerpetualCreator.sol#3014)\n\t\t- collateralCurrency.safeTransfer(msg.sender,latePenalty.rawValue) (PerpetualCreator.sol#3018)\n\tExternal calls sending eth:\n\t- _payFinalFees(msg.sender,disputedLiquidation.finalFee) (PerpetualCreator.sol#5696)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualCreator.sol#1780)\n\t- fees() (PerpetualCreator.sol#5666)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualCreator.sol#1780)\n\tState variables written after the call(s):\n\t- _payFinalFees(msg.sender,disputedLiquidation.finalFee) (PerpetualCreator.sol#5696)\n\t\t- cumulativeFeeMultiplier = cumulativeFeeMultiplier.mul(FixedPoint.fromUnscaledUint(1).sub(effectiveFee)) (PerpetualCreator.sol#3135)\n\tFeePayer.cumulativeFeeMultiplier (PerpetualCreator.sol#2920) can be used in cross function reentrancies:\n\t- FeePayer._adjustCumulativeFeeMultiplier(FixedPoint.Unsigned,FixedPoint.Unsigned) (PerpetualCreator.sol#3131-3136)\n\t- FeePayer._convertToRawCollateral(FixedPoint.Unsigned) (PerpetualCreator.sol#3090-3096)\n\t- FeePayer._getFeeAdjustedCollateral(FixedPoint.Unsigned) (PerpetualCreator.sol#3080-3086)\n\t- FeePayer.constructor(address,address,address) (PerpetualCreator.sol#2946-2955)\n\t- FeePayer.constructor(address,address,address) (PerpetualCreator.sol#2946-2955)\n\t- FeePayer.cumulativeFeeMultiplier (PerpetualCreator.sol#2920)\n",
            "name": "reentrancy-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "PerpetualPositionManager",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualCreator.sol",
            "function": "withdraw",
            "impact": "High",
            "line": 4747,
            "line_end": 4769,
            "message": "Reentrancy in PerpetualPositionManager.withdraw(FixedPoint.Unsigned) (PerpetualCreator.sol#4747-4769):\n\tExternal calls:\n\t- fees() (PerpetualCreator.sol#4751)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (PerpetualCreator.sol#1912)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualCreator.sol#1780)\n\t\t- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (PerpetualCreator.sol#4436-4469)\n\t\t- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (PerpetualCreator.sol#4454)\n\t\t- collateralCurrency.safeIncreaseAllowance(address(store),regularFee.rawValue) (PerpetualCreator.sol#3013)\n\t\t- store.payOracleFeesErc20(address(collateralCurrency),regularFee) (PerpetualCreator.sol#3014)\n\t\t- collateralCurrency.safeTransfer(msg.sender,latePenalty.rawValue) (PerpetualCreator.sol#3018)\n\tExternal calls sending eth:\n\t- fees() (PerpetualCreator.sol#4751)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualCreator.sol#1780)\n\tState variables written after the call(s):\n\t- nonReentrant() (PerpetualCreator.sol#4752)\n\t\t- _notEntered = false (PerpetualCreator.sol#277)\n\t\t- _notEntered = true (PerpetualCreator.sol#283)\n\tLockable._notEntered (PerpetualCreator.sol#232) can be used in cross function reentrancies:\n\t- Lockable._postEntranceReset() (PerpetualCreator.sol#280-284)\n\t- Lockable._preEntranceCheck() (PerpetualCreator.sol#270-273)\n\t- Lockable._preEntranceSet() (PerpetualCreator.sol#275-278)\n",
            "name": "reentrancy-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "FundingRateApplier",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualCreator.sol",
            "function": "_applyEffectiveFundingRate",
            "impact": "High",
            "line": 4479,
            "line_end": 4507,
            "message": "Reentrancy in FundingRateApplier._applyEffectiveFundingRate() (PerpetualCreator.sol#4479-4507):\n\tExternal calls:\n\t- _latestFundingRatePerSecond = _getLatestFundingRate() (PerpetualCreator.sol#4488)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (PerpetualCreator.sol#1912)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualCreator.sol#1780)\n\t\t- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (PerpetualCreator.sol#4436-4469)\n\t\t- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (PerpetualCreator.sol#4454)\n\t- (fundingRate.cumulativeMultiplier,periodRate) = _calculateEffectiveFundingRate(paymentPeriod,_getLatestFundingRate(),fundingRate.cumulativeMultiplier) (PerpetualCreator.sol#4491-4495)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (PerpetualCreator.sol#1912)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualCreator.sol#1780)\n\t\t- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (PerpetualCreator.sol#4436-4469)\n\t\t- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (PerpetualCreator.sol#4454)\n\tExternal calls sending eth:\n\t- _latestFundingRatePerSecond = _getLatestFundingRate() (PerpetualCreator.sol#4488)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualCreator.sol#1780)\n\t- (fundingRate.cumulativeMultiplier,periodRate) = _calculateEffectiveFundingRate(paymentPeriod,_getLatestFundingRate(),fundingRate.cumulativeMultiplier) (PerpetualCreator.sol#4491-4495)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualCreator.sol#1780)\n\tState variables written after the call(s):\n\t- (fundingRate.cumulativeMultiplier,periodRate) = _calculateEffectiveFundingRate(paymentPeriod,_getLatestFundingRate(),fundingRate.cumulativeMultiplier) (PerpetualCreator.sol#4491-4495)\n\t\t- cumulativeFeeMultiplier = cumulativeFeeMultiplier.mul(FixedPoint.fromUnscaledUint(1).sub(effectiveFee)) (PerpetualCreator.sol#3135)\n\tFeePayer.cumulativeFeeMultiplier (PerpetualCreator.sol#2920) can be used in cross function reentrancies:\n\t- FeePayer.constructor(address,address,address) (PerpetualCreator.sol#2946-2955)\n\t- FeePayer.constructor(address,address,address) (PerpetualCreator.sol#2946-2955)\n\t- FeePayer.cumulativeFeeMultiplier (PerpetualCreator.sol#2920)\n\t- (fundingRate.cumulativeMultiplier,periodRate) = _calculateEffectiveFundingRate(paymentPeriod,_getLatestFundingRate(),fundingRate.cumulativeMultiplier) (PerpetualCreator.sol#4491-4495)\n\t\t- fundingRate.rate = FixedPoint.Signed(price) (PerpetualCreator.sol#4445)\n\t\t- fundingRate.updateTime = proposalTime (PerpetualCreator.sol#4446)\n\t\t- fundingRate.proposalTime = 0 (PerpetualCreator.sol#4460)\n\t\t- fundingRate.proposalTime = 0 (PerpetualCreator.sol#4467)\n\tFundingRateApplier.fundingRate (PerpetualCreator.sol#4271) can be used in cross function reentrancies:\n\t- FundingRateApplier.constructor(bytes32,address,address,address,FixedPoint.Unsigned,address) (PerpetualCreator.sol#4317-4336)\n\t- FundingRateApplier.fundingRate (PerpetualCreator.sol#4271)\n\t- fundingRate.applicationTime = currentTime (PerpetualCreator.sol#4506)\n\tFundingRateApplier.fundingRate (PerpetualCreator.sol#4271) can be used in cross function reentrancies:\n\t- FundingRateApplier.constructor(bytes32,address,address,address,FixedPoint.Unsigned,address) (PerpetualCreator.sol#4317-4336)\n\t- FundingRateApplier.fundingRate (PerpetualCreator.sol#4271)\n",
            "name": "reentrancy-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "FundingRateApplier",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualCreator.sol",
            "function": "_getLatestFundingRate",
            "impact": "Medium",
            "line": 4427,
            "line_end": 4472,
            "message": "Reentrancy in FundingRateApplier._getLatestFundingRate() (PerpetualCreator.sol#4427-4472):\n\tExternal calls:\n\t- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (PerpetualCreator.sol#4436-4469)\n\tState variables written after the call(s):\n\t- fundingRate.rate = FixedPoint.Signed(price) (PerpetualCreator.sol#4445)\n\tFundingRateApplier.fundingRate (PerpetualCreator.sol#4271) can be used in cross function reentrancies:\n\t- FundingRateApplier.constructor(bytes32,address,address,address,FixedPoint.Unsigned,address) (PerpetualCreator.sol#4317-4336)\n\t- FundingRateApplier.fundingRate (PerpetualCreator.sol#4271)\n\t- fundingRate.updateTime = proposalTime (PerpetualCreator.sol#4446)\n\tFundingRateApplier.fundingRate (PerpetualCreator.sol#4271) can be used in cross function reentrancies:\n\t- FundingRateApplier.constructor(bytes32,address,address,address,FixedPoint.Unsigned,address) (PerpetualCreator.sol#4317-4336)\n\t- FundingRateApplier.fundingRate (PerpetualCreator.sol#4271)\n\t- fundingRate.proposalTime = 0 (PerpetualCreator.sol#4467)\n\tFundingRateApplier.fundingRate (PerpetualCreator.sol#4271) can be used in cross function reentrancies:\n\t- FundingRateApplier.constructor(bytes32,address,address,address,FixedPoint.Unsigned,address) (PerpetualCreator.sol#4317-4336)\n\t- FundingRateApplier.fundingRate (PerpetualCreator.sol#4271)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "FundingRateApplier",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualCreator.sol",
            "function": "_getLatestFundingRate",
            "impact": "Medium",
            "line": 4427,
            "line_end": 4472,
            "message": "Reentrancy in FundingRateApplier._getLatestFundingRate() (PerpetualCreator.sol#4427-4472):\n\tExternal calls:\n\t- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (PerpetualCreator.sol#4436-4469)\n\t- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (PerpetualCreator.sol#4454)\n\tState variables written after the call(s):\n\t- fundingRate.proposalTime = 0 (PerpetualCreator.sol#4460)\n\tFundingRateApplier.fundingRate (PerpetualCreator.sol#4271) can be used in cross function reentrancies:\n\t- FundingRateApplier.constructor(bytes32,address,address,address,FixedPoint.Unsigned,address) (PerpetualCreator.sol#4317-4336)\n\t- FundingRateApplier.fundingRate (PerpetualCreator.sol#4271)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "FundingRateApplier",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualCreator.sol",
            "function": "proposeNewRate",
            "impact": "Medium",
            "line": 4357,
            "line_end": 4406,
            "message": "FundingRateApplier.proposeNewRate(FixedPoint.Signed,uint256) (PerpetualCreator.sol#4357-4406) ignores return value by optimisticOracle.proposePriceFor(msg.sender,address(this),identifier,timestamp,ancillaryData,rate.rawValue) (PerpetualCreator.sol#4398-4405)\n",
            "name": "unused-return",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "FundingRateApplier",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualCreator.sol",
            "function": "proposeNewRate",
            "impact": "Medium",
            "line": 4357,
            "line_end": 4406,
            "message": "FundingRateApplier.proposeNewRate(FixedPoint.Signed,uint256) (PerpetualCreator.sol#4357-4406) ignores return value by optimisticOracle.requestPrice(identifier,timestamp,ancillaryData,collateralCurrency,0) (PerpetualCreator.sol#4382)\n",
            "name": "unused-return",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "PerpetualLiquidatable",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualCreator.sol",
            "function": "createLiquidation",
            "impact": "Low",
            "line": 5519,
            "line_end": 5651,
            "message": "Reentrancy in PerpetualLiquidatable.createLiquidation(address,FixedPoint.Unsigned,FixedPoint.Unsigned,FixedPoint.Unsigned,uint256) (PerpetualCreator.sol#5519-5651):\n\tExternal calls:\n\t- fees() (PerpetualCreator.sol#5528)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (PerpetualCreator.sol#1912)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualCreator.sol#1780)\n\t\t- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (PerpetualCreator.sol#4436-4469)\n\t\t- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (PerpetualCreator.sol#4454)\n\t\t- collateralCurrency.safeIncreaseAllowance(address(store),regularFee.rawValue) (PerpetualCreator.sol#3013)\n\t\t- store.payOracleFeesErc20(address(collateralCurrency),regularFee) (PerpetualCreator.sol#3014)\n\t\t- collateralCurrency.safeTransfer(msg.sender,latePenalty.rawValue) (PerpetualCreator.sol#3018)\n\tExternal calls sending eth:\n\t- fees() (PerpetualCreator.sol#5528)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualCreator.sol#1780)\n\tState variables written after the call(s):\n\t- liquidations[sponsor].push(LiquidationData({sponsor:sponsor,liquidator:msg.sender,state:Status.PreDispute,liquidationTime:getCurrentTime(),tokensOutstanding:_getFundingRateAppliedTokenDebt(tokensLiquidated),lockedCollateral:lockedCollateral,liquidatedCollateral:liquidatedCollateral,rawUnitCollateral:_convertToRawCollateral(FixedPoint.fromUnscaledUint(1)),disputer:address(0),settlementPrice:FixedPoint.fromUnscaledUint(0),finalFee:finalFeeBond})) (PerpetualCreator.sol#5603-5617)\n\t- _reduceSponsorPosition(sponsor,tokensLiquidated,lockedCollateral,withdrawalAmountToRemove) (PerpetualCreator.sol#5593)\n\t\t- delete positions[sponsor] (PerpetualCreator.sol#5152)\n\t- _reduceSponsorPosition(sponsor,tokensLiquidated,lockedCollateral,withdrawalAmountToRemove) (PerpetualCreator.sol#5593)\n\t\t- totalTokensOutstanding = totalTokensOutstanding.sub(positionToLiquidate.tokensOutstanding) (PerpetualCreator.sol#5149)\n\t\t- totalTokensOutstanding = totalTokensOutstanding.sub(tokensToRemove) (PerpetualCreator.sol#5138)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "PerpetualPositionManager",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualCreator.sol",
            "function": "redeem",
            "impact": "Low",
            "line": 4909,
            "line_end": 4946,
            "message": "Reentrancy in PerpetualPositionManager.redeem(FixedPoint.Unsigned) (PerpetualCreator.sol#4909-4946):\n\tExternal calls:\n\t- fees() (PerpetualCreator.sol#4913)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (PerpetualCreator.sol#1912)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualCreator.sol#1780)\n\t\t- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (PerpetualCreator.sol#4436-4469)\n\t\t- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (PerpetualCreator.sol#4454)\n\t\t- collateralCurrency.safeIncreaseAllowance(address(store),regularFee.rawValue) (PerpetualCreator.sol#3013)\n\t\t- store.payOracleFeesErc20(address(collateralCurrency),regularFee) (PerpetualCreator.sol#3014)\n\t\t- collateralCurrency.safeTransfer(msg.sender,latePenalty.rawValue) (PerpetualCreator.sol#3018)\n\tExternal calls sending eth:\n\t- fees() (PerpetualCreator.sol#4913)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualCreator.sol#1780)\n\tState variables written after the call(s):\n\t- amountWithdrawn = _deleteSponsorPosition(msg.sender) (PerpetualCreator.sol#4926)\n\t\t- totalTokensOutstanding = totalTokensOutstanding.sub(positionToLiquidate.tokensOutstanding) (PerpetualCreator.sol#5149)\n\t- totalTokensOutstanding = totalTokensOutstanding.sub(numTokens) (PerpetualCreator.sol#4937)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "PerpetualPositionManager",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualCreator.sol",
            "function": "create",
            "impact": "Low",
            "line": 4860,
            "line_end": 4898,
            "message": "Reentrancy in PerpetualPositionManager.create(FixedPoint.Unsigned,FixedPoint.Unsigned) (PerpetualCreator.sol#4860-4898):\n\tExternal calls:\n\t- fees() (PerpetualCreator.sol#4863)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (PerpetualCreator.sol#1912)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualCreator.sol#1780)\n\t\t- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (PerpetualCreator.sol#4436-4469)\n\t\t- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (PerpetualCreator.sol#4454)\n\t\t- collateralCurrency.safeIncreaseAllowance(address(store),regularFee.rawValue) (PerpetualCreator.sol#3013)\n\t\t- store.payOracleFeesErc20(address(collateralCurrency),regularFee) (PerpetualCreator.sol#3014)\n\t\t- collateralCurrency.safeTransfer(msg.sender,latePenalty.rawValue) (PerpetualCreator.sol#3018)\n\tExternal calls sending eth:\n\t- fees() (PerpetualCreator.sol#4863)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualCreator.sol#1780)\n\tState variables written after the call(s):\n\t- positionData.tokensOutstanding = positionData.tokensOutstanding.add(numTokens) (PerpetualCreator.sol#4887)\n\t- totalTokensOutstanding = totalTokensOutstanding.add(numTokens) (PerpetualCreator.sol#4889)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "FundingRateApplier",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualCreator.sol",
            "function": "_getLatestFundingRate",
            "impact": "Low",
            "line": 4427,
            "line_end": 4472,
            "message": "Reentrancy in FundingRateApplier._getLatestFundingRate() (PerpetualCreator.sol#4427-4472):\n\tExternal calls:\n\t- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (PerpetualCreator.sol#4436-4469)\n\tState variables written after the call(s):\n\t- _adjustCumulativeFeeMultiplier(reward,_pfc()) (PerpetualCreator.sol#4453)\n\t\t- cumulativeFeeMultiplier = cumulativeFeeMultiplier.mul(FixedPoint.fromUnscaledUint(1).sub(effectiveFee)) (PerpetualCreator.sol#3135)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "PerpetualPositionManager",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualCreator.sol",
            "function": "settleEmergencyShutdown",
            "impact": "Low",
            "line": 4970,
            "line_end": 5026,
            "message": "Reentrancy in PerpetualPositionManager.settleEmergencyShutdown() (PerpetualCreator.sol#4970-5026):\n\tExternal calls:\n\t- fees() (PerpetualCreator.sol#4973)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (PerpetualCreator.sol#1912)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualCreator.sol#1780)\n\t\t- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (PerpetualCreator.sol#4436-4469)\n\t\t- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (PerpetualCreator.sol#4454)\n\t\t- collateralCurrency.safeIncreaseAllowance(address(store),regularFee.rawValue) (PerpetualCreator.sol#3013)\n\t\t- store.payOracleFeesErc20(address(collateralCurrency),regularFee) (PerpetualCreator.sol#3014)\n\t\t- collateralCurrency.safeTransfer(msg.sender,latePenalty.rawValue) (PerpetualCreator.sol#3018)\n\tExternal calls sending eth:\n\t- fees() (PerpetualCreator.sol#4973)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualCreator.sol#1780)\n\tState variables written after the call(s):\n\t- emergencyShutdownPrice = _getOracleEmergencyShutdownPrice() (PerpetualCreator.sol#4979)\n\t- delete positions[msg.sender] (PerpetualCreator.sol#5007)\n\t- totalTokensOutstanding = totalTokensOutstanding.sub(tokensToRedeem) (PerpetualCreator.sol#5018)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "FeePayer",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualCreator.sol",
            "function": "_payFinalFees",
            "impact": "Low",
            "line": 3040,
            "line_end": 3064,
            "message": "Reentrancy in FeePayer._payFinalFees(address,FixedPoint.Unsigned) (PerpetualCreator.sol#3040-3064):\n\tExternal calls:\n\t- collateralCurrency.safeTransferFrom(payer,address(this),amount.rawValue) (PerpetualCreator.sol#3047)\n\tEvent emitted after the call(s):\n\t- FinalFeesPaid(amount.rawValue) (PerpetualCreator.sol#3059)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "ConfigStore",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualCreator.sol",
            "function": "_pendingProposalPassed",
            "impact": "Low",
            "line": 6069,
            "line_end": 6071,
            "message": "ConfigStore._pendingProposalPassed() (PerpetualCreator.sol#6069-6071) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- (pendingPassedTimestamp != 0 && pendingPassedTimestamp <= getCurrentTime()) (PerpetualCreator.sol#6070)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "OptimisticOracle",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualCreator.sol",
            "function": "getState",
            "impact": "Low",
            "line": 4066,
            "line_end": 4094,
            "message": "OptimisticOracle.getState(address,bytes32,uint256,bytes) (PerpetualCreator.sol#4066-4094) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- request.expirationTime <= getCurrentTime() (PerpetualCreator.sol#4087)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "PerpetualPositionManager",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualCreator.sol",
            "function": "_isEmergencyShutdown",
            "impact": "Low",
            "line": 5261,
            "line_end": 5264,
            "message": "PerpetualPositionManager._isEmergencyShutdown() (PerpetualCreator.sol#5261-5264) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(emergencyShutdownTimestamp != 0) (PerpetualCreator.sol#5263)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "FundingRateApplier",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualCreator.sol",
            "function": "proposeNewRate",
            "impact": "Low",
            "line": 4357,
            "line_end": 4406,
            "message": "FundingRateApplier.proposeNewRate(FixedPoint.Signed,uint256) (PerpetualCreator.sol#4357-4406) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(fundingRate.proposalTime == 0,Proposal in progress) (PerpetualCreator.sol#4363)\n\t- require(bool,string)(timestamp > updateTime && timestamp >= currentTime.sub(1800) && timestamp <= currentTime.add(90),Invalid proposal time) (PerpetualCreator.sol#4369-4372)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "PerpetualPositionManager",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualCreator.sol",
            "function": "_notEmergencyShutdown",
            "impact": "Low",
            "line": 5256,
            "line_end": 5259,
            "message": "PerpetualPositionManager._notEmergencyShutdown() (PerpetualCreator.sol#5256-5259) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(emergencyShutdownTimestamp == 0) (PerpetualCreator.sol#5258)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "PerpetualLiquidatable",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualCreator.sol",
            "function": "createLiquidation",
            "impact": "Low",
            "line": 5519,
            "line_end": 5651,
            "message": "PerpetualLiquidatable.createLiquidation(address,FixedPoint.Unsigned,FixedPoint.Unsigned,FixedPoint.Unsigned,uint256) (PerpetualCreator.sol#5519-5651) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(getCurrentTime() <= deadline,Mined after deadline) (PerpetualCreator.sol#5537)\n\t- require(bool,string)(maxCollateralPerToken.mul(startTokens).isGreaterThanOrEqual(startCollateralNetOfWithdrawal),CR is more than max liq. price) (PerpetualCreator.sol#5558-5561)\n\t- require(bool,string)(minCollateralPerToken.mul(startTokens).isLessThanOrEqual(startCollateralNetOfWithdrawal),CR is less than min liq. price) (PerpetualCreator.sol#5563-5566)\n\t- positionToLiquidate.withdrawalRequestPassTimestamp > 0 && positionToLiquidate.withdrawalRequestPassTimestamp > getCurrentTime() && tokensLiquidated.isGreaterThanOrEqual(griefingThreshold) (PerpetualCreator.sol#5628-5630)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "PerpetualLiquidatable",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualCreator.sol",
            "function": "_withdrawable",
            "impact": "Low",
            "line": 5894,
            "line_end": 5904,
            "message": "PerpetualLiquidatable._withdrawable(uint256,address) (PerpetualCreator.sol#5894-5904) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)((state > Status.PreDispute) || ((_getLiquidationExpiry(liquidation) <= getCurrentTime()) && (state == Status.PreDispute)),Liquidation not withdrawable) (PerpetualCreator.sol#5899-5903)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "FeePayer",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualCreator.sol",
            "function": "payRegularFees",
            "impact": "Low",
            "line": 2970,
            "line_end": 3021,
            "message": "FeePayer.payRegularFees() (PerpetualCreator.sol#2970-3021) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- lastPaymentTime == time (PerpetualCreator.sol#2984)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "PerpetualPositionManager",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualCreator.sol",
            "function": "_reduceSponsorPosition",
            "impact": "Low",
            "line": 5107,
            "line_end": 5139,
            "message": "PerpetualPositionManager._reduceSponsorPosition(address,FixedPoint.Unsigned,FixedPoint.Unsigned,FixedPoint.Unsigned) (PerpetualCreator.sol#5107-5139) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- tokensToRemove.isEqual(positionData.tokensOutstanding) && _getFeeAdjustedCollateral(positionData.rawCollateral).isEqual(collateralToRemove) (PerpetualCreator.sol#5117-5118)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "PerpetualLiquidatable",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualCreator.sol",
            "function": "_disputable",
            "impact": "Low",
            "line": 5886,
            "line_end": 5892,
            "message": "PerpetualLiquidatable._disputable(uint256,address) (PerpetualCreator.sol#5886-5892) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)((getCurrentTime() < _getLiquidationExpiry(liquidation)) && (liquidation.state == Status.PreDispute),Liquidation not disputable) (PerpetualCreator.sol#5888-5891)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "PerpetualPositionManager",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualCreator.sol",
            "function": "requestWithdrawal",
            "impact": "Low",
            "line": 4776,
            "line_end": 4794,
            "message": "PerpetualPositionManager.requestWithdrawal(FixedPoint.Unsigned) (PerpetualCreator.sol#4776-4794) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(collateralAmount.isGreaterThan(0) && collateralAmount.isLessThanOrEqual(_getFeeAdjustedCollateral(positionData.rawCollateral)),Invalid collateral amount) (PerpetualCreator.sol#4783-4787)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "PerpetualPositionManager",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualCreator.sol",
            "function": "withdrawPassedRequest",
            "impact": "Low",
            "line": 4803,
            "line_end": 4834,
            "message": "PerpetualPositionManager.withdrawPassedRequest() (PerpetualCreator.sol#4803-4834) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(positionData.withdrawalRequestPassTimestamp != 0 && positionData.withdrawalRequestPassTimestamp <= getCurrentTime(),Invalid withdraw request) (PerpetualCreator.sol#4811-4815)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "PerpetualPositionManager",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualCreator.sol",
            "function": "create",
            "impact": "Low",
            "line": 4860,
            "line_end": 4898,
            "message": "PerpetualPositionManager.create(FixedPoint.Unsigned,FixedPoint.Unsigned) (PerpetualCreator.sol#4860-4898) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)((_checkCollateralization(_getFeeAdjustedCollateral(positionData.rawCollateral).add(collateralAmount),positionData.tokensOutstanding.add(numTokens)) || _checkCollateralization(collateralAmount,numTokens)),Insufficient collateral) (PerpetualCreator.sol#4869-4875)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "FundingRateApplier",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualCreator.sol",
            "function": "_getLatestFundingRate",
            "impact": "Low",
            "line": 4427,
            "line_end": 4472,
            "message": "FundingRateApplier._getLatestFundingRate() (PerpetualCreator.sol#4427-4472) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- proposalTime != 0 (PerpetualCreator.sol#4429)\n\t- proposalTime >= lastUpdateTime (PerpetualCreator.sol#4443)\n\t- request.disputer == address(0) (PerpetualCreator.sol#4449)\n\t- optimisticOracle.getRequest(address(this),identifier,proposalTime,ancillaryData).disputer != address(0) (PerpetualCreator.sol#4464-4465)\n",
            "name": "timestamp",
            "check": "FP"
        }
    ],
    "infos": [],
    "parser": {
        "id": "slither-0.10.0",
        "mode": "solidity",
        "version": "2024/04/30"
    }
}