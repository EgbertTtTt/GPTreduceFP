{
    "errors": [],
    "fails": [],
    "findings": [
        {
            "confidence": "Medium",
            "contract": "PerpetualPositionManager",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualLiquidatable.sol",
            "function": "withdraw",
            "impact": "High",
            "line": 3733,
            "line_end": 3755,
            "message": "Reentrancy in PerpetualPositionManager.withdraw(FixedPoint.Unsigned) (PerpetualLiquidatable.sol#3733-3755):\n\tExternal calls:\n\t- fees() (PerpetualLiquidatable.sol#3737)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (PerpetualLiquidatable.sol#537)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualLiquidatable.sol#405)\n\t\t- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (PerpetualLiquidatable.sol#3422-3455)\n\t\t- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (PerpetualLiquidatable.sol#3440)\n\t\t- collateralCurrency.safeIncreaseAllowance(address(store),regularFee.rawValue) (PerpetualLiquidatable.sol#1832)\n\t\t- store.payOracleFeesErc20(address(collateralCurrency),regularFee) (PerpetualLiquidatable.sol#1833)\n\t\t- collateralCurrency.safeTransfer(msg.sender,latePenalty.rawValue) (PerpetualLiquidatable.sol#1837)\n\tExternal calls sending eth:\n\t- fees() (PerpetualLiquidatable.sol#3737)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualLiquidatable.sol#405)\n\tState variables written after the call(s):\n\t- nonReentrant() (PerpetualLiquidatable.sol#3738)\n\t\t- _notEntered = false (PerpetualLiquidatable.sol#1537)\n\t\t- _notEntered = true (PerpetualLiquidatable.sol#1543)\n\tLockable._notEntered (PerpetualLiquidatable.sol#1492) can be used in cross function reentrancies:\n\t- Lockable._postEntranceReset() (PerpetualLiquidatable.sol#1540-1544)\n\t- Lockable._preEntranceCheck() (PerpetualLiquidatable.sol#1530-1533)\n\t- Lockable._preEntranceSet() (PerpetualLiquidatable.sol#1535-1538)\n",
            "name": "reentrancy-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "PerpetualLiquidatable",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualLiquidatable.sol",
            "function": "withdrawLiquidation",
            "impact": "High",
            "line": 4698,
            "line_end": 4789,
            "message": "Reentrancy in PerpetualLiquidatable.withdrawLiquidation(uint256,address) (PerpetualLiquidatable.sol#4698-4789):\n\tExternal calls:\n\t- fees() (PerpetualLiquidatable.sol#4701)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (PerpetualLiquidatable.sol#537)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualLiquidatable.sol#405)\n\t\t- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (PerpetualLiquidatable.sol#3422-3455)\n\t\t- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (PerpetualLiquidatable.sol#3440)\n\t\t- collateralCurrency.safeIncreaseAllowance(address(store),regularFee.rawValue) (PerpetualLiquidatable.sol#1832)\n\t\t- store.payOracleFeesErc20(address(collateralCurrency),regularFee) (PerpetualLiquidatable.sol#1833)\n\t\t- collateralCurrency.safeTransfer(msg.sender,latePenalty.rawValue) (PerpetualLiquidatable.sol#1837)\n\tExternal calls sending eth:\n\t- fees() (PerpetualLiquidatable.sol#4701)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualLiquidatable.sol#405)\n\tState variables written after the call(s):\n\t- nonReentrant() (PerpetualLiquidatable.sol#4702)\n\t\t- _notEntered = false (PerpetualLiquidatable.sol#1537)\n\t\t- _notEntered = true (PerpetualLiquidatable.sol#1543)\n\tLockable._notEntered (PerpetualLiquidatable.sol#1492) can be used in cross function reentrancies:\n\t- Lockable._postEntranceReset() (PerpetualLiquidatable.sol#1540-1544)\n\t- Lockable._preEntranceCheck() (PerpetualLiquidatable.sol#1530-1533)\n\t- Lockable._preEntranceSet() (PerpetualLiquidatable.sol#1535-1538)\n",
            "name": "reentrancy-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "PerpetualLiquidatable",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualLiquidatable.sol",
            "function": "withdrawLiquidation",
            "impact": "High",
            "line": 4698,
            "line_end": 4789,
            "message": "Reentrancy in PerpetualLiquidatable.withdrawLiquidation(uint256,address) (PerpetualLiquidatable.sol#4698-4789):\n\tExternal calls:\n\t- collateralCurrency.safeTransfer(liquidation.disputer,rewards.paidToDisputer.rawValue) (PerpetualLiquidatable.sol#4750)\n\t- collateralCurrency.safeTransfer(liquidation.liquidator,rewards.paidToLiquidator.rawValue) (PerpetualLiquidatable.sol#4751)\n\t- collateralCurrency.safeTransfer(liquidation.sponsor,rewards.paidToSponsor.rawValue) (PerpetualLiquidatable.sol#4752)\n\t- collateralCurrency.safeTransfer(liquidation.liquidator,rewards.paidToLiquidator.rawValue) (PerpetualLiquidatable.sol#4762)\n\t- collateralCurrency.safeTransfer(liquidation.liquidator,rewards.paidToLiquidator.rawValue) (PerpetualLiquidatable.sol#4773)\n\t- fees() (PerpetualLiquidatable.sol#4701)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (PerpetualLiquidatable.sol#537)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualLiquidatable.sol#405)\n\t\t- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (PerpetualLiquidatable.sol#3422-3455)\n\t\t- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (PerpetualLiquidatable.sol#3440)\n\t\t- collateralCurrency.safeIncreaseAllowance(address(store),regularFee.rawValue) (PerpetualLiquidatable.sol#1832)\n\t\t- store.payOracleFeesErc20(address(collateralCurrency),regularFee) (PerpetualLiquidatable.sol#1833)\n\t\t- collateralCurrency.safeTransfer(msg.sender,latePenalty.rawValue) (PerpetualLiquidatable.sol#1837)\n\tExternal calls sending eth:\n\t- fees() (PerpetualLiquidatable.sol#4701)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualLiquidatable.sol#405)\n\tState variables written after the call(s):\n\t- delete liquidations[sponsor][liquidationId] (PerpetualLiquidatable.sol#4786)\n\tPerpetualLiquidatable.liquidations (PerpetualLiquidatable.sol#4375) can be used in cross function reentrancies:\n\t- PerpetualLiquidatable.getLiquidations(address) (PerpetualLiquidatable.sol#4796-4803)\n\t- PerpetualLiquidatable.liquidations (PerpetualLiquidatable.sol#4375)\n",
            "name": "reentrancy-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "PerpetualPositionManager",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualLiquidatable.sol",
            "function": "create",
            "impact": "High",
            "line": 3846,
            "line_end": 3884,
            "message": "Reentrancy in PerpetualPositionManager.create(FixedPoint.Unsigned,FixedPoint.Unsigned) (PerpetualLiquidatable.sol#3846-3884):\n\tExternal calls:\n\t- fees() (PerpetualLiquidatable.sol#3849)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (PerpetualLiquidatable.sol#537)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualLiquidatable.sol#405)\n\t\t- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (PerpetualLiquidatable.sol#3422-3455)\n\t\t- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (PerpetualLiquidatable.sol#3440)\n\t\t- collateralCurrency.safeIncreaseAllowance(address(store),regularFee.rawValue) (PerpetualLiquidatable.sol#1832)\n\t\t- store.payOracleFeesErc20(address(collateralCurrency),regularFee) (PerpetualLiquidatable.sol#1833)\n\t\t- collateralCurrency.safeTransfer(msg.sender,latePenalty.rawValue) (PerpetualLiquidatable.sol#1837)\n\tExternal calls sending eth:\n\t- fees() (PerpetualLiquidatable.sol#3849)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualLiquidatable.sol#405)\n\tState variables written after the call(s):\n\t- nonReentrant() (PerpetualLiquidatable.sol#3850)\n\t\t- _notEntered = false (PerpetualLiquidatable.sol#1537)\n\t\t- _notEntered = true (PerpetualLiquidatable.sol#1543)\n\tLockable._notEntered (PerpetualLiquidatable.sol#1492) can be used in cross function reentrancies:\n\t- Lockable._postEntranceReset() (PerpetualLiquidatable.sol#1540-1544)\n\t- Lockable._preEntranceCheck() (PerpetualLiquidatable.sol#1530-1533)\n\t- Lockable._preEntranceSet() (PerpetualLiquidatable.sol#1535-1538)\n",
            "name": "reentrancy-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "PerpetualPositionManager",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualLiquidatable.sol",
            "function": "settleEmergencyShutdown",
            "impact": "High",
            "line": 3956,
            "line_end": 4012,
            "message": "Reentrancy in PerpetualPositionManager.settleEmergencyShutdown() (PerpetualLiquidatable.sol#3956-4012):\n\tExternal calls:\n\t- fees() (PerpetualLiquidatable.sol#3959)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (PerpetualLiquidatable.sol#537)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualLiquidatable.sol#405)\n\t\t- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (PerpetualLiquidatable.sol#3422-3455)\n\t\t- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (PerpetualLiquidatable.sol#3440)\n\t\t- collateralCurrency.safeIncreaseAllowance(address(store),regularFee.rawValue) (PerpetualLiquidatable.sol#1832)\n\t\t- store.payOracleFeesErc20(address(collateralCurrency),regularFee) (PerpetualLiquidatable.sol#1833)\n\t\t- collateralCurrency.safeTransfer(msg.sender,latePenalty.rawValue) (PerpetualLiquidatable.sol#1837)\n\tExternal calls sending eth:\n\t- fees() (PerpetualLiquidatable.sol#3959)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualLiquidatable.sol#405)\n\tState variables written after the call(s):\n\t- nonReentrant() (PerpetualLiquidatable.sol#3960)\n\t\t- _notEntered = false (PerpetualLiquidatable.sol#1537)\n\t\t- _notEntered = true (PerpetualLiquidatable.sol#1543)\n\tLockable._notEntered (PerpetualLiquidatable.sol#1492) can be used in cross function reentrancies:\n\t- Lockable._postEntranceReset() (PerpetualLiquidatable.sol#1540-1544)\n\t- Lockable._preEntranceCheck() (PerpetualLiquidatable.sol#1530-1533)\n\t- Lockable._preEntranceSet() (PerpetualLiquidatable.sol#1535-1538)\n",
            "name": "reentrancy-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "PerpetualPositionManager",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualLiquidatable.sol",
            "function": "redeem",
            "impact": "High",
            "line": 3895,
            "line_end": 3932,
            "message": "Reentrancy in PerpetualPositionManager.redeem(FixedPoint.Unsigned) (PerpetualLiquidatable.sol#3895-3932):\n\tExternal calls:\n\t- fees() (PerpetualLiquidatable.sol#3899)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (PerpetualLiquidatable.sol#537)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualLiquidatable.sol#405)\n\t\t- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (PerpetualLiquidatable.sol#3422-3455)\n\t\t- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (PerpetualLiquidatable.sol#3440)\n\t\t- collateralCurrency.safeIncreaseAllowance(address(store),regularFee.rawValue) (PerpetualLiquidatable.sol#1832)\n\t\t- store.payOracleFeesErc20(address(collateralCurrency),regularFee) (PerpetualLiquidatable.sol#1833)\n\t\t- collateralCurrency.safeTransfer(msg.sender,latePenalty.rawValue) (PerpetualLiquidatable.sol#1837)\n\tExternal calls sending eth:\n\t- fees() (PerpetualLiquidatable.sol#3899)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualLiquidatable.sol#405)\n\tState variables written after the call(s):\n\t- nonReentrant() (PerpetualLiquidatable.sol#3900)\n\t\t- _notEntered = false (PerpetualLiquidatable.sol#1537)\n\t\t- _notEntered = true (PerpetualLiquidatable.sol#1543)\n\tLockable._notEntered (PerpetualLiquidatable.sol#1492) can be used in cross function reentrancies:\n\t- Lockable._postEntranceReset() (PerpetualLiquidatable.sol#1540-1544)\n\t- Lockable._preEntranceCheck() (PerpetualLiquidatable.sol#1530-1533)\n\t- Lockable._preEntranceSet() (PerpetualLiquidatable.sol#1535-1538)\n\t- amountWithdrawn = _deleteSponsorPosition(msg.sender) (PerpetualLiquidatable.sol#3912)\n\t\t- delete positions[sponsor] (PerpetualLiquidatable.sol#4138)\n\tPerpetualPositionManager.positions (PerpetualLiquidatable.sol#3564) can be used in cross function reentrancies:\n\t- PerpetualPositionManager._deleteSponsorPosition(address) (PerpetualLiquidatable.sol#4128-4144)\n\t- PerpetualPositionManager._getPositionData(address) (PerpetualLiquidatable.sol#4150-4157)\n\t- PerpetualPositionManager._onlyCollateralizedPosition(address) (PerpetualLiquidatable.sol#4235-4240)\n\t- PerpetualPositionManager.getCollateral(address) (PerpetualLiquidatable.sol#4055-4063)\n\t- PerpetualPositionManager.positions (PerpetualLiquidatable.sol#3564)\n\t- amountWithdrawn = _deleteSponsorPosition(msg.sender) (PerpetualLiquidatable.sol#3912)\n\t\t- rawTotalPositionCollateral = rawTotalPositionCollateral.sub(positionToLiquidate.rawCollateral) (PerpetualLiquidatable.sol#4134)\n\tPerpetualPositionManager.rawTotalPositionCollateral (PerpetualLiquidatable.sol#3572) can be used in cross function reentrancies:\n\t- PerpetualPositionManager._decrementCollateralBalances(PerpetualPositionManager.PositionData,FixedPoint.Unsigned) (PerpetualLiquidatable.sol#4212-4218)\n\t- PerpetualPositionManager._deleteSponsorPosition(address) (PerpetualLiquidatable.sol#4128-4144)\n\t- PerpetualPositionManager._incrementCollateralBalances(PerpetualPositionManager.PositionData,FixedPoint.Unsigned) (PerpetualLiquidatable.sol#4200-4206)\n\t- PerpetualPositionManager._pfc() (PerpetualLiquidatable.sol#4146-4148)\n\t- PerpetualPositionManager.rawTotalPositionCollateral (PerpetualLiquidatable.sol#3572)\n\t- PerpetualPositionManager.totalPositionCollateral() (PerpetualLiquidatable.sol#4069-4076)\n",
            "name": "reentrancy-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "PerpetualLiquidatable",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualLiquidatable.sol",
            "function": "createLiquidation",
            "impact": "High",
            "line": 4505,
            "line_end": 4637,
            "message": "Reentrancy in PerpetualLiquidatable.createLiquidation(address,FixedPoint.Unsigned,FixedPoint.Unsigned,FixedPoint.Unsigned,uint256) (PerpetualLiquidatable.sol#4505-4637):\n\tExternal calls:\n\t- fees() (PerpetualLiquidatable.sol#4514)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (PerpetualLiquidatable.sol#537)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualLiquidatable.sol#405)\n\t\t- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (PerpetualLiquidatable.sol#3422-3455)\n\t\t- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (PerpetualLiquidatable.sol#3440)\n\t\t- collateralCurrency.safeIncreaseAllowance(address(store),regularFee.rawValue) (PerpetualLiquidatable.sol#1832)\n\t\t- store.payOracleFeesErc20(address(collateralCurrency),regularFee) (PerpetualLiquidatable.sol#1833)\n\t\t- collateralCurrency.safeTransfer(msg.sender,latePenalty.rawValue) (PerpetualLiquidatable.sol#1837)\n\tExternal calls sending eth:\n\t- fees() (PerpetualLiquidatable.sol#4514)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualLiquidatable.sol#405)\n\tState variables written after the call(s):\n\t- nonReentrant() (PerpetualLiquidatable.sol#4515)\n\t\t- _notEntered = false (PerpetualLiquidatable.sol#1537)\n\t\t- _notEntered = true (PerpetualLiquidatable.sol#1543)\n\tLockable._notEntered (PerpetualLiquidatable.sol#1492) can be used in cross function reentrancies:\n\t- Lockable._postEntranceReset() (PerpetualLiquidatable.sol#1540-1544)\n\t- Lockable._preEntranceCheck() (PerpetualLiquidatable.sol#1530-1533)\n\t- Lockable._preEntranceSet() (PerpetualLiquidatable.sol#1535-1538)\n\t- _reduceSponsorPosition(sponsor,tokensLiquidated,lockedCollateral,withdrawalAmountToRemove) (PerpetualLiquidatable.sol#4579)\n\t\t- rawTotalPositionCollateral = rawTotalPositionCollateral.sub(positionToLiquidate.rawCollateral) (PerpetualLiquidatable.sol#4134)\n\tPerpetualPositionManager.rawTotalPositionCollateral (PerpetualLiquidatable.sol#3572) can be used in cross function reentrancies:\n\t- PerpetualPositionManager._decrementCollateralBalances(PerpetualPositionManager.PositionData,FixedPoint.Unsigned) (PerpetualLiquidatable.sol#4212-4218)\n\t- PerpetualPositionManager._deleteSponsorPosition(address) (PerpetualLiquidatable.sol#4128-4144)\n\t- PerpetualPositionManager._incrementCollateralBalances(PerpetualPositionManager.PositionData,FixedPoint.Unsigned) (PerpetualLiquidatable.sol#4200-4206)\n\t- PerpetualPositionManager._pfc() (PerpetualLiquidatable.sol#4146-4148)\n\t- PerpetualPositionManager.rawTotalPositionCollateral (PerpetualLiquidatable.sol#3572)\n\t- PerpetualPositionManager.totalPositionCollateral() (PerpetualLiquidatable.sol#4069-4076)\n",
            "name": "reentrancy-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "FundingRateApplier",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualLiquidatable.sol",
            "function": "_applyEffectiveFundingRate",
            "impact": "High",
            "line": 3465,
            "line_end": 3493,
            "message": "Reentrancy in FundingRateApplier._applyEffectiveFundingRate() (PerpetualLiquidatable.sol#3465-3493):\n\tExternal calls:\n\t- _latestFundingRatePerSecond = _getLatestFundingRate() (PerpetualLiquidatable.sol#3474)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (PerpetualLiquidatable.sol#537)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualLiquidatable.sol#405)\n\t\t- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (PerpetualLiquidatable.sol#3422-3455)\n\t\t- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (PerpetualLiquidatable.sol#3440)\n\t- (fundingRate.cumulativeMultiplier,periodRate) = _calculateEffectiveFundingRate(paymentPeriod,_getLatestFundingRate(),fundingRate.cumulativeMultiplier) (PerpetualLiquidatable.sol#3477-3481)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (PerpetualLiquidatable.sol#537)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualLiquidatable.sol#405)\n\t\t- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (PerpetualLiquidatable.sol#3422-3455)\n\t\t- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (PerpetualLiquidatable.sol#3440)\n\tExternal calls sending eth:\n\t- _latestFundingRatePerSecond = _getLatestFundingRate() (PerpetualLiquidatable.sol#3474)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualLiquidatable.sol#405)\n\t- (fundingRate.cumulativeMultiplier,periodRate) = _calculateEffectiveFundingRate(paymentPeriod,_getLatestFundingRate(),fundingRate.cumulativeMultiplier) (PerpetualLiquidatable.sol#3477-3481)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualLiquidatable.sol#405)\n\tState variables written after the call(s):\n\t- (fundingRate.cumulativeMultiplier,periodRate) = _calculateEffectiveFundingRate(paymentPeriod,_getLatestFundingRate(),fundingRate.cumulativeMultiplier) (PerpetualLiquidatable.sol#3477-3481)\n\t\t- cumulativeFeeMultiplier = cumulativeFeeMultiplier.mul(FixedPoint.fromUnscaledUint(1).sub(effectiveFee)) (PerpetualLiquidatable.sol#1954)\n\tFeePayer.cumulativeFeeMultiplier (PerpetualLiquidatable.sol#1739) can be used in cross function reentrancies:\n\t- FeePayer.constructor(address,address,address) (PerpetualLiquidatable.sol#1765-1774)\n\t- FeePayer.constructor(address,address,address) (PerpetualLiquidatable.sol#1765-1774)\n\t- FeePayer.cumulativeFeeMultiplier (PerpetualLiquidatable.sol#1739)\n\t- (fundingRate.cumulativeMultiplier,periodRate) = _calculateEffectiveFundingRate(paymentPeriod,_getLatestFundingRate(),fundingRate.cumulativeMultiplier) (PerpetualLiquidatable.sol#3477-3481)\n\t\t- fundingRate.rate = FixedPoint.Signed(price) (PerpetualLiquidatable.sol#3431)\n\t\t- fundingRate.updateTime = proposalTime (PerpetualLiquidatable.sol#3432)\n\t\t- fundingRate.proposalTime = 0 (PerpetualLiquidatable.sol#3446)\n\t\t- fundingRate.proposalTime = 0 (PerpetualLiquidatable.sol#3453)\n\tFundingRateApplier.fundingRate (PerpetualLiquidatable.sol#3257) can be used in cross function reentrancies:\n\t- FundingRateApplier.constructor(bytes32,address,address,address,FixedPoint.Unsigned,address) (PerpetualLiquidatable.sol#3303-3322)\n\t- FundingRateApplier.fundingRate (PerpetualLiquidatable.sol#3257)\n\t- fundingRate.applicationTime = currentTime (PerpetualLiquidatable.sol#3492)\n\tFundingRateApplier.fundingRate (PerpetualLiquidatable.sol#3257) can be used in cross function reentrancies:\n\t- FundingRateApplier.constructor(bytes32,address,address,address,FixedPoint.Unsigned,address) (PerpetualLiquidatable.sol#3303-3322)\n\t- FundingRateApplier.fundingRate (PerpetualLiquidatable.sol#3257)\n",
            "name": "reentrancy-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "FundingRateApplier",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualLiquidatable.sol",
            "function": "applyFundingRate",
            "impact": "High",
            "line": 3334,
            "line_end": 3336,
            "message": "Reentrancy in FundingRateApplier.applyFundingRate() (PerpetualLiquidatable.sol#3334-3336):\n\tExternal calls:\n\t- _applyEffectiveFundingRate() (PerpetualLiquidatable.sol#3335)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (PerpetualLiquidatable.sol#537)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualLiquidatable.sol#405)\n\t\t- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (PerpetualLiquidatable.sol#3422-3455)\n\t\t- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (PerpetualLiquidatable.sol#3440)\n\t- regularFees() (PerpetualLiquidatable.sol#3334)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (PerpetualLiquidatable.sol#537)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualLiquidatable.sol#405)\n\t\t- collateralCurrency.safeIncreaseAllowance(address(store),regularFee.rawValue) (PerpetualLiquidatable.sol#1832)\n\t\t- store.payOracleFeesErc20(address(collateralCurrency),regularFee) (PerpetualLiquidatable.sol#1833)\n\t\t- collateralCurrency.safeTransfer(msg.sender,latePenalty.rawValue) (PerpetualLiquidatable.sol#1837)\n\tExternal calls sending eth:\n\t- _applyEffectiveFundingRate() (PerpetualLiquidatable.sol#3335)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualLiquidatable.sol#405)\n\t- regularFees() (PerpetualLiquidatable.sol#3334)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualLiquidatable.sol#405)\n\tState variables written after the call(s):\n\t- _applyEffectiveFundingRate() (PerpetualLiquidatable.sol#3335)\n\t\t- cumulativeFeeMultiplier = cumulativeFeeMultiplier.mul(FixedPoint.fromUnscaledUint(1).sub(effectiveFee)) (PerpetualLiquidatable.sol#1954)\n\tFeePayer.cumulativeFeeMultiplier (PerpetualLiquidatable.sol#1739) can be used in cross function reentrancies:\n\t- FeePayer.constructor(address,address,address) (PerpetualLiquidatable.sol#1765-1774)\n\t- FeePayer.constructor(address,address,address) (PerpetualLiquidatable.sol#1765-1774)\n\t- FeePayer.cumulativeFeeMultiplier (PerpetualLiquidatable.sol#1739)\n",
            "name": "reentrancy-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "FundingRateApplier",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualLiquidatable.sol",
            "function": "applyFundingRate",
            "impact": "High",
            "line": 3334,
            "line_end": 3336,
            "message": "Reentrancy in FundingRateApplier.applyFundingRate() (PerpetualLiquidatable.sol#3334-3336):\n\tExternal calls:\n\t- regularFees() (PerpetualLiquidatable.sol#3334)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (PerpetualLiquidatable.sol#537)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualLiquidatable.sol#405)\n\t\t- collateralCurrency.safeIncreaseAllowance(address(store),regularFee.rawValue) (PerpetualLiquidatable.sol#1832)\n\t\t- store.payOracleFeesErc20(address(collateralCurrency),regularFee) (PerpetualLiquidatable.sol#1833)\n\t\t- collateralCurrency.safeTransfer(msg.sender,latePenalty.rawValue) (PerpetualLiquidatable.sol#1837)\n\tExternal calls sending eth:\n\t- regularFees() (PerpetualLiquidatable.sol#3334)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualLiquidatable.sol#405)\n\tState variables written after the call(s):\n\t- nonReentrant() (PerpetualLiquidatable.sol#3334)\n\t\t- _notEntered = false (PerpetualLiquidatable.sol#1537)\n\t\t- _notEntered = true (PerpetualLiquidatable.sol#1543)\n\tLockable._notEntered (PerpetualLiquidatable.sol#1492) can be used in cross function reentrancies:\n\t- Lockable._preEntranceCheck() (PerpetualLiquidatable.sol#1530-1533)\n",
            "name": "reentrancy-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "FundingRateApplier",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualLiquidatable.sol",
            "function": "proposeNewRate",
            "impact": "High",
            "line": 3343,
            "line_end": 3392,
            "message": "Reentrancy in FundingRateApplier.proposeNewRate(FixedPoint.Signed,uint256) (PerpetualLiquidatable.sol#3343-3392):\n\tExternal calls:\n\t- fees() (PerpetualLiquidatable.sol#3345)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (PerpetualLiquidatable.sol#537)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualLiquidatable.sol#405)\n\t\t- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (PerpetualLiquidatable.sol#3422-3455)\n\t\t- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (PerpetualLiquidatable.sol#3440)\n\t\t- collateralCurrency.safeIncreaseAllowance(address(store),regularFee.rawValue) (PerpetualLiquidatable.sol#1832)\n\t\t- store.payOracleFeesErc20(address(collateralCurrency),regularFee) (PerpetualLiquidatable.sol#1833)\n\t\t- collateralCurrency.safeTransfer(msg.sender,latePenalty.rawValue) (PerpetualLiquidatable.sol#1837)\n\tExternal calls sending eth:\n\t- fees() (PerpetualLiquidatable.sol#3345)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualLiquidatable.sol#405)\n\tState variables written after the call(s):\n\t- nonReentrant() (PerpetualLiquidatable.sol#3346)\n\t\t- _notEntered = false (PerpetualLiquidatable.sol#1537)\n\t\t- _notEntered = true (PerpetualLiquidatable.sol#1543)\n\tLockable._notEntered (PerpetualLiquidatable.sol#1492) can be used in cross function reentrancies:\n\t- Lockable._preEntranceCheck() (PerpetualLiquidatable.sol#1530-1533)\n\t- fundingRate.proposalTime = timestamp (PerpetualLiquidatable.sol#3361)\n\tFundingRateApplier.fundingRate (PerpetualLiquidatable.sol#3257) can be used in cross function reentrancies:\n\t- FundingRateApplier.constructor(bytes32,address,address,address,FixedPoint.Unsigned,address) (PerpetualLiquidatable.sol#3303-3322)\n\t- FundingRateApplier.fundingRate (PerpetualLiquidatable.sol#3257)\n",
            "name": "reentrancy-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "PerpetualLiquidatable",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualLiquidatable.sol",
            "function": "dispute",
            "impact": "High",
            "line": 4649,
            "line_end": 4686,
            "message": "Reentrancy in PerpetualLiquidatable.dispute(uint256,address) (PerpetualLiquidatable.sol#4649-4686):\n\tExternal calls:\n\t- _requestOraclePrice(disputedLiquidation.liquidationTime) (PerpetualLiquidatable.sol#4670)\n\t\t- _getOracle().requestPrice(priceIdentifier,requestedTime) (PerpetualLiquidatable.sol#4173)\n\t- _payFinalFees(msg.sender,disputedLiquidation.finalFee) (PerpetualLiquidatable.sol#4682)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (PerpetualLiquidatable.sol#537)\n\t\t- collateralCurrency.safeTransferFrom(payer,address(this),amount.rawValue) (PerpetualLiquidatable.sol#1866)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualLiquidatable.sol#405)\n\t\t- collateralCurrency.safeIncreaseAllowance(address(store),amount.rawValue) (PerpetualLiquidatable.sol#1881)\n\t\t- store.payOracleFeesErc20(address(collateralCurrency),amount) (PerpetualLiquidatable.sol#1882)\n\t- fees() (PerpetualLiquidatable.sol#4652)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (PerpetualLiquidatable.sol#537)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualLiquidatable.sol#405)\n\t\t- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (PerpetualLiquidatable.sol#3422-3455)\n\t\t- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (PerpetualLiquidatable.sol#3440)\n\t\t- collateralCurrency.safeIncreaseAllowance(address(store),regularFee.rawValue) (PerpetualLiquidatable.sol#1832)\n\t\t- store.payOracleFeesErc20(address(collateralCurrency),regularFee) (PerpetualLiquidatable.sol#1833)\n\t\t- collateralCurrency.safeTransfer(msg.sender,latePenalty.rawValue) (PerpetualLiquidatable.sol#1837)\n\tExternal calls sending eth:\n\t- _payFinalFees(msg.sender,disputedLiquidation.finalFee) (PerpetualLiquidatable.sol#4682)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualLiquidatable.sol#405)\n\t- fees() (PerpetualLiquidatable.sol#4652)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualLiquidatable.sol#405)\n\tState variables written after the call(s):\n\t- _payFinalFees(msg.sender,disputedLiquidation.finalFee) (PerpetualLiquidatable.sol#4682)\n\t\t- cumulativeFeeMultiplier = cumulativeFeeMultiplier.mul(FixedPoint.fromUnscaledUint(1).sub(effectiveFee)) (PerpetualLiquidatable.sol#1954)\n\tFeePayer.cumulativeFeeMultiplier (PerpetualLiquidatable.sol#1739) can be used in cross function reentrancies:\n\t- FeePayer._adjustCumulativeFeeMultiplier(FixedPoint.Unsigned,FixedPoint.Unsigned) (PerpetualLiquidatable.sol#1950-1955)\n\t- FeePayer._convertToRawCollateral(FixedPoint.Unsigned) (PerpetualLiquidatable.sol#1909-1915)\n\t- FeePayer._getFeeAdjustedCollateral(FixedPoint.Unsigned) (PerpetualLiquidatable.sol#1899-1905)\n\t- FeePayer.constructor(address,address,address) (PerpetualLiquidatable.sol#1765-1774)\n\t- FeePayer.constructor(address,address,address) (PerpetualLiquidatable.sol#1765-1774)\n\t- FeePayer.cumulativeFeeMultiplier (PerpetualLiquidatable.sol#1739)\n",
            "name": "reentrancy-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "PerpetualLiquidatable",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualLiquidatable.sol",
            "function": "dispute",
            "impact": "High",
            "line": 4649,
            "line_end": 4686,
            "message": "Reentrancy in PerpetualLiquidatable.dispute(uint256,address) (PerpetualLiquidatable.sol#4649-4686):\n\tExternal calls:\n\t- fees() (PerpetualLiquidatable.sol#4652)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (PerpetualLiquidatable.sol#537)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualLiquidatable.sol#405)\n\t\t- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (PerpetualLiquidatable.sol#3422-3455)\n\t\t- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (PerpetualLiquidatable.sol#3440)\n\t\t- collateralCurrency.safeIncreaseAllowance(address(store),regularFee.rawValue) (PerpetualLiquidatable.sol#1832)\n\t\t- store.payOracleFeesErc20(address(collateralCurrency),regularFee) (PerpetualLiquidatable.sol#1833)\n\t\t- collateralCurrency.safeTransfer(msg.sender,latePenalty.rawValue) (PerpetualLiquidatable.sol#1837)\n\tExternal calls sending eth:\n\t- fees() (PerpetualLiquidatable.sol#4652)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualLiquidatable.sol#405)\n\tState variables written after the call(s):\n\t- nonReentrant() (PerpetualLiquidatable.sol#4653)\n\t\t- _notEntered = false (PerpetualLiquidatable.sol#1537)\n\t\t- _notEntered = true (PerpetualLiquidatable.sol#1543)\n\tLockable._notEntered (PerpetualLiquidatable.sol#1492) can be used in cross function reentrancies:\n\t- Lockable._postEntranceReset() (PerpetualLiquidatable.sol#1540-1544)\n\t- Lockable._preEntranceCheck() (PerpetualLiquidatable.sol#1530-1533)\n\t- Lockable._preEntranceSet() (PerpetualLiquidatable.sol#1535-1538)\n",
            "name": "reentrancy-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "PerpetualPositionManager",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualLiquidatable.sol",
            "function": "depositTo",
            "impact": "High",
            "line": 3696,
            "line_end": 3713,
            "message": "Reentrancy in PerpetualPositionManager.depositTo(address,FixedPoint.Unsigned) (PerpetualLiquidatable.sol#3696-3713):\n\tExternal calls:\n\t- fees() (PerpetualLiquidatable.sol#3700)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (PerpetualLiquidatable.sol#537)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualLiquidatable.sol#405)\n\t\t- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (PerpetualLiquidatable.sol#3422-3455)\n\t\t- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (PerpetualLiquidatable.sol#3440)\n\t\t- collateralCurrency.safeIncreaseAllowance(address(store),regularFee.rawValue) (PerpetualLiquidatable.sol#1832)\n\t\t- store.payOracleFeesErc20(address(collateralCurrency),regularFee) (PerpetualLiquidatable.sol#1833)\n\t\t- collateralCurrency.safeTransfer(msg.sender,latePenalty.rawValue) (PerpetualLiquidatable.sol#1837)\n\tExternal calls sending eth:\n\t- fees() (PerpetualLiquidatable.sol#3700)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualLiquidatable.sol#405)\n\tState variables written after the call(s):\n\t- nonReentrant() (PerpetualLiquidatable.sol#3701)\n\t\t- _notEntered = false (PerpetualLiquidatable.sol#1537)\n\t\t- _notEntered = true (PerpetualLiquidatable.sol#1543)\n\tLockable._notEntered (PerpetualLiquidatable.sol#1492) can be used in cross function reentrancies:\n\t- Lockable._postEntranceReset() (PerpetualLiquidatable.sol#1540-1544)\n\t- Lockable._preEntranceCheck() (PerpetualLiquidatable.sol#1530-1533)\n\t- Lockable._preEntranceSet() (PerpetualLiquidatable.sol#1535-1538)\n",
            "name": "reentrancy-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "PerpetualPositionManager",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualLiquidatable.sol",
            "function": "withdrawPassedRequest",
            "impact": "High",
            "line": 3789,
            "line_end": 3820,
            "message": "Reentrancy in PerpetualPositionManager.withdrawPassedRequest() (PerpetualLiquidatable.sol#3789-3820):\n\tExternal calls:\n\t- fees() (PerpetualLiquidatable.sol#3792)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (PerpetualLiquidatable.sol#537)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualLiquidatable.sol#405)\n\t\t- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (PerpetualLiquidatable.sol#3422-3455)\n\t\t- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (PerpetualLiquidatable.sol#3440)\n\t\t- collateralCurrency.safeIncreaseAllowance(address(store),regularFee.rawValue) (PerpetualLiquidatable.sol#1832)\n\t\t- store.payOracleFeesErc20(address(collateralCurrency),regularFee) (PerpetualLiquidatable.sol#1833)\n\t\t- collateralCurrency.safeTransfer(msg.sender,latePenalty.rawValue) (PerpetualLiquidatable.sol#1837)\n\tExternal calls sending eth:\n\t- fees() (PerpetualLiquidatable.sol#3792)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualLiquidatable.sol#405)\n\tState variables written after the call(s):\n\t- nonReentrant() (PerpetualLiquidatable.sol#3793)\n\t\t- _notEntered = false (PerpetualLiquidatable.sol#1537)\n\t\t- _notEntered = true (PerpetualLiquidatable.sol#1543)\n\tLockable._notEntered (PerpetualLiquidatable.sol#1492) can be used in cross function reentrancies:\n\t- Lockable._postEntranceReset() (PerpetualLiquidatable.sol#1540-1544)\n\t- Lockable._preEntranceCheck() (PerpetualLiquidatable.sol#1530-1533)\n\t- Lockable._preEntranceSet() (PerpetualLiquidatable.sol#1535-1538)\n",
            "name": "reentrancy-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "PerpetualPositionManager",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualLiquidatable.sol",
            "function": "emergencyShutdown",
            "impact": "High",
            "line": 4025,
            "line_end": 4033,
            "message": "Reentrancy in PerpetualPositionManager.emergencyShutdown() (PerpetualLiquidatable.sol#4025-4033):\n\tExternal calls:\n\t- fees() (PerpetualLiquidatable.sol#4025)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (PerpetualLiquidatable.sol#537)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualLiquidatable.sol#405)\n\t\t- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (PerpetualLiquidatable.sol#3422-3455)\n\t\t- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (PerpetualLiquidatable.sol#3440)\n\t\t- collateralCurrency.safeIncreaseAllowance(address(store),regularFee.rawValue) (PerpetualLiquidatable.sol#1832)\n\t\t- store.payOracleFeesErc20(address(collateralCurrency),regularFee) (PerpetualLiquidatable.sol#1833)\n\t\t- collateralCurrency.safeTransfer(msg.sender,latePenalty.rawValue) (PerpetualLiquidatable.sol#1837)\n\tExternal calls sending eth:\n\t- fees() (PerpetualLiquidatable.sol#4025)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualLiquidatable.sol#405)\n\tState variables written after the call(s):\n\t- nonReentrant() (PerpetualLiquidatable.sol#4025)\n\t\t- _notEntered = false (PerpetualLiquidatable.sol#1537)\n\t\t- _notEntered = true (PerpetualLiquidatable.sol#1543)\n\tLockable._notEntered (PerpetualLiquidatable.sol#1492) can be used in cross function reentrancies:\n\t- Lockable._postEntranceReset() (PerpetualLiquidatable.sol#1540-1544)\n\t- Lockable._preEntranceCheck() (PerpetualLiquidatable.sol#1530-1533)\n\t- Lockable._preEntranceSet() (PerpetualLiquidatable.sol#1535-1538)\n\t- emergencyShutdownTimestamp = getCurrentTime() (PerpetualLiquidatable.sol#4029)\n\tFundingRateApplier.emergencyShutdownTimestamp (PerpetualLiquidatable.sol#3260) can be used in cross function reentrancies:\n\t- FundingRateApplier._applyEffectiveFundingRate() (PerpetualLiquidatable.sol#3465-3493)\n\t- PerpetualPositionManager._notEmergencyShutdown() (PerpetualLiquidatable.sol#4242-4245)\n\t- FundingRateApplier.constructor(bytes32,address,address,address,FixedPoint.Unsigned,address) (PerpetualLiquidatable.sol#3303-3322)\n\t- FundingRateApplier.constructor(bytes32,address,address,address,FixedPoint.Unsigned,address) (PerpetualLiquidatable.sol#3303-3322)\n\t- FundingRateApplier.emergencyShutdownTimestamp (PerpetualLiquidatable.sol#3260)\n",
            "name": "reentrancy-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "FundingRateApplier",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualLiquidatable.sol",
            "function": "_getLatestFundingRate",
            "impact": "Medium",
            "line": 3413,
            "line_end": 3458,
            "message": "Reentrancy in FundingRateApplier._getLatestFundingRate() (PerpetualLiquidatable.sol#3413-3458):\n\tExternal calls:\n\t- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (PerpetualLiquidatable.sol#3422-3455)\n\tState variables written after the call(s):\n\t- fundingRate.rate = FixedPoint.Signed(price) (PerpetualLiquidatable.sol#3431)\n\tFundingRateApplier.fundingRate (PerpetualLiquidatable.sol#3257) can be used in cross function reentrancies:\n\t- FundingRateApplier.constructor(bytes32,address,address,address,FixedPoint.Unsigned,address) (PerpetualLiquidatable.sol#3303-3322)\n\t- FundingRateApplier.fundingRate (PerpetualLiquidatable.sol#3257)\n\t- fundingRate.updateTime = proposalTime (PerpetualLiquidatable.sol#3432)\n\tFundingRateApplier.fundingRate (PerpetualLiquidatable.sol#3257) can be used in cross function reentrancies:\n\t- FundingRateApplier.constructor(bytes32,address,address,address,FixedPoint.Unsigned,address) (PerpetualLiquidatable.sol#3303-3322)\n\t- FundingRateApplier.fundingRate (PerpetualLiquidatable.sol#3257)\n\t- fundingRate.proposalTime = 0 (PerpetualLiquidatable.sol#3453)\n\tFundingRateApplier.fundingRate (PerpetualLiquidatable.sol#3257) can be used in cross function reentrancies:\n\t- FundingRateApplier.constructor(bytes32,address,address,address,FixedPoint.Unsigned,address) (PerpetualLiquidatable.sol#3303-3322)\n\t- FundingRateApplier.fundingRate (PerpetualLiquidatable.sol#3257)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "FundingRateApplier",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualLiquidatable.sol",
            "function": "_getLatestFundingRate",
            "impact": "Medium",
            "line": 3413,
            "line_end": 3458,
            "message": "Reentrancy in FundingRateApplier._getLatestFundingRate() (PerpetualLiquidatable.sol#3413-3458):\n\tExternal calls:\n\t- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (PerpetualLiquidatable.sol#3422-3455)\n\t- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (PerpetualLiquidatable.sol#3440)\n\tState variables written after the call(s):\n\t- fundingRate.proposalTime = 0 (PerpetualLiquidatable.sol#3446)\n\tFundingRateApplier.fundingRate (PerpetualLiquidatable.sol#3257) can be used in cross function reentrancies:\n\t- FundingRateApplier.constructor(bytes32,address,address,address,FixedPoint.Unsigned,address) (PerpetualLiquidatable.sol#3303-3322)\n\t- FundingRateApplier.fundingRate (PerpetualLiquidatable.sol#3257)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "FundingRateApplier",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualLiquidatable.sol",
            "function": "proposeNewRate",
            "impact": "Medium",
            "line": 3343,
            "line_end": 3392,
            "message": "FundingRateApplier.proposeNewRate(FixedPoint.Signed,uint256) (PerpetualLiquidatable.sol#3343-3392) ignores return value by optimisticOracle.proposePriceFor(msg.sender,address(this),identifier,timestamp,ancillaryData,rate.rawValue) (PerpetualLiquidatable.sol#3384-3391)\n",
            "name": "unused-return",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "FundingRateApplier",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualLiquidatable.sol",
            "function": "proposeNewRate",
            "impact": "Medium",
            "line": 3343,
            "line_end": 3392,
            "message": "FundingRateApplier.proposeNewRate(FixedPoint.Signed,uint256) (PerpetualLiquidatable.sol#3343-3392) ignores return value by optimisticOracle.requestPrice(identifier,timestamp,ancillaryData,collateralCurrency,0) (PerpetualLiquidatable.sol#3368)\n",
            "name": "unused-return",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "PerpetualPositionManager",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualLiquidatable.sol",
            "function": "settleEmergencyShutdown",
            "impact": "Low",
            "line": 3956,
            "line_end": 4012,
            "message": "Reentrancy in PerpetualPositionManager.settleEmergencyShutdown() (PerpetualLiquidatable.sol#3956-4012):\n\tExternal calls:\n\t- fees() (PerpetualLiquidatable.sol#3959)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (PerpetualLiquidatable.sol#537)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualLiquidatable.sol#405)\n\t\t- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (PerpetualLiquidatable.sol#3422-3455)\n\t\t- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (PerpetualLiquidatable.sol#3440)\n\t\t- collateralCurrency.safeIncreaseAllowance(address(store),regularFee.rawValue) (PerpetualLiquidatable.sol#1832)\n\t\t- store.payOracleFeesErc20(address(collateralCurrency),regularFee) (PerpetualLiquidatable.sol#1833)\n\t\t- collateralCurrency.safeTransfer(msg.sender,latePenalty.rawValue) (PerpetualLiquidatable.sol#1837)\n\tExternal calls sending eth:\n\t- fees() (PerpetualLiquidatable.sol#3959)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualLiquidatable.sol#405)\n\tState variables written after the call(s):\n\t- emergencyShutdownPrice = _getOracleEmergencyShutdownPrice() (PerpetualLiquidatable.sol#3965)\n\t- delete positions[msg.sender] (PerpetualLiquidatable.sol#3993)\n\t- totalTokensOutstanding = totalTokensOutstanding.sub(tokensToRedeem) (PerpetualLiquidatable.sol#4004)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "PerpetualLiquidatable",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualLiquidatable.sol",
            "function": "createLiquidation",
            "impact": "Low",
            "line": 4505,
            "line_end": 4637,
            "message": "Reentrancy in PerpetualLiquidatable.createLiquidation(address,FixedPoint.Unsigned,FixedPoint.Unsigned,FixedPoint.Unsigned,uint256) (PerpetualLiquidatable.sol#4505-4637):\n\tExternal calls:\n\t- fees() (PerpetualLiquidatable.sol#4514)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (PerpetualLiquidatable.sol#537)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualLiquidatable.sol#405)\n\t\t- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (PerpetualLiquidatable.sol#3422-3455)\n\t\t- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (PerpetualLiquidatable.sol#3440)\n\t\t- collateralCurrency.safeIncreaseAllowance(address(store),regularFee.rawValue) (PerpetualLiquidatable.sol#1832)\n\t\t- store.payOracleFeesErc20(address(collateralCurrency),regularFee) (PerpetualLiquidatable.sol#1833)\n\t\t- collateralCurrency.safeTransfer(msg.sender,latePenalty.rawValue) (PerpetualLiquidatable.sol#1837)\n\tExternal calls sending eth:\n\t- fees() (PerpetualLiquidatable.sol#4514)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualLiquidatable.sol#405)\n\tState variables written after the call(s):\n\t- liquidations[sponsor].push(LiquidationData({sponsor:sponsor,liquidator:msg.sender,state:Status.PreDispute,liquidationTime:getCurrentTime(),tokensOutstanding:_getFundingRateAppliedTokenDebt(tokensLiquidated),lockedCollateral:lockedCollateral,liquidatedCollateral:liquidatedCollateral,rawUnitCollateral:_convertToRawCollateral(FixedPoint.fromUnscaledUint(1)),disputer:address(0),settlementPrice:FixedPoint.fromUnscaledUint(0),finalFee:finalFeeBond})) (PerpetualLiquidatable.sol#4589-4603)\n\t- _reduceSponsorPosition(sponsor,tokensLiquidated,lockedCollateral,withdrawalAmountToRemove) (PerpetualLiquidatable.sol#4579)\n\t\t- delete positions[sponsor] (PerpetualLiquidatable.sol#4138)\n\t- _reduceSponsorPosition(sponsor,tokensLiquidated,lockedCollateral,withdrawalAmountToRemove) (PerpetualLiquidatable.sol#4579)\n\t\t- totalTokensOutstanding = totalTokensOutstanding.sub(positionToLiquidate.tokensOutstanding) (PerpetualLiquidatable.sol#4135)\n\t\t- totalTokensOutstanding = totalTokensOutstanding.sub(tokensToRemove) (PerpetualLiquidatable.sol#4124)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "PerpetualPositionManager",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualLiquidatable.sol",
            "function": "redeem",
            "impact": "Low",
            "line": 3895,
            "line_end": 3932,
            "message": "Reentrancy in PerpetualPositionManager.redeem(FixedPoint.Unsigned) (PerpetualLiquidatable.sol#3895-3932):\n\tExternal calls:\n\t- fees() (PerpetualLiquidatable.sol#3899)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (PerpetualLiquidatable.sol#537)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualLiquidatable.sol#405)\n\t\t- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (PerpetualLiquidatable.sol#3422-3455)\n\t\t- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (PerpetualLiquidatable.sol#3440)\n\t\t- collateralCurrency.safeIncreaseAllowance(address(store),regularFee.rawValue) (PerpetualLiquidatable.sol#1832)\n\t\t- store.payOracleFeesErc20(address(collateralCurrency),regularFee) (PerpetualLiquidatable.sol#1833)\n\t\t- collateralCurrency.safeTransfer(msg.sender,latePenalty.rawValue) (PerpetualLiquidatable.sol#1837)\n\tExternal calls sending eth:\n\t- fees() (PerpetualLiquidatable.sol#3899)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualLiquidatable.sol#405)\n\tState variables written after the call(s):\n\t- amountWithdrawn = _deleteSponsorPosition(msg.sender) (PerpetualLiquidatable.sol#3912)\n\t\t- totalTokensOutstanding = totalTokensOutstanding.sub(positionToLiquidate.tokensOutstanding) (PerpetualLiquidatable.sol#4135)\n\t- totalTokensOutstanding = totalTokensOutstanding.sub(numTokens) (PerpetualLiquidatable.sol#3923)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "PerpetualPositionManager",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualLiquidatable.sol",
            "function": "create",
            "impact": "Low",
            "line": 3846,
            "line_end": 3884,
            "message": "Reentrancy in PerpetualPositionManager.create(FixedPoint.Unsigned,FixedPoint.Unsigned) (PerpetualLiquidatable.sol#3846-3884):\n\tExternal calls:\n\t- fees() (PerpetualLiquidatable.sol#3849)\n\t\t- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (PerpetualLiquidatable.sol#537)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualLiquidatable.sol#405)\n\t\t- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (PerpetualLiquidatable.sol#3422-3455)\n\t\t- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (PerpetualLiquidatable.sol#3440)\n\t\t- collateralCurrency.safeIncreaseAllowance(address(store),regularFee.rawValue) (PerpetualLiquidatable.sol#1832)\n\t\t- store.payOracleFeesErc20(address(collateralCurrency),regularFee) (PerpetualLiquidatable.sol#1833)\n\t\t- collateralCurrency.safeTransfer(msg.sender,latePenalty.rawValue) (PerpetualLiquidatable.sol#1837)\n\tExternal calls sending eth:\n\t- fees() (PerpetualLiquidatable.sol#3849)\n\t\t- (success,returndata) = target.call{value: value}(data) (PerpetualLiquidatable.sol#405)\n\tState variables written after the call(s):\n\t- positionData.tokensOutstanding = positionData.tokensOutstanding.add(numTokens) (PerpetualLiquidatable.sol#3873)\n\t- totalTokensOutstanding = totalTokensOutstanding.add(numTokens) (PerpetualLiquidatable.sol#3875)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "FundingRateApplier",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualLiquidatable.sol",
            "function": "_getLatestFundingRate",
            "impact": "Low",
            "line": 3413,
            "line_end": 3458,
            "message": "Reentrancy in FundingRateApplier._getLatestFundingRate() (PerpetualLiquidatable.sol#3413-3458):\n\tExternal calls:\n\t- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (PerpetualLiquidatable.sol#3422-3455)\n\tState variables written after the call(s):\n\t- _adjustCumulativeFeeMultiplier(reward,_pfc()) (PerpetualLiquidatable.sol#3439)\n\t\t- cumulativeFeeMultiplier = cumulativeFeeMultiplier.mul(FixedPoint.fromUnscaledUint(1).sub(effectiveFee)) (PerpetualLiquidatable.sol#1954)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "FeePayer",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualLiquidatable.sol",
            "function": "_payFinalFees",
            "impact": "Low",
            "line": 1859,
            "line_end": 1883,
            "message": "Reentrancy in FeePayer._payFinalFees(address,FixedPoint.Unsigned) (PerpetualLiquidatable.sol#1859-1883):\n\tExternal calls:\n\t- collateralCurrency.safeTransferFrom(payer,address(this),amount.rawValue) (PerpetualLiquidatable.sol#1866)\n\tEvent emitted after the call(s):\n\t- FinalFeesPaid(amount.rawValue) (PerpetualLiquidatable.sol#1878)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "PerpetualLiquidatable",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualLiquidatable.sol",
            "function": "createLiquidation",
            "impact": "Low",
            "line": 4505,
            "line_end": 4637,
            "message": "PerpetualLiquidatable.createLiquidation(address,FixedPoint.Unsigned,FixedPoint.Unsigned,FixedPoint.Unsigned,uint256) (PerpetualLiquidatable.sol#4505-4637) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(getCurrentTime() <= deadline,Mined after deadline) (PerpetualLiquidatable.sol#4523)\n\t- require(bool,string)(maxCollateralPerToken.mul(startTokens).isGreaterThanOrEqual(startCollateralNetOfWithdrawal),CR is more than max liq. price) (PerpetualLiquidatable.sol#4544-4547)\n\t- require(bool,string)(minCollateralPerToken.mul(startTokens).isLessThanOrEqual(startCollateralNetOfWithdrawal),CR is less than min liq. price) (PerpetualLiquidatable.sol#4549-4552)\n\t- positionToLiquidate.withdrawalRequestPassTimestamp > 0 && positionToLiquidate.withdrawalRequestPassTimestamp > getCurrentTime() && tokensLiquidated.isGreaterThanOrEqual(griefingThreshold) (PerpetualLiquidatable.sol#4614-4616)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "PerpetualPositionManager",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualLiquidatable.sol",
            "function": "withdrawPassedRequest",
            "impact": "Low",
            "line": 3789,
            "line_end": 3820,
            "message": "PerpetualPositionManager.withdrawPassedRequest() (PerpetualLiquidatable.sol#3789-3820) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(positionData.withdrawalRequestPassTimestamp != 0 && positionData.withdrawalRequestPassTimestamp <= getCurrentTime(),Invalid withdraw request) (PerpetualLiquidatable.sol#3797-3801)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "PerpetualLiquidatable",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualLiquidatable.sol",
            "function": "_withdrawable",
            "impact": "Low",
            "line": 4880,
            "line_end": 4890,
            "message": "PerpetualLiquidatable._withdrawable(uint256,address) (PerpetualLiquidatable.sol#4880-4890) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)((state > Status.PreDispute) || ((_getLiquidationExpiry(liquidation) <= getCurrentTime()) && (state == Status.PreDispute)),Liquidation not withdrawable) (PerpetualLiquidatable.sol#4885-4889)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "PerpetualPositionManager",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualLiquidatable.sol",
            "function": "_reduceSponsorPosition",
            "impact": "Low",
            "line": 4093,
            "line_end": 4125,
            "message": "PerpetualPositionManager._reduceSponsorPosition(address,FixedPoint.Unsigned,FixedPoint.Unsigned,FixedPoint.Unsigned) (PerpetualLiquidatable.sol#4093-4125) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- tokensToRemove.isEqual(positionData.tokensOutstanding) && _getFeeAdjustedCollateral(positionData.rawCollateral).isEqual(collateralToRemove) (PerpetualLiquidatable.sol#4103-4104)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "FundingRateApplier",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualLiquidatable.sol",
            "function": "_getLatestFundingRate",
            "impact": "Low",
            "line": 3413,
            "line_end": 3458,
            "message": "FundingRateApplier._getLatestFundingRate() (PerpetualLiquidatable.sol#3413-3458) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- proposalTime != 0 (PerpetualLiquidatable.sol#3415)\n\t- proposalTime >= lastUpdateTime (PerpetualLiquidatable.sol#3429)\n\t- request.disputer == address(0) (PerpetualLiquidatable.sol#3435)\n\t- optimisticOracle.getRequest(address(this),identifier,proposalTime,ancillaryData).disputer != address(0) (PerpetualLiquidatable.sol#3450-3451)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "PerpetualPositionManager",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualLiquidatable.sol",
            "function": "_notEmergencyShutdown",
            "impact": "Low",
            "line": 4242,
            "line_end": 4245,
            "message": "PerpetualPositionManager._notEmergencyShutdown() (PerpetualLiquidatable.sol#4242-4245) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(emergencyShutdownTimestamp == 0) (PerpetualLiquidatable.sol#4244)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "FundingRateApplier",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualLiquidatable.sol",
            "function": "proposeNewRate",
            "impact": "Low",
            "line": 3343,
            "line_end": 3392,
            "message": "FundingRateApplier.proposeNewRate(FixedPoint.Signed,uint256) (PerpetualLiquidatable.sol#3343-3392) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(fundingRate.proposalTime == 0,Proposal in progress) (PerpetualLiquidatable.sol#3349)\n\t- require(bool,string)(timestamp > updateTime && timestamp >= currentTime.sub(1800) && timestamp <= currentTime.add(90),Invalid proposal time) (PerpetualLiquidatable.sol#3355-3358)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "PerpetualLiquidatable",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualLiquidatable.sol",
            "function": "_disputable",
            "impact": "Low",
            "line": 4872,
            "line_end": 4878,
            "message": "PerpetualLiquidatable._disputable(uint256,address) (PerpetualLiquidatable.sol#4872-4878) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)((getCurrentTime() < _getLiquidationExpiry(liquidation)) && (liquidation.state == Status.PreDispute),Liquidation not disputable) (PerpetualLiquidatable.sol#4874-4877)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "PerpetualPositionManager",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualLiquidatable.sol",
            "function": "_isEmergencyShutdown",
            "impact": "Low",
            "line": 4247,
            "line_end": 4250,
            "message": "PerpetualPositionManager._isEmergencyShutdown() (PerpetualLiquidatable.sol#4247-4250) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(emergencyShutdownTimestamp != 0) (PerpetualLiquidatable.sol#4249)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "PerpetualPositionManager",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualLiquidatable.sol",
            "function": "create",
            "impact": "Low",
            "line": 3846,
            "line_end": 3884,
            "message": "PerpetualPositionManager.create(FixedPoint.Unsigned,FixedPoint.Unsigned) (PerpetualLiquidatable.sol#3846-3884) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)((_checkCollateralization(_getFeeAdjustedCollateral(positionData.rawCollateral).add(collateralAmount),positionData.tokensOutstanding.add(numTokens)) || _checkCollateralization(collateralAmount,numTokens)),Insufficient collateral) (PerpetualLiquidatable.sol#3855-3861)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "PerpetualPositionManager",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualLiquidatable.sol",
            "function": "requestWithdrawal",
            "impact": "Low",
            "line": 3762,
            "line_end": 3780,
            "message": "PerpetualPositionManager.requestWithdrawal(FixedPoint.Unsigned) (PerpetualLiquidatable.sol#3762-3780) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(collateralAmount.isGreaterThan(0) && collateralAmount.isLessThanOrEqual(_getFeeAdjustedCollateral(positionData.rawCollateral)),Invalid collateral amount) (PerpetualLiquidatable.sol#3769-3773)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "OptimisticOracle",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualLiquidatable.sol",
            "function": "getState",
            "impact": "Low",
            "line": 3052,
            "line_end": 3080,
            "message": "OptimisticOracle.getState(address,bytes32,uint256,bytes) (PerpetualLiquidatable.sol#3052-3080) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- request.expirationTime <= getCurrentTime() (PerpetualLiquidatable.sol#3073)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "FeePayer",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/openzeppelin-UMA/protocol-1631ef7ad29aaeba756ef3b9a01c667e1343df85/packages/core/contracts/financial-templates/perpetual-multiparty/PerpetualLiquidatable.sol",
            "function": "payRegularFees",
            "impact": "Low",
            "line": 1789,
            "line_end": 1840,
            "message": "FeePayer.payRegularFees() (PerpetualLiquidatable.sol#1789-1840) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- lastPaymentTime == time (PerpetualLiquidatable.sol#1803)\n",
            "name": "timestamp",
            "check": "FP"
        }
    ],
    "infos": [],
    "parser": {
        "id": "slither-0.10.0",
        "mode": "solidity",
        "version": "2024/04/30"
    }
}