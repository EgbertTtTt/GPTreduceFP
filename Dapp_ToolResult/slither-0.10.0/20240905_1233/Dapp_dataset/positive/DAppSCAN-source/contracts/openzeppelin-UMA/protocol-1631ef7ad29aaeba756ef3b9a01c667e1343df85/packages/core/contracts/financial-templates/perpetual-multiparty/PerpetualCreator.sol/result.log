'solc --version' running
'solc /sb/PerpetualCreator.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/sb' running
Compilation warnings/errors on /sb/PerpetualCreator.sol:
Warning: This declaration shadows an existing declaration.
    --> /sb/PerpetualCreator.sol:1072:5:
     |
1072 |     bytes32 public constant Registry = "Registry";
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Note: The shadowed declaration is here:
   --> /sb/PerpetualCreator.sol:876:1:
    |
876 | contract Registry is RegistryInterface, MultiRole {
    | ^ (Relevant source part starts here and spans across multiple lines).

Warning: Contract code size exceeds 24576 bytes (a limit introduced in Spurious Dragon). This contract may not be deployable on mainnet. Consider enabling the optimizer (with a low "runs" value!), turning off revert strings, or using libraries.
    --> /sb/PerpetualCreator.sol:4555:1:
     |
4555 | contract PerpetualPositionManager is FundingRateApplier {
     | ^ (Relevant source part starts here and spans across multiple lines).

Warning: Contract code size exceeds 24576 bytes (a limit introduced in Spurious Dragon). This contract may not be deployable on mainnet. Consider enabling the optimizer (with a low "runs" value!), turning off revert strings, or using libraries.
    --> /sb/PerpetualCreator.sol:5320:1:
     |
5320 | contract PerpetualLiquidatable is PerpetualPositionManager {
     | ^ (Relevant source part starts here and spans across multiple lines).

Warning: Contract code size exceeds 24576 bytes (a limit introduced in Spurious Dragon). This contract may not be deployable on mainnet. Consider enabling the optimizer (with a low "runs" value!), turning off revert strings, or using libraries.
    --> /sb/PerpetualCreator.sol:5911:1:
     |
5911 | contract Perpetual is PerpetualLiquidatable {
     | ^ (Relevant source part starts here and spans across multiple lines).

Warning: Contract code size exceeds 24576 bytes (a limit introduced in Spurious Dragon). This contract may not be deployable on mainnet. Consider enabling the optimizer (with a low "runs" value!), turning off revert strings, or using libraries.
    --> /sb/PerpetualCreator.sol:5930:1:
     |
5930 | library PerpetualLib {
     | ^ (Relevant source part starts here and spans across multiple lines).



Reentrancy in FundingRateApplier._applyEffectiveFundingRate() (../../sb/PerpetualCreator.sol#4479-4507):
	External calls:
	- _latestFundingRatePerSecond = _getLatestFundingRate() (../../sb/PerpetualCreator.sol#4488)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sb/PerpetualCreator.sol#1912)
		- (success,returndata) = target.call{value: value}(data) (../../sb/PerpetualCreator.sol#1780)
		- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (../../sb/PerpetualCreator.sol#4436-4469)
		- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (../../sb/PerpetualCreator.sol#4454)
	- (fundingRate.cumulativeMultiplier,periodRate) = _calculateEffectiveFundingRate(paymentPeriod,_getLatestFundingRate(),fundingRate.cumulativeMultiplier) (../../sb/PerpetualCreator.sol#4491-4495)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sb/PerpetualCreator.sol#1912)
		- (success,returndata) = target.call{value: value}(data) (../../sb/PerpetualCreator.sol#1780)
		- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (../../sb/PerpetualCreator.sol#4436-4469)
		- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (../../sb/PerpetualCreator.sol#4454)
	External calls sending eth:
	- _latestFundingRatePerSecond = _getLatestFundingRate() (../../sb/PerpetualCreator.sol#4488)
		- (success,returndata) = target.call{value: value}(data) (../../sb/PerpetualCreator.sol#1780)
	- (fundingRate.cumulativeMultiplier,periodRate) = _calculateEffectiveFundingRate(paymentPeriod,_getLatestFundingRate(),fundingRate.cumulativeMultiplier) (../../sb/PerpetualCreator.sol#4491-4495)
		- (success,returndata) = target.call{value: value}(data) (../../sb/PerpetualCreator.sol#1780)
	State variables written after the call(s):
	- (fundingRate.cumulativeMultiplier,periodRate) = _calculateEffectiveFundingRate(paymentPeriod,_getLatestFundingRate(),fundingRate.cumulativeMultiplier) (../../sb/PerpetualCreator.sol#4491-4495)
		- cumulativeFeeMultiplier = cumulativeFeeMultiplier.mul(FixedPoint.fromUnscaledUint(1).sub(effectiveFee)) (../../sb/PerpetualCreator.sol#3135)
	FeePayer.cumulativeFeeMultiplier (../../sb/PerpetualCreator.sol#2920) can be used in cross function reentrancies:
	- FeePayer.constructor(address,address,address) (../../sb/PerpetualCreator.sol#2946-2955)
	- FeePayer.constructor(address,address,address) (../../sb/PerpetualCreator.sol#2946-2955)
	- FeePayer.cumulativeFeeMultiplier (../../sb/PerpetualCreator.sol#2920)
	- (fundingRate.cumulativeMultiplier,periodRate) = _calculateEffectiveFundingRate(paymentPeriod,_getLatestFundingRate(),fundingRate.cumulativeMultiplier) (../../sb/PerpetualCreator.sol#4491-4495)
		- fundingRate.rate = FixedPoint.Signed(price) (../../sb/PerpetualCreator.sol#4445)
		- fundingRate.updateTime = proposalTime (../../sb/PerpetualCreator.sol#4446)
		- fundingRate.proposalTime = 0 (../../sb/PerpetualCreator.sol#4460)
		- fundingRate.proposalTime = 0 (../../sb/PerpetualCreator.sol#4467)
	FundingRateApplier.fundingRate (../../sb/PerpetualCreator.sol#4271) can be used in cross function reentrancies:
	- FundingRateApplier.constructor(bytes32,address,address,address,FixedPoint.Unsigned,address) (../../sb/PerpetualCreator.sol#4317-4336)
	- FundingRateApplier.fundingRate (../../sb/PerpetualCreator.sol#4271)
	- fundingRate.applicationTime = currentTime (../../sb/PerpetualCreator.sol#4506)
	FundingRateApplier.fundingRate (../../sb/PerpetualCreator.sol#4271) can be used in cross function reentrancies:
	- FundingRateApplier.constructor(bytes32,address,address,address,FixedPoint.Unsigned,address) (../../sb/PerpetualCreator.sol#4317-4336)
	- FundingRateApplier.fundingRate (../../sb/PerpetualCreator.sol#4271)
Reentrancy in FundingRateApplier.applyFundingRate() (../../sb/PerpetualCreator.sol#4348-4350):
	External calls:
	- _applyEffectiveFundingRate() (../../sb/PerpetualCreator.sol#4349)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sb/PerpetualCreator.sol#1912)
		- (success,returndata) = target.call{value: value}(data) (../../sb/PerpetualCreator.sol#1780)
		- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (../../sb/PerpetualCreator.sol#4436-4469)
		- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (../../sb/PerpetualCreator.sol#4454)
	- regularFees() (../../sb/PerpetualCreator.sol#4348)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sb/PerpetualCreator.sol#1912)
		- (success,returndata) = target.call{value: value}(data) (../../sb/PerpetualCreator.sol#1780)
		- collateralCurrency.safeIncreaseAllowance(address(store),regularFee.rawValue) (../../sb/PerpetualCreator.sol#3013)
		- store.payOracleFeesErc20(address(collateralCurrency),regularFee) (../../sb/PerpetualCreator.sol#3014)
		- collateralCurrency.safeTransfer(msg.sender,latePenalty.rawValue) (../../sb/PerpetualCreator.sol#3018)
	External calls sending eth:
	- _applyEffectiveFundingRate() (../../sb/PerpetualCreator.sol#4349)
		- (success,returndata) = target.call{value: value}(data) (../../sb/PerpetualCreator.sol#1780)
	- regularFees() (../../sb/PerpetualCreator.sol#4348)
		- (success,returndata) = target.call{value: value}(data) (../../sb/PerpetualCreator.sol#1780)
	State variables written after the call(s):
	- _applyEffectiveFundingRate() (../../sb/PerpetualCreator.sol#4349)
		- cumulativeFeeMultiplier = cumulativeFeeMultiplier.mul(FixedPoint.fromUnscaledUint(1).sub(effectiveFee)) (../../sb/PerpetualCreator.sol#3135)
	FeePayer.cumulativeFeeMultiplier (../../sb/PerpetualCreator.sol#2920) can be used in cross function reentrancies:
	- FeePayer.constructor(address,address,address) (../../sb/PerpetualCreator.sol#2946-2955)
	- FeePayer.constructor(address,address,address) (../../sb/PerpetualCreator.sol#2946-2955)
	- FeePayer.cumulativeFeeMultiplier (../../sb/PerpetualCreator.sol#2920)
Reentrancy in FundingRateApplier.applyFundingRate() (../../sb/PerpetualCreator.sol#4348-4350):
	External calls:
	- regularFees() (../../sb/PerpetualCreator.sol#4348)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sb/PerpetualCreator.sol#1912)
		- (success,returndata) = target.call{value: value}(data) (../../sb/PerpetualCreator.sol#1780)
		- collateralCurrency.safeIncreaseAllowance(address(store),regularFee.rawValue) (../../sb/PerpetualCreator.sol#3013)
		- store.payOracleFeesErc20(address(collateralCurrency),regularFee) (../../sb/PerpetualCreator.sol#3014)
		- collateralCurrency.safeTransfer(msg.sender,latePenalty.rawValue) (../../sb/PerpetualCreator.sol#3018)
	External calls sending eth:
	- regularFees() (../../sb/PerpetualCreator.sol#4348)
		- (success,returndata) = target.call{value: value}(data) (../../sb/PerpetualCreator.sol#1780)
	State variables written after the call(s):
	- nonReentrant() (../../sb/PerpetualCreator.sol#4348)
		- _notEntered = false (../../sb/PerpetualCreator.sol#277)
		- _notEntered = true (../../sb/PerpetualCreator.sol#283)
	Lockable._notEntered (../../sb/PerpetualCreator.sol#232) can be used in cross function reentrancies:
	- Lockable._preEntranceCheck() (../../sb/PerpetualCreator.sol#270-273)
Reentrancy in PerpetualPositionManager.create(FixedPoint.Unsigned,FixedPoint.Unsigned) (../../sb/PerpetualCreator.sol#4860-4898):
	External calls:
	- fees() (../../sb/PerpetualCreator.sol#4863)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sb/PerpetualCreator.sol#1912)
		- (success,returndata) = target.call{value: value}(data) (../../sb/PerpetualCreator.sol#1780)
		- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (../../sb/PerpetualCreator.sol#4436-4469)
		- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (../../sb/PerpetualCreator.sol#4454)
		- collateralCurrency.safeIncreaseAllowance(address(store),regularFee.rawValue) (../../sb/PerpetualCreator.sol#3013)
		- store.payOracleFeesErc20(address(collateralCurrency),regularFee) (../../sb/PerpetualCreator.sol#3014)
		- collateralCurrency.safeTransfer(msg.sender,latePenalty.rawValue) (../../sb/PerpetualCreator.sol#3018)
	External calls sending eth:
	- fees() (../../sb/PerpetualCreator.sol#4863)
		- (success,returndata) = target.call{value: value}(data) (../../sb/PerpetualCreator.sol#1780)
	State variables written after the call(s):
	- nonReentrant() (../../sb/PerpetualCreator.sol#4864)
		- _notEntered = false (../../sb/PerpetualCreator.sol#277)
		- _notEntered = true (../../sb/PerpetualCreator.sol#283)
	Lockable._notEntered (../../sb/PerpetualCreator.sol#232) can be used in cross function reentrancies:
	- Lockable._postEntranceReset() (../../sb/PerpetualCreator.sol#280-284)
	- Lockable._preEntranceCheck() (../../sb/PerpetualCreator.sol#270-273)
	- Lockable._preEntranceSet() (../../sb/PerpetualCreator.sol#275-278)
Reentrancy in PerpetualLiquidatable.createLiquidation(address,FixedPoint.Unsigned,FixedPoint.Unsigned,FixedPoint.Unsigned,uint256) (../../sb/PerpetualCreator.sol#5519-5651):
	External calls:
	- fees() (../../sb/PerpetualCreator.sol#5528)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sb/PerpetualCreator.sol#1912)
		- (success,returndata) = target.call{value: value}(data) (../../sb/PerpetualCreator.sol#1780)
		- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (../../sb/PerpetualCreator.sol#4436-4469)
		- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (../../sb/PerpetualCreator.sol#4454)
		- collateralCurrency.safeIncreaseAllowance(address(store),regularFee.rawValue) (../../sb/PerpetualCreator.sol#3013)
		- store.payOracleFeesErc20(address(collateralCurrency),regularFee) (../../sb/PerpetualCreator.sol#3014)
		- collateralCurrency.safeTransfer(msg.sender,latePenalty.rawValue) (../../sb/PerpetualCreator.sol#3018)
	External calls sending eth:
	- fees() (../../sb/PerpetualCreator.sol#5528)
		- (success,returndata) = target.call{value: value}(data) (../../sb/PerpetualCreator.sol#1780)
	State variables written after the call(s):
	- nonReentrant() (../../sb/PerpetualCreator.sol#5529)
		- _notEntered = false (../../sb/PerpetualCreator.sol#277)
		- _notEntered = true (../../sb/PerpetualCreator.sol#283)
	Lockable._notEntered (../../sb/PerpetualCreator.sol#232) can be used in cross function reentrancies:
	- Lockable._postEntranceReset() (../../sb/PerpetualCreator.sol#280-284)
	- Lockable._preEntranceCheck() (../../sb/PerpetualCreator.sol#270-273)
	- Lockable._preEntranceSet() (../../sb/PerpetualCreator.sol#275-278)
	- _reduceSponsorPosition(sponsor,tokensLiquidated,lockedCollateral,withdrawalAmountToRemove) (../../sb/PerpetualCreator.sol#5593)
		- rawTotalPositionCollateral = rawTotalPositionCollateral.sub(positionToLiquidate.rawCollateral) (../../sb/PerpetualCreator.sol#5148)
	PerpetualPositionManager.rawTotalPositionCollateral (../../sb/PerpetualCreator.sol#4586) can be used in cross function reentrancies:
	- PerpetualPositionManager._decrementCollateralBalances(PerpetualPositionManager.PositionData,FixedPoint.Unsigned) (../../sb/PerpetualCreator.sol#5226-5232)
	- PerpetualPositionManager._deleteSponsorPosition(address) (../../sb/PerpetualCreator.sol#5142-5158)
	- PerpetualPositionManager._incrementCollateralBalances(PerpetualPositionManager.PositionData,FixedPoint.Unsigned) (../../sb/PerpetualCreator.sol#5214-5220)
	- PerpetualPositionManager._pfc() (../../sb/PerpetualCreator.sol#5160-5162)
	- PerpetualPositionManager.rawTotalPositionCollateral (../../sb/PerpetualCreator.sol#4586)
	- PerpetualPositionManager.totalPositionCollateral() (../../sb/PerpetualCreator.sol#5083-5090)
Reentrancy in PerpetualPositionManager.depositTo(address,FixedPoint.Unsigned) (../../sb/PerpetualCreator.sol#4710-4727):
	External calls:
	- fees() (../../sb/PerpetualCreator.sol#4714)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sb/PerpetualCreator.sol#1912)
		- (success,returndata) = target.call{value: value}(data) (../../sb/PerpetualCreator.sol#1780)
		- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (../../sb/PerpetualCreator.sol#4436-4469)
		- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (../../sb/PerpetualCreator.sol#4454)
		- collateralCurrency.safeIncreaseAllowance(address(store),regularFee.rawValue) (../../sb/PerpetualCreator.sol#3013)
		- store.payOracleFeesErc20(address(collateralCurrency),regularFee) (../../sb/PerpetualCreator.sol#3014)
		- collateralCurrency.safeTransfer(msg.sender,latePenalty.rawValue) (../../sb/PerpetualCreator.sol#3018)
	External calls sending eth:
	- fees() (../../sb/PerpetualCreator.sol#4714)
		- (success,returndata) = target.call{value: value}(data) (../../sb/PerpetualCreator.sol#1780)
	State variables written after the call(s):
	- nonReentrant() (../../sb/PerpetualCreator.sol#4715)
		- _notEntered = false (../../sb/PerpetualCreator.sol#277)
		- _notEntered = true (../../sb/PerpetualCreator.sol#283)
	Lockable._notEntered (../../sb/PerpetualCreator.sol#232) can be used in cross function reentrancies:
	- Lockable._postEntranceReset() (../../sb/PerpetualCreator.sol#280-284)
	- Lockable._preEntranceCheck() (../../sb/PerpetualCreator.sol#270-273)
	- Lockable._preEntranceSet() (../../sb/PerpetualCreator.sol#275-278)
Reentrancy in PerpetualLiquidatable.dispute(uint256,address) (../../sb/PerpetualCreator.sol#5663-5700):
	External calls:
	- _requestOraclePrice(disputedLiquidation.liquidationTime) (../../sb/PerpetualCreator.sol#5684)
		- _getOracle().requestPrice(priceIdentifier,requestedTime) (../../sb/PerpetualCreator.sol#5187)
	- _payFinalFees(msg.sender,disputedLiquidation.finalFee) (../../sb/PerpetualCreator.sol#5696)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sb/PerpetualCreator.sol#1912)
		- (success,returndata) = target.call{value: value}(data) (../../sb/PerpetualCreator.sol#1780)
		- collateralCurrency.safeTransferFrom(payer,address(this),amount.rawValue) (../../sb/PerpetualCreator.sol#3047)
		- collateralCurrency.safeIncreaseAllowance(address(store),amount.rawValue) (../../sb/PerpetualCreator.sol#3062)
		- store.payOracleFeesErc20(address(collateralCurrency),amount) (../../sb/PerpetualCreator.sol#3063)
	- fees() (../../sb/PerpetualCreator.sol#5666)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sb/PerpetualCreator.sol#1912)
		- (success,returndata) = target.call{value: value}(data) (../../sb/PerpetualCreator.sol#1780)
		- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (../../sb/PerpetualCreator.sol#4436-4469)
		- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (../../sb/PerpetualCreator.sol#4454)
		- collateralCurrency.safeIncreaseAllowance(address(store),regularFee.rawValue) (../../sb/PerpetualCreator.sol#3013)
		- store.payOracleFeesErc20(address(collateralCurrency),regularFee) (../../sb/PerpetualCreator.sol#3014)
		- collateralCurrency.safeTransfer(msg.sender,latePenalty.rawValue) (../../sb/PerpetualCreator.sol#3018)
	External calls sending eth:
	- _payFinalFees(msg.sender,disputedLiquidation.finalFee) (../../sb/PerpetualCreator.sol#5696)
		- (success,returndata) = target.call{value: value}(data) (../../sb/PerpetualCreator.sol#1780)
	- fees() (../../sb/PerpetualCreator.sol#5666)
		- (success,returndata) = target.call{value: value}(data) (../../sb/PerpetualCreator.sol#1780)
	State variables written after the call(s):
	- _payFinalFees(msg.sender,disputedLiquidation.finalFee) (../../sb/PerpetualCreator.sol#5696)
		- cumulativeFeeMultiplier = cumulativeFeeMultiplier.mul(FixedPoint.fromUnscaledUint(1).sub(effectiveFee)) (../../sb/PerpetualCreator.sol#3135)
	FeePayer.cumulativeFeeMultiplier (../../sb/PerpetualCreator.sol#2920) can be used in cross function reentrancies:
	- FeePayer._adjustCumulativeFeeMultiplier(FixedPoint.Unsigned,FixedPoint.Unsigned) (../../sb/PerpetualCreator.sol#3131-3136)
	- FeePayer._convertToRawCollateral(FixedPoint.Unsigned) (../../sb/PerpetualCreator.sol#3090-3096)
	- FeePayer._getFeeAdjustedCollateral(FixedPoint.Unsigned) (../../sb/PerpetualCreator.sol#3080-3086)
	- FeePayer.constructor(address,address,address) (../../sb/PerpetualCreator.sol#2946-2955)
	- FeePayer.constructor(address,address,address) (../../sb/PerpetualCreator.sol#2946-2955)
	- FeePayer.cumulativeFeeMultiplier (../../sb/PerpetualCreator.sol#2920)
Reentrancy in PerpetualLiquidatable.dispute(uint256,address) (../../sb/PerpetualCreator.sol#5663-5700):
	External calls:
	- fees() (../../sb/PerpetualCreator.sol#5666)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sb/PerpetualCreator.sol#1912)
		- (success,returndata) = target.call{value: value}(data) (../../sb/PerpetualCreator.sol#1780)
		- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (../../sb/PerpetualCreator.sol#4436-4469)
		- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (../../sb/PerpetualCreator.sol#4454)
		- collateralCurrency.safeIncreaseAllowance(address(store),regularFee.rawValue) (../../sb/PerpetualCreator.sol#3013)
		- store.payOracleFeesErc20(address(collateralCurrency),regularFee) (../../sb/PerpetualCreator.sol#3014)
		- collateralCurrency.safeTransfer(msg.sender,latePenalty.rawValue) (../../sb/PerpetualCreator.sol#3018)
	External calls sending eth:
	- fees() (../../sb/PerpetualCreator.sol#5666)
		- (success,returndata) = target.call{value: value}(data) (../../sb/PerpetualCreator.sol#1780)
	State variables written after the call(s):
	- nonReentrant() (../../sb/PerpetualCreator.sol#5667)
		- _notEntered = false (../../sb/PerpetualCreator.sol#277)
		- _notEntered = true (../../sb/PerpetualCreator.sol#283)
	Lockable._notEntered (../../sb/PerpetualCreator.sol#232) can be used in cross function reentrancies:
	- Lockable._postEntranceReset() (../../sb/PerpetualCreator.sol#280-284)
	- Lockable._preEntranceCheck() (../../sb/PerpetualCreator.sol#270-273)
	- Lockable._preEntranceSet() (../../sb/PerpetualCreator.sol#275-278)
Reentrancy in PerpetualPositionManager.emergencyShutdown() (../../sb/PerpetualCreator.sol#5039-5047):
	External calls:
	- fees() (../../sb/PerpetualCreator.sol#5039)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sb/PerpetualCreator.sol#1912)
		- (success,returndata) = target.call{value: value}(data) (../../sb/PerpetualCreator.sol#1780)
		- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (../../sb/PerpetualCreator.sol#4436-4469)
		- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (../../sb/PerpetualCreator.sol#4454)
		- collateralCurrency.safeIncreaseAllowance(address(store),regularFee.rawValue) (../../sb/PerpetualCreator.sol#3013)
		- store.payOracleFeesErc20(address(collateralCurrency),regularFee) (../../sb/PerpetualCreator.sol#3014)
		- collateralCurrency.safeTransfer(msg.sender,latePenalty.rawValue) (../../sb/PerpetualCreator.sol#3018)
	External calls sending eth:
	- fees() (../../sb/PerpetualCreator.sol#5039)
		- (success,returndata) = target.call{value: value}(data) (../../sb/PerpetualCreator.sol#1780)
	State variables written after the call(s):
	- nonReentrant() (../../sb/PerpetualCreator.sol#5039)
		- _notEntered = false (../../sb/PerpetualCreator.sol#277)
		- _notEntered = true (../../sb/PerpetualCreator.sol#283)
	Lockable._notEntered (../../sb/PerpetualCreator.sol#232) can be used in cross function reentrancies:
	- Lockable._postEntranceReset() (../../sb/PerpetualCreator.sol#280-284)
	- Lockable._preEntranceCheck() (../../sb/PerpetualCreator.sol#270-273)
	- Lockable._preEntranceSet() (../../sb/PerpetualCreator.sol#275-278)
	- emergencyShutdownTimestamp = getCurrentTime() (../../sb/PerpetualCreator.sol#5043)
	FundingRateApplier.emergencyShutdownTimestamp (../../sb/PerpetualCreator.sol#4274) can be used in cross function reentrancies:
	- FundingRateApplier._applyEffectiveFundingRate() (../../sb/PerpetualCreator.sol#4479-4507)
	- PerpetualPositionManager._notEmergencyShutdown() (../../sb/PerpetualCreator.sol#5256-5259)
	- FundingRateApplier.constructor(bytes32,address,address,address,FixedPoint.Unsigned,address) (../../sb/PerpetualCreator.sol#4317-4336)
	- FundingRateApplier.constructor(bytes32,address,address,address,FixedPoint.Unsigned,address) (../../sb/PerpetualCreator.sol#4317-4336)
	- FundingRateApplier.emergencyShutdownTimestamp (../../sb/PerpetualCreator.sol#4274)
Reentrancy in FundingRateApplier.proposeNewRate(FixedPoint.Signed,uint256) (../../sb/PerpetualCreator.sol#4357-4406):
	External calls:
	- fees() (../../sb/PerpetualCreator.sol#4359)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sb/PerpetualCreator.sol#1912)
		- (success,returndata) = target.call{value: value}(data) (../../sb/PerpetualCreator.sol#1780)
		- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (../../sb/PerpetualCreator.sol#4436-4469)
		- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (../../sb/PerpetualCreator.sol#4454)
		- collateralCurrency.safeIncreaseAllowance(address(store),regularFee.rawValue) (../../sb/PerpetualCreator.sol#3013)
		- store.payOracleFeesErc20(address(collateralCurrency),regularFee) (../../sb/PerpetualCreator.sol#3014)
		- collateralCurrency.safeTransfer(msg.sender,latePenalty.rawValue) (../../sb/PerpetualCreator.sol#3018)
	External calls sending eth:
	- fees() (../../sb/PerpetualCreator.sol#4359)
		- (success,returndata) = target.call{value: value}(data) (../../sb/PerpetualCreator.sol#1780)
	State variables written after the call(s):
	- nonReentrant() (../../sb/PerpetualCreator.sol#4360)
		- _notEntered = false (../../sb/PerpetualCreator.sol#277)
		- _notEntered = true (../../sb/PerpetualCreator.sol#283)
	Lockable._notEntered (../../sb/PerpetualCreator.sol#232) can be used in cross function reentrancies:
	- Lockable._preEntranceCheck() (../../sb/PerpetualCreator.sol#270-273)
	- fundingRate.proposalTime = timestamp (../../sb/PerpetualCreator.sol#4375)
	FundingRateApplier.fundingRate (../../sb/PerpetualCreator.sol#4271) can be used in cross function reentrancies:
	- FundingRateApplier.constructor(bytes32,address,address,address,FixedPoint.Unsigned,address) (../../sb/PerpetualCreator.sol#4317-4336)
	- FundingRateApplier.fundingRate (../../sb/PerpetualCreator.sol#4271)
Reentrancy in PerpetualPositionManager.redeem(FixedPoint.Unsigned) (../../sb/PerpetualCreator.sol#4909-4946):
	External calls:
	- fees() (../../sb/PerpetualCreator.sol#4913)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sb/PerpetualCreator.sol#1912)
		- (success,returndata) = target.call{value: value}(data) (../../sb/PerpetualCreator.sol#1780)
		- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (../../sb/PerpetualCreator.sol#4436-4469)
		- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (../../sb/PerpetualCreator.sol#4454)
		- collateralCurrency.safeIncreaseAllowance(address(store),regularFee.rawValue) (../../sb/PerpetualCreator.sol#3013)
		- store.payOracleFeesErc20(address(collateralCurrency),regularFee) (../../sb/PerpetualCreator.sol#3014)
		- collateralCurrency.safeTransfer(msg.sender,latePenalty.rawValue) (../../sb/PerpetualCreator.sol#3018)
	External calls sending eth:
	- fees() (../../sb/PerpetualCreator.sol#4913)
		- (success,returndata) = target.call{value: value}(data) (../../sb/PerpetualCreator.sol#1780)
	State variables written after the call(s):
	- nonReentrant() (../../sb/PerpetualCreator.sol#4914)
		- _notEntered = false (../../sb/PerpetualCreator.sol#277)
		- _notEntered = true (../../sb/PerpetualCreator.sol#283)
	Lockable._notEntered (../../sb/PerpetualCreator.sol#232) can be used in cross function reentrancies:
	- Lockable._postEntranceReset() (../../sb/PerpetualCreator.sol#280-284)
	- Lockable._preEntranceCheck() (../../sb/PerpetualCreator.sol#270-273)
	- Lockable._preEntranceSet() (../../sb/PerpetualCreator.sol#275-278)
	- amountWithdrawn = _deleteSponsorPosition(msg.sender) (../../sb/PerpetualCreator.sol#4926)
		- delete positions[sponsor] (../../sb/PerpetualCreator.sol#5152)
	PerpetualPositionManager.positions (../../sb/PerpetualCreator.sol#4578) can be used in cross function reentrancies:
	- PerpetualPositionManager._deleteSponsorPosition(address) (../../sb/PerpetualCreator.sol#5142-5158)
	- PerpetualPositionManager._getPositionData(address) (../../sb/PerpetualCreator.sol#5164-5171)
	- PerpetualPositionManager._onlyCollateralizedPosition(address) (../../sb/PerpetualCreator.sol#5249-5254)
	- PerpetualPositionManager.getCollateral(address) (../../sb/PerpetualCreator.sol#5069-5077)
	- PerpetualPositionManager.positions (../../sb/PerpetualCreator.sol#4578)
	- amountWithdrawn = _deleteSponsorPosition(msg.sender) (../../sb/PerpetualCreator.sol#4926)
		- rawTotalPositionCollateral = rawTotalPositionCollateral.sub(positionToLiquidate.rawCollateral) (../../sb/PerpetualCreator.sol#5148)
	PerpetualPositionManager.rawTotalPositionCollateral (../../sb/PerpetualCreator.sol#4586) can be used in cross function reentrancies:
	- PerpetualPositionManager._decrementCollateralBalances(PerpetualPositionManager.PositionData,FixedPoint.Unsigned) (../../sb/PerpetualCreator.sol#5226-5232)
	- PerpetualPositionManager._deleteSponsorPosition(address) (../../sb/PerpetualCreator.sol#5142-5158)
	- PerpetualPositionManager._incrementCollateralBalances(PerpetualPositionManager.PositionData,FixedPoint.Unsigned) (../../sb/PerpetualCreator.sol#5214-5220)
	- PerpetualPositionManager._pfc() (../../sb/PerpetualCreator.sol#5160-5162)
	- PerpetualPositionManager.rawTotalPositionCollateral (../../sb/PerpetualCreator.sol#4586)
	- PerpetualPositionManager.totalPositionCollateral() (../../sb/PerpetualCreator.sol#5083-5090)
Reentrancy in PerpetualPositionManager.settleEmergencyShutdown() (../../sb/PerpetualCreator.sol#4970-5026):
	External calls:
	- fees() (../../sb/PerpetualCreator.sol#4973)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sb/PerpetualCreator.sol#1912)
		- (success,returndata) = target.call{value: value}(data) (../../sb/PerpetualCreator.sol#1780)
		- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (../../sb/PerpetualCreator.sol#4436-4469)
		- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (../../sb/PerpetualCreator.sol#4454)
		- collateralCurrency.safeIncreaseAllowance(address(store),regularFee.rawValue) (../../sb/PerpetualCreator.sol#3013)
		- store.payOracleFeesErc20(address(collateralCurrency),regularFee) (../../sb/PerpetualCreator.sol#3014)
		- collateralCurrency.safeTransfer(msg.sender,latePenalty.rawValue) (../../sb/PerpetualCreator.sol#3018)
	External calls sending eth:
	- fees() (../../sb/PerpetualCreator.sol#4973)
		- (success,returndata) = target.call{value: value}(data) (../../sb/PerpetualCreator.sol#1780)
	State variables written after the call(s):
	- nonReentrant() (../../sb/PerpetualCreator.sol#4974)
		- _notEntered = false (../../sb/PerpetualCreator.sol#277)
		- _notEntered = true (../../sb/PerpetualCreator.sol#283)
	Lockable._notEntered (../../sb/PerpetualCreator.sol#232) can be used in cross function reentrancies:
	- Lockable._postEntranceReset() (../../sb/PerpetualCreator.sol#280-284)
	- Lockable._preEntranceCheck() (../../sb/PerpetualCreator.sol#270-273)
	- Lockable._preEntranceSet() (../../sb/PerpetualCreator.sol#275-278)
Reentrancy in PerpetualPositionManager.withdraw(FixedPoint.Unsigned) (../../sb/PerpetualCreator.sol#4747-4769):
	External calls:
	- fees() (../../sb/PerpetualCreator.sol#4751)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sb/PerpetualCreator.sol#1912)
		- (success,returndata) = target.call{value: value}(data) (../../sb/PerpetualCreator.sol#1780)
		- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (../../sb/PerpetualCreator.sol#4436-4469)
		- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (../../sb/PerpetualCreator.sol#4454)
		- collateralCurrency.safeIncreaseAllowance(address(store),regularFee.rawValue) (../../sb/PerpetualCreator.sol#3013)
		- store.payOracleFeesErc20(address(collateralCurrency),regularFee) (../../sb/PerpetualCreator.sol#3014)
		- collateralCurrency.safeTransfer(msg.sender,latePenalty.rawValue) (../../sb/PerpetualCreator.sol#3018)
	External calls sending eth:
	- fees() (../../sb/PerpetualCreator.sol#4751)
		- (success,returndata) = target.call{value: value}(data) (../../sb/PerpetualCreator.sol#1780)
	State variables written after the call(s):
	- nonReentrant() (../../sb/PerpetualCreator.sol#4752)
		- _notEntered = false (../../sb/PerpetualCreator.sol#277)
		- _notEntered = true (../../sb/PerpetualCreator.sol#283)
	Lockable._notEntered (../../sb/PerpetualCreator.sol#232) can be used in cross function reentrancies:
	- Lockable._postEntranceReset() (../../sb/PerpetualCreator.sol#280-284)
	- Lockable._preEntranceCheck() (../../sb/PerpetualCreator.sol#270-273)
	- Lockable._preEntranceSet() (../../sb/PerpetualCreator.sol#275-278)
Reentrancy in PerpetualLiquidatable.withdrawLiquidation(uint256,address) (../../sb/PerpetualCreator.sol#5712-5803):
	External calls:
	- collateralCurrency.safeTransfer(liquidation.disputer,rewards.paidToDisputer.rawValue) (../../sb/PerpetualCreator.sol#5764)
	- collateralCurrency.safeTransfer(liquidation.liquidator,rewards.paidToLiquidator.rawValue) (../../sb/PerpetualCreator.sol#5765)
	- collateralCurrency.safeTransfer(liquidation.sponsor,rewards.paidToSponsor.rawValue) (../../sb/PerpetualCreator.sol#5766)
	- collateralCurrency.safeTransfer(liquidation.liquidator,rewards.paidToLiquidator.rawValue) (../../sb/PerpetualCreator.sol#5776)
	- collateralCurrency.safeTransfer(liquidation.liquidator,rewards.paidToLiquidator.rawValue) (../../sb/PerpetualCreator.sol#5787)
	- fees() (../../sb/PerpetualCreator.sol#5715)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sb/PerpetualCreator.sol#1912)
		- (success,returndata) = target.call{value: value}(data) (../../sb/PerpetualCreator.sol#1780)
		- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (../../sb/PerpetualCreator.sol#4436-4469)
		- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (../../sb/PerpetualCreator.sol#4454)
		- collateralCurrency.safeIncreaseAllowance(address(store),regularFee.rawValue) (../../sb/PerpetualCreator.sol#3013)
		- store.payOracleFeesErc20(address(collateralCurrency),regularFee) (../../sb/PerpetualCreator.sol#3014)
		- collateralCurrency.safeTransfer(msg.sender,latePenalty.rawValue) (../../sb/PerpetualCreator.sol#3018)
	External calls sending eth:
	- fees() (../../sb/PerpetualCreator.sol#5715)
		- (success,returndata) = target.call{value: value}(data) (../../sb/PerpetualCreator.sol#1780)
	State variables written after the call(s):
	- delete liquidations[sponsor][liquidationId] (../../sb/PerpetualCreator.sol#5800)
	PerpetualLiquidatable.liquidations (../../sb/PerpetualCreator.sol#5389) can be used in cross function reentrancies:
	- PerpetualLiquidatable.getLiquidations(address) (../../sb/PerpetualCreator.sol#5810-5817)
	- PerpetualLiquidatable.liquidations (../../sb/PerpetualCreator.sol#5389)
Reentrancy in PerpetualLiquidatable.withdrawLiquidation(uint256,address) (../../sb/PerpetualCreator.sol#5712-5803):
	External calls:
	- fees() (../../sb/PerpetualCreator.sol#5715)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sb/PerpetualCreator.sol#1912)
		- (success,returndata) = target.call{value: value}(data) (../../sb/PerpetualCreator.sol#1780)
		- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (../../sb/PerpetualCreator.sol#4436-4469)
		- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (../../sb/PerpetualCreator.sol#4454)
		- collateralCurrency.safeIncreaseAllowance(address(store),regularFee.rawValue) (../../sb/PerpetualCreator.sol#3013)
		- store.payOracleFeesErc20(address(collateralCurrency),regularFee) (../../sb/PerpetualCreator.sol#3014)
		- collateralCurrency.safeTransfer(msg.sender,latePenalty.rawValue) (../../sb/PerpetualCreator.sol#3018)
	External calls sending eth:
	- fees() (../../sb/PerpetualCreator.sol#5715)
		- (success,returndata) = target.call{value: value}(data) (../../sb/PerpetualCreator.sol#1780)
	State variables written after the call(s):
	- nonReentrant() (../../sb/PerpetualCreator.sol#5716)
		- _notEntered = false (../../sb/PerpetualCreator.sol#277)
		- _notEntered = true (../../sb/PerpetualCreator.sol#283)
	Lockable._notEntered (../../sb/PerpetualCreator.sol#232) can be used in cross function reentrancies:
	- Lockable._postEntranceReset() (../../sb/PerpetualCreator.sol#280-284)
	- Lockable._preEntranceCheck() (../../sb/PerpetualCreator.sol#270-273)
	- Lockable._preEntranceSet() (../../sb/PerpetualCreator.sol#275-278)
Reentrancy in PerpetualPositionManager.withdrawPassedRequest() (../../sb/PerpetualCreator.sol#4803-4834):
	External calls:
	- fees() (../../sb/PerpetualCreator.sol#4806)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sb/PerpetualCreator.sol#1912)
		- (success,returndata) = target.call{value: value}(data) (../../sb/PerpetualCreator.sol#1780)
		- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (../../sb/PerpetualCreator.sol#4436-4469)
		- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (../../sb/PerpetualCreator.sol#4454)
		- collateralCurrency.safeIncreaseAllowance(address(store),regularFee.rawValue) (../../sb/PerpetualCreator.sol#3013)
		- store.payOracleFeesErc20(address(collateralCurrency),regularFee) (../../sb/PerpetualCreator.sol#3014)
		- collateralCurrency.safeTransfer(msg.sender,latePenalty.rawValue) (../../sb/PerpetualCreator.sol#3018)
	External calls sending eth:
	- fees() (../../sb/PerpetualCreator.sol#4806)
		- (success,returndata) = target.call{value: value}(data) (../../sb/PerpetualCreator.sol#1780)
	State variables written after the call(s):
	- nonReentrant() (../../sb/PerpetualCreator.sol#4807)
		- _notEntered = false (../../sb/PerpetualCreator.sol#277)
		- _notEntered = true (../../sb/PerpetualCreator.sol#283)
	Lockable._notEntered (../../sb/PerpetualCreator.sol#232) can be used in cross function reentrancies:
	- Lockable._postEntranceReset() (../../sb/PerpetualCreator.sol#280-284)
	- Lockable._preEntranceCheck() (../../sb/PerpetualCreator.sol#270-273)
	- Lockable._preEntranceSet() (../../sb/PerpetualCreator.sol#275-278)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities

PerpetualPositionManager.redeem(FixedPoint.Unsigned) (../../sb/PerpetualCreator.sol#4909-4946) performs a multiplication on the result of a division:
	- fractionRedeemed = numTokens.div(positionData.tokensOutstanding) (../../sb/PerpetualCreator.sol#4920)
	- collateralRedeemed = fractionRedeemed.mul(_getFeeAdjustedCollateral(positionData.rawCollateral)) (../../sb/PerpetualCreator.sol#4921-4922)
PerpetualLiquidatable.createLiquidation(address,FixedPoint.Unsigned,FixedPoint.Unsigned,FixedPoint.Unsigned,uint256) (../../sb/PerpetualCreator.sol#5519-5651) performs a multiplication on the result of a division:
	- ratio = tokensLiquidated.div(positionToLiquidate.tokensOutstanding) (../../sb/PerpetualCreator.sol#5580)
	- lockedCollateral = startCollateral.mul(ratio) (../../sb/PerpetualCreator.sol#5583)
PerpetualLiquidatable.createLiquidation(address,FixedPoint.Unsigned,FixedPoint.Unsigned,FixedPoint.Unsigned,uint256) (../../sb/PerpetualCreator.sol#5519-5651) performs a multiplication on the result of a division:
	- ratio = tokensLiquidated.div(positionToLiquidate.tokensOutstanding) (../../sb/PerpetualCreator.sol#5580)
	- liquidatedCollateral = startCollateralNetOfWithdrawal.mul(ratio) (../../sb/PerpetualCreator.sol#5587)
PerpetualLiquidatable.createLiquidation(address,FixedPoint.Unsigned,FixedPoint.Unsigned,FixedPoint.Unsigned,uint256) (../../sb/PerpetualCreator.sol#5519-5651) performs a multiplication on the result of a division:
	- ratio = tokensLiquidated.div(positionToLiquidate.tokensOutstanding) (../../sb/PerpetualCreator.sol#5580)
	- withdrawalAmountToRemove = positionToLiquidate.withdrawalRequestAmount.mul(ratio) (../../sb/PerpetualCreator.sol#5591-5592)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply

FeePayer.payRegularFees() (../../sb/PerpetualCreator.sol#2970-3021) uses a dangerous strict equality:
	- lastPaymentTime == time (../../sb/PerpetualCreator.sol#2984)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities

Reentrancy in FundingRateApplier._getLatestFundingRate() (../../sb/PerpetualCreator.sol#4427-4472):
	External calls:
	- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (../../sb/PerpetualCreator.sol#4436-4469)
	State variables written after the call(s):
	- fundingRate.rate = FixedPoint.Signed(price) (../../sb/PerpetualCreator.sol#4445)
	FundingRateApplier.fundingRate (../../sb/PerpetualCreator.sol#4271) can be used in cross function reentrancies:
	- FundingRateApplier.constructor(bytes32,address,address,address,FixedPoint.Unsigned,address) (../../sb/PerpetualCreator.sol#4317-4336)
	- FundingRateApplier.fundingRate (../../sb/PerpetualCreator.sol#4271)
	- fundingRate.updateTime = proposalTime (../../sb/PerpetualCreator.sol#4446)
	FundingRateApplier.fundingRate (../../sb/PerpetualCreator.sol#4271) can be used in cross function reentrancies:
	- FundingRateApplier.constructor(bytes32,address,address,address,FixedPoint.Unsigned,address) (../../sb/PerpetualCreator.sol#4317-4336)
	- FundingRateApplier.fundingRate (../../sb/PerpetualCreator.sol#4271)
	- fundingRate.proposalTime = 0 (../../sb/PerpetualCreator.sol#4467)
	FundingRateApplier.fundingRate (../../sb/PerpetualCreator.sol#4271) can be used in cross function reentrancies:
	- FundingRateApplier.constructor(bytes32,address,address,address,FixedPoint.Unsigned,address) (../../sb/PerpetualCreator.sol#4317-4336)
	- FundingRateApplier.fundingRate (../../sb/PerpetualCreator.sol#4271)
Reentrancy in FundingRateApplier._getLatestFundingRate() (../../sb/PerpetualCreator.sol#4427-4472):
	External calls:
	- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (../../sb/PerpetualCreator.sol#4436-4469)
	- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (../../sb/PerpetualCreator.sol#4454)
	State variables written after the call(s):
	- fundingRate.proposalTime = 0 (../../sb/PerpetualCreator.sol#4460)
	FundingRateApplier.fundingRate (../../sb/PerpetualCreator.sol#4271) can be used in cross function reentrancies:
	- FundingRateApplier.constructor(bytes32,address,address,address,FixedPoint.Unsigned,address) (../../sb/PerpetualCreator.sol#4317-4336)
	- FundingRateApplier.fundingRate (../../sb/PerpetualCreator.sol#4271)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1

PerpetualLiquidatable.withdrawLiquidation(uint256,address).rewards (../../sb/PerpetualCreator.sol#5743) is a local variable never initialized
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-local-variables

FundingRateApplier.proposeNewRate(FixedPoint.Signed,uint256) (../../sb/PerpetualCreator.sol#4357-4406) ignores return value by optimisticOracle.requestPrice(identifier,timestamp,ancillaryData,collateralCurrency,0) (../../sb/PerpetualCreator.sol#4382)
FundingRateApplier.proposeNewRate(FixedPoint.Signed,uint256) (../../sb/PerpetualCreator.sol#4357-4406) ignores return value by optimisticOracle.proposePriceFor(msg.sender,address(this),identifier,timestamp,ancillaryData,rate.rawValue) (../../sb/PerpetualCreator.sol#4398-4405)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return

PerpetualCreator.constructor(address,address,address)._tokenFactoryAddress (../../sb/PerpetualCreator.sol#6141) lacks a zero-check on :
		- tokenFactoryAddress = _tokenFactoryAddress (../../sb/PerpetualCreator.sol#6144)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

Reentrancy in FundingRateApplier._getLatestFundingRate() (../../sb/PerpetualCreator.sol#4427-4472):
	External calls:
	- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (../../sb/PerpetualCreator.sol#4436-4469)
	State variables written after the call(s):
	- _adjustCumulativeFeeMultiplier(reward,_pfc()) (../../sb/PerpetualCreator.sol#4453)
		- cumulativeFeeMultiplier = cumulativeFeeMultiplier.mul(FixedPoint.fromUnscaledUint(1).sub(effectiveFee)) (../../sb/PerpetualCreator.sol#3135)
Reentrancy in PerpetualPositionManager.create(FixedPoint.Unsigned,FixedPoint.Unsigned) (../../sb/PerpetualCreator.sol#4860-4898):
	External calls:
	- fees() (../../sb/PerpetualCreator.sol#4863)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sb/PerpetualCreator.sol#1912)
		- (success,returndata) = target.call{value: value}(data) (../../sb/PerpetualCreator.sol#1780)
		- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (../../sb/PerpetualCreator.sol#4436-4469)
		- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (../../sb/PerpetualCreator.sol#4454)
		- collateralCurrency.safeIncreaseAllowance(address(store),regularFee.rawValue) (../../sb/PerpetualCreator.sol#3013)
		- store.payOracleFeesErc20(address(collateralCurrency),regularFee) (../../sb/PerpetualCreator.sol#3014)
		- collateralCurrency.safeTransfer(msg.sender,latePenalty.rawValue) (../../sb/PerpetualCreator.sol#3018)
	External calls sending eth:
	- fees() (../../sb/PerpetualCreator.sol#4863)
		- (success,returndata) = target.call{value: value}(data) (../../sb/PerpetualCreator.sol#1780)
	State variables written after the call(s):
	- positionData.tokensOutstanding = positionData.tokensOutstanding.add(numTokens) (../../sb/PerpetualCreator.sol#4887)
	- totalTokensOutstanding = totalTokensOutstanding.add(numTokens) (../../sb/PerpetualCreator.sol#4889)
Reentrancy in PerpetualLiquidatable.createLiquidation(address,FixedPoint.Unsigned,FixedPoint.Unsigned,FixedPoint.Unsigned,uint256) (../../sb/PerpetualCreator.sol#5519-5651):
	External calls:
	- fees() (../../sb/PerpetualCreator.sol#5528)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sb/PerpetualCreator.sol#1912)
		- (success,returndata) = target.call{value: value}(data) (../../sb/PerpetualCreator.sol#1780)
		- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (../../sb/PerpetualCreator.sol#4436-4469)
		- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (../../sb/PerpetualCreator.sol#4454)
		- collateralCurrency.safeIncreaseAllowance(address(store),regularFee.rawValue) (../../sb/PerpetualCreator.sol#3013)
		- store.payOracleFeesErc20(address(collateralCurrency),regularFee) (../../sb/PerpetualCreator.sol#3014)
		- collateralCurrency.safeTransfer(msg.sender,latePenalty.rawValue) (../../sb/PerpetualCreator.sol#3018)
	External calls sending eth:
	- fees() (../../sb/PerpetualCreator.sol#5528)
		- (success,returndata) = target.call{value: value}(data) (../../sb/PerpetualCreator.sol#1780)
	State variables written after the call(s):
	- liquidations[sponsor].push(LiquidationData({sponsor:sponsor,liquidator:msg.sender,state:Status.PreDispute,liquidationTime:getCurrentTime(),tokensOutstanding:_getFundingRateAppliedTokenDebt(tokensLiquidated),lockedCollateral:lockedCollateral,liquidatedCollateral:liquidatedCollateral,rawUnitCollateral:_convertToRawCollateral(FixedPoint.fromUnscaledUint(1)),disputer:address(0),settlementPrice:FixedPoint.fromUnscaledUint(0),finalFee:finalFeeBond})) (../../sb/PerpetualCreator.sol#5603-5617)
	- _reduceSponsorPosition(sponsor,tokensLiquidated,lockedCollateral,withdrawalAmountToRemove) (../../sb/PerpetualCreator.sol#5593)
		- delete positions[sponsor] (../../sb/PerpetualCreator.sol#5152)
	- _reduceSponsorPosition(sponsor,tokensLiquidated,lockedCollateral,withdrawalAmountToRemove) (../../sb/PerpetualCreator.sol#5593)
		- totalTokensOutstanding = totalTokensOutstanding.sub(positionToLiquidate.tokensOutstanding) (../../sb/PerpetualCreator.sol#5149)
		- totalTokensOutstanding = totalTokensOutstanding.sub(tokensToRemove) (../../sb/PerpetualCreator.sol#5138)
Reentrancy in PerpetualPositionManager.redeem(FixedPoint.Unsigned) (../../sb/PerpetualCreator.sol#4909-4946):
	External calls:
	- fees() (../../sb/PerpetualCreator.sol#4913)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sb/PerpetualCreator.sol#1912)
		- (success,returndata) = target.call{value: value}(data) (../../sb/PerpetualCreator.sol#1780)
		- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (../../sb/PerpetualCreator.sol#4436-4469)
		- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (../../sb/PerpetualCreator.sol#4454)
		- collateralCurrency.safeIncreaseAllowance(address(store),regularFee.rawValue) (../../sb/PerpetualCreator.sol#3013)
		- store.payOracleFeesErc20(address(collateralCurrency),regularFee) (../../sb/PerpetualCreator.sol#3014)
		- collateralCurrency.safeTransfer(msg.sender,latePenalty.rawValue) (../../sb/PerpetualCreator.sol#3018)
	External calls sending eth:
	- fees() (../../sb/PerpetualCreator.sol#4913)
		- (success,returndata) = target.call{value: value}(data) (../../sb/PerpetualCreator.sol#1780)
	State variables written after the call(s):
	- amountWithdrawn = _deleteSponsorPosition(msg.sender) (../../sb/PerpetualCreator.sol#4926)
		- totalTokensOutstanding = totalTokensOutstanding.sub(positionToLiquidate.tokensOutstanding) (../../sb/PerpetualCreator.sol#5149)
	- totalTokensOutstanding = totalTokensOutstanding.sub(numTokens) (../../sb/PerpetualCreator.sol#4937)
Reentrancy in PerpetualPositionManager.settleEmergencyShutdown() (../../sb/PerpetualCreator.sol#4970-5026):
	External calls:
	- fees() (../../sb/PerpetualCreator.sol#4973)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sb/PerpetualCreator.sol#1912)
		- (success,returndata) = target.call{value: value}(data) (../../sb/PerpetualCreator.sol#1780)
		- price = optimisticOracle.getPrice(identifier,proposalTime,ancillaryData) (../../sb/PerpetualCreator.sol#4436-4469)
		- collateralCurrency.safeTransfer(request.proposer,reward.rawValue) (../../sb/PerpetualCreator.sol#4454)
		- collateralCurrency.safeIncreaseAllowance(address(store),regularFee.rawValue) (../../sb/PerpetualCreator.sol#3013)
		- store.payOracleFeesErc20(address(collateralCurrency),regularFee) (../../sb/PerpetualCreator.sol#3014)
		- collateralCurrency.safeTransfer(msg.sender,latePenalty.rawValue) (../../sb/PerpetualCreator.sol#3018)
	External calls sending eth:
	- fees() (../../sb/PerpetualCreator.sol#4973)
		- (success,returndata) = target.call{value: value}(data) (../../sb/PerpetualCreator.sol#1780)
	State variables written after the call(s):
	- emergencyShutdownPrice = _getOracleEmergencyShutdownPrice() (../../sb/PerpetualCreator.sol#4979)
	- delete positions[msg.sender] (../../sb/PerpetualCreator.sol#5007)
	- totalTokensOutstanding = totalTokensOutstanding.sub(tokensToRedeem) (../../sb/PerpetualCreator.sol#5018)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

Reentrancy in FeePayer._payFinalFees(address,FixedPoint.Unsigned) (../../sb/PerpetualCreator.sol#3040-3064):
	External calls:
	- collateralCurrency.safeTransferFrom(payer,address(this),amount.rawValue) (../../sb/PerpetualCreator.sol#3047)
	Event emitted after the call(s):
	- FinalFeesPaid(amount.rawValue) (../../sb/PerpetualCreator.sol#3059)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

FeePayer.payRegularFees() (../../sb/PerpetualCreator.sol#2970-3021) uses timestamp for comparisons
	Dangerous comparisons:
	- lastPaymentTime == time (../../sb/PerpetualCreator.sol#2984)
OptimisticOracle.getState(address,bytes32,uint256,bytes) (../../sb/PerpetualCreator.sol#4066-4094) uses timestamp for comparisons
	Dangerous comparisons:
	- request.expirationTime <= getCurrentTime() (../../sb/PerpetualCreator.sol#4087)
FundingRateApplier.proposeNewRate(FixedPoint.Signed,uint256) (../../sb/PerpetualCreator.sol#4357-4406) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(fundingRate.proposalTime == 0,Proposal in progress) (../../sb/PerpetualCreator.sol#4363)
	- require(bool,string)(timestamp > updateTime && timestamp >= currentTime.sub(1800) && timestamp <= currentTime.add(90),Invalid proposal time) (../../sb/PerpetualCreator.sol#4369-4372)
FundingRateApplier._getLatestFundingRate() (../../sb/PerpetualCreator.sol#4427-4472) uses timestamp for comparisons
	Dangerous comparisons:
	- proposalTime != 0 (../../sb/PerpetualCreator.sol#4429)
	- proposalTime >= lastUpdateTime (../../sb/PerpetualCreator.sol#4443)
	- request.disputer == address(0) (../../sb/PerpetualCreator.sol#4449)
	- optimisticOracle.getRequest(address(this),identifier,proposalTime,ancillaryData).disputer != address(0) (../../sb/PerpetualCreator.sol#4464-4465)
PerpetualPositionManager.requestWithdrawal(FixedPoint.Unsigned) (../../sb/PerpetualCreator.sol#4776-4794) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(collateralAmount.isGreaterThan(0) && collateralAmount.isLessThanOrEqual(_getFeeAdjustedCollateral(positionData.rawCollateral)),Invalid collateral amount) (../../sb/PerpetualCreator.sol#4783-4787)
PerpetualPositionManager.withdrawPassedRequest() (../../sb/PerpetualCreator.sol#4803-4834) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(positionData.withdrawalRequestPassTimestamp != 0 && positionData.withdrawalRequestPassTimestamp <= getCurrentTime(),Invalid withdraw request) (../../sb/PerpetualCreator.sol#4811-4815)
PerpetualPositionManager.create(FixedPoint.Unsigned,FixedPoint.Unsigned) (../../sb/PerpetualCreator.sol#4860-4898) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)((_checkCollateralization(_getFeeAdjustedCollateral(positionData.rawCollateral).add(collateralAmount),positionData.tokensOutstanding.add(numTokens)) || _checkCollateralization(collateralAmount,numTokens)),Insufficient collateral) (../../sb/PerpetualCreator.sol#4869-4875)
PerpetualPositionManager._reduceSponsorPosition(address,FixedPoint.Unsigned,FixedPoint.Unsigned,FixedPoint.Unsigned) (../../sb/PerpetualCreator.sol#5107-5139) uses timestamp for comparisons
	Dangerous comparisons:
	- tokensToRemove.isEqual(positionData.tokensOutstanding) && _getFeeAdjustedCollateral(positionData.rawCollateral).isEqual(collateralToRemove) (../../sb/PerpetualCreator.sol#5117-5118)
PerpetualPositionManager._notEmergencyShutdown() (../../sb/PerpetualCreator.sol#5256-5259) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(emergencyShutdownTimestamp == 0) (../../sb/PerpetualCreator.sol#5258)
PerpetualPositionManager._isEmergencyShutdown() (../../sb/PerpetualCreator.sol#5261-5264) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(emergencyShutdownTimestamp != 0) (../../sb/PerpetualCreator.sol#5263)
PerpetualLiquidatable.createLiquidation(address,FixedPoint.Unsigned,FixedPoint.Unsigned,FixedPoint.Unsigned,uint256) (../../sb/PerpetualCreator.sol#5519-5651) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(getCurrentTime() <= deadline,Mined after deadline) (../../sb/PerpetualCreator.sol#5537)
	- require(bool,string)(maxCollateralPerToken.mul(startTokens).isGreaterThanOrEqual(startCollateralNetOfWithdrawal),CR is more than max liq. price) (../../sb/PerpetualCreator.sol#5558-5561)
	- require(bool,string)(minCollateralPerToken.mul(startTokens).isLessThanOrEqual(startCollateralNetOfWithdrawal),CR is less than min liq. price) (../../sb/PerpetualCreator.sol#5563-5566)
	- positionToLiquidate.withdrawalRequestPassTimestamp > 0 && positionToLiquidate.withdrawalRequestPassTimestamp > getCurrentTime() && tokensLiquidated.isGreaterThanOrEqual(griefingThreshold) (../../sb/PerpetualCreator.sol#5628-5630)
PerpetualLiquidatable._disputable(uint256,address) (../../sb/PerpetualCreator.sol#5886-5892) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)((getCurrentTime() < _getLiquidationExpiry(liquidation)) && (liquidation.state == Status.PreDispute),Liquidation not disputable) (../../sb/PerpetualCreator.sol#5888-5891)
PerpetualLiquidatable._withdrawable(uint256,address) (../../sb/PerpetualCreator.sol#5894-5904) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)((state > Status.PreDispute) || ((_getLiquidationExpiry(liquidation) <= getCurrentTime()) && (state == Status.PreDispute)),Liquidation not withdrawable) (../../sb/PerpetualCreator.sol#5899-5903)
ConfigStore._pendingProposalPassed() (../../sb/PerpetualCreator.sol#6069-6071) uses timestamp for comparisons
	Dangerous comparisons:
	- (pendingPassedTimestamp != 0 && pendingPassedTimestamp <= getCurrentTime()) (../../sb/PerpetualCreator.sol#6070)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

Address.isContract(address) (../../sb/PerpetualCreator.sol#1687-1696) uses assembly
	- INLINE ASM (../../sb/PerpetualCreator.sol#1694)
Address._verifyCallResult(bool,bytes,string) (../../sb/PerpetualCreator.sol#1832-1849) uses assembly
	- INLINE ASM (../../sb/PerpetualCreator.sol#1841-1844)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage

Address.functionCall(address,bytes) (../../sb/PerpetualCreator.sol#1740-1742) is never used and should be removed
Address.functionCallWithValue(address,bytes,uint256) (../../sb/PerpetualCreator.sol#1765-1767) is never used and should be removed
Address.functionDelegateCall(address,bytes) (../../sb/PerpetualCreator.sol#1814-1816) is never used and should be removed
Address.functionDelegateCall(address,bytes,string) (../../sb/PerpetualCreator.sol#1824-1830) is never used and should be removed
Address.functionStaticCall(address,bytes) (../../sb/PerpetualCreator.sol#1790-1792) is never used and should be removed
Address.functionStaticCall(address,bytes,string) (../../sb/PerpetualCreator.sol#1800-1806) is never used and should be removed
Address.sendValue(address,uint256) (../../sb/PerpetualCreator.sol#1714-1720) is never used and should be removed
Context._msgData() (../../sb/PerpetualCreator.sol#156-159) is never used and should be removed
FixedPoint.add(FixedPoint.Signed,int256) (../../sb/PerpetualCreator.sol#2588-2590) is never used and should be removed
FixedPoint.add(FixedPoint.Unsigned,uint256) (../../sb/PerpetualCreator.sol#2211-2213) is never used and should be removed
FixedPoint.div(FixedPoint.Signed,FixedPoint.Signed) (../../sb/PerpetualCreator.sol#2688-2695) is never used and should be removed
FixedPoint.div(FixedPoint.Signed,int256) (../../sb/PerpetualCreator.sol#2704-2706) is never used and should be removed
FixedPoint.div(int256,FixedPoint.Signed) (../../sb/PerpetualCreator.sol#2715-2717) is never used and should be removed
FixedPoint.div(uint256,FixedPoint.Unsigned) (../../sb/PerpetualCreator.sol#2335-2337) is never used and should be removed
FixedPoint.divAwayFromZero(FixedPoint.Signed,FixedPoint.Signed) (../../sb/PerpetualCreator.sol#2725-2737) is never used and should be removed
FixedPoint.divAwayFromZero(FixedPoint.Signed,int256) (../../sb/PerpetualCreator.sol#2745-2750) is never used and should be removed
FixedPoint.divCeil(FixedPoint.Unsigned,uint256) (../../sb/PerpetualCreator.sol#2362-2367) is never used and should be removed
FixedPoint.fromUnsigned(FixedPoint.Unsigned) (../../sb/PerpetualCreator.sol#2398-2401) is never used and should be removed
FixedPoint.isEqual(FixedPoint.Signed,FixedPoint.Signed) (../../sb/PerpetualCreator.sol#2428-2430) is never used and should be removed
FixedPoint.isEqual(FixedPoint.Signed,int256) (../../sb/PerpetualCreator.sol#2418-2420) is never used and should be removed
FixedPoint.isGreaterThan(FixedPoint.Signed,FixedPoint.Signed) (../../sb/PerpetualCreator.sol#2438-2440) is never used and should be removed
FixedPoint.isGreaterThan(FixedPoint.Signed,int256) (../../sb/PerpetualCreator.sol#2448-2450) is never used and should be removed
FixedPoint.isGreaterThan(int256,FixedPoint.Signed) (../../sb/PerpetualCreator.sol#2458-2460) is never used and should be removed
FixedPoint.isGreaterThan(uint256,FixedPoint.Unsigned) (../../sb/PerpetualCreator.sol#2081-2083) is never used and should be removed
FixedPoint.isGreaterThanOrEqual(FixedPoint.Signed,FixedPoint.Signed) (../../sb/PerpetualCreator.sol#2468-2470) is never used and should be removed
FixedPoint.isGreaterThanOrEqual(FixedPoint.Signed,int256) (../../sb/PerpetualCreator.sol#2478-2480) is never used and should be removed
FixedPoint.isGreaterThanOrEqual(FixedPoint.Unsigned,uint256) (../../sb/PerpetualCreator.sol#2101-2103) is never used and should be removed
FixedPoint.isGreaterThanOrEqual(int256,FixedPoint.Signed) (../../sb/PerpetualCreator.sol#2488-2490) is never used and should be removed
FixedPoint.isGreaterThanOrEqual(uint256,FixedPoint.Unsigned) (../../sb/PerpetualCreator.sol#2111-2113) is never used and should be removed
FixedPoint.isLessThan(FixedPoint.Signed,FixedPoint.Signed) (../../sb/PerpetualCreator.sol#2498-2500) is never used and should be removed
FixedPoint.isLessThan(FixedPoint.Signed,int256) (../../sb/PerpetualCreator.sol#2508-2510) is never used and should be removed
FixedPoint.isLessThan(int256,FixedPoint.Signed) (../../sb/PerpetualCreator.sol#2518-2520) is never used and should be removed
FixedPoint.isLessThan(uint256,FixedPoint.Unsigned) (../../sb/PerpetualCreator.sol#2141-2143) is never used and should be removed
FixedPoint.isLessThanOrEqual(FixedPoint.Signed,FixedPoint.Signed) (../../sb/PerpetualCreator.sol#2528-2530) is never used and should be removed
FixedPoint.isLessThanOrEqual(FixedPoint.Signed,int256) (../../sb/PerpetualCreator.sol#2538-2540) is never used and should be removed
FixedPoint.isLessThanOrEqual(int256,FixedPoint.Signed) (../../sb/PerpetualCreator.sol#2548-2550) is never used and should be removed
FixedPoint.isLessThanOrEqual(uint256,FixedPoint.Unsigned) (../../sb/PerpetualCreator.sol#2171-2173) is never used and should be removed
FixedPoint.max(FixedPoint.Unsigned,FixedPoint.Unsigned) (../../sb/PerpetualCreator.sol#2191-2193) is never used and should be removed
FixedPoint.min(FixedPoint.Signed,FixedPoint.Signed) (../../sb/PerpetualCreator.sol#2558-2560) is never used and should be removed
FixedPoint.mul(FixedPoint.Signed,FixedPoint.Signed) (../../sb/PerpetualCreator.sol#2629-2637) is never used and should be removed
FixedPoint.mulAwayFromZero(FixedPoint.Signed,FixedPoint.Signed) (../../sb/PerpetualCreator.sol#2656-2668) is never used and should be removed
FixedPoint.mulAwayFromZero(FixedPoint.Signed,int256) (../../sb/PerpetualCreator.sol#2676-2679) is never used and should be removed
FixedPoint.mulCeil(FixedPoint.Unsigned,FixedPoint.Unsigned) (../../sb/PerpetualCreator.sol#2279-2288) is never used and should be removed
FixedPoint.mulCeil(FixedPoint.Unsigned,uint256) (../../sb/PerpetualCreator.sol#2296-2299) is never used and should be removed
FixedPoint.pow(FixedPoint.Signed,uint256) (../../sb/PerpetualCreator.sol#2759-2764) is never used and should be removed
FixedPoint.pow(FixedPoint.Unsigned,uint256) (../../sb/PerpetualCreator.sol#2376-2381) is never used and should be removed
FixedPoint.sub(FixedPoint.Signed,FixedPoint.Signed) (../../sb/PerpetualCreator.sol#2598-2600) is never used and should be removed
FixedPoint.sub(FixedPoint.Signed,int256) (../../sb/PerpetualCreator.sol#2608-2610) is never used and should be removed
FixedPoint.sub(FixedPoint.Unsigned,uint256) (../../sb/PerpetualCreator.sol#2231-2233) is never used and should be removed
FixedPoint.sub(int256,FixedPoint.Signed) (../../sb/PerpetualCreator.sol#2618-2620) is never used and should be removed
FixedPoint.sub(uint256,FixedPoint.Unsigned) (../../sb/PerpetualCreator.sol#2241-2243) is never used and should be removed
SafeCast.toInt128(int256) (../../sb/PerpetualCreator.sol#3256-3259) is never used and should be removed
SafeCast.toInt16(int256) (../../sb/PerpetualCreator.sol#3310-3313) is never used and should be removed
SafeCast.toInt32(int256) (../../sb/PerpetualCreator.sol#3292-3295) is never used and should be removed
SafeCast.toInt64(int256) (../../sb/PerpetualCreator.sol#3274-3277) is never used and should be removed
SafeCast.toInt8(int256) (../../sb/PerpetualCreator.sol#3328-3331) is never used and should be removed
SafeCast.toUint128(uint256) (../../sb/PerpetualCreator.sol#3166-3169) is never used and should be removed
SafeCast.toUint16(uint256) (../../sb/PerpetualCreator.sol#3211-3214) is never used and should be removed
SafeCast.toUint256(int256) (../../sb/PerpetualCreator.sol#3238-3241) is never used and should be removed
SafeCast.toUint32(uint256) (../../sb/PerpetualCreator.sol#3196-3199) is never used and should be removed
SafeCast.toUint64(uint256) (../../sb/PerpetualCreator.sol#3181-3184) is never used and should be removed
SafeCast.toUint8(uint256) (../../sb/PerpetualCreator.sol#3226-3229) is never used and should be removed
SafeERC20.safeApprove(IERC20,address,uint256) (../../sb/PerpetualCreator.sol#1880-1889) is never used and should be removed
SafeERC20.safeDecreaseAllowance(IERC20,address,uint256) (../../sb/PerpetualCreator.sol#1896-1899) is never used and should be removed
SafeMath.div(uint256,uint256,string) (../../sb/PerpetualCreator.sol#845-848) is never used and should be removed
SafeMath.mod(uint256,uint256,string) (../../sb/PerpetualCreator.sol#865-868) is never used and should be removed
SafeMath.tryAdd(uint256,uint256) (../../sb/PerpetualCreator.sol#679-683) is never used and should be removed
SafeMath.tryDiv(uint256,uint256) (../../sb/PerpetualCreator.sol#715-718) is never used and should be removed
SafeMath.tryMod(uint256,uint256) (../../sb/PerpetualCreator.sol#725-728) is never used and should be removed
SafeMath.tryMul(uint256,uint256) (../../sb/PerpetualCreator.sol#700-708) is never used and should be removed
SafeMath.trySub(uint256,uint256) (../../sb/PerpetualCreator.sol#690-693) is never used and should be removed
SignedSafeMath.div(int256,int256) (../../sb/PerpetualCreator.sol#1965-1972) is never used and should be removed
SignedSafeMath.sub(int256,int256) (../../sb/PerpetualCreator.sol#1984-1989) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code

Pragma version^0.6.0 (../../sb/PerpetualCreator.sol#1) allows old versions
solc-0.6.12 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Low level call in Address.sendValue(address,uint256) (../../sb/PerpetualCreator.sol#1714-1720):
	- (success) = recipient.call{value: amount}() (../../sb/PerpetualCreator.sol#1718)
Low level call in Address.functionCallWithValue(address,bytes,uint256,string) (../../sb/PerpetualCreator.sol#1775-1782):
	- (success,returndata) = target.call{value: value}(data) (../../sb/PerpetualCreator.sol#1780)
Low level call in Address.functionStaticCall(address,bytes,string) (../../sb/PerpetualCreator.sol#1800-1806):
	- (success,returndata) = target.staticcall(data) (../../sb/PerpetualCreator.sol#1804)
Low level call in Address.functionDelegateCall(address,bytes,string) (../../sb/PerpetualCreator.sol#1824-1830):
	- (success,returndata) = target.delegatecall(data) (../../sb/PerpetualCreator.sol#1828)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls

Function PerpetualCreator._getSyntheticDecimals(address) (../../sb/PerpetualCreator.sol#6239-6245) is not in mixedCase
Parameter PerpetualCreator._getSyntheticDecimals(address)._collateralAddress (../../sb/PerpetualCreator.sol#6239) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Redundant expression "this (../../sb/PerpetualCreator.sol#157)" inContext (../../sb/PerpetualCreator.sol#151-160)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#redundant-statements

Variable PerpetualLiquidatable.createLiquidation(address,FixedPoint.Unsigned,FixedPoint.Unsigned,FixedPoint.Unsigned,uint256).maxCollateralPerToken (../../sb/PerpetualCreator.sol#5522) is too similar to PerpetualLiquidatable.createLiquidation(address,FixedPoint.Unsigned,FixedPoint.Unsigned,FixedPoint.Unsigned,uint256).minCollateralPerToken (../../sb/PerpetualCreator.sol#5521)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#variable-names-too-similar

Loop condition i < whitelistIndices.length (../../sb/PerpetualCreator.sol#350) should use cached array length instead of referencing `length` member of the storage array.
 Loop condition i_scope_0 < whitelistIndices.length (../../sb/PerpetualCreator.sol#359) should use cached array length instead of referencing `length` member of the storage array.
 Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#cache-array-length

ContractCreator.finderAddress (../../sb/PerpetualCreator.sol#1081) should be immutable 
FeePayer.collateralCurrency (../../sb/PerpetualCreator.sol#2905) should be immutable 
FeePayer.finder (../../sb/PerpetualCreator.sol#2908) should be immutable 
FundingRateApplier.configStore (../../sb/PerpetualCreator.sol#4277) should be immutable 
OptimisticOracle.defaultLiveness (../../sb/PerpetualCreator.sol#3729) should be immutable 
OptimisticOracle.finder (../../sb/PerpetualCreator.sol#3726) should be immutable 
PerpetualCreator.tokenFactoryAddress (../../sb/PerpetualCreator.sol#6128) should be immutable 
PerpetualLiquidatable.liquidationLiveness (../../sb/PerpetualCreator.sol#5401) should be immutable 
PerpetualPositionManager.priceIdentifier (../../sb/PerpetualCreator.sol#4592) should be immutable 
PerpetualPositionManager.tokenCurrency (../../sb/PerpetualCreator.sol#4589) should be immutable 
PerpetualPositionManager.withdrawalLiveness (../../sb/PerpetualCreator.sol#4599) should be immutable 
Testable.timerAddress (../../sb/PerpetualCreator.sol#1136) should be immutable 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-immutable
/sb/PerpetualCreator.sol analyzed (44 contracts with 93 detectors), 146 result(s) found
