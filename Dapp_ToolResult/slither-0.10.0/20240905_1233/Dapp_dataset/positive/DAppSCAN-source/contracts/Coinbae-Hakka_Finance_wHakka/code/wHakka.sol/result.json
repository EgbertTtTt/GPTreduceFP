{
    "errors": [],
    "fails": [],
    "findings": [
        {
            "confidence": "Medium",
            "contract": "wHakka",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Coinbae-Hakka_Finance_wHakka/code/wHakka.sol",
            "function": "stake",
            "impact": "Medium",
            "line": 558,
            "line_end": 575,
            "message": "Reentrancy in wHakka.stake(address,uint256,uint256) (wHakka.sol#558-575):\n\tExternal calls:\n\t- wAmount = getStakingRate(time).mul(amount).div(1e18) (wHakka.sol#560)\n\t\t- currentModel.stakingRate(time) (wHakka.sol#550)\n\tState variables written after the call(s):\n\t- vaultCount[to] ++ (wHakka.sol#569)\n\twHakka.vaultCount (wHakka.sol#537) can be used in cross function reentrancies:\n\t- wHakka.stake(address,uint256,uint256) (wHakka.sol#558-575)\n\t- wHakka.vaultCount (wHakka.sol#537)\n\t- v.hakkaAmount = amount (wHakka.sol#563)\n\twHakka.vaults (wHakka.sol#536) can be used in cross function reentrancies:\n\t- wHakka.stake(address,uint256,uint256) (wHakka.sol#558-575)\n\t- wHakka.unstake(address,uint256,uint256) (wHakka.sol#578-595)\n\t- wHakka.vaults (wHakka.sol#536)\n\t- v.wAmount = wAmount (wHakka.sol#564)\n\twHakka.vaults (wHakka.sol#536) can be used in cross function reentrancies:\n\t- wHakka.stake(address,uint256,uint256) (wHakka.sol#558-575)\n\t- wHakka.unstake(address,uint256,uint256) (wHakka.sol#578-595)\n\t- wHakka.vaults (wHakka.sol#536)\n\t- v.unlockTime = block.timestamp.add(time) (wHakka.sol#565)\n\twHakka.vaults (wHakka.sol#536) can be used in cross function reentrancies:\n\t- wHakka.stake(address,uint256,uint256) (wHakka.sol#558-575)\n\t- wHakka.unstake(address,uint256,uint256) (wHakka.sol#578-595)\n\t- wHakka.vaults (wHakka.sol#536)\n",
            "name": "reentrancy-no-eth",
            "check": "TP"
        },
        {
            "confidence": "Medium",
            "contract": "wHakka",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Coinbae-Hakka_Finance_wHakka/code/wHakka.sol",
            "function": "stake",
            "impact": "Low",
            "line": 558,
            "line_end": 575,
            "message": "Reentrancy in wHakka.stake(address,uint256,uint256) (wHakka.sol#558-575):\n\tExternal calls:\n\t- wAmount = getStakingRate(time).mul(amount).div(1e18) (wHakka.sol#560)\n\t\t- currentModel.stakingRate(time) (wHakka.sol#550)\n\tState variables written after the call(s):\n\t- _mint(to,wAmount) (wHakka.sol#571)\n\t\t- _balances[to] = _balances[to].add(amount) (wHakka.sol#477)\n\t- _mint(to,wAmount) (wHakka.sol#571)\n\t\t- _totalSupply = _totalSupply.add(amount) (wHakka.sol#478)\n\t- stakedHakka[to] = stakedHakka[to].add(amount) (wHakka.sol#567)\n\t- votingPower[to] = votingPower[to].add(wAmount) (wHakka.sol#568)\n",
            "name": "reentrancy-benign",
            "check": "TP"
        },
        {
            "confidence": "Medium",
            "contract": "wHakka",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Coinbae-Hakka_Finance_wHakka/code/wHakka.sol",
            "function": "unstake",
            "impact": "Low",
            "line": 578,
            "line_end": 595,
            "message": "Reentrancy in wHakka.unstake(address,uint256,uint256) (wHakka.sol#578-595):\n\tExternal calls:\n\t- Hakka.safeTransfer(to,amount) (wHakka.sol#592)\n\tEvent emitted after the call(s):\n\t- Unstake(msg.sender,to,amount,wAmount) (wHakka.sol#594)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "wHakka",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Coinbae-Hakka_Finance_wHakka/code/wHakka.sol",
            "function": "stake",
            "impact": "Low",
            "line": 558,
            "line_end": 575,
            "message": "Reentrancy in wHakka.stake(address,uint256,uint256) (wHakka.sol#558-575):\n\tExternal calls:\n\t- wAmount = getStakingRate(time).mul(amount).div(1e18) (wHakka.sol#560)\n\t\t- currentModel.stakingRate(time) (wHakka.sol#550)\n\t- Hakka.safeTransferFrom(msg.sender,address(this),amount) (wHakka.sol#572)\n\tEvent emitted after the call(s):\n\t- Stake(to,msg.sender,amount,wAmount,time) (wHakka.sol#574)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "wHakka",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Coinbae-Hakka_Finance_wHakka/code/wHakka.sol",
            "function": "stake",
            "impact": "Low",
            "line": 558,
            "line_end": 575,
            "message": "Reentrancy in wHakka.stake(address,uint256,uint256) (wHakka.sol#558-575):\n\tExternal calls:\n\t- wAmount = getStakingRate(time).mul(amount).div(1e18) (wHakka.sol#560)\n\t\t- currentModel.stakingRate(time) (wHakka.sol#550)\n\tEvent emitted after the call(s):\n\t- Transfer(address(0),to,amount) (wHakka.sol#479)\n\t\t- _mint(to,wAmount) (wHakka.sol#571)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "stakingRateModel",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Coinbae-Hakka_Finance_wHakka/code/wHakka.sol",
            "function": "stakingRateMax",
            "impact": "Low",
            "line": 507,
            "line_end": 516,
            "message": "stakingRateModel.stakingRateMax() (wHakka.sol#507-516) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- timeElapsed > 0 (wHakka.sol#510)\n",
            "name": "timestamp",
            "check": "TP"
        },
        {
            "confidence": "Medium",
            "contract": "wHakka",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Coinbae-Hakka_Finance_wHakka/code/wHakka.sol",
            "function": "unstake",
            "impact": "Low",
            "line": 578,
            "line_end": 595,
            "message": "wHakka.unstake(address,uint256,uint256) (wHakka.sol#578-595) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(block.timestamp >= v.unlockTime,locked) (wHakka.sol#581)\n",
            "name": "timestamp",
            "check": "TP"
        }
    ],
    "infos": [],
    "parser": {
        "id": "slither-0.10.0",
        "mode": "solidity",
        "version": "2024/04/30"
    }
}