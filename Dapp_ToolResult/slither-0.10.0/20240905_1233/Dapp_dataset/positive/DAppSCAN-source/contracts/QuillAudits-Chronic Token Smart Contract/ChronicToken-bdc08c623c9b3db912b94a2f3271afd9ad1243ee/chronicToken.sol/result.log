'solc --version' running
'solc /sb/chronicToken.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/sb' running

Reentrancy in ChronicToken._transfer(address,address,uint256) (../../sb/chronicToken.sol#1033-1077):
	External calls:
	- swapAndLiquify(contractTokenBalance) (../../sb/chronicToken.sol#1064)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (../../sb/chronicToken.sol#1125-1132)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (../../sb/chronicToken.sol#1111-1117)
	External calls sending eth:
	- swapAndLiquify(contractTokenBalance) (../../sb/chronicToken.sol#1064)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (../../sb/chronicToken.sol#1125-1132)
	State variables written after the call(s):
	- _tokenTransfer(from,to,amount,takeFee) (../../sb/chronicToken.sol#1076)
		- _rOwned[address(0x0)] = _rOwned[address(0x0)].add(rBurn) (../../sb/chronicToken.sol#960)
		- _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity) (../../sb/chronicToken.sol#952)
		- _rOwned[sender] = _rOwned[sender].sub(rAmount) (../../sb/chronicToken.sol#1168)
		- _rOwned[sender] = _rOwned[sender].sub(rAmount) (../../sb/chronicToken.sol#1158)
		- _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount) (../../sb/chronicToken.sol#1159)
		- _rOwned[sender] = _rOwned[sender].sub(rAmount) (../../sb/chronicToken.sol#857)
		- _rOwned[sender] = _rOwned[sender].sub(rAmount) (../../sb/chronicToken.sol#1180)
		- _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount) (../../sb/chronicToken.sol#1181)
		- _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount) (../../sb/chronicToken.sol#1170)
		- _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount) (../../sb/chronicToken.sol#859)
	ChronicToken._rOwned (../../sb/chronicToken.sol#678) can be used in cross function reentrancies:
	- ChronicToken._burn(address,uint256) (../../sb/chronicToken.sol#965-982)
	- ChronicToken._getCurrentSupply() (../../sb/chronicToken.sol#937-947)
	- ChronicToken._takeBurn(uint256) (../../sb/chronicToken.sol#957-963)
	- ChronicToken._takeLiquidity(uint256) (../../sb/chronicToken.sol#949-955)
	- ChronicToken._transferBothExcluded(address,address,uint256) (../../sb/chronicToken.sol#854-864)
	- ChronicToken._transferFromExcluded(address,address,uint256) (../../sb/chronicToken.sol#1177-1186)
	- ChronicToken._transferStandard(address,address,uint256) (../../sb/chronicToken.sol#1156-1164)
	- ChronicToken._transferToExcluded(address,address,uint256) (../../sb/chronicToken.sol#1166-1175)
	- ChronicToken.balanceOf(address) (../../sb/chronicToken.sol#763-766)
	- ChronicToken.constructor() (../../sb/chronicToken.sol#728-745)
	- ChronicToken.deliver(uint256) (../../sb/chronicToken.sol#806-813)
	- ChronicToken.excludeFromReward(address) (../../sb/chronicToken.sol#832-840)
	- _tokenTransfer(from,to,amount,takeFee) (../../sb/chronicToken.sol#1076)
		- _rTotal = _rTotal.sub(rFee) (../../sb/chronicToken.sol#905)
	ChronicToken._rTotal (../../sb/chronicToken.sol#689) can be used in cross function reentrancies:
	- ChronicToken._burn(address,uint256) (../../sb/chronicToken.sol#965-982)
	- ChronicToken._getCurrentSupply() (../../sb/chronicToken.sol#937-947)
	- ChronicToken._reflectFee(uint256,uint256) (../../sb/chronicToken.sol#904-907)
	- ChronicToken.constructor() (../../sb/chronicToken.sol#728-745)
	- ChronicToken.deliver(uint256) (../../sb/chronicToken.sol#806-813)
	- ChronicToken.tokenFromReflection(uint256) (../../sb/chronicToken.sol#826-830)
	- _tokenTransfer(from,to,amount,takeFee) (../../sb/chronicToken.sol#1076)
		- _tOwned[address(0x0)] = _tOwned[address(0x0)].add(tBurn) (../../sb/chronicToken.sol#962)
		- _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity) (../../sb/chronicToken.sol#954)
		- _tOwned[sender] = _tOwned[sender].sub(tAmount) (../../sb/chronicToken.sol#856)
		- _tOwned[sender] = _tOwned[sender].sub(tAmount) (../../sb/chronicToken.sol#1179)
		- _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount) (../../sb/chronicToken.sol#1169)
		- _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount) (../../sb/chronicToken.sol#858)
	ChronicToken._tOwned (../../sb/chronicToken.sol#679) can be used in cross function reentrancies:
	- ChronicToken._burn(address,uint256) (../../sb/chronicToken.sol#965-982)
	- ChronicToken._getCurrentSupply() (../../sb/chronicToken.sol#937-947)
	- ChronicToken._takeBurn(uint256) (../../sb/chronicToken.sol#957-963)
	- ChronicToken._takeLiquidity(uint256) (../../sb/chronicToken.sol#949-955)
	- ChronicToken._transferBothExcluded(address,address,uint256) (../../sb/chronicToken.sol#854-864)
	- ChronicToken._transferFromExcluded(address,address,uint256) (../../sb/chronicToken.sol#1177-1186)
	- ChronicToken._transferToExcluded(address,address,uint256) (../../sb/chronicToken.sol#1166-1175)
	- ChronicToken.balanceOf(address) (../../sb/chronicToken.sol#763-766)
	- ChronicToken.excludeFromReward(address) (../../sb/chronicToken.sol#832-840)
	- ChronicToken.includeInReward(address) (../../sb/chronicToken.sol#842-853)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities

ChronicToken.addLiquidity(uint256,uint256) (../../sb/chronicToken.sol#1120-1133) ignores return value by uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (../../sb/chronicToken.sol#1125-1132)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return

ChronicToken.allowance(address,address).owner (../../sb/chronicToken.sol#773) shadows:
	- Ownable.owner() (../../sb/chronicToken.sol#417-419) (function)
ChronicToken._approve(address,address,uint256).owner (../../sb/chronicToken.sol#1025) shadows:
	- Ownable.owner() (../../sb/chronicToken.sol#417-419) (function)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing

ChronicToken.setTaxFeePercent(uint256) (../../sb/chronicToken.sol#874-876) should emit an event for: 
	- _taxFee = taxFee (../../sb/chronicToken.sol#875) 
ChronicToken.setBurnFeePercent(uint256) (../../sb/chronicToken.sol#878-880) should emit an event for: 
	- _burnFee = burnFee (../../sb/chronicToken.sol#879) 
ChronicToken.setLiquidityFeePercent(uint256) (../../sb/chronicToken.sol#882-884) should emit an event for: 
	- _liquidityFee = liquidityFee (../../sb/chronicToken.sol#883) 
ChronicToken.setMaxTxPercent(uint256) (../../sb/chronicToken.sol#886-890) should emit an event for: 
	- _maxTxAmount = _tTotal.mul(maxTxPercent).div(10 ** 2) (../../sb/chronicToken.sol#887-889) 
ChronicToken.setMaxTxAmount(uint256) (../../sb/chronicToken.sol#892-894) should emit an event for: 
	- _maxTxAmount = maxTxAmount (../../sb/chronicToken.sol#893) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-arithmetic

Reentrancy in ChronicToken._transfer(address,address,uint256) (../../sb/chronicToken.sol#1033-1077):
	External calls:
	- swapAndLiquify(contractTokenBalance) (../../sb/chronicToken.sol#1064)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (../../sb/chronicToken.sol#1125-1132)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (../../sb/chronicToken.sol#1111-1117)
	External calls sending eth:
	- swapAndLiquify(contractTokenBalance) (../../sb/chronicToken.sol#1064)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (../../sb/chronicToken.sol#1125-1132)
	State variables written after the call(s):
	- _tokenTransfer(from,to,amount,takeFee) (../../sb/chronicToken.sol#1076)
		- _burnFee = _previousBurnFee (../../sb/chronicToken.sol#1018)
		- _burnFee = 0 (../../sb/chronicToken.sol#1012)
	- _tokenTransfer(from,to,amount,takeFee) (../../sb/chronicToken.sol#1076)
		- _liquidityFee = _previousLiquidityFee (../../sb/chronicToken.sol#1017)
		- _liquidityFee = 0 (../../sb/chronicToken.sol#1011)
	- _tokenTransfer(from,to,amount,takeFee) (../../sb/chronicToken.sol#1076)
		- _previousBurnFee = _burnFee (../../sb/chronicToken.sol#1008)
	- _tokenTransfer(from,to,amount,takeFee) (../../sb/chronicToken.sol#1076)
		- _previousLiquidityFee = _liquidityFee (../../sb/chronicToken.sol#1007)
	- _tokenTransfer(from,to,amount,takeFee) (../../sb/chronicToken.sol#1076)
		- _previousTaxFee = _taxFee (../../sb/chronicToken.sol#1006)
	- _tokenTransfer(from,to,amount,takeFee) (../../sb/chronicToken.sol#1076)
		- _tFeeTotal = _tFeeTotal.add(tFee) (../../sb/chronicToken.sol#906)
	- _tokenTransfer(from,to,amount,takeFee) (../../sb/chronicToken.sol#1076)
		- _taxFee = _previousTaxFee (../../sb/chronicToken.sol#1016)
		- _taxFee = 0 (../../sb/chronicToken.sol#1010)
Reentrancy in ChronicToken.swapAndLiquify(uint256) (../../sb/chronicToken.sol#1079-1100):
	External calls:
	- swapTokensForEth(half) (../../sb/chronicToken.sol#1091)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (../../sb/chronicToken.sol#1111-1117)
	- addLiquidity(otherHalf,newBalance) (../../sb/chronicToken.sol#1097)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (../../sb/chronicToken.sol#1125-1132)
	External calls sending eth:
	- addLiquidity(otherHalf,newBalance) (../../sb/chronicToken.sol#1097)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (../../sb/chronicToken.sol#1125-1132)
	State variables written after the call(s):
	- addLiquidity(otherHalf,newBalance) (../../sb/chronicToken.sol#1097)
		- _allowances[owner][spender] = amount (../../sb/chronicToken.sol#1029)
Reentrancy in ChronicToken.transferFrom(address,address,uint256) (../../sb/chronicToken.sol#782-786):
	External calls:
	- _transfer(sender,recipient,amount) (../../sb/chronicToken.sol#783)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (../../sb/chronicToken.sol#1125-1132)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (../../sb/chronicToken.sol#1111-1117)
	External calls sending eth:
	- _transfer(sender,recipient,amount) (../../sb/chronicToken.sol#783)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (../../sb/chronicToken.sol#1125-1132)
	State variables written after the call(s):
	- _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,ERC20: transfer amount exceeds allowance)) (../../sb/chronicToken.sol#784)
		- _allowances[owner][spender] = amount (../../sb/chronicToken.sol#1029)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

Reentrancy in ChronicToken._transfer(address,address,uint256) (../../sb/chronicToken.sol#1033-1077):
	External calls:
	- swapAndLiquify(contractTokenBalance) (../../sb/chronicToken.sol#1064)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (../../sb/chronicToken.sol#1125-1132)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (../../sb/chronicToken.sol#1111-1117)
	External calls sending eth:
	- swapAndLiquify(contractTokenBalance) (../../sb/chronicToken.sol#1064)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (../../sb/chronicToken.sol#1125-1132)
	Event emitted after the call(s):
	- Transfer(sender,recipient,tTransferAmount) (../../sb/chronicToken.sol#1163)
		- _tokenTransfer(from,to,amount,takeFee) (../../sb/chronicToken.sol#1076)
	- Transfer(sender,recipient,tTransferAmount) (../../sb/chronicToken.sol#1174)
		- _tokenTransfer(from,to,amount,takeFee) (../../sb/chronicToken.sol#1076)
	- Transfer(sender,recipient,tTransferAmount) (../../sb/chronicToken.sol#1185)
		- _tokenTransfer(from,to,amount,takeFee) (../../sb/chronicToken.sol#1076)
	- Transfer(sender,recipient,tTransferAmount) (../../sb/chronicToken.sol#863)
		- _tokenTransfer(from,to,amount,takeFee) (../../sb/chronicToken.sol#1076)
Reentrancy in ChronicToken.swapAndLiquify(uint256) (../../sb/chronicToken.sol#1079-1100):
	External calls:
	- swapTokensForEth(half) (../../sb/chronicToken.sol#1091)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (../../sb/chronicToken.sol#1111-1117)
	- addLiquidity(otherHalf,newBalance) (../../sb/chronicToken.sol#1097)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (../../sb/chronicToken.sol#1125-1132)
	External calls sending eth:
	- addLiquidity(otherHalf,newBalance) (../../sb/chronicToken.sol#1097)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (../../sb/chronicToken.sol#1125-1132)
	Event emitted after the call(s):
	- Approval(owner,spender,amount) (../../sb/chronicToken.sol#1030)
		- addLiquidity(otherHalf,newBalance) (../../sb/chronicToken.sol#1097)
	- SwapAndLiquify(half,newBalance,otherHalf) (../../sb/chronicToken.sol#1099)
Reentrancy in ChronicToken.transferFrom(address,address,uint256) (../../sb/chronicToken.sol#782-786):
	External calls:
	- _transfer(sender,recipient,amount) (../../sb/chronicToken.sol#783)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (../../sb/chronicToken.sol#1125-1132)
		- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (../../sb/chronicToken.sol#1111-1117)
	External calls sending eth:
	- _transfer(sender,recipient,amount) (../../sb/chronicToken.sol#783)
		- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (../../sb/chronicToken.sol#1125-1132)
	Event emitted after the call(s):
	- Approval(owner,spender,amount) (../../sb/chronicToken.sol#1030)
		- _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,ERC20: transfer amount exceeds allowance)) (../../sb/chronicToken.sol#784)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

Ownable.unlock() (../../sb/chronicToken.sol#464-469) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(now > _lockTime,Contract is locked until 7 days) (../../sb/chronicToken.sol#466)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

Address.isContract(address) (../../sb/chronicToken.sol#269-278) uses assembly
	- INLINE ASM (../../sb/chronicToken.sol#276)
Address._functionCallWithValue(address,bytes,uint256,string) (../../sb/chronicToken.sol#362-383) uses assembly
	- INLINE ASM (../../sb/chronicToken.sol#375-378)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage

ChronicToken.includeInReward(address) (../../sb/chronicToken.sol#842-853) has costly operations inside a loop:
	- _excluded.pop() (../../sb/chronicToken.sol#849)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#costly-operations-inside-a-loop

Address._functionCallWithValue(address,bytes,uint256,string) (../../sb/chronicToken.sol#362-383) is never used and should be removed
Address.functionCall(address,bytes) (../../sb/chronicToken.sol#322-324) is never used and should be removed
Address.functionCall(address,bytes,string) (../../sb/chronicToken.sol#332-334) is never used and should be removed
Address.functionCallWithValue(address,bytes,uint256) (../../sb/chronicToken.sol#347-349) is never used and should be removed
Address.functionCallWithValue(address,bytes,uint256,string) (../../sb/chronicToken.sol#357-360) is never used and should be removed
Address.isContract(address) (../../sb/chronicToken.sol#269-278) is never used and should be removed
Address.sendValue(address,uint256) (../../sb/chronicToken.sol#296-302) is never used and should be removed
Context._msgData() (../../sb/chronicToken.sol#242-245) is never used and should be removed
SafeMath.mod(uint256,uint256) (../../sb/chronicToken.sol#215-217) is never used and should be removed
SafeMath.mod(uint256,uint256,string) (../../sb/chronicToken.sol#231-234) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code

ChronicToken._rTotal (../../sb/chronicToken.sol#689) is set pre-construction with a non-constant function or state variable:
	- (MAX - (MAX % _tTotal))
ChronicToken._previousTaxFee (../../sb/chronicToken.sol#697) is set pre-construction with a non-constant function or state variable:
	- _taxFee
ChronicToken._previousLiquidityFee (../../sb/chronicToken.sol#700) is set pre-construction with a non-constant function or state variable:
	- _liquidityFee
ChronicToken._previousBurnFee (../../sb/chronicToken.sol#703) is set pre-construction with a non-constant function or state variable:
	- _burnFee
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#function-initializing-state

Pragma version^0.6.12 (../../sb/chronicToken.sol#1) allows old versions
solc-0.6.12 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Low level call in Address.sendValue(address,uint256) (../../sb/chronicToken.sol#296-302):
	- (success) = recipient.call{value: amount}() (../../sb/chronicToken.sol#300)
Low level call in Address._functionCallWithValue(address,bytes,uint256,string) (../../sb/chronicToken.sol#362-383):
	- (success,returndata) = target.call{value: weiValue}(data) (../../sb/chronicToken.sol#366)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls

Function IUniswapV2Pair.DOMAIN_SEPARATOR() (../../sb/chronicToken.sol#503) is not in mixedCase
Function IUniswapV2Pair.PERMIT_TYPEHASH() (../../sb/chronicToken.sol#504) is not in mixedCase
Function IUniswapV2Pair.MINIMUM_LIQUIDITY() (../../sb/chronicToken.sol#521) is not in mixedCase
Function IUniswapV2Router01.WETH() (../../sb/chronicToken.sol#541) is not in mixedCase
Parameter ChronicToken.setSwapAndLiquifyEnabled(bool)._enabled (../../sb/chronicToken.sol#896) is not in mixedCase
Function ChronicToken._burn(address,uint256) (../../sb/chronicToken.sol#965-982) is not in mixedCase
Parameter ChronicToken.calculateTaxFee(uint256)._amount (../../sb/chronicToken.sol#984) is not in mixedCase
Parameter ChronicToken.calculateLiquidityFee(uint256)._amount (../../sb/chronicToken.sol#990) is not in mixedCase
Parameter ChronicToken.calculateBurnFee(uint256)._amount (../../sb/chronicToken.sol#996) is not in mixedCase
Variable ChronicToken._taxFee (../../sb/chronicToken.sol#696) is not in mixedCase
Variable ChronicToken._liquidityFee (../../sb/chronicToken.sol#699) is not in mixedCase
Variable ChronicToken._burnFee (../../sb/chronicToken.sol#702) is not in mixedCase
Variable ChronicToken._maxTxAmount (../../sb/chronicToken.sol#711) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Redundant expression "this (../../sb/chronicToken.sol#243)" inContext (../../sb/chronicToken.sol#237-246)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#redundant-statements

Variable IUniswapV2Router01.addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256).amountADesired (../../sb/chronicToken.sol#546) is too similar to IUniswapV2Router01.addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256).amountBDesired (../../sb/chronicToken.sol#547)
Variable ChronicToken._transferBothExcluded(address,address,uint256).rTransferAmount (../../sb/chronicToken.sol#855) is too similar to ChronicToken._transferBothExcluded(address,address,uint256).tTransferAmount (../../sb/chronicToken.sol#855)
Variable ChronicToken._getRValues(uint256,uint256,uint256,uint256,uint256).rTransferAmount (../../sb/chronicToken.sol#928) is too similar to ChronicToken._getTValues(uint256).tTransferAmount (../../sb/chronicToken.sol#919)
Variable ChronicToken._transferFromExcluded(address,address,uint256).rTransferAmount (../../sb/chronicToken.sol#1178) is too similar to ChronicToken._getTValues(uint256).tTransferAmount (../../sb/chronicToken.sol#919)
Variable ChronicToken._transferStandard(address,address,uint256).rTransferAmount (../../sb/chronicToken.sol#1157) is too similar to ChronicToken._getTValues(uint256).tTransferAmount (../../sb/chronicToken.sol#919)
Variable ChronicToken._transferBothExcluded(address,address,uint256).rTransferAmount (../../sb/chronicToken.sol#855) is too similar to ChronicToken._getTValues(uint256).tTransferAmount (../../sb/chronicToken.sol#919)
Variable ChronicToken._transferStandard(address,address,uint256).rTransferAmount (../../sb/chronicToken.sol#1157) is too similar to ChronicToken._transferStandard(address,address,uint256).tTransferAmount (../../sb/chronicToken.sol#1157)
Variable ChronicToken._transferToExcluded(address,address,uint256).rTransferAmount (../../sb/chronicToken.sol#1167) is too similar to ChronicToken._transferToExcluded(address,address,uint256).tTransferAmount (../../sb/chronicToken.sol#1167)
Variable ChronicToken._transferToExcluded(address,address,uint256).rTransferAmount (../../sb/chronicToken.sol#1167) is too similar to ChronicToken._transferFromExcluded(address,address,uint256).tTransferAmount (../../sb/chronicToken.sol#1178)
Variable ChronicToken._transferToExcluded(address,address,uint256).rTransferAmount (../../sb/chronicToken.sol#1167) is too similar to ChronicToken._getValues(uint256).tTransferAmount (../../sb/chronicToken.sol#910)
Variable ChronicToken._getRValues(uint256,uint256,uint256,uint256,uint256).rTransferAmount (../../sb/chronicToken.sol#928) is too similar to ChronicToken._transferFromExcluded(address,address,uint256).tTransferAmount (../../sb/chronicToken.sol#1178)
Variable ChronicToken._transferStandard(address,address,uint256).rTransferAmount (../../sb/chronicToken.sol#1157) is too similar to ChronicToken._transferToExcluded(address,address,uint256).tTransferAmount (../../sb/chronicToken.sol#1167)
Variable ChronicToken._transferFromExcluded(address,address,uint256).rTransferAmount (../../sb/chronicToken.sol#1178) is too similar to ChronicToken._transferFromExcluded(address,address,uint256).tTransferAmount (../../sb/chronicToken.sol#1178)
Variable ChronicToken._transferStandard(address,address,uint256).rTransferAmount (../../sb/chronicToken.sol#1157) is too similar to ChronicToken._transferFromExcluded(address,address,uint256).tTransferAmount (../../sb/chronicToken.sol#1178)
Variable ChronicToken._transferToExcluded(address,address,uint256).rTransferAmount (../../sb/chronicToken.sol#1167) is too similar to ChronicToken._transferBothExcluded(address,address,uint256).tTransferAmount (../../sb/chronicToken.sol#855)
Variable ChronicToken._transferBothExcluded(address,address,uint256).rTransferAmount (../../sb/chronicToken.sol#855) is too similar to ChronicToken._transferFromExcluded(address,address,uint256).tTransferAmount (../../sb/chronicToken.sol#1178)
Variable ChronicToken._getRValues(uint256,uint256,uint256,uint256,uint256).rTransferAmount (../../sb/chronicToken.sol#928) is too similar to ChronicToken._getValues(uint256).tTransferAmount (../../sb/chronicToken.sol#910)
Variable ChronicToken._transferFromExcluded(address,address,uint256).rTransferAmount (../../sb/chronicToken.sol#1178) is too similar to ChronicToken._getValues(uint256).tTransferAmount (../../sb/chronicToken.sol#910)
Variable ChronicToken._transferStandard(address,address,uint256).rTransferAmount (../../sb/chronicToken.sol#1157) is too similar to ChronicToken._getValues(uint256).tTransferAmount (../../sb/chronicToken.sol#910)
Variable ChronicToken._getRValues(uint256,uint256,uint256,uint256,uint256).rTransferAmount (../../sb/chronicToken.sol#928) is too similar to ChronicToken._transferBothExcluded(address,address,uint256).tTransferAmount (../../sb/chronicToken.sol#855)
Variable ChronicToken._transferBothExcluded(address,address,uint256).rTransferAmount (../../sb/chronicToken.sol#855) is too similar to ChronicToken._getValues(uint256).tTransferAmount (../../sb/chronicToken.sol#910)
Variable ChronicToken._transferToExcluded(address,address,uint256).rTransferAmount (../../sb/chronicToken.sol#1167) is too similar to ChronicToken._getTValues(uint256).tTransferAmount (../../sb/chronicToken.sol#919)
Variable ChronicToken._transferFromExcluded(address,address,uint256).rTransferAmount (../../sb/chronicToken.sol#1178) is too similar to ChronicToken._transferBothExcluded(address,address,uint256).tTransferAmount (../../sb/chronicToken.sol#855)
Variable ChronicToken._transferStandard(address,address,uint256).rTransferAmount (../../sb/chronicToken.sol#1157) is too similar to ChronicToken._transferBothExcluded(address,address,uint256).tTransferAmount (../../sb/chronicToken.sol#855)
Variable ChronicToken._transferFromExcluded(address,address,uint256).rTransferAmount (../../sb/chronicToken.sol#1178) is too similar to ChronicToken._transferToExcluded(address,address,uint256).tTransferAmount (../../sb/chronicToken.sol#1167)
Variable ChronicToken._getValues(uint256).rTransferAmount (../../sb/chronicToken.sol#911) is too similar to ChronicToken._getTValues(uint256).tTransferAmount (../../sb/chronicToken.sol#919)
Variable ChronicToken._getValues(uint256).rTransferAmount (../../sb/chronicToken.sol#911) is too similar to ChronicToken._transferToExcluded(address,address,uint256).tTransferAmount (../../sb/chronicToken.sol#1167)
Variable ChronicToken.reflectionFromToken(uint256,bool).rTransferAmount (../../sb/chronicToken.sol#821) is too similar to ChronicToken._transferToExcluded(address,address,uint256).tTransferAmount (../../sb/chronicToken.sol#1167)
Variable ChronicToken.reflectionFromToken(uint256,bool).rTransferAmount (../../sb/chronicToken.sol#821) is too similar to ChronicToken._getTValues(uint256).tTransferAmount (../../sb/chronicToken.sol#919)
Variable ChronicToken._transferFromExcluded(address,address,uint256).rTransferAmount (../../sb/chronicToken.sol#1178) is too similar to ChronicToken._transferStandard(address,address,uint256).tTransferAmount (../../sb/chronicToken.sol#1157)
Variable ChronicToken._getValues(uint256).rTransferAmount (../../sb/chronicToken.sol#911) is too similar to ChronicToken._transferBothExcluded(address,address,uint256).tTransferAmount (../../sb/chronicToken.sol#855)
Variable ChronicToken._transferToExcluded(address,address,uint256).rTransferAmount (../../sb/chronicToken.sol#1167) is too similar to ChronicToken._transferStandard(address,address,uint256).tTransferAmount (../../sb/chronicToken.sol#1157)
Variable ChronicToken._getValues(uint256).rTransferAmount (../../sb/chronicToken.sol#911) is too similar to ChronicToken._transferFromExcluded(address,address,uint256).tTransferAmount (../../sb/chronicToken.sol#1178)
Variable ChronicToken._getValues(uint256).rTransferAmount (../../sb/chronicToken.sol#911) is too similar to ChronicToken._transferStandard(address,address,uint256).tTransferAmount (../../sb/chronicToken.sol#1157)
Variable ChronicToken.reflectionFromToken(uint256,bool).rTransferAmount (../../sb/chronicToken.sol#821) is too similar to ChronicToken._transferFromExcluded(address,address,uint256).tTransferAmount (../../sb/chronicToken.sol#1178)
Variable ChronicToken.reflectionFromToken(uint256,bool).rTransferAmount (../../sb/chronicToken.sol#821) is too similar to ChronicToken._transferBothExcluded(address,address,uint256).tTransferAmount (../../sb/chronicToken.sol#855)
Variable ChronicToken._transferBothExcluded(address,address,uint256).rTransferAmount (../../sb/chronicToken.sol#855) is too similar to ChronicToken._transferToExcluded(address,address,uint256).tTransferAmount (../../sb/chronicToken.sol#1167)
Variable ChronicToken.reflectionFromToken(uint256,bool).rTransferAmount (../../sb/chronicToken.sol#821) is too similar to ChronicToken._transferStandard(address,address,uint256).tTransferAmount (../../sb/chronicToken.sol#1157)
Variable ChronicToken._transferBothExcluded(address,address,uint256).rTransferAmount (../../sb/chronicToken.sol#855) is too similar to ChronicToken._transferStandard(address,address,uint256).tTransferAmount (../../sb/chronicToken.sol#1157)
Variable ChronicToken._getValues(uint256).rTransferAmount (../../sb/chronicToken.sol#911) is too similar to ChronicToken._getValues(uint256).tTransferAmount (../../sb/chronicToken.sol#910)
Variable ChronicToken._getRValues(uint256,uint256,uint256,uint256,uint256).rTransferAmount (../../sb/chronicToken.sol#928) is too similar to ChronicToken._transferToExcluded(address,address,uint256).tTransferAmount (../../sb/chronicToken.sol#1167)
Variable ChronicToken.reflectionFromToken(uint256,bool).rTransferAmount (../../sb/chronicToken.sol#821) is too similar to ChronicToken._getValues(uint256).tTransferAmount (../../sb/chronicToken.sol#910)
Variable ChronicToken._getRValues(uint256,uint256,uint256,uint256,uint256).rTransferAmount (../../sb/chronicToken.sol#928) is too similar to ChronicToken._transferStandard(address,address,uint256).tTransferAmount (../../sb/chronicToken.sol#1157)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#variable-names-too-similar

ChronicToken.slitherConstructorVariables() (../../sb/chronicToken.sol#674-1187) uses literals with too many digits:
	- _tTotal = 4200000000 * 10 ** 18 (../../sb/chronicToken.sol#688)
ChronicToken.slitherConstructorVariables() (../../sb/chronicToken.sol#674-1187) uses literals with too many digits:
	- _maxTxAmount = 4200000000 * 10 ** 18 (../../sb/chronicToken.sol#711)
ChronicToken.slitherConstructorVariables() (../../sb/chronicToken.sol#674-1187) uses literals with too many digits:
	- numTokensSellToAddToLiquidity = 2100000000 * 10 ** 18 (../../sb/chronicToken.sol#712)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits

Loop condition i < _excluded.length (../../sb/chronicToken.sol#940) should use cached array length instead of referencing `length` member of the storage array.
 Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#cache-array-length

ChronicToken._decimals (../../sb/chronicToken.sol#694) should be constant 
ChronicToken._name (../../sb/chronicToken.sol#692) should be constant 
ChronicToken._symbol (../../sb/chronicToken.sol#693) should be constant 
ChronicToken.numTokensSellToAddToLiquidity (../../sb/chronicToken.sol#712) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant
/sb/chronicToken.sol analyzed (10 contracts with 93 detectors), 102 result(s) found
