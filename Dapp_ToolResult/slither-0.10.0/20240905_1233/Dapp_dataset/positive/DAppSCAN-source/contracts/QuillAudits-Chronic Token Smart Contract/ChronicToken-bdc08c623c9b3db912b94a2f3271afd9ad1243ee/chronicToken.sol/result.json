{
    "errors": [],
    "fails": [],
    "findings": [
        {
            "confidence": "Medium",
            "contract": "ChronicToken",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Chronic Token Smart Contract/ChronicToken-bdc08c623c9b3db912b94a2f3271afd9ad1243ee/chronicToken.sol",
            "function": "_transfer",
            "impact": "High",
            "line": 1033,
            "line_end": 1077,
            "message": "Reentrancy in ChronicToken._transfer(address,address,uint256) (chronicToken.sol#1033-1077):\n\tExternal calls:\n\t- swapAndLiquify(contractTokenBalance) (chronicToken.sol#1064)\n\t\t- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (chronicToken.sol#1125-1132)\n\t\t- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (chronicToken.sol#1111-1117)\n\tExternal calls sending eth:\n\t- swapAndLiquify(contractTokenBalance) (chronicToken.sol#1064)\n\t\t- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (chronicToken.sol#1125-1132)\n\tState variables written after the call(s):\n\t- _tokenTransfer(from,to,amount,takeFee) (chronicToken.sol#1076)\n\t\t- _rOwned[address(0x0)] = _rOwned[address(0x0)].add(rBurn) (chronicToken.sol#960)\n\t\t- _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity) (chronicToken.sol#952)\n\t\t- _rOwned[sender] = _rOwned[sender].sub(rAmount) (chronicToken.sol#1168)\n\t\t- _rOwned[sender] = _rOwned[sender].sub(rAmount) (chronicToken.sol#1158)\n\t\t- _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount) (chronicToken.sol#1159)\n\t\t- _rOwned[sender] = _rOwned[sender].sub(rAmount) (chronicToken.sol#857)\n\t\t- _rOwned[sender] = _rOwned[sender].sub(rAmount) (chronicToken.sol#1180)\n\t\t- _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount) (chronicToken.sol#1181)\n\t\t- _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount) (chronicToken.sol#1170)\n\t\t- _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount) (chronicToken.sol#859)\n\tChronicToken._rOwned (chronicToken.sol#678) can be used in cross function reentrancies:\n\t- ChronicToken._burn(address,uint256) (chronicToken.sol#965-982)\n\t- ChronicToken._getCurrentSupply() (chronicToken.sol#937-947)\n\t- ChronicToken._takeBurn(uint256) (chronicToken.sol#957-963)\n\t- ChronicToken._takeLiquidity(uint256) (chronicToken.sol#949-955)\n\t- ChronicToken._transferBothExcluded(address,address,uint256) (chronicToken.sol#854-864)\n\t- ChronicToken._transferFromExcluded(address,address,uint256) (chronicToken.sol#1177-1186)\n\t- ChronicToken._transferStandard(address,address,uint256) (chronicToken.sol#1156-1164)\n\t- ChronicToken._transferToExcluded(address,address,uint256) (chronicToken.sol#1166-1175)\n\t- ChronicToken.balanceOf(address) (chronicToken.sol#763-766)\n\t- ChronicToken.constructor() (chronicToken.sol#728-745)\n\t- ChronicToken.deliver(uint256) (chronicToken.sol#806-813)\n\t- ChronicToken.excludeFromReward(address) (chronicToken.sol#832-840)\n\t- _tokenTransfer(from,to,amount,takeFee) (chronicToken.sol#1076)\n\t\t- _rTotal = _rTotal.sub(rFee) (chronicToken.sol#905)\n\tChronicToken._rTotal (chronicToken.sol#689) can be used in cross function reentrancies:\n\t- ChronicToken._burn(address,uint256) (chronicToken.sol#965-982)\n\t- ChronicToken._getCurrentSupply() (chronicToken.sol#937-947)\n\t- ChronicToken._reflectFee(uint256,uint256) (chronicToken.sol#904-907)\n\t- ChronicToken.constructor() (chronicToken.sol#728-745)\n\t- ChronicToken.deliver(uint256) (chronicToken.sol#806-813)\n\t- ChronicToken.tokenFromReflection(uint256) (chronicToken.sol#826-830)\n\t- _tokenTransfer(from,to,amount,takeFee) (chronicToken.sol#1076)\n\t\t- _tOwned[address(0x0)] = _tOwned[address(0x0)].add(tBurn) (chronicToken.sol#962)\n\t\t- _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity) (chronicToken.sol#954)\n\t\t- _tOwned[sender] = _tOwned[sender].sub(tAmount) (chronicToken.sol#856)\n\t\t- _tOwned[sender] = _tOwned[sender].sub(tAmount) (chronicToken.sol#1179)\n\t\t- _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount) (chronicToken.sol#1169)\n\t\t- _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount) (chronicToken.sol#858)\n\tChronicToken._tOwned (chronicToken.sol#679) can be used in cross function reentrancies:\n\t- ChronicToken._burn(address,uint256) (chronicToken.sol#965-982)\n\t- ChronicToken._getCurrentSupply() (chronicToken.sol#937-947)\n\t- ChronicToken._takeBurn(uint256) (chronicToken.sol#957-963)\n\t- ChronicToken._takeLiquidity(uint256) (chronicToken.sol#949-955)\n\t- ChronicToken._transferBothExcluded(address,address,uint256) (chronicToken.sol#854-864)\n\t- ChronicToken._transferFromExcluded(address,address,uint256) (chronicToken.sol#1177-1186)\n\t- ChronicToken._transferToExcluded(address,address,uint256) (chronicToken.sol#1166-1175)\n\t- ChronicToken.balanceOf(address) (chronicToken.sol#763-766)\n\t- ChronicToken.excludeFromReward(address) (chronicToken.sol#832-840)\n\t- ChronicToken.includeInReward(address) (chronicToken.sol#842-853)\n",
            "name": "reentrancy-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "ChronicToken",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Chronic Token Smart Contract/ChronicToken-bdc08c623c9b3db912b94a2f3271afd9ad1243ee/chronicToken.sol",
            "function": "addLiquidity",
            "impact": "Medium",
            "line": 1120,
            "line_end": 1133,
            "message": "ChronicToken.addLiquidity(uint256,uint256) (chronicToken.sol#1120-1133) ignores return value by uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (chronicToken.sol#1125-1132)\n",
            "name": "unused-return",
            "check": "FP"
        },
        {
            "confidence": "High",
            "contract": "Ownable",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Chronic Token Smart Contract/ChronicToken-bdc08c623c9b3db912b94a2f3271afd9ad1243ee/chronicToken.sol",
            "function": "owner",
            "impact": "Low",
            "line": 1025,
            "message": "ChronicToken._approve(address,address,uint256).owner (chronicToken.sol#1025) shadows:\n\t- Ownable.owner() (chronicToken.sol#417-419) (function)\n",
            "name": "shadowing-local",
            "check": "FP"
        },
        {
            "confidence": "High",
            "contract": "Ownable",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Chronic Token Smart Contract/ChronicToken-bdc08c623c9b3db912b94a2f3271afd9ad1243ee/chronicToken.sol",
            "function": "owner",
            "impact": "Low",
            "line": 773,
            "message": "ChronicToken.allowance(address,address).owner (chronicToken.sol#773) shadows:\n\t- Ownable.owner() (chronicToken.sol#417-419) (function)\n",
            "name": "shadowing-local",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "ChronicToken",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Chronic Token Smart Contract/ChronicToken-bdc08c623c9b3db912b94a2f3271afd9ad1243ee/chronicToken.sol",
            "function": "setMaxTxPercent",
            "impact": "Low",
            "line": 886,
            "line_end": 890,
            "message": "ChronicToken.setMaxTxPercent(uint256) (chronicToken.sol#886-890) should emit an event for: \n\t- _maxTxAmount = _tTotal.mul(maxTxPercent).div(10 ** 2) (chronicToken.sol#887-889) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "ChronicToken",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Chronic Token Smart Contract/ChronicToken-bdc08c623c9b3db912b94a2f3271afd9ad1243ee/chronicToken.sol",
            "function": "setBurnFeePercent",
            "impact": "Low",
            "line": 878,
            "line_end": 880,
            "message": "ChronicToken.setBurnFeePercent(uint256) (chronicToken.sol#878-880) should emit an event for: \n\t- _burnFee = burnFee (chronicToken.sol#879) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "ChronicToken",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Chronic Token Smart Contract/ChronicToken-bdc08c623c9b3db912b94a2f3271afd9ad1243ee/chronicToken.sol",
            "function": "setLiquidityFeePercent",
            "impact": "Low",
            "line": 882,
            "line_end": 884,
            "message": "ChronicToken.setLiquidityFeePercent(uint256) (chronicToken.sol#882-884) should emit an event for: \n\t- _liquidityFee = liquidityFee (chronicToken.sol#883) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "ChronicToken",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Chronic Token Smart Contract/ChronicToken-bdc08c623c9b3db912b94a2f3271afd9ad1243ee/chronicToken.sol",
            "function": "setMaxTxAmount",
            "impact": "Low",
            "line": 892,
            "line_end": 894,
            "message": "ChronicToken.setMaxTxAmount(uint256) (chronicToken.sol#892-894) should emit an event for: \n\t- _maxTxAmount = maxTxAmount (chronicToken.sol#893) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "ChronicToken",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Chronic Token Smart Contract/ChronicToken-bdc08c623c9b3db912b94a2f3271afd9ad1243ee/chronicToken.sol",
            "function": "setTaxFeePercent",
            "impact": "Low",
            "line": 874,
            "line_end": 876,
            "message": "ChronicToken.setTaxFeePercent(uint256) (chronicToken.sol#874-876) should emit an event for: \n\t- _taxFee = taxFee (chronicToken.sol#875) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "ChronicToken",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Chronic Token Smart Contract/ChronicToken-bdc08c623c9b3db912b94a2f3271afd9ad1243ee/chronicToken.sol",
            "function": "transferFrom",
            "impact": "Low",
            "line": 782,
            "line_end": 786,
            "message": "Reentrancy in ChronicToken.transferFrom(address,address,uint256) (chronicToken.sol#782-786):\n\tExternal calls:\n\t- _transfer(sender,recipient,amount) (chronicToken.sol#783)\n\t\t- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (chronicToken.sol#1125-1132)\n\t\t- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (chronicToken.sol#1111-1117)\n\tExternal calls sending eth:\n\t- _transfer(sender,recipient,amount) (chronicToken.sol#783)\n\t\t- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (chronicToken.sol#1125-1132)\n\tState variables written after the call(s):\n\t- _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,ERC20: transfer amount exceeds allowance)) (chronicToken.sol#784)\n\t\t- _allowances[owner][spender] = amount (chronicToken.sol#1029)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "ChronicToken",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Chronic Token Smart Contract/ChronicToken-bdc08c623c9b3db912b94a2f3271afd9ad1243ee/chronicToken.sol",
            "function": "_transfer",
            "impact": "Low",
            "line": 1033,
            "line_end": 1077,
            "message": "Reentrancy in ChronicToken._transfer(address,address,uint256) (chronicToken.sol#1033-1077):\n\tExternal calls:\n\t- swapAndLiquify(contractTokenBalance) (chronicToken.sol#1064)\n\t\t- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (chronicToken.sol#1125-1132)\n\t\t- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (chronicToken.sol#1111-1117)\n\tExternal calls sending eth:\n\t- swapAndLiquify(contractTokenBalance) (chronicToken.sol#1064)\n\t\t- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (chronicToken.sol#1125-1132)\n\tState variables written after the call(s):\n\t- _tokenTransfer(from,to,amount,takeFee) (chronicToken.sol#1076)\n\t\t- _burnFee = _previousBurnFee (chronicToken.sol#1018)\n\t\t- _burnFee = 0 (chronicToken.sol#1012)\n\t- _tokenTransfer(from,to,amount,takeFee) (chronicToken.sol#1076)\n\t\t- _liquidityFee = _previousLiquidityFee (chronicToken.sol#1017)\n\t\t- _liquidityFee = 0 (chronicToken.sol#1011)\n\t- _tokenTransfer(from,to,amount,takeFee) (chronicToken.sol#1076)\n\t\t- _previousBurnFee = _burnFee (chronicToken.sol#1008)\n\t- _tokenTransfer(from,to,amount,takeFee) (chronicToken.sol#1076)\n\t\t- _previousLiquidityFee = _liquidityFee (chronicToken.sol#1007)\n\t- _tokenTransfer(from,to,amount,takeFee) (chronicToken.sol#1076)\n\t\t- _previousTaxFee = _taxFee (chronicToken.sol#1006)\n\t- _tokenTransfer(from,to,amount,takeFee) (chronicToken.sol#1076)\n\t\t- _tFeeTotal = _tFeeTotal.add(tFee) (chronicToken.sol#906)\n\t- _tokenTransfer(from,to,amount,takeFee) (chronicToken.sol#1076)\n\t\t- _taxFee = _previousTaxFee (chronicToken.sol#1016)\n\t\t- _taxFee = 0 (chronicToken.sol#1010)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "ChronicToken",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Chronic Token Smart Contract/ChronicToken-bdc08c623c9b3db912b94a2f3271afd9ad1243ee/chronicToken.sol",
            "function": "swapAndLiquify",
            "impact": "Low",
            "line": 1079,
            "line_end": 1100,
            "message": "Reentrancy in ChronicToken.swapAndLiquify(uint256) (chronicToken.sol#1079-1100):\n\tExternal calls:\n\t- swapTokensForEth(half) (chronicToken.sol#1091)\n\t\t- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (chronicToken.sol#1111-1117)\n\t- addLiquidity(otherHalf,newBalance) (chronicToken.sol#1097)\n\t\t- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (chronicToken.sol#1125-1132)\n\tExternal calls sending eth:\n\t- addLiquidity(otherHalf,newBalance) (chronicToken.sol#1097)\n\t\t- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (chronicToken.sol#1125-1132)\n\tState variables written after the call(s):\n\t- addLiquidity(otherHalf,newBalance) (chronicToken.sol#1097)\n\t\t- _allowances[owner][spender] = amount (chronicToken.sol#1029)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "ChronicToken",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Chronic Token Smart Contract/ChronicToken-bdc08c623c9b3db912b94a2f3271afd9ad1243ee/chronicToken.sol",
            "function": "transferFrom",
            "impact": "Low",
            "line": 782,
            "line_end": 786,
            "message": "Reentrancy in ChronicToken.transferFrom(address,address,uint256) (chronicToken.sol#782-786):\n\tExternal calls:\n\t- _transfer(sender,recipient,amount) (chronicToken.sol#783)\n\t\t- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (chronicToken.sol#1125-1132)\n\t\t- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (chronicToken.sol#1111-1117)\n\tExternal calls sending eth:\n\t- _transfer(sender,recipient,amount) (chronicToken.sol#783)\n\t\t- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (chronicToken.sol#1125-1132)\n\tEvent emitted after the call(s):\n\t- Approval(owner,spender,amount) (chronicToken.sol#1030)\n\t\t- _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,ERC20: transfer amount exceeds allowance)) (chronicToken.sol#784)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "ChronicToken",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Chronic Token Smart Contract/ChronicToken-bdc08c623c9b3db912b94a2f3271afd9ad1243ee/chronicToken.sol",
            "function": "swapAndLiquify",
            "impact": "Low",
            "line": 1079,
            "line_end": 1100,
            "message": "Reentrancy in ChronicToken.swapAndLiquify(uint256) (chronicToken.sol#1079-1100):\n\tExternal calls:\n\t- swapTokensForEth(half) (chronicToken.sol#1091)\n\t\t- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (chronicToken.sol#1111-1117)\n\t- addLiquidity(otherHalf,newBalance) (chronicToken.sol#1097)\n\t\t- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (chronicToken.sol#1125-1132)\n\tExternal calls sending eth:\n\t- addLiquidity(otherHalf,newBalance) (chronicToken.sol#1097)\n\t\t- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (chronicToken.sol#1125-1132)\n\tEvent emitted after the call(s):\n\t- Approval(owner,spender,amount) (chronicToken.sol#1030)\n\t\t- addLiquidity(otherHalf,newBalance) (chronicToken.sol#1097)\n\t- SwapAndLiquify(half,newBalance,otherHalf) (chronicToken.sol#1099)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "ChronicToken",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Chronic Token Smart Contract/ChronicToken-bdc08c623c9b3db912b94a2f3271afd9ad1243ee/chronicToken.sol",
            "function": "_transfer",
            "impact": "Low",
            "line": 1033,
            "line_end": 1077,
            "message": "Reentrancy in ChronicToken._transfer(address,address,uint256) (chronicToken.sol#1033-1077):\n\tExternal calls:\n\t- swapAndLiquify(contractTokenBalance) (chronicToken.sol#1064)\n\t\t- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (chronicToken.sol#1125-1132)\n\t\t- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (chronicToken.sol#1111-1117)\n\tExternal calls sending eth:\n\t- swapAndLiquify(contractTokenBalance) (chronicToken.sol#1064)\n\t\t- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (chronicToken.sol#1125-1132)\n\tEvent emitted after the call(s):\n\t- Transfer(sender,recipient,tTransferAmount) (chronicToken.sol#1163)\n\t\t- _tokenTransfer(from,to,amount,takeFee) (chronicToken.sol#1076)\n\t- Transfer(sender,recipient,tTransferAmount) (chronicToken.sol#1174)\n\t\t- _tokenTransfer(from,to,amount,takeFee) (chronicToken.sol#1076)\n\t- Transfer(sender,recipient,tTransferAmount) (chronicToken.sol#1185)\n\t\t- _tokenTransfer(from,to,amount,takeFee) (chronicToken.sol#1076)\n\t- Transfer(sender,recipient,tTransferAmount) (chronicToken.sol#863)\n\t\t- _tokenTransfer(from,to,amount,takeFee) (chronicToken.sol#1076)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Ownable",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Chronic Token Smart Contract/ChronicToken-bdc08c623c9b3db912b94a2f3271afd9ad1243ee/chronicToken.sol",
            "function": "unlock",
            "impact": "Low",
            "line": 464,
            "line_end": 469,
            "message": "Ownable.unlock() (chronicToken.sol#464-469) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(now > _lockTime,Contract is locked until 7 days) (chronicToken.sol#466)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "ChronicToken",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Chronic Token Smart Contract/ChronicToken-bdc08c623c9b3db912b94a2f3271afd9ad1243ee/chronicToken.sol",
            "function": "includeInReward",
            "impact": "Informational",
            "line": 842,
            "line_end": 853,
            "message": "ChronicToken.includeInReward(address) (chronicToken.sol#842-853) has costly operations inside a loop:\n\t- _excluded.pop() (chronicToken.sol#849)\n",
            "name": "costly-loop",
            "check": "FP"
        },
        {
            "confidence": "High",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Chronic Token Smart Contract/ChronicToken-bdc08c623c9b3db912b94a2f3271afd9ad1243ee/chronicToken.sol",
            "impact": "Informational",
            "line": 700,
            "message": "ChronicToken._previousLiquidityFee (chronicToken.sol#700) is set pre-construction with a non-constant function or state variable:\n\t- _liquidityFee\n",
            "name": "function-init-state",
            "check": "FP"
        },
        {
            "confidence": "High",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Chronic Token Smart Contract/ChronicToken-bdc08c623c9b3db912b94a2f3271afd9ad1243ee/chronicToken.sol",
            "impact": "Informational",
            "line": 703,
            "message": "ChronicToken._previousBurnFee (chronicToken.sol#703) is set pre-construction with a non-constant function or state variable:\n\t- _burnFee\n",
            "name": "function-init-state",
            "check": "FP"
        },
        {
            "confidence": "High",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Chronic Token Smart Contract/ChronicToken-bdc08c623c9b3db912b94a2f3271afd9ad1243ee/chronicToken.sol",
            "impact": "Informational",
            "line": 697,
            "message": "ChronicToken._previousTaxFee (chronicToken.sol#697) is set pre-construction with a non-constant function or state variable:\n\t- _taxFee\n",
            "name": "function-init-state",
            "check": "FP"
        },
        {
            "confidence": "High",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-Chronic Token Smart Contract/ChronicToken-bdc08c623c9b3db912b94a2f3271afd9ad1243ee/chronicToken.sol",
            "impact": "Informational",
            "line": 689,
            "message": "ChronicToken._rTotal (chronicToken.sol#689) is set pre-construction with a non-constant function or state variable:\n\t- (MAX - (MAX % _tTotal))\n",
            "name": "function-init-state",
            "check": "FP"
        }
    ],
    "infos": [],
    "parser": {
        "id": "slither-0.10.0",
        "mode": "solidity",
        "version": "2024/04/30"
    }
}