'solc --version' running
'solc /sb/VEReward.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes --allow-paths .,/sb' running

Reward.getBlockByTime(uint256) (../../sb/VEReward.sol#120-144) performs a multiplication on the result of a division:
	- block_slope = (BlockMultiplier * (point1.blk - point0.blk)) / (point1.ts - point0.ts) (../../sb/VEReward.sol#141)
	- dblock = (block_slope * (_time - point0.ts)) / BlockMultiplier (../../sb/VEReward.sol#142)
Reward.addEpochBatch(uint256,uint256,uint256,uint256) (../../sb/VEReward.sol#175-197) performs a multiplication on the result of a division:
	- numberOfEpoch = (endTime + 1 - startTime) / epochLength (../../sb/VEReward.sol#180)
	- (_epochId + 1 - numberOfEpoch,_epochId,accurateTR * numberOfEpoch) (../../sb/VEReward.sol#196)
Reward._addEpoch(uint256,uint256,uint256) (../../sb/VEReward.sol#202-208) performs a multiplication on the result of a division:
	- rewardPerSecond = totalReward * RewardMultiplier / (endTime - startTime) (../../sb/VEReward.sol#203)
	- accurateTotalReward = (endTime - startTime) * rewardPerSecond / RewardMultiplier (../../sb/VEReward.sol#206)
Reward.getBlockByTimeWithoutLastCheckpoint(uint256) (../../sb/VEReward.sol#367-376) performs a multiplication on the result of a division:
	- block_slope = (BlockMultiplier * (block.number - point0.blk)) / (block.timestamp - point0.ts) (../../sb/VEReward.sol#373)
	- dblock = (block_slope * (_time - point0.ts)) / BlockMultiplier (../../sb/VEReward.sol#374)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply

Reward.pendingReward(uint256) (../../sb/VEReward.sol#439-481) uses a dangerous strict equality:
	- rewards[i_scope_0].reward == 0 (../../sb/VEReward.sol#460)
Reward.pendingRewardSingle(uint256,uint256) (../../sb/VEReward.sol#409-436) uses a dangerous strict equality:
	- totalPower == 0 (../../sb/VEReward.sol#416)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities

Reward.addEpochBatch(uint256,uint256,uint256,uint256).accurateTR (../../sb/VEReward.sol#185) is a local variable never initialized
Reward.addEpochBatch(uint256,uint256,uint256,uint256)._epochId (../../sb/VEReward.sol#184) is a local variable never initialized
Reward.addEpochBatch(uint256,uint256,uint256,uint256)._end (../../sb/VEReward.sol#183) is a local variable never initialized
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-local-variables

Reward.transferAdmin(address) (../../sb/VEReward.sol#150-152) should emit an event for: 
	- admin = _admin (../../sb/VEReward.sol#151) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-access-control

Reward.constructor(address,address)._ve_ (../../sb/VEReward.sol#92) lacks a zero-check on :
		- _ve = _ve_ (../../sb/VEReward.sol#96)
Reward.constructor(address,address).rewardToken_ (../../sb/VEReward.sol#93) lacks a zero-check on :
		- rewardToken = rewardToken_ (../../sb/VEReward.sol#97)
Reward.transferAdmin(address)._admin (../../sb/VEReward.sol#150) lacks a zero-check on :
		- admin = _admin (../../sb/VEReward.sol#151)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

Reward.claimReward(uint256,uint256,uint256) (../../sb/VEReward.sol#286-314) has external calls inside a loop: require(bool)(msg.sender == ve(_ve).ownerOf(tokenId)) (../../sb/VEReward.sol#287)
Reward.claimReward(uint256,uint256,uint256) (../../sb/VEReward.sol#286-314) has external calls inside a loop: IERC20(rewardToken).safeTransfer(ve(_ve).ownerOf(tokenId),reward) (../../sb/VEReward.sol#311)
Reward.checkEpoch(uint256) (../../sb/VEReward.sol#250-257) has external calls inside a loop: epochInfo[epochId].totalPower = ve(_ve).totalSupplyAt(epochInfo[epochId].startBlock) (../../sb/VEReward.sol#255)
Reward._pendingRewardSingle(uint256,uint256,Reward.EpochInfo) (../../sb/VEReward.sol#220-240) has external calls inside a loop: power = ve(_ve).balanceOfAtNFT(tokenId,epoch.startBlock) (../../sb/VEReward.sol#236)
SafeERC20.callOptionalReturn(IERC20,bytes) (../../sb/VEReward.sol#31-42) has external calls inside a loop: (success,returndata) = address(token).call(data) (../../sb/VEReward.sol#35)
Reward.getEpochTotalPower(uint256) (../../sb/VEReward.sol#385-394) has external calls inside a loop: ve(_ve).totalSupplyAtT(epochInfo[epochId].startTime) (../../sb/VEReward.sol#389)
Reward.getEpochTotalPower(uint256) (../../sb/VEReward.sol#385-394) has external calls inside a loop: ve(_ve).totalSupplyAt(blk) (../../sb/VEReward.sol#391)
Reward.pendingRewardSingle(uint256,uint256) (../../sb/VEReward.sol#409-436) has external calls inside a loop: power = ve(_ve).balanceOfAtNFT(tokenId,startBlock) (../../sb/VEReward.sol#419)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop

Reentrancy in Reward.claimReward(uint256,uint256,uint256) (../../sb/VEReward.sol#286-314):
	External calls:
	- IERC20(rewardToken).safeTransfer(ve(_ve).ownerOf(tokenId),reward) (../../sb/VEReward.sol#311)
	Event emitted after the call(s):
	- LogClaimReward(tokenId,reward) (../../sb/VEReward.sol#312)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

Reward.getBlockByTime(uint256) (../../sb/VEReward.sol#120-144) uses timestamp for comparisons
	Dangerous comparisons:
	- _min >= _max (../../sb/VEReward.sol#126)
	- point_history[_mid].ts <= _time (../../sb/VEReward.sol#130)
Reward.addEpoch(uint256,uint256,uint256) (../../sb/VEReward.sol#157-169) uses timestamp for comparisons
	Dangerous comparisons:
	- assert(bool)(block.timestamp < endTime && startTime < endTime) (../../sb/VEReward.sol#158)
	- lastPointTime < block.timestamp (../../sb/VEReward.sol#164)
Reward.addEpochBatch(uint256,uint256,uint256,uint256) (../../sb/VEReward.sol#175-197) uses timestamp for comparisons
	Dangerous comparisons:
	- assert(bool)(block.timestamp < endTime && startTime < endTime) (../../sb/VEReward.sol#176)
	- lastPointTime < block.timestamp (../../sb/VEReward.sol#192)
Reward.updateEpochReward(uint256,uint256) (../../sb/VEReward.sol#211-214) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(block.timestamp < epochInfo[epochId].startTime) (../../sb/VEReward.sol#212)
Reward._pendingRewardSingle(uint256,uint256,Reward.EpochInfo) (../../sb/VEReward.sol#220-240) uses timestamp for comparisons
	Dangerous comparisons:
	- end > epoch.endTime (../../sb/VEReward.sol#231)
Reward.checkpointAndCheckEpoch(uint256) (../../sb/VEReward.sol#242-248) uses timestamp for comparisons
	Dangerous comparisons:
	- lastPointTime < block.timestamp (../../sb/VEReward.sol#244)
Reward.claimReward(uint256,uint256,uint256) (../../sb/VEReward.sol#286-314) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp < epoch.startTime (../../sb/VEReward.sol#293)
	- lastPointTime < epoch.startTime (../../sb/VEReward.sol#296)
	- reward_i > 0 (../../sb/VEReward.sol#303)
Reward.getEpochIdByTime(uint256) (../../sb/VEReward.sol#317-338) uses timestamp for comparisons
	Dangerous comparisons:
	- assert(bool)(epochInfo[0].startTime <= _time) (../../sb/VEReward.sol#318)
	- _time > epochInfo[epochInfo.length - 1].startTime (../../sb/VEReward.sol#319)
	- epochInfo[_mid].startTime <= _time (../../sb/VEReward.sol#331)
Reward.getBlockByTimeWithoutLastCheckpoint(uint256) (../../sb/VEReward.sol#367-376) uses timestamp for comparisons
	Dangerous comparisons:
	- point_history[point_history.length - 1].ts >= _time (../../sb/VEReward.sol#368)
Reward.getEpochTotalPower(uint256) (../../sb/VEReward.sol#385-394) uses timestamp for comparisons
	Dangerous comparisons:
	- blk > block.number (../../sb/VEReward.sol#388)
Reward.getUserPower(uint256,uint256) (../../sb/VEReward.sol#397-404) uses timestamp for comparisons
	Dangerous comparisons:
	- blk < block.number (../../sb/VEReward.sol#400)
Reward.pendingRewardSingle(uint256,uint256) (../../sb/VEReward.sol#409-436) uses timestamp for comparisons
	Dangerous comparisons:
	- totalPower == 0 (../../sb/VEReward.sol#416)
	- end > epoch.endTime (../../sb/VEReward.sol#429)
Reward.pendingReward(uint256) (../../sb/VEReward.sol#439-481) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp <= epochInfo[epochInfo.length - 1].endTime (../../sb/VEReward.sol#441)
	- block.timestamp < epochInfo[i].startTime (../../sb/VEReward.sol#447)
	- i_scope_0 < rewards.length (../../sb/VEReward.sol#459)
	- rewards[i_scope_0].reward == 0 (../../sb/VEReward.sol#460)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

Address.isContract(address) (../../sb/VEReward.sol#11-17) uses assembly
	- INLINE ASM (../../sb/VEReward.sol#15)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage

SafeERC20.safeTransferFrom(IERC20,address,address,uint256) (../../sb/VEReward.sol#27-29) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code

Pragma version0.8.11 (../../sb/VEReward.sol#1) allows old versions
solc-0.8.11 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Low level call in SafeERC20.callOptionalReturn(IERC20,bytes) (../../sb/VEReward.sol#31-42):
	- (success,returndata) = address(token).call(data) (../../sb/VEReward.sol#35)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls

Contract ve (../../sb/VEReward.sol#45-52) is not in CapWords
Function ve.create_lock(uint256,uint256) (../../sb/VEReward.sol#51) is not in mixedCase
Parameter ve.create_lock(uint256,uint256)._lock_duration (../../sb/VEReward.sol#51) is not in mixedCase
Parameter Reward.getBlockByTime(uint256)._time (../../sb/VEReward.sol#120) is not in mixedCase
Parameter Reward.transferAdmin(address)._admin (../../sb/VEReward.sol#150) is not in mixedCase
Parameter Reward.getEpochIdByTime(uint256)._time (../../sb/VEReward.sol#317) is not in mixedCase
Parameter Reward.getBlockByTimeWithoutLastCheckpoint(uint256)._time (../../sb/VEReward.sol#367) is not in mixedCase
Variable Reward._ve (../../sb/VEReward.sol#66) is not in mixedCase
Variable Reward.RewardMultiplier (../../sb/VEReward.sol#70) is not in mixedCase
Variable Reward.BlockMultiplier (../../sb/VEReward.sol#72) is not in mixedCase
Variable Reward.point_history (../../sb/VEReward.sol#108) is not in mixedCase
Constant Reward.MaxQueryLength (../../sb/VEReward.sol#348) is not in UPPER_CASE_WITH_UNDERSCORES
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Reward.slitherConstructorVariables() (../../sb/VEReward.sol#54-482) uses literals with too many digits:
	- RewardMultiplier = 10000000 (../../sb/VEReward.sol#70)
Reward.slitherConstructorVariables() (../../sb/VEReward.sol#54-482) uses literals with too many digits:
	- BlockMultiplier = 1000000000000000000 (../../sb/VEReward.sol#72)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits
/sb/VEReward.sol analyzed (5 contracts with 93 detectors), 54 result(s) found
