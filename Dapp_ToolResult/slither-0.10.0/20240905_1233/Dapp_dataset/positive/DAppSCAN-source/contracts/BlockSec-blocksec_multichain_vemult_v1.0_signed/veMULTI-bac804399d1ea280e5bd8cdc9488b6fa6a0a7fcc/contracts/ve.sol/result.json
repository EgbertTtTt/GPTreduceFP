{
    "errors": [],
    "fails": [],
    "findings": [
        {
            "confidence": "Medium",
            "contract": "ve",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/BlockSec-blocksec_multichain_vemult_v1.0_signed/veMULTI-bac804399d1ea280e5bd8cdc9488b6fa6a0a7fcc/contracts/ve.sol",
            "function": "toString",
            "impact": "High",
            "line": 1310,
            "line_end": 1330,
            "message": "ve.toString(uint256) (ve.sol#1310-1330) uses a weak PRNG: \"buffer[digits] = bytes1(uint8(48 + uint256(value % 10))) (ve.sol#1326)\" \n",
            "name": "weak-prng",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "ve",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/BlockSec-blocksec_multichain_vemult_v1.0_signed/veMULTI-bac804399d1ea280e5bd8cdc9488b6fa6a0a7fcc/contracts/ve.sol",
            "function": "withdraw",
            "impact": "Medium",
            "line": 1080,
            "line_end": 1104,
            "message": "Reentrancy in ve.withdraw(uint256) (ve.sol#1080-1104):\n\tExternal calls:\n\t- assert(bool)(IERC20(token).transfer(msg.sender,value)) (ve.sol#1097)\n\tState variables written after the call(s):\n\t- _burn(_tokenId) (ve.sol#1100)\n\t\t- idToApprovals[_tokenId] = _approved (ve.sol#735)\n\tve.idToApprovals (ve.sol#388) can be used in cross function reentrancies:\n\t- ve._clearApproval(address,uint256) (ve.sol#597-604)\n\t- ve._isApprovedOrOwner(address,uint256) (ve.sol#517-523)\n\t- ve.approve(address,uint256) (ve.sol#724-737)\n\t- ve.getApproved(uint256) (ve.sol#497-499)\n\t- _burn(_tokenId) (ve.sol#1100)\n\t\t- idToOwner[_tokenId] = address(0) (ve.sol#588)\n\tve.idToOwner (ve.sol#385) can be used in cross function reentrancies:\n\t- ve._addTokenTo(address,uint256) (ve.sol#571-580)\n\t- ve._clearApproval(address,uint256) (ve.sol#597-604)\n\t- ve._isApprovedOrOwner(address,uint256) (ve.sol#517-523)\n\t- ve._removeTokenFrom(address,uint256) (ve.sol#584-593)\n\t- ve.approve(address,uint256) (ve.sol#724-737)\n\t- ve.ownerOf(uint256) (ve.sol#491-493)\n\t- ve.tokenURI(uint256) (ve.sol#1154-1164)\n",
            "name": "reentrancy-no-eth",
            "check": "TP"
        },
        {
            "confidence": "Medium",
            "contract": "ve",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/BlockSec-blocksec_multichain_vemult_v1.0_signed/veMULTI-bac804399d1ea280e5bd8cdc9488b6fa6a0a7fcc/contracts/ve.sol",
            "function": "safeTransferFrom",
            "impact": "Medium",
            "line": 675,
            "line_end": 697,
            "message": "ve.safeTransferFrom(address,address,uint256,bytes) (ve.sol#675-697) ignores return value by IERC721Receiver(_to).onERC721Received(msg.sender,_from,_tokenId,_data) (ve.sol#685-695)\n",
            "name": "unused-return",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "ve",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/BlockSec-blocksec_multichain_vemult_v1.0_signed/veMULTI-bac804399d1ea280e5bd8cdc9488b6fa6a0a7fcc/contracts/ve.sol",
            "function": "withdraw",
            "impact": "Low",
            "line": 1080,
            "line_end": 1104,
            "message": "Reentrancy in ve.withdraw(uint256) (ve.sol#1080-1104):\n\tExternal calls:\n\t- assert(bool)(IERC20(token).transfer(msg.sender,value)) (ve.sol#1097)\n\tState variables written after the call(s):\n\t- _burn(_tokenId) (ve.sol#1100)\n\t\t- ownerToNFTokenCount[_from] -= 1 (ve.sol#592)\n\t- _burn(_tokenId) (ve.sol#1100)\n\t\t- ownerToNFTokenIdList[_from][current_count] = 0 (ve.sol#549)\n\t\t- ownerToNFTokenIdList[_from][current_index] = lastTokenId (ve.sol#557)\n\t\t- ownerToNFTokenIdList[_from][current_count] = 0 (ve.sol#563)\n\t- _burn(_tokenId) (ve.sol#1100)\n\t\t- tokenToOwnerIndex[_tokenId] = 0 (ve.sol#551)\n\t\t- tokenToOwnerIndex[lastTokenId] = current_index (ve.sol#559)\n\t\t- tokenToOwnerIndex[_tokenId] = 0 (ve.sol#565)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "ve",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/BlockSec-blocksec_multichain_vemult_v1.0_signed/veMULTI-bac804399d1ea280e5bd8cdc9488b6fa6a0a7fcc/contracts/ve.sol",
            "function": "_deposit_for",
            "impact": "Low",
            "line": 914,
            "line_end": 947,
            "message": "Reentrancy in ve._deposit_for(uint256,uint256,uint256,LockedBalance,ve.DepositType) (ve.sol#914-947):\n\tExternal calls:\n\t- assert(bool)(IERC20(token).transferFrom(from,address(this),_value)) (ve.sol#942)\n\tEvent emitted after the call(s):\n\t- Deposit(from,_tokenId,_value,_locked.end,deposit_type,block.timestamp) (ve.sol#945)\n\t- Supply(supply_before,supply_before + _value) (ve.sol#946)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "ve",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/BlockSec-blocksec_multichain_vemult_v1.0_signed/veMULTI-bac804399d1ea280e5bd8cdc9488b6fa6a0a7fcc/contracts/ve.sol",
            "function": "withdraw",
            "impact": "Low",
            "line": 1080,
            "line_end": 1104,
            "message": "Reentrancy in ve.withdraw(uint256) (ve.sol#1080-1104):\n\tExternal calls:\n\t- assert(bool)(IERC20(token).transfer(msg.sender,value)) (ve.sol#1097)\n\tEvent emitted after the call(s):\n\t- Approval(owner,_approved,_tokenId) (ve.sol#736)\n\t\t- _burn(_tokenId) (ve.sol#1100)\n\t- Supply(supply_before,supply_before - value) (ve.sol#1103)\n\t- Transfer(owner,address(0),_tokenId) (ve.sol#1341)\n\t\t- _burn(_tokenId) (ve.sol#1100)\n\t- Withdraw(msg.sender,_tokenId,value,block.timestamp) (ve.sol#1102)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "ve",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/BlockSec-blocksec_multichain_vemult_v1.0_signed/veMULTI-bac804399d1ea280e5bd8cdc9488b6fa6a0a7fcc/contracts/ve.sol",
            "function": "increase_amount",
            "impact": "Low",
            "line": 1050,
            "line_end": 1060,
            "message": "ve.increase_amount(uint256,uint256) (ve.sol#1050-1060) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(_locked.end > block.timestamp,Cannot add to expired lock. Withdraw) (ve.sol#1057)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "ve",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/BlockSec-blocksec_multichain_vemult_v1.0_signed/veMULTI-bac804399d1ea280e5bd8cdc9488b6fa6a0a7fcc/contracts/ve.sol",
            "function": "deposit_for",
            "impact": "Low",
            "line": 1005,
            "line_end": 1012,
            "message": "ve.deposit_for(uint256,uint256) (ve.sol#1005-1012) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(_locked.end > block.timestamp,Cannot add to expired lock. Withdraw) (ve.sol#1010)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "ve",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/BlockSec-blocksec_multichain_vemult_v1.0_signed/veMULTI-bac804399d1ea280e5bd8cdc9488b6fa6a0a7fcc/contracts/ve.sol",
            "function": "_balanceOfNFT",
            "impact": "Low",
            "line": 1138,
            "line_end": 1150,
            "message": "ve._balanceOfNFT(uint256,uint256) (ve.sol#1138-1150) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- last_point.bias < 0 (ve.sol#1145)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "ve",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/BlockSec-blocksec_multichain_vemult_v1.0_signed/veMULTI-bac804399d1ea280e5bd8cdc9488b6fa6a0a7fcc/contracts/ve.sol",
            "function": "withdraw",
            "impact": "Low",
            "line": 1080,
            "line_end": 1104,
            "message": "ve.withdraw(uint256) (ve.sol#1080-1104) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(block.timestamp >= _locked.end,The lock didn't expire) (ve.sol#1085)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "ve",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/BlockSec-blocksec_multichain_vemult_v1.0_signed/veMULTI-bac804399d1ea280e5bd8cdc9488b6fa6a0a7fcc/contracts/ve.sol",
            "function": "_find_block_epoch",
            "impact": "Low",
            "line": 1114,
            "line_end": 1131,
            "message": "ve._find_block_epoch(uint256,uint256) (ve.sol#1114-1131) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- point_history[_mid].blk <= _block (ve.sol#1124)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "ve",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/BlockSec-blocksec_multichain_vemult_v1.0_signed/veMULTI-bac804399d1ea280e5bd8cdc9488b6fa6a0a7fcc/contracts/ve.sol",
            "function": "_checkpoint",
            "impact": "Low",
            "line": 771,
            "line_end": 906,
            "message": "ve._checkpoint(uint256,LockedBalance,LockedBalance) (ve.sol#771-906) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- old_locked.end > block.timestamp && old_locked.amount > 0 (ve.sol#785)\n\t- new_locked.end > block.timestamp && new_locked.amount > 0 (ve.sol#789)\n\t- new_locked.end != 0 (ve.sol#798)\n\t- new_locked.end == old_locked.end (ve.sol#799)\n\t- block.timestamp > last_point.ts (ve.sol#817)\n\t- t_i > block.timestamp (ve.sol#831)\n\t- last_point.bias < 0 (ve.sol#838)\n\t- last_point.slope < 0 (ve.sol#842)\n\t- t_i == block.timestamp (ve.sol#850)\n\t- last_point.slope < 0 (ve.sol#867)\n\t- last_point.bias < 0 (ve.sol#870)\n\t- old_locked.end > block.timestamp (ve.sol#882)\n\t- new_locked.end == old_locked.end (ve.sol#885)\n\t- new_locked.end > block.timestamp (ve.sol#891)\n\t- new_locked.end > old_locked.end (ve.sol#892)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "ve",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/BlockSec-blocksec_multichain_vemult_v1.0_signed/veMULTI-bac804399d1ea280e5bd8cdc9488b6fa6a0a7fcc/contracts/ve.sol",
            "function": "increase_unlock_time",
            "impact": "Low",
            "line": 1064,
            "line_end": 1076,
            "message": "ve.increase_unlock_time(uint256,uint256) (ve.sol#1064-1076) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(_locked.end > block.timestamp,Lock expired) (ve.sol#1070)\n\t- require(bool,string)(unlock_time > _locked.end,Can only increase lock duration) (ve.sol#1072)\n\t- require(bool,string)(unlock_time <= block.timestamp + MAXTIME,Voting lock can be 4 years max) (ve.sol#1073)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "ve",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/BlockSec-blocksec_multichain_vemult_v1.0_signed/veMULTI-bac804399d1ea280e5bd8cdc9488b6fa6a0a7fcc/contracts/ve.sol",
            "function": "toString",
            "impact": "Low",
            "line": 1310,
            "line_end": 1330,
            "message": "ve.toString(uint256) (ve.sol#1310-1330) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- value == 0 (ve.sol#1314)\n\t- temp != 0 (ve.sol#1319)\n\t- value != 0 (ve.sol#1324)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "ve",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/BlockSec-blocksec_multichain_vemult_v1.0_signed/veMULTI-bac804399d1ea280e5bd8cdc9488b6fa6a0a7fcc/contracts/ve.sol",
            "function": "_supply_at",
            "impact": "Low",
            "line": 1237,
            "line_end": 1260,
            "message": "ve._supply_at(Point,uint256) (ve.sol#1237-1260) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- t_i > t (ve.sol#1243)\n\t- t_i == t (ve.sol#1249)\n\t- last_point.bias < 0 (ve.sol#1256)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "ve",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/BlockSec-blocksec_multichain_vemult_v1.0_signed/veMULTI-bac804399d1ea280e5bd8cdc9488b6fa6a0a7fcc/contracts/ve.sol",
            "function": "_create_lock",
            "impact": "Low",
            "line": 1018,
            "line_end": 1031,
            "message": "ve._create_lock(uint256,uint256,address) (ve.sol#1018-1031) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(unlock_time > block.timestamp,Can only lock until time in the future) (ve.sol#1022)\n\t- require(bool,string)(unlock_time <= block.timestamp + MAXTIME,Voting lock can be 4 years max) (ve.sol#1023)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "ve",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/BlockSec-blocksec_multichain_vemult_v1.0_signed/veMULTI-bac804399d1ea280e5bd8cdc9488b6fa6a0a7fcc/contracts/ve.sol",
            "function": "_deposit_for",
            "impact": "Low",
            "line": 914,
            "line_end": 947,
            "message": "ve._deposit_for(uint256,uint256,uint256,LockedBalance,ve.DepositType) (ve.sol#914-947) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- unlock_time != 0 (ve.sol#929)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "ve",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/BlockSec-blocksec_multichain_vemult_v1.0_signed/veMULTI-bac804399d1ea280e5bd8cdc9488b6fa6a0a7fcc/contracts/ve.sol",
            "function": "_balanceOfAtNFT",
            "impact": "Low",
            "line": 1180,
            "line_end": 1227,
            "message": "ve._balanceOfAtNFT(uint256,uint256) (ve.sol#1180-1227) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- d_block != 0 (ve.sol#1217)\n\t- upoint.bias >= 0 (ve.sol#1222)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "ve",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/BlockSec-blocksec_multichain_vemult_v1.0_signed/veMULTI-bac804399d1ea280e5bd8cdc9488b6fa6a0a7fcc/contracts/ve.sol",
            "function": "totalSupplyAt",
            "impact": "Low",
            "line": 1278,
            "line_end": 1297,
            "message": "ve.totalSupplyAt(uint256) (ve.sol#1278-1297) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- point.blk != point_next.blk (ve.sol#1287)\n\t- point.blk != block.number (ve.sol#1291)\n",
            "name": "timestamp",
            "check": "FP"
        }
    ],
    "infos": [],
    "parser": {
        "id": "slither-0.10.0",
        "mode": "solidity",
        "version": "2024/04/30"
    }
}