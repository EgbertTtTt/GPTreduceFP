{
    "errors": [],
    "fails": [],
    "findings": [
        {
            "confidence": "Medium",
            "contract": "MasterChef",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-LuckyChip/staking-23e5db6078aa12754ae69048c7754c7f1e90b375/contracts/MasterChef.sol",
            "function": "deposit",
            "impact": "High",
            "line": 1626,
            "line_end": 1649,
            "message": "Reentrancy in MasterChef.deposit(uint256,uint256,address) (MasterChef.sol#1626-1649):\n\tExternal calls:\n\t- updatePool(_pid) (MasterChef.sol#1629)\n\t\t- LC.mint(address(this),LCReward) (MasterChef.sol#1569)\n\t- luckychipReferral.recordReferral(msg.sender,_referrer) (MasterChef.sol#1631)\n\t- payPendingLC(_pid,msg.sender) (MasterChef.sol#1633)\n\t\t- LC.transfer(_to,LCBal) (MasterChef.sol#1692)\n\t\t- LC.transfer(_to,_amount) (MasterChef.sol#1694)\n\t\t- LC.mint(referrer,commissionAmount) (MasterChef.sol#1729)\n\t\t- luckychipReferral.recordReferralCommission(referrer,commissionAmount) (MasterChef.sol#1730)\n\t\t- LC.mint(treasuryaddr,commissionAmount) (MasterChef.sol#1733)\n\t\t- luckychipReferral.recordReferralCommission(treasuryaddr,commissionAmount) (MasterChef.sol#1734)\n\t\t- LC.mint(treasuryaddr,commissionAmount_scope_0) (MasterChef.sol#1741)\n\t- payPendingBonus(_pid,msg.sender) (MasterChef.sol#1635)\n\t\t- returndata = address(token).functionCall(data,SafeBEP20: low-level call failed) (MasterChef.sol#582)\n\t\t- (success,returndata) = target.call{value: value}(data) (MasterChef.sol#425)\n\t\t- bonusPool.bonusToken.safeTransfer(address(_user),pending) (MasterChef.sol#1619)\n\t- pool.lpToken.safeTransferFrom(address(msg.sender),address(this),_amount) (MasterChef.sol#1638)\n\tExternal calls sending eth:\n\t- payPendingBonus(_pid,msg.sender) (MasterChef.sol#1635)\n\t\t- (success,returndata) = target.call{value: value}(data) (MasterChef.sol#425)\n\tState variables written after the call(s):\n\t- userBonusDebt[i][msg.sender] = user.amount.mul(poolBonusPerShare[_pid][i]).div(1e12) (MasterChef.sol#1644)\n\tMasterChef.userBonusDebt (MasterChef.sol#1397) can be used in cross function reentrancies:\n\t- MasterChef.pendingBonus(uint256,address) (MasterChef.sol#1536-1546)\n\t- MasterChef.userBonusDebt (MasterChef.sol#1397)\n\t- user.amount = user.amount.add(_amount) (MasterChef.sol#1639)\n\tMasterChef.userInfo (MasterChef.sol#1399) can be used in cross function reentrancies:\n\t- MasterChef.pendingBonus(uint256,address) (MasterChef.sol#1536-1546)\n\t- MasterChef.pendingLC(uint256,address) (MasterChef.sol#1522-1533)\n\t- MasterChef.userInfo (MasterChef.sol#1399)\n\t- user.rewardDebt = user.amount.mul(pool.accLCPerShare).div(1e12) (MasterChef.sol#1641)\n\tMasterChef.userInfo (MasterChef.sol#1399) can be used in cross function reentrancies:\n\t- MasterChef.pendingBonus(uint256,address) (MasterChef.sol#1536-1546)\n\t- MasterChef.pendingLC(uint256,address) (MasterChef.sol#1522-1533)\n\t- MasterChef.userInfo (MasterChef.sol#1399)\n",
            "name": "reentrancy-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MasterChef",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-LuckyChip/staking-23e5db6078aa12754ae69048c7754c7f1e90b375/contracts/MasterChef.sol",
            "function": "withdraw",
            "impact": "High",
            "line": 1652,
            "line_end": 1673,
            "message": "Reentrancy in MasterChef.withdraw(uint256,uint256) (MasterChef.sol#1652-1673):\n\tExternal calls:\n\t- updatePool(_pid) (MasterChef.sol#1657)\n\t\t- LC.mint(address(this),LCReward) (MasterChef.sol#1569)\n\t- payPendingLC(_pid,msg.sender) (MasterChef.sol#1658)\n\t\t- LC.transfer(_to,LCBal) (MasterChef.sol#1692)\n\t\t- LC.transfer(_to,_amount) (MasterChef.sol#1694)\n\t\t- LC.mint(referrer,commissionAmount) (MasterChef.sol#1729)\n\t\t- luckychipReferral.recordReferralCommission(referrer,commissionAmount) (MasterChef.sol#1730)\n\t\t- LC.mint(treasuryaddr,commissionAmount) (MasterChef.sol#1733)\n\t\t- luckychipReferral.recordReferralCommission(treasuryaddr,commissionAmount) (MasterChef.sol#1734)\n\t\t- LC.mint(treasuryaddr,commissionAmount_scope_0) (MasterChef.sol#1741)\n\t- payPendingBonus(_pid,msg.sender) (MasterChef.sol#1660)\n\t\t- returndata = address(token).functionCall(data,SafeBEP20: low-level call failed) (MasterChef.sol#582)\n\t\t- (success,returndata) = target.call{value: value}(data) (MasterChef.sol#425)\n\t\t- bonusPool.bonusToken.safeTransfer(address(_user),pending) (MasterChef.sol#1619)\n\t- pool.lpToken.safeTransfer(address(msg.sender),_amount) (MasterChef.sol#1664)\n\tExternal calls sending eth:\n\t- payPendingBonus(_pid,msg.sender) (MasterChef.sol#1660)\n\t\t- (success,returndata) = target.call{value: value}(data) (MasterChef.sol#425)\n\tState variables written after the call(s):\n\t- userBonusDebt[i][msg.sender] = user.amount.mul(poolBonusPerShare[_pid][i]).div(1e12) (MasterChef.sol#1669)\n\tMasterChef.userBonusDebt (MasterChef.sol#1397) can be used in cross function reentrancies:\n\t- MasterChef.pendingBonus(uint256,address) (MasterChef.sol#1536-1546)\n\t- MasterChef.userBonusDebt (MasterChef.sol#1397)\n\t- user.rewardDebt = user.amount.mul(pool.accLCPerShare).div(1e12) (MasterChef.sol#1666)\n\tMasterChef.userInfo (MasterChef.sol#1399) can be used in cross function reentrancies:\n\t- MasterChef.pendingBonus(uint256,address) (MasterChef.sol#1536-1546)\n\t- MasterChef.pendingLC(uint256,address) (MasterChef.sol#1522-1533)\n\t- MasterChef.userInfo (MasterChef.sol#1399)\n",
            "name": "reentrancy-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MasterChef",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-LuckyChip/staking-23e5db6078aa12754ae69048c7754c7f1e90b375/contracts/MasterChef.sol",
            "function": "withdraw",
            "impact": "High",
            "line": 1652,
            "line_end": 1673,
            "message": "Reentrancy in MasterChef.withdraw(uint256,uint256) (MasterChef.sol#1652-1673):\n\tExternal calls:\n\t- updatePool(_pid) (MasterChef.sol#1657)\n\t\t- LC.mint(address(this),LCReward) (MasterChef.sol#1569)\n\t- payPendingLC(_pid,msg.sender) (MasterChef.sol#1658)\n\t\t- LC.transfer(_to,LCBal) (MasterChef.sol#1692)\n\t\t- LC.transfer(_to,_amount) (MasterChef.sol#1694)\n\t\t- LC.mint(referrer,commissionAmount) (MasterChef.sol#1729)\n\t\t- luckychipReferral.recordReferralCommission(referrer,commissionAmount) (MasterChef.sol#1730)\n\t\t- LC.mint(treasuryaddr,commissionAmount) (MasterChef.sol#1733)\n\t\t- luckychipReferral.recordReferralCommission(treasuryaddr,commissionAmount) (MasterChef.sol#1734)\n\t\t- LC.mint(treasuryaddr,commissionAmount_scope_0) (MasterChef.sol#1741)\n\t- payPendingBonus(_pid,msg.sender) (MasterChef.sol#1660)\n\t\t- returndata = address(token).functionCall(data,SafeBEP20: low-level call failed) (MasterChef.sol#582)\n\t\t- (success,returndata) = target.call{value: value}(data) (MasterChef.sol#425)\n\t\t- bonusPool.bonusToken.safeTransfer(address(_user),pending) (MasterChef.sol#1619)\n\tExternal calls sending eth:\n\t- payPendingBonus(_pid,msg.sender) (MasterChef.sol#1660)\n\t\t- (success,returndata) = target.call{value: value}(data) (MasterChef.sol#425)\n\tState variables written after the call(s):\n\t- user.amount = user.amount.sub(_amount) (MasterChef.sol#1663)\n\tMasterChef.userInfo (MasterChef.sol#1399) can be used in cross function reentrancies:\n\t- MasterChef.pendingBonus(uint256,address) (MasterChef.sol#1536-1546)\n\t- MasterChef.pendingLC(uint256,address) (MasterChef.sol#1522-1533)\n\t- MasterChef.userInfo (MasterChef.sol#1399)\n",
            "name": "reentrancy-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MasterChef",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-LuckyChip/staking-23e5db6078aa12754ae69048c7754c7f1e90b375/contracts/MasterChef.sol",
            "function": "safeLCTransfer",
            "impact": "High",
            "line": 1689,
            "line_end": 1696,
            "message": "MasterChef.safeLCTransfer(address,uint256) (MasterChef.sol#1689-1696) ignores return value by LC.transfer(_to,_amount) (MasterChef.sol#1694)\n",
            "name": "unchecked-transfer",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MasterChef",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-LuckyChip/staking-23e5db6078aa12754ae69048c7754c7f1e90b375/contracts/MasterChef.sol",
            "function": "safeLCTransfer",
            "impact": "High",
            "line": 1689,
            "line_end": 1696,
            "message": "MasterChef.safeLCTransfer(address,uint256) (MasterChef.sol#1689-1696) ignores return value by LC.transfer(_to,LCBal) (MasterChef.sol#1692)\n",
            "name": "unchecked-transfer",
            "check": "FP"
        },
        {
            "confidence": "High",
            "contract": "MasterChef",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-LuckyChip/staking-23e5db6078aa12754ae69048c7754c7f1e90b375/contracts/MasterChef.sol",
            "function": "deposit",
            "impact": "High",
            "line": 1408,
            "message": "MasterChef.luckychipReferral (MasterChef.sol#1408) is never initialized. It is used in:\n\t- MasterChef.deposit(uint256,uint256,address) (MasterChef.sol#1626-1649)\n\t- MasterChef.payReferralCommission(address,uint256) (MasterChef.sol#1721-1746)\n",
            "name": "uninitialized-state",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MasterChef",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-LuckyChip/staking-23e5db6078aa12754ae69048c7754c7f1e90b375/contracts/MasterChef.sol",
            "function": "payPendingBonus",
            "impact": "Medium",
            "line": 1609,
            "line_end": 1623,
            "message": "Reentrancy in MasterChef.payPendingBonus(uint256,address) (MasterChef.sol#1609-1623):\n\tExternal calls:\n\t- bonusPool.bonusToken.safeTransfer(address(_user),pending) (MasterChef.sol#1619)\n\tState variables written after the call(s):\n\t- bonusPool.lastBalance = bonusPool.lastBalance.sub(pending) (MasterChef.sol#1618)\n\tMasterChef.bonusInfo (MasterChef.sol#1393) can be used in cross function reentrancies:\n\t- MasterChef.addBonus(IBEP20) (MasterChef.sol#1496-1505)\n\t- MasterChef.bonusInfo (MasterChef.sol#1393)\n\t- MasterChef.bonusLength() (MasterChef.sol#1459-1461)\n\t- MasterChef.pendingBonus(uint256,address) (MasterChef.sol#1536-1546)\n\t- MasterChef.updateBonus(uint256) (MasterChef.sol#1575-1594)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MasterChef",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-LuckyChip/staking-23e5db6078aa12754ae69048c7754c7f1e90b375/contracts/MasterChef.sol",
            "function": "add",
            "impact": "Medium",
            "line": 1477,
            "line_end": 1494,
            "message": "Reentrancy in MasterChef.add(uint256,uint256,IBEP20,bool) (MasterChef.sol#1477-1494):\n\tExternal calls:\n\t- massUpdatePools() (MasterChef.sol#1479)\n\t\t- LC.mint(address(this),LCReward) (MasterChef.sol#1569)\n\tState variables written after the call(s):\n\t- poolInfo.push(PoolInfo({lpToken:_lpToken,allocPoint:_allocPoint,bonusPoint:_bonusPoint,lastRewardBlock:lastRewardBlock,accLCPerShare:0})) (MasterChef.sol#1485-1493)\n\tMasterChef.poolInfo (MasterChef.sol#1391) can be used in cross function reentrancies:\n\t- MasterChef.add(uint256,uint256,IBEP20,bool) (MasterChef.sol#1477-1494)\n\t- MasterChef.addBonus(IBEP20) (MasterChef.sol#1496-1505)\n\t- MasterChef.massUpdatePools() (MasterChef.sol#1549-1554)\n\t- MasterChef.pendingBonus(uint256,address) (MasterChef.sol#1536-1546)\n\t- MasterChef.pendingLC(uint256,address) (MasterChef.sol#1522-1533)\n\t- MasterChef.poolInfo (MasterChef.sol#1391)\n\t- MasterChef.poolLength() (MasterChef.sol#1455-1457)\n\t- MasterChef.set(uint256,uint256,bool) (MasterChef.sol#1508-1514)\n\t- MasterChef.updateBonus(uint256) (MasterChef.sol#1575-1594)\n\t- MasterChef.updatePool(uint256) (MasterChef.sol#1557-1572)\n\t- totalAllocPoint = totalAllocPoint.add(_allocPoint) (MasterChef.sol#1482)\n\tMasterChef.totalAllocPoint (MasterChef.sol#1401) can be used in cross function reentrancies:\n\t- MasterChef.add(uint256,uint256,IBEP20,bool) (MasterChef.sol#1477-1494)\n\t- MasterChef.pendingLC(uint256,address) (MasterChef.sol#1522-1533)\n\t- MasterChef.set(uint256,uint256,bool) (MasterChef.sol#1508-1514)\n\t- MasterChef.totalAllocPoint (MasterChef.sol#1401)\n\t- MasterChef.updatePool(uint256) (MasterChef.sol#1557-1572)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MasterChef",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-LuckyChip/staking-23e5db6078aa12754ae69048c7754c7f1e90b375/contracts/MasterChef.sol",
            "function": "withdrawDevFee",
            "impact": "Medium",
            "line": 1463,
            "line_end": 1472,
            "message": "Reentrancy in MasterChef.withdrawDevFee() (MasterChef.sol#1463-1472):\n\tExternal calls:\n\t- LC.mint(dev0addr,LCReward.mul(dev0Percent).div(percentDec)) (MasterChef.sol#1467)\n\t- LC.mint(dev1addr,LCReward.mul(dev1Percent).div(percentDec)) (MasterChef.sol#1468)\n\t- LC.mint(dev2addr,LCReward.mul(dev2Percent).div(percentDec)) (MasterChef.sol#1469)\n\t- LC.mint(safuaddr,LCReward.mul(safuPercent).div(percentDec)) (MasterChef.sol#1470)\n\tState variables written after the call(s):\n\t- lastBlockDevWithdraw = block.number (MasterChef.sol#1471)\n\tMasterChef.lastBlockDevWithdraw (MasterChef.sol#1385) can be used in cross function reentrancies:\n\t- MasterChef.constructor(LCToken,address,address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256) (MasterChef.sol#1420-1449)\n\t- MasterChef.lastBlockDevWithdraw (MasterChef.sol#1385)\n\t- MasterChef.withdrawDevFee() (MasterChef.sol#1463-1472)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MasterChef",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-LuckyChip/staking-23e5db6078aa12754ae69048c7754c7f1e90b375/contracts/MasterChef.sol",
            "function": "set",
            "impact": "Medium",
            "line": 1508,
            "line_end": 1514,
            "message": "Reentrancy in MasterChef.set(uint256,uint256,bool) (MasterChef.sol#1508-1514):\n\tExternal calls:\n\t- massUpdatePools() (MasterChef.sol#1510)\n\t\t- LC.mint(address(this),LCReward) (MasterChef.sol#1569)\n\tState variables written after the call(s):\n\t- poolInfo[_pid].allocPoint = _allocPoint (MasterChef.sol#1513)\n\tMasterChef.poolInfo (MasterChef.sol#1391) can be used in cross function reentrancies:\n\t- MasterChef.add(uint256,uint256,IBEP20,bool) (MasterChef.sol#1477-1494)\n\t- MasterChef.addBonus(IBEP20) (MasterChef.sol#1496-1505)\n\t- MasterChef.massUpdatePools() (MasterChef.sol#1549-1554)\n\t- MasterChef.pendingBonus(uint256,address) (MasterChef.sol#1536-1546)\n\t- MasterChef.pendingLC(uint256,address) (MasterChef.sol#1522-1533)\n\t- MasterChef.poolInfo (MasterChef.sol#1391)\n\t- MasterChef.poolLength() (MasterChef.sol#1455-1457)\n\t- MasterChef.set(uint256,uint256,bool) (MasterChef.sol#1508-1514)\n\t- MasterChef.updateBonus(uint256) (MasterChef.sol#1575-1594)\n\t- MasterChef.updatePool(uint256) (MasterChef.sol#1557-1572)\n\t- totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint) (MasterChef.sol#1512)\n\tMasterChef.totalAllocPoint (MasterChef.sol#1401) can be used in cross function reentrancies:\n\t- MasterChef.add(uint256,uint256,IBEP20,bool) (MasterChef.sol#1477-1494)\n\t- MasterChef.pendingLC(uint256,address) (MasterChef.sol#1522-1533)\n\t- MasterChef.set(uint256,uint256,bool) (MasterChef.sol#1508-1514)\n\t- MasterChef.totalAllocPoint (MasterChef.sol#1401)\n\t- MasterChef.updatePool(uint256) (MasterChef.sol#1557-1572)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MasterChef",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-LuckyChip/staking-23e5db6078aa12754ae69048c7754c7f1e90b375/contracts/MasterChef.sol",
            "function": "emergencyWithdraw",
            "impact": "Medium",
            "line": 1676,
            "line_end": 1686,
            "message": "Reentrancy in MasterChef.emergencyWithdraw(uint256) (MasterChef.sol#1676-1686):\n\tExternal calls:\n\t- pool.lpToken.safeTransfer(address(msg.sender),user.amount) (MasterChef.sol#1679)\n\tState variables written after the call(s):\n\t- user.amount = 0 (MasterChef.sol#1681)\n\tMasterChef.userInfo (MasterChef.sol#1399) can be used in cross function reentrancies:\n\t- MasterChef.pendingBonus(uint256,address) (MasterChef.sol#1536-1546)\n\t- MasterChef.pendingLC(uint256,address) (MasterChef.sol#1522-1533)\n\t- MasterChef.userInfo (MasterChef.sol#1399)\n\t- user.rewardDebt = 0 (MasterChef.sol#1682)\n\tMasterChef.userInfo (MasterChef.sol#1399) can be used in cross function reentrancies:\n\t- MasterChef.pendingBonus(uint256,address) (MasterChef.sol#1536-1546)\n\t- MasterChef.pendingLC(uint256,address) (MasterChef.sol#1522-1533)\n\t- MasterChef.userInfo (MasterChef.sol#1399)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MasterChef",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-LuckyChip/staking-23e5db6078aa12754ae69048c7754c7f1e90b375/contracts/MasterChef.sol",
            "function": "updatePool",
            "impact": "Medium",
            "line": 1557,
            "line_end": 1572,
            "message": "Reentrancy in MasterChef.updatePool(uint256) (MasterChef.sol#1557-1572):\n\tExternal calls:\n\t- LC.mint(address(this),LCReward) (MasterChef.sol#1569)\n\tState variables written after the call(s):\n\t- pool.accLCPerShare = pool.accLCPerShare.add(LCReward.mul(1e12).div(lpSupply)) (MasterChef.sol#1570)\n\tMasterChef.poolInfo (MasterChef.sol#1391) can be used in cross function reentrancies:\n\t- MasterChef.add(uint256,uint256,IBEP20,bool) (MasterChef.sol#1477-1494)\n\t- MasterChef.addBonus(IBEP20) (MasterChef.sol#1496-1505)\n\t- MasterChef.massUpdatePools() (MasterChef.sol#1549-1554)\n\t- MasterChef.pendingBonus(uint256,address) (MasterChef.sol#1536-1546)\n\t- MasterChef.pendingLC(uint256,address) (MasterChef.sol#1522-1533)\n\t- MasterChef.poolInfo (MasterChef.sol#1391)\n\t- MasterChef.poolLength() (MasterChef.sol#1455-1457)\n\t- MasterChef.set(uint256,uint256,bool) (MasterChef.sol#1508-1514)\n\t- MasterChef.updateBonus(uint256) (MasterChef.sol#1575-1594)\n\t- MasterChef.updatePool(uint256) (MasterChef.sol#1557-1572)\n\t- pool.lastRewardBlock = block.number (MasterChef.sol#1571)\n\tMasterChef.poolInfo (MasterChef.sol#1391) can be used in cross function reentrancies:\n\t- MasterChef.add(uint256,uint256,IBEP20,bool) (MasterChef.sol#1477-1494)\n\t- MasterChef.addBonus(IBEP20) (MasterChef.sol#1496-1505)\n\t- MasterChef.massUpdatePools() (MasterChef.sol#1549-1554)\n\t- MasterChef.pendingBonus(uint256,address) (MasterChef.sol#1536-1546)\n\t- MasterChef.pendingLC(uint256,address) (MasterChef.sol#1522-1533)\n\t- MasterChef.poolInfo (MasterChef.sol#1391)\n\t- MasterChef.poolLength() (MasterChef.sol#1455-1457)\n\t- MasterChef.set(uint256,uint256,bool) (MasterChef.sol#1508-1514)\n\t- MasterChef.updateBonus(uint256) (MasterChef.sol#1575-1594)\n\t- MasterChef.updatePool(uint256) (MasterChef.sol#1557-1572)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "High",
            "contract": "Ownable",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-LuckyChip/staking-23e5db6078aa12754ae69048c7754c7f1e90b375/contracts/MasterChef.sol",
            "function": "owner",
            "impact": "Low",
            "line": 1051,
            "message": "LCBEP20._approve(address,address,uint256).owner (MasterChef.sol#1051) shadows:\n\t- Ownable.owner() (MasterChef.sol#665-667) (function)\n",
            "name": "shadowing-local",
            "check": "FP"
        },
        {
            "confidence": "High",
            "contract": "Ownable",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-LuckyChip/staking-23e5db6078aa12754ae69048c7754c7f1e90b375/contracts/MasterChef.sol",
            "function": "owner",
            "impact": "Low",
            "line": 876,
            "message": "LCBEP20.allowance(address,address).owner (MasterChef.sol#876) shadows:\n\t- Ownable.owner() (MasterChef.sol#665-667) (function)\n",
            "name": "shadowing-local",
            "check": "FP"
        },
        {
            "confidence": "High",
            "contract": "LCBEP20",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-LuckyChip/staking-23e5db6078aa12754ae69048c7754c7f1e90b375/contracts/MasterChef.sol",
            "function": "symbol",
            "impact": "Low",
            "line": 808,
            "message": "LCBEP20.constructor(string,string).symbol (MasterChef.sol#808) shadows:\n\t- LCBEP20.symbol() (MasterChef.sol#838-840) (function)\n\t- IBEP20.symbol() (MasterChef.sol#230) (function)\n",
            "name": "shadowing-local",
            "check": "FP"
        },
        {
            "confidence": "High",
            "contract": "LCBEP20",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-LuckyChip/staking-23e5db6078aa12754ae69048c7754c7f1e90b375/contracts/MasterChef.sol",
            "function": "name",
            "impact": "Low",
            "line": 808,
            "message": "LCBEP20.constructor(string,string).name (MasterChef.sol#808) shadows:\n\t- LCBEP20.name() (MasterChef.sol#824-826) (function)\n\t- IBEP20.name() (MasterChef.sol#235) (function)\n",
            "name": "shadowing-local",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MasterChef",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-LuckyChip/staking-23e5db6078aa12754ae69048c7754c7f1e90b375/contracts/MasterChef.sol",
            "function": "set",
            "impact": "Low",
            "line": 1508,
            "line_end": 1514,
            "message": "MasterChef.set(uint256,uint256,bool) (MasterChef.sol#1508-1514) should emit an event for: \n\t- totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint) (MasterChef.sol#1512) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MasterChef",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-LuckyChip/staking-23e5db6078aa12754ae69048c7754c7f1e90b375/contracts/MasterChef.sol",
            "function": "add",
            "impact": "Low",
            "line": 1477,
            "line_end": 1494,
            "message": "MasterChef.add(uint256,uint256,IBEP20,bool) (MasterChef.sol#1477-1494) should emit an event for: \n\t- totalAllocPoint = totalAllocPoint.add(_allocPoint) (MasterChef.sol#1482) \n\t- totalBonusPoint = totalBonusPoint.add(_bonusPoint) (MasterChef.sol#1483) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MasterChef",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-LuckyChip/staking-23e5db6078aa12754ae69048c7754c7f1e90b375/contracts/MasterChef.sol",
            "function": "updateLcPerBlock",
            "impact": "Low",
            "line": 1709,
            "line_end": 1713,
            "message": "MasterChef.updateLcPerBlock(uint256) (MasterChef.sol#1709-1713) should emit an event for: \n\t- LCPerBlock = newAmount (MasterChef.sol#1712) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MasterChef",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-LuckyChip/staking-23e5db6078aa12754ae69048c7754c7f1e90b375/contracts/MasterChef.sol",
            "function": "updateMultiplier",
            "impact": "Low",
            "line": 1451,
            "line_end": 1453,
            "message": "MasterChef.updateMultiplier(uint256) (MasterChef.sol#1451-1453) should emit an event for: \n\t- BONUS_MULTIPLIER = multiplierNumber (MasterChef.sol#1452) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MasterChef",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-LuckyChip/staking-23e5db6078aa12754ae69048c7754c7f1e90b375/contracts/MasterChef.sol",
            "function": "setReferralCommissionRate",
            "impact": "Low",
            "line": 1715,
            "line_end": 1718,
            "message": "MasterChef.setReferralCommissionRate(uint16) (MasterChef.sol#1715-1718) should emit an event for: \n\t- referralCommissionRate = _referralCommissionRate (MasterChef.sol#1717) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MasterChef",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-LuckyChip/staking-23e5db6078aa12754ae69048c7754c7f1e90b375/contracts/MasterChef.sol",
            "function": "updatePool",
            "impact": "Low",
            "line": 1557,
            "line_end": 1572,
            "message": "MasterChef.updatePool(uint256) (MasterChef.sol#1557-1572) has external calls inside a loop: lpSupply = pool.lpToken.balanceOf(address(this)) (MasterChef.sol#1562)\n",
            "name": "calls-loop",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MasterChef",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-LuckyChip/staking-23e5db6078aa12754ae69048c7754c7f1e90b375/contracts/MasterChef.sol",
            "function": "updatePool",
            "impact": "Low",
            "line": 1557,
            "line_end": 1572,
            "message": "MasterChef.updatePool(uint256) (MasterChef.sol#1557-1572) has external calls inside a loop: LC.mint(address(this),LCReward) (MasterChef.sol#1569)\n",
            "name": "calls-loop",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MasterChef",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-LuckyChip/staking-23e5db6078aa12754ae69048c7754c7f1e90b375/contracts/MasterChef.sol",
            "function": "updateBonus",
            "impact": "Low",
            "line": 1575,
            "line_end": 1594,
            "message": "MasterChef.updateBonus(uint256) (MasterChef.sol#1575-1594) has external calls inside a loop: lpSupply = pool.lpToken.balanceOf(address(this)) (MasterChef.sol#1583)\n",
            "name": "calls-loop",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MasterChef",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-LuckyChip/staking-23e5db6078aa12754ae69048c7754c7f1e90b375/contracts/MasterChef.sol",
            "function": "add",
            "impact": "Low",
            "line": 1477,
            "line_end": 1494,
            "message": "Reentrancy in MasterChef.add(uint256,uint256,IBEP20,bool) (MasterChef.sol#1477-1494):\n\tExternal calls:\n\t- massUpdatePools() (MasterChef.sol#1479)\n\t\t- LC.mint(address(this),LCReward) (MasterChef.sol#1569)\n\tState variables written after the call(s):\n\t- totalBonusPoint = totalBonusPoint.add(_bonusPoint) (MasterChef.sol#1483)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "LCToken",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-LuckyChip/staking-23e5db6078aa12754ae69048c7754c7f1e90b375/contracts/MasterChef.sol",
            "function": "delegateBySig",
            "impact": "Low",
            "line": 1152,
            "line_end": 1193,
            "message": "LCToken.delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32) (MasterChef.sol#1152-1193) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(now <= expiry,LC::delegateBySig: signature expired) (MasterChef.sol#1191)\n",
            "name": "timestamp",
            "check": "FP"
        }
    ],
    "infos": [],
    "parser": {
        "id": "slither-0.10.0",
        "mode": "solidity",
        "version": "2024/04/30"
    }
}