'solc --version' running
'solc /sb/StakingRewardsFactory.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/sb' running
Compilation warnings/errors on /sb/StakingRewardsFactory.sol:
Warning: Contract code size exceeds 24576 bytes (a limit introduced in Spurious Dragon). This contract may not be deployable on mainnet. Consider enabling the optimizer (with a low "runs" value!), turning off revert strings, or using libraries.
    --> /sb/StakingRewardsFactory.sol:1188:1:
     |
1188 | contract StakingRewardsFactory is Ownable {
     | ^ (Relevant source part starts here and spans across multiple lines).



Reentrancy in StakingRewards.exit() (../../sb/StakingRewardsFactory.sol#1092-1095):
	External calls:
	- withdraw(_balances[_msgSender()]) (../../sb/StakingRewardsFactory.sol#1093)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sb/StakingRewardsFactory.sol#649)
		- stakingToken.safeTransfer(_msgSender(),amount) (../../sb/StakingRewardsFactory.sol#1072)
		- (success,returndata) = target.call{value: value}(data) (../../sb/StakingRewardsFactory.sol#517)
	- getReward() (../../sb/StakingRewardsFactory.sol#1094)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sb/StakingRewardsFactory.sol#649)
		- (success,returndata) = target.call{value: value}(data) (../../sb/StakingRewardsFactory.sol#517)
		- IERC20(rewardTokens[i]).safeTransfer(_msgSender(),reward) (../../sb/StakingRewardsFactory.sol#1086)
	External calls sending eth:
	- withdraw(_balances[_msgSender()]) (../../sb/StakingRewardsFactory.sol#1093)
		- (success,returndata) = target.call{value: value}(data) (../../sb/StakingRewardsFactory.sol#517)
	- getReward() (../../sb/StakingRewardsFactory.sol#1094)
		- (success,returndata) = target.call{value: value}(data) (../../sb/StakingRewardsFactory.sol#517)
	State variables written after the call(s):
	- getReward() (../../sb/StakingRewardsFactory.sol#1094)
		- _status = _ENTERED (../../sb/StakingRewardsFactory.sol#706)
		- _status = _NOT_ENTERED (../../sb/StakingRewardsFactory.sol#712)
	ReentrancyGuard._status (../../sb/StakingRewardsFactory.sol#688) can be used in cross function reentrancies:
	- ReentrancyGuard.nonReentrant() (../../sb/StakingRewardsFactory.sol#701-713)
	- getReward() (../../sb/StakingRewardsFactory.sol#1094)
		- rewardLastUpdatedTime[rewardTokens[i]] = lastTimeRewardApplicable() (../../sb/StakingRewardsFactory.sol#1154)
	StakingRewards.rewardLastUpdatedTime (../../sb/StakingRewardsFactory.sol#922) can be used in cross function reentrancies:
	- StakingRewards.notifyRewardAmount(address,uint256) (../../sb/StakingRewardsFactory.sol#1099-1131)
	- StakingRewards.rewardLastUpdatedTime (../../sb/StakingRewardsFactory.sol#922)
	- StakingRewards.rewardPerToken(address) (../../sb/StakingRewardsFactory.sol#974-991)
	- StakingRewards.updateReward(address) (../../sb/StakingRewardsFactory.sol#1149-1166)
	- getReward() (../../sb/StakingRewardsFactory.sol#1094)
		- rewards[_msgSender()][rewardTokens[i]] = 0 (../../sb/StakingRewardsFactory.sol#1085)
		- rewards[account][rewardTokens[i]] = earned(account,rewardTokens[i]) (../../sb/StakingRewardsFactory.sol#1156-1159)
	StakingRewards.rewards (../../sb/StakingRewardsFactory.sol#925) can be used in cross function reentrancies:
	- StakingRewards.earned(address,address) (../../sb/StakingRewardsFactory.sol#993-1008)
	- StakingRewards.getReward() (../../sb/StakingRewardsFactory.sol#1076-1090)
	- StakingRewards.rewards (../../sb/StakingRewardsFactory.sol#925)
	- StakingRewards.updateReward(address) (../../sb/StakingRewardsFactory.sol#1149-1166)
	- getReward() (../../sb/StakingRewardsFactory.sol#1094)
		- rewardsPerTokenMap[rewardTokens[i]] = rewardPerToken(rewardTokens[i]) (../../sb/StakingRewardsFactory.sol#1151-1153)
	StakingRewards.rewardsPerTokenMap (../../sb/StakingRewardsFactory.sol#919) can be used in cross function reentrancies:
	- StakingRewards.rewardPerToken(address) (../../sb/StakingRewardsFactory.sol#974-991)
	- StakingRewards.rewardsPerTokenMap (../../sb/StakingRewardsFactory.sol#919)
	- StakingRewards.updateReward(address) (../../sb/StakingRewardsFactory.sol#1149-1166)
	- getReward() (../../sb/StakingRewardsFactory.sol#1094)
		- userRewardPerTokenPaid[account][rewardTokens[i]] = rewardsPerTokenMap[rewardTokens[i]] (../../sb/StakingRewardsFactory.sol#1160-1162)
	StakingRewards.userRewardPerTokenPaid (../../sb/StakingRewardsFactory.sol#923-924) can be used in cross function reentrancies:
	- StakingRewards.earned(address,address) (../../sb/StakingRewardsFactory.sol#993-1008)
	- StakingRewards.updateReward(address) (../../sb/StakingRewardsFactory.sol#1149-1166)
	- StakingRewards.userRewardPerTokenPaid (../../sb/StakingRewardsFactory.sol#923-924)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities

StakingRewards.rescueFunds(address,address) (../../sb/StakingRewardsFactory.sol#1133-1145) ignores return value by IERC20(tokenAddress).transfer(receiver,IERC20(tokenAddress).balanceOf(address(this))) (../../sb/StakingRewardsFactory.sol#1141-1144)
StakingRewardsFactory.rescueFactoryFunds(address) (../../sb/StakingRewardsFactory.sol#1276-1281) ignores return value by token.transfer(msg.sender,balance) (../../sb/StakingRewardsFactory.sol#1280)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-transfer

Reentrancy in StakingRewards.getReward() (../../sb/StakingRewardsFactory.sol#1076-1090):
	External calls:
	- IERC20(rewardTokens[i]).safeTransfer(_msgSender(),reward) (../../sb/StakingRewardsFactory.sol#1086)
	State variables written after the call(s):
	- rewards[_msgSender()][rewardTokens[i]] = 0 (../../sb/StakingRewardsFactory.sol#1085)
	StakingRewards.rewards (../../sb/StakingRewardsFactory.sol#925) can be used in cross function reentrancies:
	- StakingRewards.earned(address,address) (../../sb/StakingRewardsFactory.sol#993-1008)
	- StakingRewards.getReward() (../../sb/StakingRewardsFactory.sol#1076-1090)
	- StakingRewards.rewards (../../sb/StakingRewardsFactory.sol#925)
	- StakingRewards.updateReward(address) (../../sb/StakingRewardsFactory.sol#1149-1166)
Reentrancy in StakingRewardsFactory.notifyRewardAmount(address) (../../sb/StakingRewardsFactory.sol#1298-1328):
	External calls:
	- require(bool,string)(IERC20(info.poolRewardToken[i]).transfer(info.stakingRewards,rewardAmount),StakingRewardsFactory::notifyRewardAmount: transfer failed) (../../sb/StakingRewardsFactory.sol#1315-1321)
	- StakingRewards(info.stakingRewards).notifyRewardAmount(info.poolRewardToken[i],rewardAmount) (../../sb/StakingRewardsFactory.sol#1322-1325)
	State variables written after the call(s):
	- info.poolRewardAmount[i] = 0 (../../sb/StakingRewardsFactory.sol#1314)
	StakingRewardsFactory.stakingRewardsInfoByStakingToken (../../sb/StakingRewardsFactory.sol#1206-1207) can be used in cross function reentrancies:
	- StakingRewardsFactory.deploy(address,address[],uint256[]) (../../sb/StakingRewardsFactory.sol#1225-1256)
	- StakingRewardsFactory.notifyRewardAmount(address) (../../sb/StakingRewardsFactory.sol#1298-1328)
	- StakingRewardsFactory.rescueFunds(address,address) (../../sb/StakingRewardsFactory.sol#1259-1273)
	- StakingRewardsFactory.stakingRewardsInfo(address) (../../sb/StakingRewardsFactory.sol#1330-1346)
	- StakingRewardsFactory.stakingRewardsInfoByStakingToken (../../sb/StakingRewardsFactory.sol#1206-1207)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1

StakingRewards.constructor(address,address[],address)._rewardsDistribution (../../sb/StakingRewardsFactory.sol#930) lacks a zero-check on :
		- rewardsDistribution = _rewardsDistribution (../../sb/StakingRewardsFactory.sol#936)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

StakingRewardsFactory.notifyRewardAmount(address) (../../sb/StakingRewardsFactory.sol#1298-1328) has external calls inside a loop: require(bool,string)(IERC20(info.poolRewardToken[i]).transfer(info.stakingRewards,rewardAmount),StakingRewardsFactory::notifyRewardAmount: transfer failed) (../../sb/StakingRewardsFactory.sol#1315-1321)
StakingRewardsFactory.notifyRewardAmount(address) (../../sb/StakingRewardsFactory.sol#1298-1328) has external calls inside a loop: StakingRewards(info.stakingRewards).notifyRewardAmount(info.poolRewardToken[i],rewardAmount) (../../sb/StakingRewardsFactory.sol#1322-1325)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop

Reentrancy in StakingRewards.exit() (../../sb/StakingRewardsFactory.sol#1092-1095):
	External calls:
	- withdraw(_balances[_msgSender()]) (../../sb/StakingRewardsFactory.sol#1093)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sb/StakingRewardsFactory.sol#649)
		- stakingToken.safeTransfer(_msgSender(),amount) (../../sb/StakingRewardsFactory.sol#1072)
		- (success,returndata) = target.call{value: value}(data) (../../sb/StakingRewardsFactory.sol#517)
	- getReward() (../../sb/StakingRewardsFactory.sol#1094)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sb/StakingRewardsFactory.sol#649)
		- (success,returndata) = target.call{value: value}(data) (../../sb/StakingRewardsFactory.sol#517)
		- IERC20(rewardTokens[i]).safeTransfer(_msgSender(),reward) (../../sb/StakingRewardsFactory.sol#1086)
	External calls sending eth:
	- withdraw(_balances[_msgSender()]) (../../sb/StakingRewardsFactory.sol#1093)
		- (success,returndata) = target.call{value: value}(data) (../../sb/StakingRewardsFactory.sol#517)
	- getReward() (../../sb/StakingRewardsFactory.sol#1094)
		- (success,returndata) = target.call{value: value}(data) (../../sb/StakingRewardsFactory.sol#517)
	Event emitted after the call(s):
	- RewardPaid(_msgSender(),reward) (../../sb/StakingRewardsFactory.sol#1087)
		- getReward() (../../sb/StakingRewardsFactory.sol#1094)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

StakingRewards.notifyRewardAmount(address,uint256) (../../sb/StakingRewardsFactory.sol#1099-1131) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp >= periodFinish (../../sb/StakingRewardsFactory.sol#1107)
	- require(bool,string)(rewardRate <= balance.div(periodFinish.sub(block.timestamp)),Provided reward too high) (../../sb/StakingRewardsFactory.sol#1122-1125)
StakingRewardsFactory.constructor(uint256) (../../sb/StakingRewardsFactory.sol#1213-1219) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(_stakingRewardsGenesis >= block.timestamp,StakingRewardsFactory::constructor: genesis too soon) (../../sb/StakingRewardsFactory.sol#1214-1217)
StakingRewardsFactory.notifyRewardAmount(address) (../../sb/StakingRewardsFactory.sol#1298-1328) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp >= stakingRewardsGenesis,StakingRewardsFactory::notifyRewardAmount: not ready) (../../sb/StakingRewardsFactory.sol#1300-1303)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

Address.isContract(address) (../../sb/StakingRewardsFactory.sol#424-433) uses assembly
	- INLINE ASM (../../sb/StakingRewardsFactory.sol#431)
Address._verifyCallResult(bool,bytes,string) (../../sb/StakingRewardsFactory.sol#569-586) uses assembly
	- INLINE ASM (../../sb/StakingRewardsFactory.sol#578-581)
EIP712Base.getChainId() (../../sb/StakingRewardsFactory.sol#763-769) uses assembly
	- INLINE ASM (../../sb/StakingRewardsFactory.sol#765-767)
NativeMetaTransaction._msgSender() (../../sb/StakingRewardsFactory.sol#847-859) uses assembly
	- INLINE ASM (../../sb/StakingRewardsFactory.sol#851-854)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage

Address.functionCall(address,bytes) (../../sb/StakingRewardsFactory.sol#477-479) is never used and should be removed
Address.functionCallWithValue(address,bytes,uint256) (../../sb/StakingRewardsFactory.sol#502-504) is never used and should be removed
Address.functionDelegateCall(address,bytes) (../../sb/StakingRewardsFactory.sol#551-553) is never used and should be removed
Address.functionDelegateCall(address,bytes,string) (../../sb/StakingRewardsFactory.sol#561-567) is never used and should be removed
Address.functionStaticCall(address,bytes) (../../sb/StakingRewardsFactory.sol#527-529) is never used and should be removed
Address.functionStaticCall(address,bytes,string) (../../sb/StakingRewardsFactory.sol#537-543) is never used and should be removed
Address.sendValue(address,uint256) (../../sb/StakingRewardsFactory.sol#451-457) is never used and should be removed
Context._msgData() (../../sb/StakingRewardsFactory.sol#94-97) is never used and should be removed
Math.average(uint256,uint256) (../../sb/StakingRewardsFactory.sol#186-189) is never used and should be removed
Math.max(uint256,uint256) (../../sb/StakingRewardsFactory.sol#171-173) is never used and should be removed
SafeERC20.safeApprove(IERC20,address,uint256) (../../sb/StakingRewardsFactory.sol#617-626) is never used and should be removed
SafeERC20.safeDecreaseAllowance(IERC20,address,uint256) (../../sb/StakingRewardsFactory.sol#633-636) is never used and should be removed
SafeERC20.safeIncreaseAllowance(IERC20,address,uint256) (../../sb/StakingRewardsFactory.sol#628-631) is never used and should be removed
SafeMath.div(uint256,uint256,string) (../../sb/StakingRewardsFactory.sol#377-380) is never used and should be removed
SafeMath.mod(uint256,uint256) (../../sb/StakingRewardsFactory.sol#339-342) is never used and should be removed
SafeMath.mod(uint256,uint256,string) (../../sb/StakingRewardsFactory.sol#397-400) is never used and should be removed
SafeMath.sub(uint256,uint256,string) (../../sb/StakingRewardsFactory.sol#357-360) is never used and should be removed
SafeMath.tryAdd(uint256,uint256) (../../sb/StakingRewardsFactory.sol#211-215) is never used and should be removed
SafeMath.tryDiv(uint256,uint256) (../../sb/StakingRewardsFactory.sol#247-250) is never used and should be removed
SafeMath.tryMod(uint256,uint256) (../../sb/StakingRewardsFactory.sol#257-260) is never used and should be removed
SafeMath.tryMul(uint256,uint256) (../../sb/StakingRewardsFactory.sol#232-240) is never used and should be removed
SafeMath.trySub(uint256,uint256) (../../sb/StakingRewardsFactory.sol#222-225) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code

Pragma version>=0.6.11 (../../sb/StakingRewardsFactory.sol#1) allows old versions
solc-0.6.12 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Low level call in Address.sendValue(address,uint256) (../../sb/StakingRewardsFactory.sol#451-457):
	- (success) = recipient.call{value: amount}() (../../sb/StakingRewardsFactory.sol#455)
Low level call in Address.functionCallWithValue(address,bytes,uint256,string) (../../sb/StakingRewardsFactory.sol#512-519):
	- (success,returndata) = target.call{value: value}(data) (../../sb/StakingRewardsFactory.sol#517)
Low level call in Address.functionStaticCall(address,bytes,string) (../../sb/StakingRewardsFactory.sol#537-543):
	- (success,returndata) = target.staticcall(data) (../../sb/StakingRewardsFactory.sol#541)
Low level call in Address.functionDelegateCall(address,bytes,string) (../../sb/StakingRewardsFactory.sol#561-567):
	- (success,returndata) = target.delegatecall(data) (../../sb/StakingRewardsFactory.sol#565)
Low level call in NativeMetaTransaction.executeMetaTransaction(address,bytes,bytes32,bytes32,uint8) (../../sb/StakingRewardsFactory.sol#801-823):
	- (success,returnData) = address(this).call(abi.encodePacked(functionSignature,userAddress)) (../../sb/StakingRewardsFactory.sol#819)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls

Redundant expression "this (../../sb/StakingRewardsFactory.sol#95)" inContext (../../sb/StakingRewardsFactory.sol#89-98)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#redundant-statements

Loop condition i < stakers.length (../../sb/StakingRewardsFactory.sol#963) should use cached array length instead of referencing `length` member of the storage array.
 Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#cache-array-length

StakingRewards.rewardPerTokenStored (../../sb/StakingRewardsFactory.sol#914) should be constant 
StakingRewards.rewardsDuration (../../sb/StakingRewardsFactory.sol#913) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant

RewardsDistributionRecipient.rewardsDistribution (../../sb/StakingRewardsFactory.sol#888) should be immutable 
StakingRewards.stakingToken (../../sb/StakingRewardsFactory.sol#911) should be immutable 
StakingRewardsFactory.stakingRewardsGenesis (../../sb/StakingRewardsFactory.sol#1190) should be immutable 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-immutable
/sb/StakingRewardsFactory.sol analyzed (16 contracts with 93 detectors), 52 result(s) found
