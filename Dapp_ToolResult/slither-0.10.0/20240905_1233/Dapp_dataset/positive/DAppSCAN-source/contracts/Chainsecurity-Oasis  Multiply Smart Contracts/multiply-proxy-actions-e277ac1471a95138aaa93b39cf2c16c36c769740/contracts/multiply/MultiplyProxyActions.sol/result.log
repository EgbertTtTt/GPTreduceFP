'solc --version' running
'solc /sb/MultiplyProxyActions.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/sb' running
Compilation warnings/errors on /sb/MultiplyProxyActions.sol:
Warning: This contract has a payable fallback function, but no receive ether function. Consider adding a receive ether function.
   --> /sb/MultiplyProxyActions.sol:437:1:
    |
437 | contract MultiplyProxyActions is IERC3156FlashBorrower {
    | ^ (Relevant source part starts here and spans across multiple lines).
Note: The payable fallback function is defined here.
    --> /sb/MultiplyProxyActions.sol:1188:3:
     |
1188 |   fallback() external payable {}
     |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
    --> /sb/MultiplyProxyActions.sol:1125:5:
     |
1125 |     address initiator,
     |     ^^^^^^^^^^^^^^^^^

Warning: Function state mutability can be restricted to view
   --> /sb/MultiplyProxyActions.sol:488:3:
    |
488 |   function convertTo18(address gemJoin, uint256 amt) internal returns (uint256 wad) {
    |   ^ (Relevant source part starts here and spans across multiple lines).

Warning: Contract code size exceeds 24576 bytes (a limit introduced in Spurious Dragon). This contract may not be deployable on mainnet. Consider enabling the optimizer (with a low "runs" value!), turning off revert strings, or using libraries.
   --> /sb/MultiplyProxyActions.sol:437:1:
    |
437 | contract MultiplyProxyActions is IERC3156FlashBorrower {
    | ^ (Relevant source part starts here and spans across multiple lines).



MultiplyProxyActions._withdrawGem(address,address,uint256) (../../sb/MultiplyProxyActions.sol#842-855) sends eth to arbitrary user
	Dangerous calls:
	- destination.transfer(amount) (../../sb/MultiplyProxyActions.sol#851)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#functions-that-send-ether-to-arbitrary-destinations

MultiplyProxyActions.increaseMultipleDepositCollateral(ExchangeData,CdpData,AddressRegistry) (../../sb/MultiplyProxyActions.sol#531-564) ignores return value by gem.transfer(addressRegistry.multiplyProxyActions,msg.value) (../../sb/MultiplyProxyActions.sol#550)
MultiplyProxyActions.increaseMultipleDepositCollateral(ExchangeData,CdpData,AddressRegistry) (../../sb/MultiplyProxyActions.sol#531-564) ignores return value by gem.transferFrom(msg.sender,addressRegistry.multiplyProxyActions,cdpData.depositCollateral) (../../sb/MultiplyProxyActions.sol#554-558)
MultiplyProxyActions.increaseMultipleDepositCollateral(ExchangeData,CdpData,AddressRegistry) (../../sb/MultiplyProxyActions.sol#531-564) ignores return value by gem.transferFrom(msg.sender,address(this),cdpData.depositCollateral) (../../sb/MultiplyProxyActions.sol#560)
MultiplyProxyActions.increaseMultipleDepositDai(ExchangeData,CdpData,AddressRegistry) (../../sb/MultiplyProxyActions.sol#590-608) ignores return value by IERC20(DAI).transferFrom(msg.sender,address(this),cdpData.depositDai) (../../sb/MultiplyProxyActions.sol#599)
MultiplyProxyActions.increaseMultipleDepositDai(ExchangeData,CdpData,AddressRegistry) (../../sb/MultiplyProxyActions.sol#590-608) ignores return value by IERC20(DAI).transferFrom(msg.sender,addressRegistry.multiplyProxyActions,cdpData.depositDai) (../../sb/MultiplyProxyActions.sol#601-605)
MultiplyProxyActions._withdrawGem(address,address,uint256) (../../sb/MultiplyProxyActions.sol#842-855) ignores return value by IERC20(address(gem)).transfer(destination,amount) (../../sb/MultiplyProxyActions.sol#853)
MultiplyProxyActions._increaseMP(ExchangeData,CdpData,AddressRegistry,uint256) (../../sb/MultiplyProxyActions.sol#857-895) ignores return value by IERC20(DAI).transfer(cdpData.fundsReceiver,daiLeft) (../../sb/MultiplyProxyActions.sol#893)
MultiplyProxyActions._decreaseMP(ExchangeData,CdpData,AddressRegistry,uint256) (../../sb/MultiplyProxyActions.sol#897-961) ignores return value by IERC20(DAI).transfer(cdpData.fundsReceiver,daiLeft) (../../sb/MultiplyProxyActions.sol#956)
MultiplyProxyActions._closeWithdrawCollateralSkipFL(ExchangeData,CdpData,AddressRegistry,uint256) (../../sb/MultiplyProxyActions.sol#963-1020) ignores return value by IERC20(DAI).transfer(cdpData.fundsReceiver,daiLeft) (../../sb/MultiplyProxyActions.sol#1007)
MultiplyProxyActions._closeWithdrawCollateral(ExchangeData,CdpData,AddressRegistry,uint256,uint256) (../../sb/MultiplyProxyActions.sol#1022-1069) ignores return value by IERC20(DAI).transfer(cdpData.fundsReceiver,daiLeft) (../../sb/MultiplyProxyActions.sol#1056)
MultiplyProxyActions._closeWithdrawDai(ExchangeData,CdpData,AddressRegistry,uint256,uint256) (../../sb/MultiplyProxyActions.sol#1071-1122) ignores return value by IERC20(DAI).transfer(cdpData.fundsReceiver,daiLeft) (../../sb/MultiplyProxyActions.sol#1107)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-transfer

MultiplyProxyActions._getWipeAllWad(address,address,address,bytes32) (../../sb/MultiplyProxyActions.sol#800-818) performs a multiplication on the result of a division:
	- wad = rad / RAY (../../sb/MultiplyProxyActions.sol#814)
	- wad.mul(RAY) < rad (../../sb/MultiplyProxyActions.sol#817)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply

IWETH (../../sb/MultiplyProxyActions.sol#96-114) has incorrect ERC20 function interface:IWETH.approve(address,uint256) (../../sb/MultiplyProxyActions.sol#101)
IGem (../../sb/MultiplyProxyActions.sol#116-140) has incorrect ERC20 function interface:IGem.approve(address,uint256) (../../sb/MultiplyProxyActions.sol#125)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-erc20-interface

MultiplyProxyActions.takeAFlashLoan(AddressRegistry,CdpData,bytes) (../../sb/MultiplyProxyActions.sol#458-481) ignores return value by IERC3156FlashLender(addressRegistry.lender).flashLoan(IERC3156FlashBorrower(addressRegistry.multiplyProxyActions),DAI,cdpData.requiredDebt,paramsData) (../../sb/MultiplyProxyActions.sol#469-474)
MultiplyProxyActions.getInk(address,CdpData) (../../sb/MultiplyProxyActions.sol#775-781) ignores return value by (ink) = IVat(vat).urns(cdpData.ilk,urn) (../../sb/MultiplyProxyActions.sol#779)
MultiplyProxyActions._getWipeDart(address,uint256,address,bytes32) (../../sb/MultiplyProxyActions.sol#783-798) ignores return value by (rate) = IVat(vat).ilks(ilk) (../../sb/MultiplyProxyActions.sol#790)
MultiplyProxyActions._getWipeDart(address,uint256,address,bytes32) (../../sb/MultiplyProxyActions.sol#783-798) ignores return value by (art) = IVat(vat).urns(ilk,urn) (../../sb/MultiplyProxyActions.sol#792)
MultiplyProxyActions._getWipeAllWad(address,address,address,bytes32) (../../sb/MultiplyProxyActions.sol#800-818) ignores return value by (rate) = IVat(vat).ilks(ilk) (../../sb/MultiplyProxyActions.sol#807)
MultiplyProxyActions._getWipeAllWad(address,address,address,bytes32) (../../sb/MultiplyProxyActions.sol#800-818) ignores return value by (art) = IVat(vat).urns(ilk,urn) (../../sb/MultiplyProxyActions.sol#809)
MultiplyProxyActions.wipeAndFreeGem(address,address,uint256,uint256,uint256) (../../sb/MultiplyProxyActions.sol#820-840) ignores return value by IERC20(DAI).approve(DAIJOIN,borrowedDai) (../../sb/MultiplyProxyActions.sol#831)
MultiplyProxyActions.onFlashLoan(address,address,uint256,uint256,bytes) (../../sb/MultiplyProxyActions.sol#1124-1176) ignores return value by IERC20(token).approve(addressRegistry.lender,borrowedDaiAmount) (../../sb/MultiplyProxyActions.sol#1173)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return

Reentrancy in MultiplyProxyActions._closeWithdrawCollateral(ExchangeData,CdpData,AddressRegistry,uint256,uint256) (../../sb/MultiplyProxyActions.sol#1022-1069):
	External calls:
	- wipeAndFreeGem(addressRegistry.manager,cdpData.gemJoin,cdpData.cdpId,cdpData.requiredDebt,ink) (../../sb/MultiplyProxyActions.sol#1032-1038)
		- IERC20(DAI).approve(DAIJOIN,borrowedDai) (../../sb/MultiplyProxyActions.sol#831)
		- IDaiJoin(DAIJOIN).join(urn,borrowedDai) (../../sb/MultiplyProxyActions.sol#832)
		- IManager(manager).frob(cdp,- toInt256(wadC),_getWipeDart(vat,IVat(vat).dai(urn),urn,ilk)) (../../sb/MultiplyProxyActions.sol#836)
		- IManager(manager).flux(cdp,address(this),wadC) (../../sb/MultiplyProxyActions.sol#838)
		- IJoin(gemJoin).exit(address(this),collateralDraw) (../../sb/MultiplyProxyActions.sol#839)
	- require(bool,string)(IERC20(exchangeData.fromTokenAddress).approve(address(exchange),ink),MPA / Could not approve Exchange for Token) (../../sb/MultiplyProxyActions.sol#1040-1043)
	- exchange.swapTokenForDai(exchangeData.fromTokenAddress,exchangeData.fromTokenAmount,exchangeData.minToTokenAmount,exchangeData.exchangeAddress,exchangeData._exchangeCalldata) (../../sb/MultiplyProxyActions.sol#1044-1050)
	- IERC20(DAI).transfer(cdpData.fundsReceiver,daiLeft) (../../sb/MultiplyProxyActions.sol#1056)
	- _withdrawGem(cdpData.gemJoin,cdpData.fundsReceiver,collateralLeft) (../../sb/MultiplyProxyActions.sol#1059)
		- gem.withdraw(amount) (../../sb/MultiplyProxyActions.sol#850)
		- IERC20(address(gem)).transfer(destination,amount) (../../sb/MultiplyProxyActions.sol#853)
	External calls sending eth:
	- _withdrawGem(cdpData.gemJoin,cdpData.fundsReceiver,collateralLeft) (../../sb/MultiplyProxyActions.sol#1059)
		- destination.transfer(amount) (../../sb/MultiplyProxyActions.sol#851)
	Event emitted after the call(s):
	- MultipleActionCalled(cdpData.methodName,cdpData.cdpId,exchangeData.minToTokenAmount,exchangeData.toTokenAmount,collateralLeft,daiLeft) (../../sb/MultiplyProxyActions.sol#1061-1068)
Reentrancy in MultiplyProxyActions._closeWithdrawCollateralSkipFL(ExchangeData,CdpData,AddressRegistry,uint256) (../../sb/MultiplyProxyActions.sol#963-1020):
	External calls:
	- wipeAndFreeGem(addressRegistry.manager,cdpData.gemJoin,cdpData.cdpId,0,exchangeData.fromTokenAmount) (../../sb/MultiplyProxyActions.sol#972-978)
		- IERC20(DAI).approve(DAIJOIN,borrowedDai) (../../sb/MultiplyProxyActions.sol#831)
		- IDaiJoin(DAIJOIN).join(urn,borrowedDai) (../../sb/MultiplyProxyActions.sol#832)
		- IManager(manager).frob(cdp,- toInt256(wadC),_getWipeDart(vat,IVat(vat).dai(urn),urn,ilk)) (../../sb/MultiplyProxyActions.sol#836)
		- IManager(manager).flux(cdp,address(this),wadC) (../../sb/MultiplyProxyActions.sol#838)
		- IJoin(gemJoin).exit(address(this),collateralDraw) (../../sb/MultiplyProxyActions.sol#839)
	- require(bool,string)(IERC20(exchangeData.fromTokenAddress).approve(address(exchange),ink),MPA / Could not approve Exchange for Token) (../../sb/MultiplyProxyActions.sol#979-982)
	- exchange.swapTokenForDai(exchangeData.fromTokenAddress,exchangeData.fromTokenAmount,exchangeData.minToTokenAmount,exchangeData.exchangeAddress,exchangeData._exchangeCalldata) (../../sb/MultiplyProxyActions.sol#983-989)
	- wipeAndFreeGem(addressRegistry.manager,cdpData.gemJoin,cdpData.cdpId,cdpData.requiredDebt,cdpData.withdrawCollateral) (../../sb/MultiplyProxyActions.sol#995-1001)
		- IERC20(DAI).approve(DAIJOIN,borrowedDai) (../../sb/MultiplyProxyActions.sol#831)
		- IDaiJoin(DAIJOIN).join(urn,borrowedDai) (../../sb/MultiplyProxyActions.sol#832)
		- IManager(manager).frob(cdp,- toInt256(wadC),_getWipeDart(vat,IVat(vat).dai(urn),urn,ilk)) (../../sb/MultiplyProxyActions.sol#836)
		- IManager(manager).flux(cdp,address(this),wadC) (../../sb/MultiplyProxyActions.sol#838)
		- IJoin(gemJoin).exit(address(this),collateralDraw) (../../sb/MultiplyProxyActions.sol#839)
	- IERC20(DAI).transfer(cdpData.fundsReceiver,daiLeft) (../../sb/MultiplyProxyActions.sol#1007)
	- _withdrawGem(cdpData.gemJoin,cdpData.fundsReceiver,collateralLeft) (../../sb/MultiplyProxyActions.sol#1010)
		- gem.withdraw(amount) (../../sb/MultiplyProxyActions.sol#850)
		- IERC20(address(gem)).transfer(destination,amount) (../../sb/MultiplyProxyActions.sol#853)
	External calls sending eth:
	- _withdrawGem(cdpData.gemJoin,cdpData.fundsReceiver,collateralLeft) (../../sb/MultiplyProxyActions.sol#1010)
		- destination.transfer(amount) (../../sb/MultiplyProxyActions.sol#851)
	Event emitted after the call(s):
	- MultipleActionCalled(cdpData.methodName,cdpData.cdpId,exchangeData.minToTokenAmount,exchangeData.toTokenAmount,collateralLeft,daiLeft) (../../sb/MultiplyProxyActions.sol#1012-1019)
Reentrancy in MultiplyProxyActions._closeWithdrawDai(ExchangeData,CdpData,AddressRegistry,uint256,uint256) (../../sb/MultiplyProxyActions.sol#1071-1122):
	External calls:
	- wipeAndFreeGem(addressRegistry.manager,cdpData.gemJoin,cdpData.cdpId,cdpData.requiredDebt,ink) (../../sb/MultiplyProxyActions.sol#1081-1087)
		- IERC20(DAI).approve(DAIJOIN,borrowedDai) (../../sb/MultiplyProxyActions.sol#831)
		- IDaiJoin(DAIJOIN).join(urn,borrowedDai) (../../sb/MultiplyProxyActions.sol#832)
		- IManager(manager).frob(cdp,- toInt256(wadC),_getWipeDart(vat,IVat(vat).dai(urn),urn,ilk)) (../../sb/MultiplyProxyActions.sol#836)
		- IManager(manager).flux(cdp,address(this),wadC) (../../sb/MultiplyProxyActions.sol#838)
		- IJoin(gemJoin).exit(address(this),collateralDraw) (../../sb/MultiplyProxyActions.sol#839)
	- require(bool,string)(IERC20(exchangeData.fromTokenAddress).approve(address(exchange),IERC20(gemAddress).balanceOf(address(this))),MPA / Could not approve Exchange for Token) (../../sb/MultiplyProxyActions.sol#1089-1095)
	- exchange.swapTokenForDai(exchangeData.fromTokenAddress,ink,exchangeData.minToTokenAmount,exchangeData.exchangeAddress,exchangeData._exchangeCalldata) (../../sb/MultiplyProxyActions.sol#1096-1102)
	- IERC20(DAI).transfer(cdpData.fundsReceiver,daiLeft) (../../sb/MultiplyProxyActions.sol#1107)
	Event emitted after the call(s):
	- MultipleActionCalled(cdpData.methodName,cdpData.cdpId,exchangeData.minToTokenAmount,exchangeData.toTokenAmount,collateralLeft,daiLeft) (../../sb/MultiplyProxyActions.sol#1114-1121)
Reentrancy in MultiplyProxyActions._decreaseMP(ExchangeData,CdpData,AddressRegistry,uint256) (../../sb/MultiplyProxyActions.sol#897-961):
	External calls:
	- wipeAndFreeGem(addressRegistry.manager,cdpData.gemJoin,cdpData.cdpId,debtToBeWiped,cdpData.borrowCollateral.add(cdpData.withdrawCollateral)) (../../sb/MultiplyProxyActions.sol#907-913)
		- IERC20(DAI).approve(DAIJOIN,borrowedDai) (../../sb/MultiplyProxyActions.sol#831)
		- IDaiJoin(DAIJOIN).join(urn,borrowedDai) (../../sb/MultiplyProxyActions.sol#832)
		- IManager(manager).frob(cdp,- toInt256(wadC),_getWipeDart(vat,IVat(vat).dai(urn),urn,ilk)) (../../sb/MultiplyProxyActions.sol#836)
		- IManager(manager).flux(cdp,address(this),wadC) (../../sb/MultiplyProxyActions.sol#838)
		- IJoin(gemJoin).exit(address(this),collateralDraw) (../../sb/MultiplyProxyActions.sol#839)
	- require(bool,string)(IERC20(exchangeData.fromTokenAddress).approve(address(exchange),exchangeData.fromTokenAmount),MPA / Could not approve Exchange for Token) (../../sb/MultiplyProxyActions.sol#915-921)
	- exchange.swapTokenForDai(exchangeData.fromTokenAddress,exchangeData.fromTokenAmount,cdpData.requiredDebt.add(premium),exchangeData.exchangeAddress,exchangeData._exchangeCalldata) (../../sb/MultiplyProxyActions.sol#923-929)
	- wipeAndFreeGem(addressRegistry.manager,cdpData.gemJoin,cdpData.cdpId,IERC20(DAI).balanceOf(address(this)).sub(cdpData.withdrawDai),0) (../../sb/MultiplyProxyActions.sol#935-941)
		- IERC20(DAI).approve(DAIJOIN,borrowedDai) (../../sb/MultiplyProxyActions.sol#831)
		- IDaiJoin(DAIJOIN).join(urn,borrowedDai) (../../sb/MultiplyProxyActions.sol#832)
		- IManager(manager).frob(cdp,- toInt256(wadC),_getWipeDart(vat,IVat(vat).dai(urn),urn,ilk)) (../../sb/MultiplyProxyActions.sol#836)
		- IManager(manager).flux(cdp,address(this),wadC) (../../sb/MultiplyProxyActions.sol#838)
		- IJoin(gemJoin).exit(address(this),collateralDraw) (../../sb/MultiplyProxyActions.sol#839)
	Event emitted after the call(s):
	- MultipleActionCalled(cdpData.methodName,cdpData.cdpId,exchangeData.minToTokenAmount,exchangeData.toTokenAmount,collateralLeft,daiLeft) (../../sb/MultiplyProxyActions.sol#946-953)
Reentrancy in MultiplyProxyActions._increaseMP(ExchangeData,CdpData,AddressRegistry,uint256) (../../sb/MultiplyProxyActions.sol#857-895):
	External calls:
	- require(bool,string)(IERC20(DAI).approve(address(exchange),exchangeData.fromTokenAmount.add(cdpData.depositDai)),MPA / Could not approve Exchange for DAI) (../../sb/MultiplyProxyActions.sol#868-871)
	- exchange.swapDaiForToken(exchangeData.toTokenAddress,exchangeData.fromTokenAmount.add(cdpData.depositDai),exchangeData.minToTokenAmount,exchangeData.exchangeAddress,exchangeData._exchangeCalldata) (../../sb/MultiplyProxyActions.sol#872-878)
	- joinDrawDebt(cdpData,borrowedDai,addressRegistry.manager,addressRegistry.jug) (../../sb/MultiplyProxyActions.sol#880)
		- rate = IJug(jug).drip(ilk) (../../sb/MultiplyProxyActions.sol#503)
		- gem.approve(address(cdpData.gemJoin),balance) (../../sb/MultiplyProxyActions.sol#756)
		- IJoin(cdpData.gemJoin).join(urn,balance) (../../sb/MultiplyProxyActions.sol#761)
		- IManager(manager).frob(cdpData.cdpId,toInt256(convertTo18(cdpData.gemJoin,balance)),_getDrawDart(vat,jug,urn,cdpData.ilk,borrowedDai)) (../../sb/MultiplyProxyActions.sol#763-767)
		- IManager(manager).move(cdpData.cdpId,address(this),borrowedDai.mul(RAY)) (../../sb/MultiplyProxyActions.sol#768)
		- IVat(vat).hope(DAIJOIN) (../../sb/MultiplyProxyActions.sol#770)
		- IJoin(DAIJOIN).exit(address(this),borrowedDai) (../../sb/MultiplyProxyActions.sol#772)
	Event emitted after the call(s):
	- MultipleActionCalled(cdpData.methodName,cdpData.cdpId,exchangeData.minToTokenAmount,exchangeData.toTokenAmount,0,daiLeft) (../../sb/MultiplyProxyActions.sol#883-890)
Reentrancy in MultiplyProxyActions.increaseMultipleDepositCollateral(ExchangeData,CdpData,AddressRegistry) (../../sb/MultiplyProxyActions.sol#531-564):
	External calls:
	- gem.deposit{value: msg.value}() (../../sb/MultiplyProxyActions.sol#548)
	- gem.transfer(addressRegistry.multiplyProxyActions,msg.value) (../../sb/MultiplyProxyActions.sol#550)
	- gem.transferFrom(msg.sender,addressRegistry.multiplyProxyActions,cdpData.depositCollateral) (../../sb/MultiplyProxyActions.sol#554-558)
	- gem.transferFrom(msg.sender,address(this),cdpData.depositCollateral) (../../sb/MultiplyProxyActions.sol#560)
	- increaseMultipleInternal(exchangeData,cdpData,addressRegistry) (../../sb/MultiplyProxyActions.sol#563)
		- IManager(addressRegistry.manager).cdpAllow(cdpData.cdpId,addressRegistry.multiplyProxyActions,1) (../../sb/MultiplyProxyActions.sol#463-467)
		- rate = IJug(jug).drip(ilk) (../../sb/MultiplyProxyActions.sol#503)
		- IERC3156FlashLender(addressRegistry.lender).flashLoan(IERC3156FlashBorrower(addressRegistry.multiplyProxyActions),DAI,cdpData.requiredDebt,paramsData) (../../sb/MultiplyProxyActions.sol#469-474)
		- IManager(addressRegistry.manager).cdpAllow(cdpData.cdpId,addressRegistry.multiplyProxyActions,0) (../../sb/MultiplyProxyActions.sol#476-480)
		- IManager(addressRegistry.manager).frob(cdpData.cdpId,0,_getDrawDart(vat,addressRegistry.jug,urn,cdpData.ilk,amount)) (../../sb/MultiplyProxyActions.sol#577-581)
		- gem.approve(address(cdpData.gemJoin),balance) (../../sb/MultiplyProxyActions.sol#756)
		- IManager(addressRegistry.manager).move(cdpData.cdpId,address(this),toRad(amount)) (../../sb/MultiplyProxyActions.sol#582)
		- require(bool,string)(IERC20(DAI).approve(address(exchange),exchangeData.fromTokenAmount.add(cdpData.depositDai)),MPA / Could not approve Exchange for DAI) (../../sb/MultiplyProxyActions.sol#868-871)
		- IVat(vat).hope(DAIJOIN) (../../sb/MultiplyProxyActions.sol#584)
		- IJoin(cdpData.gemJoin).join(urn,balance) (../../sb/MultiplyProxyActions.sol#761)
		- IManager(manager).frob(cdpData.cdpId,toInt256(convertTo18(cdpData.gemJoin,balance)),_getDrawDart(vat,jug,urn,cdpData.ilk,borrowedDai)) (../../sb/MultiplyProxyActions.sol#763-767)
		- exchange.swapDaiForToken(exchangeData.toTokenAddress,exchangeData.fromTokenAmount.add(cdpData.depositDai),exchangeData.minToTokenAmount,exchangeData.exchangeAddress,exchangeData._exchangeCalldata) (../../sb/MultiplyProxyActions.sol#872-878)
		- IJoin(DAIJOIN).exit(address(this),amount) (../../sb/MultiplyProxyActions.sol#587)
		- IManager(manager).move(cdpData.cdpId,address(this),borrowedDai.mul(RAY)) (../../sb/MultiplyProxyActions.sol#768)
		- IVat(vat).hope(DAIJOIN) (../../sb/MultiplyProxyActions.sol#770)
		- IJoin(DAIJOIN).exit(address(this),borrowedDai) (../../sb/MultiplyProxyActions.sol#772)
		- IERC20(DAI).transfer(cdpData.fundsReceiver,daiLeft) (../../sb/MultiplyProxyActions.sol#893)
	External calls sending eth:
	- gem.deposit{value: msg.value}() (../../sb/MultiplyProxyActions.sol#548)
	Event emitted after the call(s):
	- MultipleActionCalled(cdpData.methodName,cdpData.cdpId,exchangeData.minToTokenAmount,exchangeData.toTokenAmount,0,daiLeft) (../../sb/MultiplyProxyActions.sol#883-890)
		- increaseMultipleInternal(exchangeData,cdpData,addressRegistry) (../../sb/MultiplyProxyActions.sol#563)
Reentrancy in MultiplyProxyActions.increaseMultipleDepositDai(ExchangeData,CdpData,AddressRegistry) (../../sb/MultiplyProxyActions.sol#590-608):
	External calls:
	- IERC20(DAI).transferFrom(msg.sender,address(this),cdpData.depositDai) (../../sb/MultiplyProxyActions.sol#599)
	- IERC20(DAI).transferFrom(msg.sender,addressRegistry.multiplyProxyActions,cdpData.depositDai) (../../sb/MultiplyProxyActions.sol#601-605)
	- increaseMultipleInternal(exchangeData,cdpData,addressRegistry) (../../sb/MultiplyProxyActions.sol#607)
		- IManager(addressRegistry.manager).cdpAllow(cdpData.cdpId,addressRegistry.multiplyProxyActions,1) (../../sb/MultiplyProxyActions.sol#463-467)
		- rate = IJug(jug).drip(ilk) (../../sb/MultiplyProxyActions.sol#503)
		- IERC3156FlashLender(addressRegistry.lender).flashLoan(IERC3156FlashBorrower(addressRegistry.multiplyProxyActions),DAI,cdpData.requiredDebt,paramsData) (../../sb/MultiplyProxyActions.sol#469-474)
		- IManager(addressRegistry.manager).cdpAllow(cdpData.cdpId,addressRegistry.multiplyProxyActions,0) (../../sb/MultiplyProxyActions.sol#476-480)
		- IManager(addressRegistry.manager).frob(cdpData.cdpId,0,_getDrawDart(vat,addressRegistry.jug,urn,cdpData.ilk,amount)) (../../sb/MultiplyProxyActions.sol#577-581)
		- gem.approve(address(cdpData.gemJoin),balance) (../../sb/MultiplyProxyActions.sol#756)
		- IManager(addressRegistry.manager).move(cdpData.cdpId,address(this),toRad(amount)) (../../sb/MultiplyProxyActions.sol#582)
		- require(bool,string)(IERC20(DAI).approve(address(exchange),exchangeData.fromTokenAmount.add(cdpData.depositDai)),MPA / Could not approve Exchange for DAI) (../../sb/MultiplyProxyActions.sol#868-871)
		- IVat(vat).hope(DAIJOIN) (../../sb/MultiplyProxyActions.sol#584)
		- IJoin(cdpData.gemJoin).join(urn,balance) (../../sb/MultiplyProxyActions.sol#761)
		- IManager(manager).frob(cdpData.cdpId,toInt256(convertTo18(cdpData.gemJoin,balance)),_getDrawDart(vat,jug,urn,cdpData.ilk,borrowedDai)) (../../sb/MultiplyProxyActions.sol#763-767)
		- exchange.swapDaiForToken(exchangeData.toTokenAddress,exchangeData.fromTokenAmount.add(cdpData.depositDai),exchangeData.minToTokenAmount,exchangeData.exchangeAddress,exchangeData._exchangeCalldata) (../../sb/MultiplyProxyActions.sol#872-878)
		- IJoin(DAIJOIN).exit(address(this),amount) (../../sb/MultiplyProxyActions.sol#587)
		- IManager(manager).move(cdpData.cdpId,address(this),borrowedDai.mul(RAY)) (../../sb/MultiplyProxyActions.sol#768)
		- IVat(vat).hope(DAIJOIN) (../../sb/MultiplyProxyActions.sol#770)
		- IJoin(DAIJOIN).exit(address(this),borrowedDai) (../../sb/MultiplyProxyActions.sol#772)
		- IERC20(DAI).transfer(cdpData.fundsReceiver,daiLeft) (../../sb/MultiplyProxyActions.sol#893)
	Event emitted after the call(s):
	- MultipleActionCalled(cdpData.methodName,cdpData.cdpId,exchangeData.minToTokenAmount,exchangeData.toTokenAmount,0,daiLeft) (../../sb/MultiplyProxyActions.sol#883-890)
		- increaseMultipleInternal(exchangeData,cdpData,addressRegistry) (../../sb/MultiplyProxyActions.sol#607)
Reentrancy in MultiplyProxyActions.increaseMultipleInternal(ExchangeData,CdpData,AddressRegistry) (../../sb/MultiplyProxyActions.sol#618-643):
	External calls:
	- joinDrawDebt(cdpData,cdpData.requiredDebt,addressRegistry.manager,addressRegistry.jug) (../../sb/MultiplyProxyActions.sol#634)
		- rate = IJug(jug).drip(ilk) (../../sb/MultiplyProxyActions.sol#503)
		- gem.approve(address(cdpData.gemJoin),balance) (../../sb/MultiplyProxyActions.sol#756)
		- IJoin(cdpData.gemJoin).join(urn,balance) (../../sb/MultiplyProxyActions.sol#761)
		- IManager(manager).frob(cdpData.cdpId,toInt256(convertTo18(cdpData.gemJoin,balance)),_getDrawDart(vat,jug,urn,cdpData.ilk,borrowedDai)) (../../sb/MultiplyProxyActions.sol#763-767)
		- IManager(manager).move(cdpData.cdpId,address(this),borrowedDai.mul(RAY)) (../../sb/MultiplyProxyActions.sol#768)
		- IVat(vat).hope(DAIJOIN) (../../sb/MultiplyProxyActions.sol#770)
		- IJoin(DAIJOIN).exit(address(this),borrowedDai) (../../sb/MultiplyProxyActions.sol#772)
	- drawDaiDebt(cdpData,addressRegistry,cdpData.requiredDebt) (../../sb/MultiplyProxyActions.sol#637)
		- rate = IJug(jug).drip(ilk) (../../sb/MultiplyProxyActions.sol#503)
		- IManager(addressRegistry.manager).frob(cdpData.cdpId,0,_getDrawDart(vat,addressRegistry.jug,urn,cdpData.ilk,amount)) (../../sb/MultiplyProxyActions.sol#577-581)
		- IManager(addressRegistry.manager).move(cdpData.cdpId,address(this),toRad(amount)) (../../sb/MultiplyProxyActions.sol#582)
		- IVat(vat).hope(DAIJOIN) (../../sb/MultiplyProxyActions.sol#584)
		- IJoin(DAIJOIN).exit(address(this),amount) (../../sb/MultiplyProxyActions.sol#587)
	- _increaseMP(exchangeData,cdpData,addressRegistry,0) (../../sb/MultiplyProxyActions.sol#639)
		- rate = IJug(jug).drip(ilk) (../../sb/MultiplyProxyActions.sol#503)
		- gem.approve(address(cdpData.gemJoin),balance) (../../sb/MultiplyProxyActions.sol#756)
		- require(bool,string)(IERC20(DAI).approve(address(exchange),exchangeData.fromTokenAmount.add(cdpData.depositDai)),MPA / Could not approve Exchange for DAI) (../../sb/MultiplyProxyActions.sol#868-871)
		- IJoin(cdpData.gemJoin).join(urn,balance) (../../sb/MultiplyProxyActions.sol#761)
		- IManager(manager).frob(cdpData.cdpId,toInt256(convertTo18(cdpData.gemJoin,balance)),_getDrawDart(vat,jug,urn,cdpData.ilk,borrowedDai)) (../../sb/MultiplyProxyActions.sol#763-767)
		- exchange.swapDaiForToken(exchangeData.toTokenAddress,exchangeData.fromTokenAmount.add(cdpData.depositDai),exchangeData.minToTokenAmount,exchangeData.exchangeAddress,exchangeData._exchangeCalldata) (../../sb/MultiplyProxyActions.sol#872-878)
		- IManager(manager).move(cdpData.cdpId,address(this),borrowedDai.mul(RAY)) (../../sb/MultiplyProxyActions.sol#768)
		- IVat(vat).hope(DAIJOIN) (../../sb/MultiplyProxyActions.sol#770)
		- IJoin(DAIJOIN).exit(address(this),borrowedDai) (../../sb/MultiplyProxyActions.sol#772)
		- IERC20(DAI).transfer(cdpData.fundsReceiver,daiLeft) (../../sb/MultiplyProxyActions.sol#893)
	Event emitted after the call(s):
	- MultipleActionCalled(cdpData.methodName,cdpData.cdpId,exchangeData.minToTokenAmount,exchangeData.toTokenAmount,0,daiLeft) (../../sb/MultiplyProxyActions.sol#883-890)
		- _increaseMP(exchangeData,cdpData,addressRegistry,0) (../../sb/MultiplyProxyActions.sol#639)
Reentrancy in MultiplyProxyActions.onFlashLoan(address,address,uint256,uint256,bytes) (../../sb/MultiplyProxyActions.sol#1124-1176):
	External calls:
	- _decreaseMP(exchangeData,cdpData,addressRegistry,fee) (../../sb/MultiplyProxyActions.sol#1149)
		- gem.withdraw(amount) (../../sb/MultiplyProxyActions.sol#850)
		- IERC20(DAI).approve(DAIJOIN,borrowedDai) (../../sb/MultiplyProxyActions.sol#831)
		- require(bool,string)(IERC20(exchangeData.fromTokenAddress).approve(address(exchange),exchangeData.fromTokenAmount),MPA / Could not approve Exchange for Token) (../../sb/MultiplyProxyActions.sol#915-921)
		- exchange.swapTokenForDai(exchangeData.fromTokenAddress,exchangeData.fromTokenAmount,cdpData.requiredDebt.add(premium),exchangeData.exchangeAddress,exchangeData._exchangeCalldata) (../../sb/MultiplyProxyActions.sol#923-929)
		- IDaiJoin(DAIJOIN).join(urn,borrowedDai) (../../sb/MultiplyProxyActions.sol#832)
		- IERC20(address(gem)).transfer(destination,amount) (../../sb/MultiplyProxyActions.sol#853)
		- IManager(manager).frob(cdp,- toInt256(wadC),_getWipeDart(vat,IVat(vat).dai(urn),urn,ilk)) (../../sb/MultiplyProxyActions.sol#836)
		- IManager(manager).flux(cdp,address(this),wadC) (../../sb/MultiplyProxyActions.sol#838)
		- IJoin(gemJoin).exit(address(this),collateralDraw) (../../sb/MultiplyProxyActions.sol#839)
		- IERC20(DAI).transfer(cdpData.fundsReceiver,daiLeft) (../../sb/MultiplyProxyActions.sol#956)
	- _increaseMP(exchangeData,cdpData,addressRegistry,fee) (../../sb/MultiplyProxyActions.sol#1152)
		- rate = IJug(jug).drip(ilk) (../../sb/MultiplyProxyActions.sol#503)
		- gem.approve(address(cdpData.gemJoin),balance) (../../sb/MultiplyProxyActions.sol#756)
		- require(bool,string)(IERC20(DAI).approve(address(exchange),exchangeData.fromTokenAmount.add(cdpData.depositDai)),MPA / Could not approve Exchange for DAI) (../../sb/MultiplyProxyActions.sol#868-871)
		- IJoin(cdpData.gemJoin).join(urn,balance) (../../sb/MultiplyProxyActions.sol#761)
		- IManager(manager).frob(cdpData.cdpId,toInt256(convertTo18(cdpData.gemJoin,balance)),_getDrawDart(vat,jug,urn,cdpData.ilk,borrowedDai)) (../../sb/MultiplyProxyActions.sol#763-767)
		- exchange.swapDaiForToken(exchangeData.toTokenAddress,exchangeData.fromTokenAmount.add(cdpData.depositDai),exchangeData.minToTokenAmount,exchangeData.exchangeAddress,exchangeData._exchangeCalldata) (../../sb/MultiplyProxyActions.sol#872-878)
		- IManager(manager).move(cdpData.cdpId,address(this),borrowedDai.mul(RAY)) (../../sb/MultiplyProxyActions.sol#768)
		- IVat(vat).hope(DAIJOIN) (../../sb/MultiplyProxyActions.sol#770)
		- IJoin(DAIJOIN).exit(address(this),borrowedDai) (../../sb/MultiplyProxyActions.sol#772)
		- IERC20(DAI).transfer(cdpData.fundsReceiver,daiLeft) (../../sb/MultiplyProxyActions.sol#893)
	External calls sending eth:
	- _decreaseMP(exchangeData,cdpData,addressRegistry,fee) (../../sb/MultiplyProxyActions.sol#1149)
		- destination.transfer(amount) (../../sb/MultiplyProxyActions.sol#851)
	Event emitted after the call(s):
	- MultipleActionCalled(cdpData.methodName,cdpData.cdpId,exchangeData.minToTokenAmount,exchangeData.toTokenAmount,0,daiLeft) (../../sb/MultiplyProxyActions.sol#883-890)
		- _increaseMP(exchangeData,cdpData,addressRegistry,fee) (../../sb/MultiplyProxyActions.sol#1152)
Reentrancy in MultiplyProxyActions.onFlashLoan(address,address,uint256,uint256,bytes) (../../sb/MultiplyProxyActions.sol#1124-1176):
	External calls:
	- _decreaseMP(exchangeData,cdpData,addressRegistry,fee) (../../sb/MultiplyProxyActions.sol#1149)
		- gem.withdraw(amount) (../../sb/MultiplyProxyActions.sol#850)
		- IERC20(DAI).approve(DAIJOIN,borrowedDai) (../../sb/MultiplyProxyActions.sol#831)
		- require(bool,string)(IERC20(exchangeData.fromTokenAddress).approve(address(exchange),exchangeData.fromTokenAmount),MPA / Could not approve Exchange for Token) (../../sb/MultiplyProxyActions.sol#915-921)
		- exchange.swapTokenForDai(exchangeData.fromTokenAddress,exchangeData.fromTokenAmount,cdpData.requiredDebt.add(premium),exchangeData.exchangeAddress,exchangeData._exchangeCalldata) (../../sb/MultiplyProxyActions.sol#923-929)
		- IDaiJoin(DAIJOIN).join(urn,borrowedDai) (../../sb/MultiplyProxyActions.sol#832)
		- IERC20(address(gem)).transfer(destination,amount) (../../sb/MultiplyProxyActions.sol#853)
		- IManager(manager).frob(cdp,- toInt256(wadC),_getWipeDart(vat,IVat(vat).dai(urn),urn,ilk)) (../../sb/MultiplyProxyActions.sol#836)
		- IManager(manager).flux(cdp,address(this),wadC) (../../sb/MultiplyProxyActions.sol#838)
		- IJoin(gemJoin).exit(address(this),collateralDraw) (../../sb/MultiplyProxyActions.sol#839)
		- IERC20(DAI).transfer(cdpData.fundsReceiver,daiLeft) (../../sb/MultiplyProxyActions.sol#956)
	- _increaseMP(exchangeData,cdpData,addressRegistry,fee) (../../sb/MultiplyProxyActions.sol#1152)
		- rate = IJug(jug).drip(ilk) (../../sb/MultiplyProxyActions.sol#503)
		- gem.approve(address(cdpData.gemJoin),balance) (../../sb/MultiplyProxyActions.sol#756)
		- require(bool,string)(IERC20(DAI).approve(address(exchange),exchangeData.fromTokenAmount.add(cdpData.depositDai)),MPA / Could not approve Exchange for DAI) (../../sb/MultiplyProxyActions.sol#868-871)
		- IJoin(cdpData.gemJoin).join(urn,balance) (../../sb/MultiplyProxyActions.sol#761)
		- IManager(manager).frob(cdpData.cdpId,toInt256(convertTo18(cdpData.gemJoin,balance)),_getDrawDart(vat,jug,urn,cdpData.ilk,borrowedDai)) (../../sb/MultiplyProxyActions.sol#763-767)
		- exchange.swapDaiForToken(exchangeData.toTokenAddress,exchangeData.fromTokenAmount.add(cdpData.depositDai),exchangeData.minToTokenAmount,exchangeData.exchangeAddress,exchangeData._exchangeCalldata) (../../sb/MultiplyProxyActions.sol#872-878)
		- IManager(manager).move(cdpData.cdpId,address(this),borrowedDai.mul(RAY)) (../../sb/MultiplyProxyActions.sol#768)
		- IVat(vat).hope(DAIJOIN) (../../sb/MultiplyProxyActions.sol#770)
		- IJoin(DAIJOIN).exit(address(this),borrowedDai) (../../sb/MultiplyProxyActions.sol#772)
		- IERC20(DAI).transfer(cdpData.fundsReceiver,daiLeft) (../../sb/MultiplyProxyActions.sol#893)
	- _closeWithdrawCollateral(exchangeData,cdpData,addressRegistry,borrowedDaiAmount,cdpData.borrowCollateral) (../../sb/MultiplyProxyActions.sol#1155-1161)
		- gem.withdraw(amount) (../../sb/MultiplyProxyActions.sol#850)
		- IERC20(DAI).approve(DAIJOIN,borrowedDai) (../../sb/MultiplyProxyActions.sol#831)
		- require(bool,string)(IERC20(exchangeData.fromTokenAddress).approve(address(exchange),ink),MPA / Could not approve Exchange for Token) (../../sb/MultiplyProxyActions.sol#1040-1043)
		- IDaiJoin(DAIJOIN).join(urn,borrowedDai) (../../sb/MultiplyProxyActions.sol#832)
		- IERC20(address(gem)).transfer(destination,amount) (../../sb/MultiplyProxyActions.sol#853)
		- exchange.swapTokenForDai(exchangeData.fromTokenAddress,exchangeData.fromTokenAmount,exchangeData.minToTokenAmount,exchangeData.exchangeAddress,exchangeData._exchangeCalldata) (../../sb/MultiplyProxyActions.sol#1044-1050)
		- IManager(manager).frob(cdp,- toInt256(wadC),_getWipeDart(vat,IVat(vat).dai(urn),urn,ilk)) (../../sb/MultiplyProxyActions.sol#836)
		- IManager(manager).flux(cdp,address(this),wadC) (../../sb/MultiplyProxyActions.sol#838)
		- IJoin(gemJoin).exit(address(this),collateralDraw) (../../sb/MultiplyProxyActions.sol#839)
		- IERC20(DAI).transfer(cdpData.fundsReceiver,daiLeft) (../../sb/MultiplyProxyActions.sol#1056)
	External calls sending eth:
	- _decreaseMP(exchangeData,cdpData,addressRegistry,fee) (../../sb/MultiplyProxyActions.sol#1149)
		- destination.transfer(amount) (../../sb/MultiplyProxyActions.sol#851)
	- _closeWithdrawCollateral(exchangeData,cdpData,addressRegistry,borrowedDaiAmount,cdpData.borrowCollateral) (../../sb/MultiplyProxyActions.sol#1155-1161)
		- destination.transfer(amount) (../../sb/MultiplyProxyActions.sol#851)
	Event emitted after the call(s):
	- MultipleActionCalled(cdpData.methodName,cdpData.cdpId,exchangeData.minToTokenAmount,exchangeData.toTokenAmount,collateralLeft,daiLeft) (../../sb/MultiplyProxyActions.sol#1061-1068)
		- _closeWithdrawCollateral(exchangeData,cdpData,addressRegistry,borrowedDaiAmount,cdpData.borrowCollateral) (../../sb/MultiplyProxyActions.sol#1155-1161)
Reentrancy in MultiplyProxyActions.onFlashLoan(address,address,uint256,uint256,bytes) (../../sb/MultiplyProxyActions.sol#1124-1176):
	External calls:
	- _decreaseMP(exchangeData,cdpData,addressRegistry,fee) (../../sb/MultiplyProxyActions.sol#1149)
		- gem.withdraw(amount) (../../sb/MultiplyProxyActions.sol#850)
		- IERC20(DAI).approve(DAIJOIN,borrowedDai) (../../sb/MultiplyProxyActions.sol#831)
		- require(bool,string)(IERC20(exchangeData.fromTokenAddress).approve(address(exchange),exchangeData.fromTokenAmount),MPA / Could not approve Exchange for Token) (../../sb/MultiplyProxyActions.sol#915-921)
		- exchange.swapTokenForDai(exchangeData.fromTokenAddress,exchangeData.fromTokenAmount,cdpData.requiredDebt.add(premium),exchangeData.exchangeAddress,exchangeData._exchangeCalldata) (../../sb/MultiplyProxyActions.sol#923-929)
		- IDaiJoin(DAIJOIN).join(urn,borrowedDai) (../../sb/MultiplyProxyActions.sol#832)
		- IERC20(address(gem)).transfer(destination,amount) (../../sb/MultiplyProxyActions.sol#853)
		- IManager(manager).frob(cdp,- toInt256(wadC),_getWipeDart(vat,IVat(vat).dai(urn),urn,ilk)) (../../sb/MultiplyProxyActions.sol#836)
		- IManager(manager).flux(cdp,address(this),wadC) (../../sb/MultiplyProxyActions.sol#838)
		- IJoin(gemJoin).exit(address(this),collateralDraw) (../../sb/MultiplyProxyActions.sol#839)
		- IERC20(DAI).transfer(cdpData.fundsReceiver,daiLeft) (../../sb/MultiplyProxyActions.sol#956)
	- _increaseMP(exchangeData,cdpData,addressRegistry,fee) (../../sb/MultiplyProxyActions.sol#1152)
		- rate = IJug(jug).drip(ilk) (../../sb/MultiplyProxyActions.sol#503)
		- gem.approve(address(cdpData.gemJoin),balance) (../../sb/MultiplyProxyActions.sol#756)
		- require(bool,string)(IERC20(DAI).approve(address(exchange),exchangeData.fromTokenAmount.add(cdpData.depositDai)),MPA / Could not approve Exchange for DAI) (../../sb/MultiplyProxyActions.sol#868-871)
		- IJoin(cdpData.gemJoin).join(urn,balance) (../../sb/MultiplyProxyActions.sol#761)
		- IManager(manager).frob(cdpData.cdpId,toInt256(convertTo18(cdpData.gemJoin,balance)),_getDrawDart(vat,jug,urn,cdpData.ilk,borrowedDai)) (../../sb/MultiplyProxyActions.sol#763-767)
		- exchange.swapDaiForToken(exchangeData.toTokenAddress,exchangeData.fromTokenAmount.add(cdpData.depositDai),exchangeData.minToTokenAmount,exchangeData.exchangeAddress,exchangeData._exchangeCalldata) (../../sb/MultiplyProxyActions.sol#872-878)
		- IManager(manager).move(cdpData.cdpId,address(this),borrowedDai.mul(RAY)) (../../sb/MultiplyProxyActions.sol#768)
		- IVat(vat).hope(DAIJOIN) (../../sb/MultiplyProxyActions.sol#770)
		- IJoin(DAIJOIN).exit(address(this),borrowedDai) (../../sb/MultiplyProxyActions.sol#772)
		- IERC20(DAI).transfer(cdpData.fundsReceiver,daiLeft) (../../sb/MultiplyProxyActions.sol#893)
	- _closeWithdrawCollateral(exchangeData,cdpData,addressRegistry,borrowedDaiAmount,cdpData.borrowCollateral) (../../sb/MultiplyProxyActions.sol#1155-1161)
		- gem.withdraw(amount) (../../sb/MultiplyProxyActions.sol#850)
		- IERC20(DAI).approve(DAIJOIN,borrowedDai) (../../sb/MultiplyProxyActions.sol#831)
		- require(bool,string)(IERC20(exchangeData.fromTokenAddress).approve(address(exchange),ink),MPA / Could not approve Exchange for Token) (../../sb/MultiplyProxyActions.sol#1040-1043)
		- IDaiJoin(DAIJOIN).join(urn,borrowedDai) (../../sb/MultiplyProxyActions.sol#832)
		- IERC20(address(gem)).transfer(destination,amount) (../../sb/MultiplyProxyActions.sol#853)
		- exchange.swapTokenForDai(exchangeData.fromTokenAddress,exchangeData.fromTokenAmount,exchangeData.minToTokenAmount,exchangeData.exchangeAddress,exchangeData._exchangeCalldata) (../../sb/MultiplyProxyActions.sol#1044-1050)
		- IManager(manager).frob(cdp,- toInt256(wadC),_getWipeDart(vat,IVat(vat).dai(urn),urn,ilk)) (../../sb/MultiplyProxyActions.sol#836)
		- IManager(manager).flux(cdp,address(this),wadC) (../../sb/MultiplyProxyActions.sol#838)
		- IJoin(gemJoin).exit(address(this),collateralDraw) (../../sb/MultiplyProxyActions.sol#839)
		- IERC20(DAI).transfer(cdpData.fundsReceiver,daiLeft) (../../sb/MultiplyProxyActions.sol#1056)
	- _closeWithdrawDai(exchangeData,cdpData,addressRegistry,borrowedDaiAmount,cdpData.borrowCollateral) (../../sb/MultiplyProxyActions.sol#1164-1170)
		- IERC20(DAI).approve(DAIJOIN,borrowedDai) (../../sb/MultiplyProxyActions.sol#831)
		- require(bool,string)(IERC20(exchangeData.fromTokenAddress).approve(address(exchange),IERC20(gemAddress).balanceOf(address(this))),MPA / Could not approve Exchange for Token) (../../sb/MultiplyProxyActions.sol#1089-1095)
		- exchange.swapTokenForDai(exchangeData.fromTokenAddress,ink,exchangeData.minToTokenAmount,exchangeData.exchangeAddress,exchangeData._exchangeCalldata) (../../sb/MultiplyProxyActions.sol#1096-1102)
		- IDaiJoin(DAIJOIN).join(urn,borrowedDai) (../../sb/MultiplyProxyActions.sol#832)
		- IManager(manager).frob(cdp,- toInt256(wadC),_getWipeDart(vat,IVat(vat).dai(urn),urn,ilk)) (../../sb/MultiplyProxyActions.sol#836)
		- IManager(manager).flux(cdp,address(this),wadC) (../../sb/MultiplyProxyActions.sol#838)
		- IERC20(DAI).transfer(cdpData.fundsReceiver,daiLeft) (../../sb/MultiplyProxyActions.sol#1107)
		- IJoin(gemJoin).exit(address(this),collateralDraw) (../../sb/MultiplyProxyActions.sol#839)
	External calls sending eth:
	- _decreaseMP(exchangeData,cdpData,addressRegistry,fee) (../../sb/MultiplyProxyActions.sol#1149)
		- destination.transfer(amount) (../../sb/MultiplyProxyActions.sol#851)
	- _closeWithdrawCollateral(exchangeData,cdpData,addressRegistry,borrowedDaiAmount,cdpData.borrowCollateral) (../../sb/MultiplyProxyActions.sol#1155-1161)
		- destination.transfer(amount) (../../sb/MultiplyProxyActions.sol#851)
	Event emitted after the call(s):
	- MultipleActionCalled(cdpData.methodName,cdpData.cdpId,exchangeData.minToTokenAmount,exchangeData.toTokenAmount,collateralLeft,daiLeft) (../../sb/MultiplyProxyActions.sol#1114-1121)
		- _closeWithdrawDai(exchangeData,cdpData,addressRegistry,borrowedDaiAmount,cdpData.borrowCollateral) (../../sb/MultiplyProxyActions.sol#1164-1170)
Reentrancy in MultiplyProxyActions.openMultiplyVault(ExchangeData,CdpData,AddressRegistry) (../../sb/MultiplyProxyActions.sol#517-529):
	External calls:
	- cdpData.cdpId = IManager(addressRegistry.manager).open(cdpData.ilk,address(this)) (../../sb/MultiplyProxyActions.sol#527)
	- increaseMultipleDepositCollateral(exchangeData,cdpData,addressRegistry) (../../sb/MultiplyProxyActions.sol#528)
		- IManager(addressRegistry.manager).cdpAllow(cdpData.cdpId,addressRegistry.multiplyProxyActions,1) (../../sb/MultiplyProxyActions.sol#463-467)
		- rate = IJug(jug).drip(ilk) (../../sb/MultiplyProxyActions.sol#503)
		- IERC3156FlashLender(addressRegistry.lender).flashLoan(IERC3156FlashBorrower(addressRegistry.multiplyProxyActions),DAI,cdpData.requiredDebt,paramsData) (../../sb/MultiplyProxyActions.sol#469-474)
		- gem.deposit{value: msg.value}() (../../sb/MultiplyProxyActions.sol#548)
		- IManager(addressRegistry.manager).cdpAllow(cdpData.cdpId,addressRegistry.multiplyProxyActions,0) (../../sb/MultiplyProxyActions.sol#476-480)
		- IManager(addressRegistry.manager).frob(cdpData.cdpId,0,_getDrawDart(vat,addressRegistry.jug,urn,cdpData.ilk,amount)) (../../sb/MultiplyProxyActions.sol#577-581)
		- gem.approve(address(cdpData.gemJoin),balance) (../../sb/MultiplyProxyActions.sol#756)
		- IManager(addressRegistry.manager).move(cdpData.cdpId,address(this),toRad(amount)) (../../sb/MultiplyProxyActions.sol#582)
		- gem.transfer(addressRegistry.multiplyProxyActions,msg.value) (../../sb/MultiplyProxyActions.sol#550)
		- require(bool,string)(IERC20(DAI).approve(address(exchange),exchangeData.fromTokenAmount.add(cdpData.depositDai)),MPA / Could not approve Exchange for DAI) (../../sb/MultiplyProxyActions.sol#868-871)
		- IVat(vat).hope(DAIJOIN) (../../sb/MultiplyProxyActions.sol#584)
		- IJoin(cdpData.gemJoin).join(urn,balance) (../../sb/MultiplyProxyActions.sol#761)
		- IManager(manager).frob(cdpData.cdpId,toInt256(convertTo18(cdpData.gemJoin,balance)),_getDrawDart(vat,jug,urn,cdpData.ilk,borrowedDai)) (../../sb/MultiplyProxyActions.sol#763-767)
		- exchange.swapDaiForToken(exchangeData.toTokenAddress,exchangeData.fromTokenAmount.add(cdpData.depositDai),exchangeData.minToTokenAmount,exchangeData.exchangeAddress,exchangeData._exchangeCalldata) (../../sb/MultiplyProxyActions.sol#872-878)
		- IJoin(DAIJOIN).exit(address(this),amount) (../../sb/MultiplyProxyActions.sol#587)
		- IManager(manager).move(cdpData.cdpId,address(this),borrowedDai.mul(RAY)) (../../sb/MultiplyProxyActions.sol#768)
		- gem.transferFrom(msg.sender,addressRegistry.multiplyProxyActions,cdpData.depositCollateral) (../../sb/MultiplyProxyActions.sol#554-558)
		- IVat(vat).hope(DAIJOIN) (../../sb/MultiplyProxyActions.sol#770)
		- gem.transferFrom(msg.sender,address(this),cdpData.depositCollateral) (../../sb/MultiplyProxyActions.sol#560)
		- IJoin(DAIJOIN).exit(address(this),borrowedDai) (../../sb/MultiplyProxyActions.sol#772)
		- IERC20(DAI).transfer(cdpData.fundsReceiver,daiLeft) (../../sb/MultiplyProxyActions.sol#893)
	External calls sending eth:
	- increaseMultipleDepositCollateral(exchangeData,cdpData,addressRegistry) (../../sb/MultiplyProxyActions.sol#528)
		- gem.deposit{value: msg.value}() (../../sb/MultiplyProxyActions.sol#548)
	Event emitted after the call(s):
	- MultipleActionCalled(cdpData.methodName,cdpData.cdpId,exchangeData.minToTokenAmount,exchangeData.toTokenAmount,0,daiLeft) (../../sb/MultiplyProxyActions.sol#883-890)
		- increaseMultipleDepositCollateral(exchangeData,cdpData,addressRegistry) (../../sb/MultiplyProxyActions.sol#528)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

MultiplyProxyActions.increaseMultipleDepositCollateral(ExchangeData,CdpData,AddressRegistry) (../../sb/MultiplyProxyActions.sol#531-564) compares to a boolean constant:
	-cdpData.skipFL == false (../../sb/MultiplyProxyActions.sol#553)
MultiplyProxyActions.increaseMultipleDepositCollateral(ExchangeData,CdpData,AddressRegistry) (../../sb/MultiplyProxyActions.sol#531-564) compares to a boolean constant:
	-cdpData.skipFL == false (../../sb/MultiplyProxyActions.sol#549)
MultiplyProxyActions.closeVaultExitGeneric(ExchangeData,CdpData,AddressRegistry,uint8) (../../sb/MultiplyProxyActions.sol#695-725) compares to a boolean constant:
	-cdpData.skipFL == false (../../sb/MultiplyProxyActions.sol#711)
MultiplyProxyActions.closeVaultExitDai(ExchangeData,CdpData,AddressRegistry) (../../sb/MultiplyProxyActions.sol#738-745) compares to a boolean constant:
	-require(bool,string)(cdpData.skipFL == false,cannot close to DAI if FL not used) (../../sb/MultiplyProxyActions.sol#743)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#boolean-equality

MultiplyProxyActions.getInk(address,CdpData) (../../sb/MultiplyProxyActions.sol#775-781) is never used and should be removed
SafeMath.div(uint256,uint256) (../../sb/MultiplyProxyActions.sol#65-67) is never used and should be removed
SafeMath.div(uint256,uint256,string) (../../sb/MultiplyProxyActions.sol#69-79) is never used and should be removed
SafeMath.mod(uint256,uint256) (../../sb/MultiplyProxyActions.sol#81-83) is never used and should be removed
SafeMath.mod(uint256,uint256,string) (../../sb/MultiplyProxyActions.sol#85-92) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code

Pragma version>=0.7.6 (../../sb/MultiplyProxyActions.sol#1) allows old versions
solc-0.7.6 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Reentrancy in MultiplyProxyActions._closeWithdrawCollateral(ExchangeData,CdpData,AddressRegistry,uint256,uint256) (../../sb/MultiplyProxyActions.sol#1022-1069):
	External calls:
	- _withdrawGem(cdpData.gemJoin,cdpData.fundsReceiver,collateralLeft) (../../sb/MultiplyProxyActions.sol#1059)
		- destination.transfer(amount) (../../sb/MultiplyProxyActions.sol#851)
	Event emitted after the call(s):
	- MultipleActionCalled(cdpData.methodName,cdpData.cdpId,exchangeData.minToTokenAmount,exchangeData.toTokenAmount,collateralLeft,daiLeft) (../../sb/MultiplyProxyActions.sol#1061-1068)
Reentrancy in MultiplyProxyActions._closeWithdrawCollateralSkipFL(ExchangeData,CdpData,AddressRegistry,uint256) (../../sb/MultiplyProxyActions.sol#963-1020):
	External calls:
	- _withdrawGem(cdpData.gemJoin,cdpData.fundsReceiver,collateralLeft) (../../sb/MultiplyProxyActions.sol#1010)
		- destination.transfer(amount) (../../sb/MultiplyProxyActions.sol#851)
	Event emitted after the call(s):
	- MultipleActionCalled(cdpData.methodName,cdpData.cdpId,exchangeData.minToTokenAmount,exchangeData.toTokenAmount,collateralLeft,daiLeft) (../../sb/MultiplyProxyActions.sol#1012-1019)
Reentrancy in MultiplyProxyActions.onFlashLoan(address,address,uint256,uint256,bytes) (../../sb/MultiplyProxyActions.sol#1124-1176):
	External calls:
	- _decreaseMP(exchangeData,cdpData,addressRegistry,fee) (../../sb/MultiplyProxyActions.sol#1149)
		- destination.transfer(amount) (../../sb/MultiplyProxyActions.sol#851)
	Event emitted after the call(s):
	- MultipleActionCalled(cdpData.methodName,cdpData.cdpId,exchangeData.minToTokenAmount,exchangeData.toTokenAmount,0,daiLeft) (../../sb/MultiplyProxyActions.sol#883-890)
		- _increaseMP(exchangeData,cdpData,addressRegistry,fee) (../../sb/MultiplyProxyActions.sol#1152)
Reentrancy in MultiplyProxyActions.onFlashLoan(address,address,uint256,uint256,bytes) (../../sb/MultiplyProxyActions.sol#1124-1176):
	External calls:
	- _decreaseMP(exchangeData,cdpData,addressRegistry,fee) (../../sb/MultiplyProxyActions.sol#1149)
		- destination.transfer(amount) (../../sb/MultiplyProxyActions.sol#851)
	- _closeWithdrawCollateral(exchangeData,cdpData,addressRegistry,borrowedDaiAmount,cdpData.borrowCollateral) (../../sb/MultiplyProxyActions.sol#1155-1161)
		- destination.transfer(amount) (../../sb/MultiplyProxyActions.sol#851)
	Event emitted after the call(s):
	- MultipleActionCalled(cdpData.methodName,cdpData.cdpId,exchangeData.minToTokenAmount,exchangeData.toTokenAmount,collateralLeft,daiLeft) (../../sb/MultiplyProxyActions.sol#1114-1121)
		- _closeWithdrawDai(exchangeData,cdpData,addressRegistry,borrowedDaiAmount,cdpData.borrowCollateral) (../../sb/MultiplyProxyActions.sol#1164-1170)
	- MultipleActionCalled(cdpData.methodName,cdpData.cdpId,exchangeData.minToTokenAmount,exchangeData.toTokenAmount,collateralLeft,daiLeft) (../../sb/MultiplyProxyActions.sol#1061-1068)
		- _closeWithdrawCollateral(exchangeData,cdpData,addressRegistry,borrowedDaiAmount,cdpData.borrowCollateral) (../../sb/MultiplyProxyActions.sol#1155-1161)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-4
/sb/MultiplyProxyActions.sol analyzed (13 contracts with 93 detectors), 50 result(s) found
