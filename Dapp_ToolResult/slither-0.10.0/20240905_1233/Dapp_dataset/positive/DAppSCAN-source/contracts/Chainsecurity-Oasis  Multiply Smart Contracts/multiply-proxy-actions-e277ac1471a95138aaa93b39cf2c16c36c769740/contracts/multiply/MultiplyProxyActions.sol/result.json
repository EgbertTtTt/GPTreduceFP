{
    "errors": [],
    "fails": [],
    "findings": [
        {
            "confidence": "Medium",
            "contract": "MultiplyProxyActions",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Chainsecurity-Oasis  Multiply Smart Contracts/multiply-proxy-actions-e277ac1471a95138aaa93b39cf2c16c36c769740/contracts/multiply/MultiplyProxyActions.sol",
            "function": "_withdrawGem",
            "impact": "High",
            "line": 842,
            "line_end": 855,
            "message": "MultiplyProxyActions._withdrawGem(address,address,uint256) (MultiplyProxyActions.sol#842-855) sends eth to arbitrary user\n\tDangerous calls:\n\t- destination.transfer(amount) (MultiplyProxyActions.sol#851)\n",
            "name": "arbitrary-send-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MultiplyProxyActions",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Chainsecurity-Oasis  Multiply Smart Contracts/multiply-proxy-actions-e277ac1471a95138aaa93b39cf2c16c36c769740/contracts/multiply/MultiplyProxyActions.sol",
            "function": "_closeWithdrawCollateral",
            "impact": "High",
            "line": 1022,
            "line_end": 1069,
            "message": "MultiplyProxyActions._closeWithdrawCollateral(ExchangeData,CdpData,AddressRegistry,uint256,uint256) (MultiplyProxyActions.sol#1022-1069) ignores return value by IERC20(DAI).transfer(cdpData.fundsReceiver,daiLeft) (MultiplyProxyActions.sol#1056)\n",
            "name": "unchecked-transfer",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MultiplyProxyActions",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Chainsecurity-Oasis  Multiply Smart Contracts/multiply-proxy-actions-e277ac1471a95138aaa93b39cf2c16c36c769740/contracts/multiply/MultiplyProxyActions.sol",
            "function": "increaseMultipleDepositDai",
            "impact": "High",
            "line": 590,
            "line_end": 608,
            "message": "MultiplyProxyActions.increaseMultipleDepositDai(ExchangeData,CdpData,AddressRegistry) (MultiplyProxyActions.sol#590-608) ignores return value by IERC20(DAI).transferFrom(msg.sender,address(this),cdpData.depositDai) (MultiplyProxyActions.sol#599)\n",
            "name": "unchecked-transfer",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MultiplyProxyActions",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Chainsecurity-Oasis  Multiply Smart Contracts/multiply-proxy-actions-e277ac1471a95138aaa93b39cf2c16c36c769740/contracts/multiply/MultiplyProxyActions.sol",
            "function": "increaseMultipleDepositDai",
            "impact": "High",
            "line": 590,
            "line_end": 608,
            "message": "MultiplyProxyActions.increaseMultipleDepositDai(ExchangeData,CdpData,AddressRegistry) (MultiplyProxyActions.sol#590-608) ignores return value by IERC20(DAI).transferFrom(msg.sender,addressRegistry.multiplyProxyActions,cdpData.depositDai) (MultiplyProxyActions.sol#601-605)\n",
            "name": "unchecked-transfer",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MultiplyProxyActions",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Chainsecurity-Oasis  Multiply Smart Contracts/multiply-proxy-actions-e277ac1471a95138aaa93b39cf2c16c36c769740/contracts/multiply/MultiplyProxyActions.sol",
            "function": "increaseMultipleDepositCollateral",
            "impact": "High",
            "line": 531,
            "line_end": 564,
            "message": "MultiplyProxyActions.increaseMultipleDepositCollateral(ExchangeData,CdpData,AddressRegistry) (MultiplyProxyActions.sol#531-564) ignores return value by gem.transferFrom(msg.sender,address(this),cdpData.depositCollateral) (MultiplyProxyActions.sol#560)\n",
            "name": "unchecked-transfer",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MultiplyProxyActions",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Chainsecurity-Oasis  Multiply Smart Contracts/multiply-proxy-actions-e277ac1471a95138aaa93b39cf2c16c36c769740/contracts/multiply/MultiplyProxyActions.sol",
            "function": "_increaseMP",
            "impact": "High",
            "line": 857,
            "line_end": 895,
            "message": "MultiplyProxyActions._increaseMP(ExchangeData,CdpData,AddressRegistry,uint256) (MultiplyProxyActions.sol#857-895) ignores return value by IERC20(DAI).transfer(cdpData.fundsReceiver,daiLeft) (MultiplyProxyActions.sol#893)\n",
            "name": "unchecked-transfer",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MultiplyProxyActions",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Chainsecurity-Oasis  Multiply Smart Contracts/multiply-proxy-actions-e277ac1471a95138aaa93b39cf2c16c36c769740/contracts/multiply/MultiplyProxyActions.sol",
            "function": "_closeWithdrawDai",
            "impact": "High",
            "line": 1071,
            "line_end": 1122,
            "message": "MultiplyProxyActions._closeWithdrawDai(ExchangeData,CdpData,AddressRegistry,uint256,uint256) (MultiplyProxyActions.sol#1071-1122) ignores return value by IERC20(DAI).transfer(cdpData.fundsReceiver,daiLeft) (MultiplyProxyActions.sol#1107)\n",
            "name": "unchecked-transfer",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MultiplyProxyActions",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Chainsecurity-Oasis  Multiply Smart Contracts/multiply-proxy-actions-e277ac1471a95138aaa93b39cf2c16c36c769740/contracts/multiply/MultiplyProxyActions.sol",
            "function": "increaseMultipleDepositCollateral",
            "impact": "High",
            "line": 531,
            "line_end": 564,
            "message": "MultiplyProxyActions.increaseMultipleDepositCollateral(ExchangeData,CdpData,AddressRegistry) (MultiplyProxyActions.sol#531-564) ignores return value by gem.transfer(addressRegistry.multiplyProxyActions,msg.value) (MultiplyProxyActions.sol#550)\n",
            "name": "unchecked-transfer",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MultiplyProxyActions",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Chainsecurity-Oasis  Multiply Smart Contracts/multiply-proxy-actions-e277ac1471a95138aaa93b39cf2c16c36c769740/contracts/multiply/MultiplyProxyActions.sol",
            "function": "_closeWithdrawCollateralSkipFL",
            "impact": "High",
            "line": 963,
            "line_end": 1020,
            "message": "MultiplyProxyActions._closeWithdrawCollateralSkipFL(ExchangeData,CdpData,AddressRegistry,uint256) (MultiplyProxyActions.sol#963-1020) ignores return value by IERC20(DAI).transfer(cdpData.fundsReceiver,daiLeft) (MultiplyProxyActions.sol#1007)\n",
            "name": "unchecked-transfer",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MultiplyProxyActions",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Chainsecurity-Oasis  Multiply Smart Contracts/multiply-proxy-actions-e277ac1471a95138aaa93b39cf2c16c36c769740/contracts/multiply/MultiplyProxyActions.sol",
            "function": "_withdrawGem",
            "impact": "High",
            "line": 842,
            "line_end": 855,
            "message": "MultiplyProxyActions._withdrawGem(address,address,uint256) (MultiplyProxyActions.sol#842-855) ignores return value by IERC20(address(gem)).transfer(destination,amount) (MultiplyProxyActions.sol#853)\n",
            "name": "unchecked-transfer",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MultiplyProxyActions",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Chainsecurity-Oasis  Multiply Smart Contracts/multiply-proxy-actions-e277ac1471a95138aaa93b39cf2c16c36c769740/contracts/multiply/MultiplyProxyActions.sol",
            "function": "increaseMultipleDepositCollateral",
            "impact": "High",
            "line": 531,
            "line_end": 564,
            "message": "MultiplyProxyActions.increaseMultipleDepositCollateral(ExchangeData,CdpData,AddressRegistry) (MultiplyProxyActions.sol#531-564) ignores return value by gem.transferFrom(msg.sender,addressRegistry.multiplyProxyActions,cdpData.depositCollateral) (MultiplyProxyActions.sol#554-558)\n",
            "name": "unchecked-transfer",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MultiplyProxyActions",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Chainsecurity-Oasis  Multiply Smart Contracts/multiply-proxy-actions-e277ac1471a95138aaa93b39cf2c16c36c769740/contracts/multiply/MultiplyProxyActions.sol",
            "function": "_decreaseMP",
            "impact": "High",
            "line": 897,
            "line_end": 961,
            "message": "MultiplyProxyActions._decreaseMP(ExchangeData,CdpData,AddressRegistry,uint256) (MultiplyProxyActions.sol#897-961) ignores return value by IERC20(DAI).transfer(cdpData.fundsReceiver,daiLeft) (MultiplyProxyActions.sol#956)\n",
            "name": "unchecked-transfer",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MultiplyProxyActions",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Chainsecurity-Oasis  Multiply Smart Contracts/multiply-proxy-actions-e277ac1471a95138aaa93b39cf2c16c36c769740/contracts/multiply/MultiplyProxyActions.sol",
            "function": "_getWipeAllWad",
            "impact": "Medium",
            "line": 800,
            "line_end": 818,
            "message": "MultiplyProxyActions._getWipeAllWad(address,address,address,bytes32) (MultiplyProxyActions.sol#800-818) ignores return value by (rate) = IVat(vat).ilks(ilk) (MultiplyProxyActions.sol#807)\n",
            "name": "unused-return",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MultiplyProxyActions",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Chainsecurity-Oasis  Multiply Smart Contracts/multiply-proxy-actions-e277ac1471a95138aaa93b39cf2c16c36c769740/contracts/multiply/MultiplyProxyActions.sol",
            "function": "takeAFlashLoan",
            "impact": "Medium",
            "line": 458,
            "line_end": 481,
            "message": "MultiplyProxyActions.takeAFlashLoan(AddressRegistry,CdpData,bytes) (MultiplyProxyActions.sol#458-481) ignores return value by IERC3156FlashLender(addressRegistry.lender).flashLoan(IERC3156FlashBorrower(addressRegistry.multiplyProxyActions),DAI,cdpData.requiredDebt,paramsData) (MultiplyProxyActions.sol#469-474)\n",
            "name": "unused-return",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MultiplyProxyActions",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Chainsecurity-Oasis  Multiply Smart Contracts/multiply-proxy-actions-e277ac1471a95138aaa93b39cf2c16c36c769740/contracts/multiply/MultiplyProxyActions.sol",
            "function": "_getWipeDart",
            "impact": "Medium",
            "line": 783,
            "line_end": 798,
            "message": "MultiplyProxyActions._getWipeDart(address,uint256,address,bytes32) (MultiplyProxyActions.sol#783-798) ignores return value by (rate) = IVat(vat).ilks(ilk) (MultiplyProxyActions.sol#790)\n",
            "name": "unused-return",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MultiplyProxyActions",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Chainsecurity-Oasis  Multiply Smart Contracts/multiply-proxy-actions-e277ac1471a95138aaa93b39cf2c16c36c769740/contracts/multiply/MultiplyProxyActions.sol",
            "function": "wipeAndFreeGem",
            "impact": "Medium",
            "line": 820,
            "line_end": 840,
            "message": "MultiplyProxyActions.wipeAndFreeGem(address,address,uint256,uint256,uint256) (MultiplyProxyActions.sol#820-840) ignores return value by IERC20(DAI).approve(DAIJOIN,borrowedDai) (MultiplyProxyActions.sol#831)\n",
            "name": "unused-return",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MultiplyProxyActions",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Chainsecurity-Oasis  Multiply Smart Contracts/multiply-proxy-actions-e277ac1471a95138aaa93b39cf2c16c36c769740/contracts/multiply/MultiplyProxyActions.sol",
            "function": "_getWipeDart",
            "impact": "Medium",
            "line": 783,
            "line_end": 798,
            "message": "MultiplyProxyActions._getWipeDart(address,uint256,address,bytes32) (MultiplyProxyActions.sol#783-798) ignores return value by (art) = IVat(vat).urns(ilk,urn) (MultiplyProxyActions.sol#792)\n",
            "name": "unused-return",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MultiplyProxyActions",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Chainsecurity-Oasis  Multiply Smart Contracts/multiply-proxy-actions-e277ac1471a95138aaa93b39cf2c16c36c769740/contracts/multiply/MultiplyProxyActions.sol",
            "function": "_getWipeAllWad",
            "impact": "Medium",
            "line": 800,
            "line_end": 818,
            "message": "MultiplyProxyActions._getWipeAllWad(address,address,address,bytes32) (MultiplyProxyActions.sol#800-818) ignores return value by (art) = IVat(vat).urns(ilk,urn) (MultiplyProxyActions.sol#809)\n",
            "name": "unused-return",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MultiplyProxyActions",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Chainsecurity-Oasis  Multiply Smart Contracts/multiply-proxy-actions-e277ac1471a95138aaa93b39cf2c16c36c769740/contracts/multiply/MultiplyProxyActions.sol",
            "function": "getInk",
            "impact": "Medium",
            "line": 775,
            "line_end": 781,
            "message": "MultiplyProxyActions.getInk(address,CdpData) (MultiplyProxyActions.sol#775-781) ignores return value by (ink) = IVat(vat).urns(cdpData.ilk,urn) (MultiplyProxyActions.sol#779)\n",
            "name": "unused-return",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MultiplyProxyActions",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Chainsecurity-Oasis  Multiply Smart Contracts/multiply-proxy-actions-e277ac1471a95138aaa93b39cf2c16c36c769740/contracts/multiply/MultiplyProxyActions.sol",
            "function": "onFlashLoan",
            "impact": "Medium",
            "line": 1124,
            "line_end": 1176,
            "message": "MultiplyProxyActions.onFlashLoan(address,address,uint256,uint256,bytes) (MultiplyProxyActions.sol#1124-1176) ignores return value by IERC20(token).approve(addressRegistry.lender,borrowedDaiAmount) (MultiplyProxyActions.sol#1173)\n",
            "name": "unused-return",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MultiplyProxyActions",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Chainsecurity-Oasis  Multiply Smart Contracts/multiply-proxy-actions-e277ac1471a95138aaa93b39cf2c16c36c769740/contracts/multiply/MultiplyProxyActions.sol",
            "function": "increaseMultipleDepositCollateral",
            "impact": "Low",
            "line": 531,
            "line_end": 564,
            "message": "Reentrancy in MultiplyProxyActions.increaseMultipleDepositCollateral(ExchangeData,CdpData,AddressRegistry) (MultiplyProxyActions.sol#531-564):\n\tExternal calls:\n\t- gem.deposit{value: msg.value}() (MultiplyProxyActions.sol#548)\n\t- gem.transfer(addressRegistry.multiplyProxyActions,msg.value) (MultiplyProxyActions.sol#550)\n\t- gem.transferFrom(msg.sender,addressRegistry.multiplyProxyActions,cdpData.depositCollateral) (MultiplyProxyActions.sol#554-558)\n\t- gem.transferFrom(msg.sender,address(this),cdpData.depositCollateral) (MultiplyProxyActions.sol#560)\n\t- increaseMultipleInternal(exchangeData,cdpData,addressRegistry) (MultiplyProxyActions.sol#563)\n\t\t- IManager(addressRegistry.manager).cdpAllow(cdpData.cdpId,addressRegistry.multiplyProxyActions,1) (MultiplyProxyActions.sol#463-467)\n\t\t- rate = IJug(jug).drip(ilk) (MultiplyProxyActions.sol#503)\n\t\t- IERC3156FlashLender(addressRegistry.lender).flashLoan(IERC3156FlashBorrower(addressRegistry.multiplyProxyActions),DAI,cdpData.requiredDebt,paramsData) (MultiplyProxyActions.sol#469-474)\n\t\t- IManager(addressRegistry.manager).cdpAllow(cdpData.cdpId,addressRegistry.multiplyProxyActions,0) (MultiplyProxyActions.sol#476-480)\n\t\t- IManager(addressRegistry.manager).frob(cdpData.cdpId,0,_getDrawDart(vat,addressRegistry.jug,urn,cdpData.ilk,amount)) (MultiplyProxyActions.sol#577-581)\n\t\t- gem.approve(address(cdpData.gemJoin),balance) (MultiplyProxyActions.sol#756)\n\t\t- IManager(addressRegistry.manager).move(cdpData.cdpId,address(this),toRad(amount)) (MultiplyProxyActions.sol#582)\n\t\t- require(bool,string)(IERC20(DAI).approve(address(exchange),exchangeData.fromTokenAmount.add(cdpData.depositDai)),MPA / Could not approve Exchange for DAI) (MultiplyProxyActions.sol#868-871)\n\t\t- IVat(vat).hope(DAIJOIN) (MultiplyProxyActions.sol#584)\n\t\t- IJoin(cdpData.gemJoin).join(urn,balance) (MultiplyProxyActions.sol#761)\n\t\t- IManager(manager).frob(cdpData.cdpId,toInt256(convertTo18(cdpData.gemJoin,balance)),_getDrawDart(vat,jug,urn,cdpData.ilk,borrowedDai)) (MultiplyProxyActions.sol#763-767)\n\t\t- exchange.swapDaiForToken(exchangeData.toTokenAddress,exchangeData.fromTokenAmount.add(cdpData.depositDai),exchangeData.minToTokenAmount,exchangeData.exchangeAddress,exchangeData._exchangeCalldata) (MultiplyProxyActions.sol#872-878)\n\t\t- IJoin(DAIJOIN).exit(address(this),amount) (MultiplyProxyActions.sol#587)\n\t\t- IManager(manager).move(cdpData.cdpId,address(this),borrowedDai.mul(RAY)) (MultiplyProxyActions.sol#768)\n\t\t- IVat(vat).hope(DAIJOIN) (MultiplyProxyActions.sol#770)\n\t\t- IJoin(DAIJOIN).exit(address(this),borrowedDai) (MultiplyProxyActions.sol#772)\n\t\t- IERC20(DAI).transfer(cdpData.fundsReceiver,daiLeft) (MultiplyProxyActions.sol#893)\n\tExternal calls sending eth:\n\t- gem.deposit{value: msg.value}() (MultiplyProxyActions.sol#548)\n\tEvent emitted after the call(s):\n\t- MultipleActionCalled(cdpData.methodName,cdpData.cdpId,exchangeData.minToTokenAmount,exchangeData.toTokenAmount,0,daiLeft) (MultiplyProxyActions.sol#883-890)\n\t\t- increaseMultipleInternal(exchangeData,cdpData,addressRegistry) (MultiplyProxyActions.sol#563)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MultiplyProxyActions",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Chainsecurity-Oasis  Multiply Smart Contracts/multiply-proxy-actions-e277ac1471a95138aaa93b39cf2c16c36c769740/contracts/multiply/MultiplyProxyActions.sol",
            "function": "increaseMultipleDepositDai",
            "impact": "Low",
            "line": 590,
            "line_end": 608,
            "message": "Reentrancy in MultiplyProxyActions.increaseMultipleDepositDai(ExchangeData,CdpData,AddressRegistry) (MultiplyProxyActions.sol#590-608):\n\tExternal calls:\n\t- IERC20(DAI).transferFrom(msg.sender,address(this),cdpData.depositDai) (MultiplyProxyActions.sol#599)\n\t- IERC20(DAI).transferFrom(msg.sender,addressRegistry.multiplyProxyActions,cdpData.depositDai) (MultiplyProxyActions.sol#601-605)\n\t- increaseMultipleInternal(exchangeData,cdpData,addressRegistry) (MultiplyProxyActions.sol#607)\n\t\t- IManager(addressRegistry.manager).cdpAllow(cdpData.cdpId,addressRegistry.multiplyProxyActions,1) (MultiplyProxyActions.sol#463-467)\n\t\t- rate = IJug(jug).drip(ilk) (MultiplyProxyActions.sol#503)\n\t\t- IERC3156FlashLender(addressRegistry.lender).flashLoan(IERC3156FlashBorrower(addressRegistry.multiplyProxyActions),DAI,cdpData.requiredDebt,paramsData) (MultiplyProxyActions.sol#469-474)\n\t\t- IManager(addressRegistry.manager).cdpAllow(cdpData.cdpId,addressRegistry.multiplyProxyActions,0) (MultiplyProxyActions.sol#476-480)\n\t\t- IManager(addressRegistry.manager).frob(cdpData.cdpId,0,_getDrawDart(vat,addressRegistry.jug,urn,cdpData.ilk,amount)) (MultiplyProxyActions.sol#577-581)\n\t\t- gem.approve(address(cdpData.gemJoin),balance) (MultiplyProxyActions.sol#756)\n\t\t- IManager(addressRegistry.manager).move(cdpData.cdpId,address(this),toRad(amount)) (MultiplyProxyActions.sol#582)\n\t\t- require(bool,string)(IERC20(DAI).approve(address(exchange),exchangeData.fromTokenAmount.add(cdpData.depositDai)),MPA / Could not approve Exchange for DAI) (MultiplyProxyActions.sol#868-871)\n\t\t- IVat(vat).hope(DAIJOIN) (MultiplyProxyActions.sol#584)\n\t\t- IJoin(cdpData.gemJoin).join(urn,balance) (MultiplyProxyActions.sol#761)\n\t\t- IManager(manager).frob(cdpData.cdpId,toInt256(convertTo18(cdpData.gemJoin,balance)),_getDrawDart(vat,jug,urn,cdpData.ilk,borrowedDai)) (MultiplyProxyActions.sol#763-767)\n\t\t- exchange.swapDaiForToken(exchangeData.toTokenAddress,exchangeData.fromTokenAmount.add(cdpData.depositDai),exchangeData.minToTokenAmount,exchangeData.exchangeAddress,exchangeData._exchangeCalldata) (MultiplyProxyActions.sol#872-878)\n\t\t- IJoin(DAIJOIN).exit(address(this),amount) (MultiplyProxyActions.sol#587)\n\t\t- IManager(manager).move(cdpData.cdpId,address(this),borrowedDai.mul(RAY)) (MultiplyProxyActions.sol#768)\n\t\t- IVat(vat).hope(DAIJOIN) (MultiplyProxyActions.sol#770)\n\t\t- IJoin(DAIJOIN).exit(address(this),borrowedDai) (MultiplyProxyActions.sol#772)\n\t\t- IERC20(DAI).transfer(cdpData.fundsReceiver,daiLeft) (MultiplyProxyActions.sol#893)\n\tEvent emitted after the call(s):\n\t- MultipleActionCalled(cdpData.methodName,cdpData.cdpId,exchangeData.minToTokenAmount,exchangeData.toTokenAmount,0,daiLeft) (MultiplyProxyActions.sol#883-890)\n\t\t- increaseMultipleInternal(exchangeData,cdpData,addressRegistry) (MultiplyProxyActions.sol#607)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MultiplyProxyActions",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Chainsecurity-Oasis  Multiply Smart Contracts/multiply-proxy-actions-e277ac1471a95138aaa93b39cf2c16c36c769740/contracts/multiply/MultiplyProxyActions.sol",
            "function": "_closeWithdrawCollateralSkipFL",
            "impact": "Low",
            "line": 963,
            "line_end": 1020,
            "message": "Reentrancy in MultiplyProxyActions._closeWithdrawCollateralSkipFL(ExchangeData,CdpData,AddressRegistry,uint256) (MultiplyProxyActions.sol#963-1020):\n\tExternal calls:\n\t- wipeAndFreeGem(addressRegistry.manager,cdpData.gemJoin,cdpData.cdpId,0,exchangeData.fromTokenAmount) (MultiplyProxyActions.sol#972-978)\n\t\t- IERC20(DAI).approve(DAIJOIN,borrowedDai) (MultiplyProxyActions.sol#831)\n\t\t- IDaiJoin(DAIJOIN).join(urn,borrowedDai) (MultiplyProxyActions.sol#832)\n\t\t- IManager(manager).frob(cdp,- toInt256(wadC),_getWipeDart(vat,IVat(vat).dai(urn),urn,ilk)) (MultiplyProxyActions.sol#836)\n\t\t- IManager(manager).flux(cdp,address(this),wadC) (MultiplyProxyActions.sol#838)\n\t\t- IJoin(gemJoin).exit(address(this),collateralDraw) (MultiplyProxyActions.sol#839)\n\t- require(bool,string)(IERC20(exchangeData.fromTokenAddress).approve(address(exchange),ink),MPA / Could not approve Exchange for Token) (MultiplyProxyActions.sol#979-982)\n\t- exchange.swapTokenForDai(exchangeData.fromTokenAddress,exchangeData.fromTokenAmount,exchangeData.minToTokenAmount,exchangeData.exchangeAddress,exchangeData._exchangeCalldata) (MultiplyProxyActions.sol#983-989)\n\t- wipeAndFreeGem(addressRegistry.manager,cdpData.gemJoin,cdpData.cdpId,cdpData.requiredDebt,cdpData.withdrawCollateral) (MultiplyProxyActions.sol#995-1001)\n\t\t- IERC20(DAI).approve(DAIJOIN,borrowedDai) (MultiplyProxyActions.sol#831)\n\t\t- IDaiJoin(DAIJOIN).join(urn,borrowedDai) (MultiplyProxyActions.sol#832)\n\t\t- IManager(manager).frob(cdp,- toInt256(wadC),_getWipeDart(vat,IVat(vat).dai(urn),urn,ilk)) (MultiplyProxyActions.sol#836)\n\t\t- IManager(manager).flux(cdp,address(this),wadC) (MultiplyProxyActions.sol#838)\n\t\t- IJoin(gemJoin).exit(address(this),collateralDraw) (MultiplyProxyActions.sol#839)\n\t- IERC20(DAI).transfer(cdpData.fundsReceiver,daiLeft) (MultiplyProxyActions.sol#1007)\n\t- _withdrawGem(cdpData.gemJoin,cdpData.fundsReceiver,collateralLeft) (MultiplyProxyActions.sol#1010)\n\t\t- gem.withdraw(amount) (MultiplyProxyActions.sol#850)\n\t\t- IERC20(address(gem)).transfer(destination,amount) (MultiplyProxyActions.sol#853)\n\tExternal calls sending eth:\n\t- _withdrawGem(cdpData.gemJoin,cdpData.fundsReceiver,collateralLeft) (MultiplyProxyActions.sol#1010)\n\t\t- destination.transfer(amount) (MultiplyProxyActions.sol#851)\n\tEvent emitted after the call(s):\n\t- MultipleActionCalled(cdpData.methodName,cdpData.cdpId,exchangeData.minToTokenAmount,exchangeData.toTokenAmount,collateralLeft,daiLeft) (MultiplyProxyActions.sol#1012-1019)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MultiplyProxyActions",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Chainsecurity-Oasis  Multiply Smart Contracts/multiply-proxy-actions-e277ac1471a95138aaa93b39cf2c16c36c769740/contracts/multiply/MultiplyProxyActions.sol",
            "function": "onFlashLoan",
            "impact": "Low",
            "line": 1124,
            "line_end": 1176,
            "message": "Reentrancy in MultiplyProxyActions.onFlashLoan(address,address,uint256,uint256,bytes) (MultiplyProxyActions.sol#1124-1176):\n\tExternal calls:\n\t- _decreaseMP(exchangeData,cdpData,addressRegistry,fee) (MultiplyProxyActions.sol#1149)\n\t\t- gem.withdraw(amount) (MultiplyProxyActions.sol#850)\n\t\t- IERC20(DAI).approve(DAIJOIN,borrowedDai) (MultiplyProxyActions.sol#831)\n\t\t- require(bool,string)(IERC20(exchangeData.fromTokenAddress).approve(address(exchange),exchangeData.fromTokenAmount),MPA / Could not approve Exchange for Token) (MultiplyProxyActions.sol#915-921)\n\t\t- exchange.swapTokenForDai(exchangeData.fromTokenAddress,exchangeData.fromTokenAmount,cdpData.requiredDebt.add(premium),exchangeData.exchangeAddress,exchangeData._exchangeCalldata) (MultiplyProxyActions.sol#923-929)\n\t\t- IDaiJoin(DAIJOIN).join(urn,borrowedDai) (MultiplyProxyActions.sol#832)\n\t\t- IERC20(address(gem)).transfer(destination,amount) (MultiplyProxyActions.sol#853)\n\t\t- IManager(manager).frob(cdp,- toInt256(wadC),_getWipeDart(vat,IVat(vat).dai(urn),urn,ilk)) (MultiplyProxyActions.sol#836)\n\t\t- IManager(manager).flux(cdp,address(this),wadC) (MultiplyProxyActions.sol#838)\n\t\t- IJoin(gemJoin).exit(address(this),collateralDraw) (MultiplyProxyActions.sol#839)\n\t\t- IERC20(DAI).transfer(cdpData.fundsReceiver,daiLeft) (MultiplyProxyActions.sol#956)\n\t- _increaseMP(exchangeData,cdpData,addressRegistry,fee) (MultiplyProxyActions.sol#1152)\n\t\t- rate = IJug(jug).drip(ilk) (MultiplyProxyActions.sol#503)\n\t\t- gem.approve(address(cdpData.gemJoin),balance) (MultiplyProxyActions.sol#756)\n\t\t- require(bool,string)(IERC20(DAI).approve(address(exchange),exchangeData.fromTokenAmount.add(cdpData.depositDai)),MPA / Could not approve Exchange for DAI) (MultiplyProxyActions.sol#868-871)\n\t\t- IJoin(cdpData.gemJoin).join(urn,balance) (MultiplyProxyActions.sol#761)\n\t\t- IManager(manager).frob(cdpData.cdpId,toInt256(convertTo18(cdpData.gemJoin,balance)),_getDrawDart(vat,jug,urn,cdpData.ilk,borrowedDai)) (MultiplyProxyActions.sol#763-767)\n\t\t- exchange.swapDaiForToken(exchangeData.toTokenAddress,exchangeData.fromTokenAmount.add(cdpData.depositDai),exchangeData.minToTokenAmount,exchangeData.exchangeAddress,exchangeData._exchangeCalldata) (MultiplyProxyActions.sol#872-878)\n\t\t- IManager(manager).move(cdpData.cdpId,address(this),borrowedDai.mul(RAY)) (MultiplyProxyActions.sol#768)\n\t\t- IVat(vat).hope(DAIJOIN) (MultiplyProxyActions.sol#770)\n\t\t- IJoin(DAIJOIN).exit(address(this),borrowedDai) (MultiplyProxyActions.sol#772)\n\t\t- IERC20(DAI).transfer(cdpData.fundsReceiver,daiLeft) (MultiplyProxyActions.sol#893)\n\t- _closeWithdrawCollateral(exchangeData,cdpData,addressRegistry,borrowedDaiAmount,cdpData.borrowCollateral) (MultiplyProxyActions.sol#1155-1161)\n\t\t- gem.withdraw(amount) (MultiplyProxyActions.sol#850)\n\t\t- IERC20(DAI).approve(DAIJOIN,borrowedDai) (MultiplyProxyActions.sol#831)\n\t\t- require(bool,string)(IERC20(exchangeData.fromTokenAddress).approve(address(exchange),ink),MPA / Could not approve Exchange for Token) (MultiplyProxyActions.sol#1040-1043)\n\t\t- IDaiJoin(DAIJOIN).join(urn,borrowedDai) (MultiplyProxyActions.sol#832)\n\t\t- IERC20(address(gem)).transfer(destination,amount) (MultiplyProxyActions.sol#853)\n\t\t- exchange.swapTokenForDai(exchangeData.fromTokenAddress,exchangeData.fromTokenAmount,exchangeData.minToTokenAmount,exchangeData.exchangeAddress,exchangeData._exchangeCalldata) (MultiplyProxyActions.sol#1044-1050)\n\t\t- IManager(manager).frob(cdp,- toInt256(wadC),_getWipeDart(vat,IVat(vat).dai(urn),urn,ilk)) (MultiplyProxyActions.sol#836)\n\t\t- IManager(manager).flux(cdp,address(this),wadC) (MultiplyProxyActions.sol#838)\n\t\t- IJoin(gemJoin).exit(address(this),collateralDraw) (MultiplyProxyActions.sol#839)\n\t\t- IERC20(DAI).transfer(cdpData.fundsReceiver,daiLeft) (MultiplyProxyActions.sol#1056)\n\t- _closeWithdrawDai(exchangeData,cdpData,addressRegistry,borrowedDaiAmount,cdpData.borrowCollateral) (MultiplyProxyActions.sol#1164-1170)\n\t\t- IERC20(DAI).approve(DAIJOIN,borrowedDai) (MultiplyProxyActions.sol#831)\n\t\t- require(bool,string)(IERC20(exchangeData.fromTokenAddress).approve(address(exchange),IERC20(gemAddress).balanceOf(address(this))),MPA / Could not approve Exchange for Token) (MultiplyProxyActions.sol#1089-1095)\n\t\t- exchange.swapTokenForDai(exchangeData.fromTokenAddress,ink,exchangeData.minToTokenAmount,exchangeData.exchangeAddress,exchangeData._exchangeCalldata) (MultiplyProxyActions.sol#1096-1102)\n\t\t- IDaiJoin(DAIJOIN).join(urn,borrowedDai) (MultiplyProxyActions.sol#832)\n\t\t- IManager(manager).frob(cdp,- toInt256(wadC),_getWipeDart(vat,IVat(vat).dai(urn),urn,ilk)) (MultiplyProxyActions.sol#836)\n\t\t- IManager(manager).flux(cdp,address(this),wadC) (MultiplyProxyActions.sol#838)\n\t\t- IERC20(DAI).transfer(cdpData.fundsReceiver,daiLeft) (MultiplyProxyActions.sol#1107)\n\t\t- IJoin(gemJoin).exit(address(this),collateralDraw) (MultiplyProxyActions.sol#839)\n\tExternal calls sending eth:\n\t- _decreaseMP(exchangeData,cdpData,addressRegistry,fee) (MultiplyProxyActions.sol#1149)\n\t\t- destination.transfer(amount) (MultiplyProxyActions.sol#851)\n\t- _closeWithdrawCollateral(exchangeData,cdpData,addressRegistry,borrowedDaiAmount,cdpData.borrowCollateral) (MultiplyProxyActions.sol#1155-1161)\n\t\t- destination.transfer(amount) (MultiplyProxyActions.sol#851)\n\tEvent emitted after the call(s):\n\t- MultipleActionCalled(cdpData.methodName,cdpData.cdpId,exchangeData.minToTokenAmount,exchangeData.toTokenAmount,collateralLeft,daiLeft) (MultiplyProxyActions.sol#1114-1121)\n\t\t- _closeWithdrawDai(exchangeData,cdpData,addressRegistry,borrowedDaiAmount,cdpData.borrowCollateral) (MultiplyProxyActions.sol#1164-1170)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MultiplyProxyActions",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Chainsecurity-Oasis  Multiply Smart Contracts/multiply-proxy-actions-e277ac1471a95138aaa93b39cf2c16c36c769740/contracts/multiply/MultiplyProxyActions.sol",
            "function": "_closeWithdrawDai",
            "impact": "Low",
            "line": 1071,
            "line_end": 1122,
            "message": "Reentrancy in MultiplyProxyActions._closeWithdrawDai(ExchangeData,CdpData,AddressRegistry,uint256,uint256) (MultiplyProxyActions.sol#1071-1122):\n\tExternal calls:\n\t- wipeAndFreeGem(addressRegistry.manager,cdpData.gemJoin,cdpData.cdpId,cdpData.requiredDebt,ink) (MultiplyProxyActions.sol#1081-1087)\n\t\t- IERC20(DAI).approve(DAIJOIN,borrowedDai) (MultiplyProxyActions.sol#831)\n\t\t- IDaiJoin(DAIJOIN).join(urn,borrowedDai) (MultiplyProxyActions.sol#832)\n\t\t- IManager(manager).frob(cdp,- toInt256(wadC),_getWipeDart(vat,IVat(vat).dai(urn),urn,ilk)) (MultiplyProxyActions.sol#836)\n\t\t- IManager(manager).flux(cdp,address(this),wadC) (MultiplyProxyActions.sol#838)\n\t\t- IJoin(gemJoin).exit(address(this),collateralDraw) (MultiplyProxyActions.sol#839)\n\t- require(bool,string)(IERC20(exchangeData.fromTokenAddress).approve(address(exchange),IERC20(gemAddress).balanceOf(address(this))),MPA / Could not approve Exchange for Token) (MultiplyProxyActions.sol#1089-1095)\n\t- exchange.swapTokenForDai(exchangeData.fromTokenAddress,ink,exchangeData.minToTokenAmount,exchangeData.exchangeAddress,exchangeData._exchangeCalldata) (MultiplyProxyActions.sol#1096-1102)\n\t- IERC20(DAI).transfer(cdpData.fundsReceiver,daiLeft) (MultiplyProxyActions.sol#1107)\n\tEvent emitted after the call(s):\n\t- MultipleActionCalled(cdpData.methodName,cdpData.cdpId,exchangeData.minToTokenAmount,exchangeData.toTokenAmount,collateralLeft,daiLeft) (MultiplyProxyActions.sol#1114-1121)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MultiplyProxyActions",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Chainsecurity-Oasis  Multiply Smart Contracts/multiply-proxy-actions-e277ac1471a95138aaa93b39cf2c16c36c769740/contracts/multiply/MultiplyProxyActions.sol",
            "function": "increaseMultipleInternal",
            "impact": "Low",
            "line": 618,
            "line_end": 643,
            "message": "Reentrancy in MultiplyProxyActions.increaseMultipleInternal(ExchangeData,CdpData,AddressRegistry) (MultiplyProxyActions.sol#618-643):\n\tExternal calls:\n\t- joinDrawDebt(cdpData,cdpData.requiredDebt,addressRegistry.manager,addressRegistry.jug) (MultiplyProxyActions.sol#634)\n\t\t- rate = IJug(jug).drip(ilk) (MultiplyProxyActions.sol#503)\n\t\t- gem.approve(address(cdpData.gemJoin),balance) (MultiplyProxyActions.sol#756)\n\t\t- IJoin(cdpData.gemJoin).join(urn,balance) (MultiplyProxyActions.sol#761)\n\t\t- IManager(manager).frob(cdpData.cdpId,toInt256(convertTo18(cdpData.gemJoin,balance)),_getDrawDart(vat,jug,urn,cdpData.ilk,borrowedDai)) (MultiplyProxyActions.sol#763-767)\n\t\t- IManager(manager).move(cdpData.cdpId,address(this),borrowedDai.mul(RAY)) (MultiplyProxyActions.sol#768)\n\t\t- IVat(vat).hope(DAIJOIN) (MultiplyProxyActions.sol#770)\n\t\t- IJoin(DAIJOIN).exit(address(this),borrowedDai) (MultiplyProxyActions.sol#772)\n\t- drawDaiDebt(cdpData,addressRegistry,cdpData.requiredDebt) (MultiplyProxyActions.sol#637)\n\t\t- rate = IJug(jug).drip(ilk) (MultiplyProxyActions.sol#503)\n\t\t- IManager(addressRegistry.manager).frob(cdpData.cdpId,0,_getDrawDart(vat,addressRegistry.jug,urn,cdpData.ilk,amount)) (MultiplyProxyActions.sol#577-581)\n\t\t- IManager(addressRegistry.manager).move(cdpData.cdpId,address(this),toRad(amount)) (MultiplyProxyActions.sol#582)\n\t\t- IVat(vat).hope(DAIJOIN) (MultiplyProxyActions.sol#584)\n\t\t- IJoin(DAIJOIN).exit(address(this),amount) (MultiplyProxyActions.sol#587)\n\t- _increaseMP(exchangeData,cdpData,addressRegistry,0) (MultiplyProxyActions.sol#639)\n\t\t- rate = IJug(jug).drip(ilk) (MultiplyProxyActions.sol#503)\n\t\t- gem.approve(address(cdpData.gemJoin),balance) (MultiplyProxyActions.sol#756)\n\t\t- require(bool,string)(IERC20(DAI).approve(address(exchange),exchangeData.fromTokenAmount.add(cdpData.depositDai)),MPA / Could not approve Exchange for DAI) (MultiplyProxyActions.sol#868-871)\n\t\t- IJoin(cdpData.gemJoin).join(urn,balance) (MultiplyProxyActions.sol#761)\n\t\t- IManager(manager).frob(cdpData.cdpId,toInt256(convertTo18(cdpData.gemJoin,balance)),_getDrawDart(vat,jug,urn,cdpData.ilk,borrowedDai)) (MultiplyProxyActions.sol#763-767)\n\t\t- exchange.swapDaiForToken(exchangeData.toTokenAddress,exchangeData.fromTokenAmount.add(cdpData.depositDai),exchangeData.minToTokenAmount,exchangeData.exchangeAddress,exchangeData._exchangeCalldata) (MultiplyProxyActions.sol#872-878)\n\t\t- IManager(manager).move(cdpData.cdpId,address(this),borrowedDai.mul(RAY)) (MultiplyProxyActions.sol#768)\n\t\t- IVat(vat).hope(DAIJOIN) (MultiplyProxyActions.sol#770)\n\t\t- IJoin(DAIJOIN).exit(address(this),borrowedDai) (MultiplyProxyActions.sol#772)\n\t\t- IERC20(DAI).transfer(cdpData.fundsReceiver,daiLeft) (MultiplyProxyActions.sol#893)\n\tEvent emitted after the call(s):\n\t- MultipleActionCalled(cdpData.methodName,cdpData.cdpId,exchangeData.minToTokenAmount,exchangeData.toTokenAmount,0,daiLeft) (MultiplyProxyActions.sol#883-890)\n\t\t- _increaseMP(exchangeData,cdpData,addressRegistry,0) (MultiplyProxyActions.sol#639)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MultiplyProxyActions",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Chainsecurity-Oasis  Multiply Smart Contracts/multiply-proxy-actions-e277ac1471a95138aaa93b39cf2c16c36c769740/contracts/multiply/MultiplyProxyActions.sol",
            "function": "_increaseMP",
            "impact": "Low",
            "line": 857,
            "line_end": 895,
            "message": "Reentrancy in MultiplyProxyActions._increaseMP(ExchangeData,CdpData,AddressRegistry,uint256) (MultiplyProxyActions.sol#857-895):\n\tExternal calls:\n\t- require(bool,string)(IERC20(DAI).approve(address(exchange),exchangeData.fromTokenAmount.add(cdpData.depositDai)),MPA / Could not approve Exchange for DAI) (MultiplyProxyActions.sol#868-871)\n\t- exchange.swapDaiForToken(exchangeData.toTokenAddress,exchangeData.fromTokenAmount.add(cdpData.depositDai),exchangeData.minToTokenAmount,exchangeData.exchangeAddress,exchangeData._exchangeCalldata) (MultiplyProxyActions.sol#872-878)\n\t- joinDrawDebt(cdpData,borrowedDai,addressRegistry.manager,addressRegistry.jug) (MultiplyProxyActions.sol#880)\n\t\t- rate = IJug(jug).drip(ilk) (MultiplyProxyActions.sol#503)\n\t\t- gem.approve(address(cdpData.gemJoin),balance) (MultiplyProxyActions.sol#756)\n\t\t- IJoin(cdpData.gemJoin).join(urn,balance) (MultiplyProxyActions.sol#761)\n\t\t- IManager(manager).frob(cdpData.cdpId,toInt256(convertTo18(cdpData.gemJoin,balance)),_getDrawDart(vat,jug,urn,cdpData.ilk,borrowedDai)) (MultiplyProxyActions.sol#763-767)\n\t\t- IManager(manager).move(cdpData.cdpId,address(this),borrowedDai.mul(RAY)) (MultiplyProxyActions.sol#768)\n\t\t- IVat(vat).hope(DAIJOIN) (MultiplyProxyActions.sol#770)\n\t\t- IJoin(DAIJOIN).exit(address(this),borrowedDai) (MultiplyProxyActions.sol#772)\n\tEvent emitted after the call(s):\n\t- MultipleActionCalled(cdpData.methodName,cdpData.cdpId,exchangeData.minToTokenAmount,exchangeData.toTokenAmount,0,daiLeft) (MultiplyProxyActions.sol#883-890)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MultiplyProxyActions",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Chainsecurity-Oasis  Multiply Smart Contracts/multiply-proxy-actions-e277ac1471a95138aaa93b39cf2c16c36c769740/contracts/multiply/MultiplyProxyActions.sol",
            "function": "onFlashLoan",
            "impact": "Low",
            "line": 1124,
            "line_end": 1176,
            "message": "Reentrancy in MultiplyProxyActions.onFlashLoan(address,address,uint256,uint256,bytes) (MultiplyProxyActions.sol#1124-1176):\n\tExternal calls:\n\t- _decreaseMP(exchangeData,cdpData,addressRegistry,fee) (MultiplyProxyActions.sol#1149)\n\t\t- gem.withdraw(amount) (MultiplyProxyActions.sol#850)\n\t\t- IERC20(DAI).approve(DAIJOIN,borrowedDai) (MultiplyProxyActions.sol#831)\n\t\t- require(bool,string)(IERC20(exchangeData.fromTokenAddress).approve(address(exchange),exchangeData.fromTokenAmount),MPA / Could not approve Exchange for Token) (MultiplyProxyActions.sol#915-921)\n\t\t- exchange.swapTokenForDai(exchangeData.fromTokenAddress,exchangeData.fromTokenAmount,cdpData.requiredDebt.add(premium),exchangeData.exchangeAddress,exchangeData._exchangeCalldata) (MultiplyProxyActions.sol#923-929)\n\t\t- IDaiJoin(DAIJOIN).join(urn,borrowedDai) (MultiplyProxyActions.sol#832)\n\t\t- IERC20(address(gem)).transfer(destination,amount) (MultiplyProxyActions.sol#853)\n\t\t- IManager(manager).frob(cdp,- toInt256(wadC),_getWipeDart(vat,IVat(vat).dai(urn),urn,ilk)) (MultiplyProxyActions.sol#836)\n\t\t- IManager(manager).flux(cdp,address(this),wadC) (MultiplyProxyActions.sol#838)\n\t\t- IJoin(gemJoin).exit(address(this),collateralDraw) (MultiplyProxyActions.sol#839)\n\t\t- IERC20(DAI).transfer(cdpData.fundsReceiver,daiLeft) (MultiplyProxyActions.sol#956)\n\t- _increaseMP(exchangeData,cdpData,addressRegistry,fee) (MultiplyProxyActions.sol#1152)\n\t\t- rate = IJug(jug).drip(ilk) (MultiplyProxyActions.sol#503)\n\t\t- gem.approve(address(cdpData.gemJoin),balance) (MultiplyProxyActions.sol#756)\n\t\t- require(bool,string)(IERC20(DAI).approve(address(exchange),exchangeData.fromTokenAmount.add(cdpData.depositDai)),MPA / Could not approve Exchange for DAI) (MultiplyProxyActions.sol#868-871)\n\t\t- IJoin(cdpData.gemJoin).join(urn,balance) (MultiplyProxyActions.sol#761)\n\t\t- IManager(manager).frob(cdpData.cdpId,toInt256(convertTo18(cdpData.gemJoin,balance)),_getDrawDart(vat,jug,urn,cdpData.ilk,borrowedDai)) (MultiplyProxyActions.sol#763-767)\n\t\t- exchange.swapDaiForToken(exchangeData.toTokenAddress,exchangeData.fromTokenAmount.add(cdpData.depositDai),exchangeData.minToTokenAmount,exchangeData.exchangeAddress,exchangeData._exchangeCalldata) (MultiplyProxyActions.sol#872-878)\n\t\t- IManager(manager).move(cdpData.cdpId,address(this),borrowedDai.mul(RAY)) (MultiplyProxyActions.sol#768)\n\t\t- IVat(vat).hope(DAIJOIN) (MultiplyProxyActions.sol#770)\n\t\t- IJoin(DAIJOIN).exit(address(this),borrowedDai) (MultiplyProxyActions.sol#772)\n\t\t- IERC20(DAI).transfer(cdpData.fundsReceiver,daiLeft) (MultiplyProxyActions.sol#893)\n\t- _closeWithdrawCollateral(exchangeData,cdpData,addressRegistry,borrowedDaiAmount,cdpData.borrowCollateral) (MultiplyProxyActions.sol#1155-1161)\n\t\t- gem.withdraw(amount) (MultiplyProxyActions.sol#850)\n\t\t- IERC20(DAI).approve(DAIJOIN,borrowedDai) (MultiplyProxyActions.sol#831)\n\t\t- require(bool,string)(IERC20(exchangeData.fromTokenAddress).approve(address(exchange),ink),MPA / Could not approve Exchange for Token) (MultiplyProxyActions.sol#1040-1043)\n\t\t- IDaiJoin(DAIJOIN).join(urn,borrowedDai) (MultiplyProxyActions.sol#832)\n\t\t- IERC20(address(gem)).transfer(destination,amount) (MultiplyProxyActions.sol#853)\n\t\t- exchange.swapTokenForDai(exchangeData.fromTokenAddress,exchangeData.fromTokenAmount,exchangeData.minToTokenAmount,exchangeData.exchangeAddress,exchangeData._exchangeCalldata) (MultiplyProxyActions.sol#1044-1050)\n\t\t- IManager(manager).frob(cdp,- toInt256(wadC),_getWipeDart(vat,IVat(vat).dai(urn),urn,ilk)) (MultiplyProxyActions.sol#836)\n\t\t- IManager(manager).flux(cdp,address(this),wadC) (MultiplyProxyActions.sol#838)\n\t\t- IJoin(gemJoin).exit(address(this),collateralDraw) (MultiplyProxyActions.sol#839)\n\t\t- IERC20(DAI).transfer(cdpData.fundsReceiver,daiLeft) (MultiplyProxyActions.sol#1056)\n\tExternal calls sending eth:\n\t- _decreaseMP(exchangeData,cdpData,addressRegistry,fee) (MultiplyProxyActions.sol#1149)\n\t\t- destination.transfer(amount) (MultiplyProxyActions.sol#851)\n\t- _closeWithdrawCollateral(exchangeData,cdpData,addressRegistry,borrowedDaiAmount,cdpData.borrowCollateral) (MultiplyProxyActions.sol#1155-1161)\n\t\t- destination.transfer(amount) (MultiplyProxyActions.sol#851)\n\tEvent emitted after the call(s):\n\t- MultipleActionCalled(cdpData.methodName,cdpData.cdpId,exchangeData.minToTokenAmount,exchangeData.toTokenAmount,collateralLeft,daiLeft) (MultiplyProxyActions.sol#1061-1068)\n\t\t- _closeWithdrawCollateral(exchangeData,cdpData,addressRegistry,borrowedDaiAmount,cdpData.borrowCollateral) (MultiplyProxyActions.sol#1155-1161)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MultiplyProxyActions",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Chainsecurity-Oasis  Multiply Smart Contracts/multiply-proxy-actions-e277ac1471a95138aaa93b39cf2c16c36c769740/contracts/multiply/MultiplyProxyActions.sol",
            "function": "onFlashLoan",
            "impact": "Low",
            "line": 1124,
            "line_end": 1176,
            "message": "Reentrancy in MultiplyProxyActions.onFlashLoan(address,address,uint256,uint256,bytes) (MultiplyProxyActions.sol#1124-1176):\n\tExternal calls:\n\t- _decreaseMP(exchangeData,cdpData,addressRegistry,fee) (MultiplyProxyActions.sol#1149)\n\t\t- gem.withdraw(amount) (MultiplyProxyActions.sol#850)\n\t\t- IERC20(DAI).approve(DAIJOIN,borrowedDai) (MultiplyProxyActions.sol#831)\n\t\t- require(bool,string)(IERC20(exchangeData.fromTokenAddress).approve(address(exchange),exchangeData.fromTokenAmount),MPA / Could not approve Exchange for Token) (MultiplyProxyActions.sol#915-921)\n\t\t- exchange.swapTokenForDai(exchangeData.fromTokenAddress,exchangeData.fromTokenAmount,cdpData.requiredDebt.add(premium),exchangeData.exchangeAddress,exchangeData._exchangeCalldata) (MultiplyProxyActions.sol#923-929)\n\t\t- IDaiJoin(DAIJOIN).join(urn,borrowedDai) (MultiplyProxyActions.sol#832)\n\t\t- IERC20(address(gem)).transfer(destination,amount) (MultiplyProxyActions.sol#853)\n\t\t- IManager(manager).frob(cdp,- toInt256(wadC),_getWipeDart(vat,IVat(vat).dai(urn),urn,ilk)) (MultiplyProxyActions.sol#836)\n\t\t- IManager(manager).flux(cdp,address(this),wadC) (MultiplyProxyActions.sol#838)\n\t\t- IJoin(gemJoin).exit(address(this),collateralDraw) (MultiplyProxyActions.sol#839)\n\t\t- IERC20(DAI).transfer(cdpData.fundsReceiver,daiLeft) (MultiplyProxyActions.sol#956)\n\t- _increaseMP(exchangeData,cdpData,addressRegistry,fee) (MultiplyProxyActions.sol#1152)\n\t\t- rate = IJug(jug).drip(ilk) (MultiplyProxyActions.sol#503)\n\t\t- gem.approve(address(cdpData.gemJoin),balance) (MultiplyProxyActions.sol#756)\n\t\t- require(bool,string)(IERC20(DAI).approve(address(exchange),exchangeData.fromTokenAmount.add(cdpData.depositDai)),MPA / Could not approve Exchange for DAI) (MultiplyProxyActions.sol#868-871)\n\t\t- IJoin(cdpData.gemJoin).join(urn,balance) (MultiplyProxyActions.sol#761)\n\t\t- IManager(manager).frob(cdpData.cdpId,toInt256(convertTo18(cdpData.gemJoin,balance)),_getDrawDart(vat,jug,urn,cdpData.ilk,borrowedDai)) (MultiplyProxyActions.sol#763-767)\n\t\t- exchange.swapDaiForToken(exchangeData.toTokenAddress,exchangeData.fromTokenAmount.add(cdpData.depositDai),exchangeData.minToTokenAmount,exchangeData.exchangeAddress,exchangeData._exchangeCalldata) (MultiplyProxyActions.sol#872-878)\n\t\t- IManager(manager).move(cdpData.cdpId,address(this),borrowedDai.mul(RAY)) (MultiplyProxyActions.sol#768)\n\t\t- IVat(vat).hope(DAIJOIN) (MultiplyProxyActions.sol#770)\n\t\t- IJoin(DAIJOIN).exit(address(this),borrowedDai) (MultiplyProxyActions.sol#772)\n\t\t- IERC20(DAI).transfer(cdpData.fundsReceiver,daiLeft) (MultiplyProxyActions.sol#893)\n\tExternal calls sending eth:\n\t- _decreaseMP(exchangeData,cdpData,addressRegistry,fee) (MultiplyProxyActions.sol#1149)\n\t\t- destination.transfer(amount) (MultiplyProxyActions.sol#851)\n\tEvent emitted after the call(s):\n\t- MultipleActionCalled(cdpData.methodName,cdpData.cdpId,exchangeData.minToTokenAmount,exchangeData.toTokenAmount,0,daiLeft) (MultiplyProxyActions.sol#883-890)\n\t\t- _increaseMP(exchangeData,cdpData,addressRegistry,fee) (MultiplyProxyActions.sol#1152)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MultiplyProxyActions",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Chainsecurity-Oasis  Multiply Smart Contracts/multiply-proxy-actions-e277ac1471a95138aaa93b39cf2c16c36c769740/contracts/multiply/MultiplyProxyActions.sol",
            "function": "_decreaseMP",
            "impact": "Low",
            "line": 897,
            "line_end": 961,
            "message": "Reentrancy in MultiplyProxyActions._decreaseMP(ExchangeData,CdpData,AddressRegistry,uint256) (MultiplyProxyActions.sol#897-961):\n\tExternal calls:\n\t- wipeAndFreeGem(addressRegistry.manager,cdpData.gemJoin,cdpData.cdpId,debtToBeWiped,cdpData.borrowCollateral.add(cdpData.withdrawCollateral)) (MultiplyProxyActions.sol#907-913)\n\t\t- IERC20(DAI).approve(DAIJOIN,borrowedDai) (MultiplyProxyActions.sol#831)\n\t\t- IDaiJoin(DAIJOIN).join(urn,borrowedDai) (MultiplyProxyActions.sol#832)\n\t\t- IManager(manager).frob(cdp,- toInt256(wadC),_getWipeDart(vat,IVat(vat).dai(urn),urn,ilk)) (MultiplyProxyActions.sol#836)\n\t\t- IManager(manager).flux(cdp,address(this),wadC) (MultiplyProxyActions.sol#838)\n\t\t- IJoin(gemJoin).exit(address(this),collateralDraw) (MultiplyProxyActions.sol#839)\n\t- require(bool,string)(IERC20(exchangeData.fromTokenAddress).approve(address(exchange),exchangeData.fromTokenAmount),MPA / Could not approve Exchange for Token) (MultiplyProxyActions.sol#915-921)\n\t- exchange.swapTokenForDai(exchangeData.fromTokenAddress,exchangeData.fromTokenAmount,cdpData.requiredDebt.add(premium),exchangeData.exchangeAddress,exchangeData._exchangeCalldata) (MultiplyProxyActions.sol#923-929)\n\t- wipeAndFreeGem(addressRegistry.manager,cdpData.gemJoin,cdpData.cdpId,IERC20(DAI).balanceOf(address(this)).sub(cdpData.withdrawDai),0) (MultiplyProxyActions.sol#935-941)\n\t\t- IERC20(DAI).approve(DAIJOIN,borrowedDai) (MultiplyProxyActions.sol#831)\n\t\t- IDaiJoin(DAIJOIN).join(urn,borrowedDai) (MultiplyProxyActions.sol#832)\n\t\t- IManager(manager).frob(cdp,- toInt256(wadC),_getWipeDart(vat,IVat(vat).dai(urn),urn,ilk)) (MultiplyProxyActions.sol#836)\n\t\t- IManager(manager).flux(cdp,address(this),wadC) (MultiplyProxyActions.sol#838)\n\t\t- IJoin(gemJoin).exit(address(this),collateralDraw) (MultiplyProxyActions.sol#839)\n\tEvent emitted after the call(s):\n\t- MultipleActionCalled(cdpData.methodName,cdpData.cdpId,exchangeData.minToTokenAmount,exchangeData.toTokenAmount,collateralLeft,daiLeft) (MultiplyProxyActions.sol#946-953)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MultiplyProxyActions",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Chainsecurity-Oasis  Multiply Smart Contracts/multiply-proxy-actions-e277ac1471a95138aaa93b39cf2c16c36c769740/contracts/multiply/MultiplyProxyActions.sol",
            "function": "openMultiplyVault",
            "impact": "Low",
            "line": 517,
            "line_end": 529,
            "message": "Reentrancy in MultiplyProxyActions.openMultiplyVault(ExchangeData,CdpData,AddressRegistry) (MultiplyProxyActions.sol#517-529):\n\tExternal calls:\n\t- cdpData.cdpId = IManager(addressRegistry.manager).open(cdpData.ilk,address(this)) (MultiplyProxyActions.sol#527)\n\t- increaseMultipleDepositCollateral(exchangeData,cdpData,addressRegistry) (MultiplyProxyActions.sol#528)\n\t\t- IManager(addressRegistry.manager).cdpAllow(cdpData.cdpId,addressRegistry.multiplyProxyActions,1) (MultiplyProxyActions.sol#463-467)\n\t\t- rate = IJug(jug).drip(ilk) (MultiplyProxyActions.sol#503)\n\t\t- IERC3156FlashLender(addressRegistry.lender).flashLoan(IERC3156FlashBorrower(addressRegistry.multiplyProxyActions),DAI,cdpData.requiredDebt,paramsData) (MultiplyProxyActions.sol#469-474)\n\t\t- gem.deposit{value: msg.value}() (MultiplyProxyActions.sol#548)\n\t\t- IManager(addressRegistry.manager).cdpAllow(cdpData.cdpId,addressRegistry.multiplyProxyActions,0) (MultiplyProxyActions.sol#476-480)\n\t\t- IManager(addressRegistry.manager).frob(cdpData.cdpId,0,_getDrawDart(vat,addressRegistry.jug,urn,cdpData.ilk,amount)) (MultiplyProxyActions.sol#577-581)\n\t\t- gem.approve(address(cdpData.gemJoin),balance) (MultiplyProxyActions.sol#756)\n\t\t- IManager(addressRegistry.manager).move(cdpData.cdpId,address(this),toRad(amount)) (MultiplyProxyActions.sol#582)\n\t\t- gem.transfer(addressRegistry.multiplyProxyActions,msg.value) (MultiplyProxyActions.sol#550)\n\t\t- require(bool,string)(IERC20(DAI).approve(address(exchange),exchangeData.fromTokenAmount.add(cdpData.depositDai)),MPA / Could not approve Exchange for DAI) (MultiplyProxyActions.sol#868-871)\n\t\t- IVat(vat).hope(DAIJOIN) (MultiplyProxyActions.sol#584)\n\t\t- IJoin(cdpData.gemJoin).join(urn,balance) (MultiplyProxyActions.sol#761)\n\t\t- IManager(manager).frob(cdpData.cdpId,toInt256(convertTo18(cdpData.gemJoin,balance)),_getDrawDart(vat,jug,urn,cdpData.ilk,borrowedDai)) (MultiplyProxyActions.sol#763-767)\n\t\t- exchange.swapDaiForToken(exchangeData.toTokenAddress,exchangeData.fromTokenAmount.add(cdpData.depositDai),exchangeData.minToTokenAmount,exchangeData.exchangeAddress,exchangeData._exchangeCalldata) (MultiplyProxyActions.sol#872-878)\n\t\t- IJoin(DAIJOIN).exit(address(this),amount) (MultiplyProxyActions.sol#587)\n\t\t- IManager(manager).move(cdpData.cdpId,address(this),borrowedDai.mul(RAY)) (MultiplyProxyActions.sol#768)\n\t\t- gem.transferFrom(msg.sender,addressRegistry.multiplyProxyActions,cdpData.depositCollateral) (MultiplyProxyActions.sol#554-558)\n\t\t- IVat(vat).hope(DAIJOIN) (MultiplyProxyActions.sol#770)\n\t\t- gem.transferFrom(msg.sender,address(this),cdpData.depositCollateral) (MultiplyProxyActions.sol#560)\n\t\t- IJoin(DAIJOIN).exit(address(this),borrowedDai) (MultiplyProxyActions.sol#772)\n\t\t- IERC20(DAI).transfer(cdpData.fundsReceiver,daiLeft) (MultiplyProxyActions.sol#893)\n\tExternal calls sending eth:\n\t- increaseMultipleDepositCollateral(exchangeData,cdpData,addressRegistry) (MultiplyProxyActions.sol#528)\n\t\t- gem.deposit{value: msg.value}() (MultiplyProxyActions.sol#548)\n\tEvent emitted after the call(s):\n\t- MultipleActionCalled(cdpData.methodName,cdpData.cdpId,exchangeData.minToTokenAmount,exchangeData.toTokenAmount,0,daiLeft) (MultiplyProxyActions.sol#883-890)\n\t\t- increaseMultipleDepositCollateral(exchangeData,cdpData,addressRegistry) (MultiplyProxyActions.sol#528)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MultiplyProxyActions",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Chainsecurity-Oasis  Multiply Smart Contracts/multiply-proxy-actions-e277ac1471a95138aaa93b39cf2c16c36c769740/contracts/multiply/MultiplyProxyActions.sol",
            "function": "_closeWithdrawCollateral",
            "impact": "Low",
            "line": 1022,
            "line_end": 1069,
            "message": "Reentrancy in MultiplyProxyActions._closeWithdrawCollateral(ExchangeData,CdpData,AddressRegistry,uint256,uint256) (MultiplyProxyActions.sol#1022-1069):\n\tExternal calls:\n\t- wipeAndFreeGem(addressRegistry.manager,cdpData.gemJoin,cdpData.cdpId,cdpData.requiredDebt,ink) (MultiplyProxyActions.sol#1032-1038)\n\t\t- IERC20(DAI).approve(DAIJOIN,borrowedDai) (MultiplyProxyActions.sol#831)\n\t\t- IDaiJoin(DAIJOIN).join(urn,borrowedDai) (MultiplyProxyActions.sol#832)\n\t\t- IManager(manager).frob(cdp,- toInt256(wadC),_getWipeDart(vat,IVat(vat).dai(urn),urn,ilk)) (MultiplyProxyActions.sol#836)\n\t\t- IManager(manager).flux(cdp,address(this),wadC) (MultiplyProxyActions.sol#838)\n\t\t- IJoin(gemJoin).exit(address(this),collateralDraw) (MultiplyProxyActions.sol#839)\n\t- require(bool,string)(IERC20(exchangeData.fromTokenAddress).approve(address(exchange),ink),MPA / Could not approve Exchange for Token) (MultiplyProxyActions.sol#1040-1043)\n\t- exchange.swapTokenForDai(exchangeData.fromTokenAddress,exchangeData.fromTokenAmount,exchangeData.minToTokenAmount,exchangeData.exchangeAddress,exchangeData._exchangeCalldata) (MultiplyProxyActions.sol#1044-1050)\n\t- IERC20(DAI).transfer(cdpData.fundsReceiver,daiLeft) (MultiplyProxyActions.sol#1056)\n\t- _withdrawGem(cdpData.gemJoin,cdpData.fundsReceiver,collateralLeft) (MultiplyProxyActions.sol#1059)\n\t\t- gem.withdraw(amount) (MultiplyProxyActions.sol#850)\n\t\t- IERC20(address(gem)).transfer(destination,amount) (MultiplyProxyActions.sol#853)\n\tExternal calls sending eth:\n\t- _withdrawGem(cdpData.gemJoin,cdpData.fundsReceiver,collateralLeft) (MultiplyProxyActions.sol#1059)\n\t\t- destination.transfer(amount) (MultiplyProxyActions.sol#851)\n\tEvent emitted after the call(s):\n\t- MultipleActionCalled(cdpData.methodName,cdpData.cdpId,exchangeData.minToTokenAmount,exchangeData.toTokenAmount,collateralLeft,daiLeft) (MultiplyProxyActions.sol#1061-1068)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MultiplyProxyActions",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Chainsecurity-Oasis  Multiply Smart Contracts/multiply-proxy-actions-e277ac1471a95138aaa93b39cf2c16c36c769740/contracts/multiply/MultiplyProxyActions.sol",
            "function": "_closeWithdrawCollateralSkipFL",
            "impact": "Informational",
            "line": 963,
            "line_end": 1020,
            "message": "Reentrancy in MultiplyProxyActions._closeWithdrawCollateralSkipFL(ExchangeData,CdpData,AddressRegistry,uint256) (MultiplyProxyActions.sol#963-1020):\n\tExternal calls:\n\t- _withdrawGem(cdpData.gemJoin,cdpData.fundsReceiver,collateralLeft) (MultiplyProxyActions.sol#1010)\n\t\t- destination.transfer(amount) (MultiplyProxyActions.sol#851)\n\tEvent emitted after the call(s):\n\t- MultipleActionCalled(cdpData.methodName,cdpData.cdpId,exchangeData.minToTokenAmount,exchangeData.toTokenAmount,collateralLeft,daiLeft) (MultiplyProxyActions.sol#1012-1019)\n",
            "name": "reentrancy-unlimited-gas",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MultiplyProxyActions",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Chainsecurity-Oasis  Multiply Smart Contracts/multiply-proxy-actions-e277ac1471a95138aaa93b39cf2c16c36c769740/contracts/multiply/MultiplyProxyActions.sol",
            "function": "_closeWithdrawCollateral",
            "impact": "Informational",
            "line": 1022,
            "line_end": 1069,
            "message": "Reentrancy in MultiplyProxyActions._closeWithdrawCollateral(ExchangeData,CdpData,AddressRegistry,uint256,uint256) (MultiplyProxyActions.sol#1022-1069):\n\tExternal calls:\n\t- _withdrawGem(cdpData.gemJoin,cdpData.fundsReceiver,collateralLeft) (MultiplyProxyActions.sol#1059)\n\t\t- destination.transfer(amount) (MultiplyProxyActions.sol#851)\n\tEvent emitted after the call(s):\n\t- MultipleActionCalled(cdpData.methodName,cdpData.cdpId,exchangeData.minToTokenAmount,exchangeData.toTokenAmount,collateralLeft,daiLeft) (MultiplyProxyActions.sol#1061-1068)\n",
            "name": "reentrancy-unlimited-gas",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MultiplyProxyActions",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Chainsecurity-Oasis  Multiply Smart Contracts/multiply-proxy-actions-e277ac1471a95138aaa93b39cf2c16c36c769740/contracts/multiply/MultiplyProxyActions.sol",
            "function": "onFlashLoan",
            "impact": "Informational",
            "line": 1124,
            "line_end": 1176,
            "message": "Reentrancy in MultiplyProxyActions.onFlashLoan(address,address,uint256,uint256,bytes) (MultiplyProxyActions.sol#1124-1176):\n\tExternal calls:\n\t- _decreaseMP(exchangeData,cdpData,addressRegistry,fee) (MultiplyProxyActions.sol#1149)\n\t\t- destination.transfer(amount) (MultiplyProxyActions.sol#851)\n\t- _closeWithdrawCollateral(exchangeData,cdpData,addressRegistry,borrowedDaiAmount,cdpData.borrowCollateral) (MultiplyProxyActions.sol#1155-1161)\n\t\t- destination.transfer(amount) (MultiplyProxyActions.sol#851)\n\tEvent emitted after the call(s):\n\t- MultipleActionCalled(cdpData.methodName,cdpData.cdpId,exchangeData.minToTokenAmount,exchangeData.toTokenAmount,collateralLeft,daiLeft) (MultiplyProxyActions.sol#1114-1121)\n\t\t- _closeWithdrawDai(exchangeData,cdpData,addressRegistry,borrowedDaiAmount,cdpData.borrowCollateral) (MultiplyProxyActions.sol#1164-1170)\n\t- MultipleActionCalled(cdpData.methodName,cdpData.cdpId,exchangeData.minToTokenAmount,exchangeData.toTokenAmount,collateralLeft,daiLeft) (MultiplyProxyActions.sol#1061-1068)\n\t\t- _closeWithdrawCollateral(exchangeData,cdpData,addressRegistry,borrowedDaiAmount,cdpData.borrowCollateral) (MultiplyProxyActions.sol#1155-1161)\n",
            "name": "reentrancy-unlimited-gas",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MultiplyProxyActions",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Chainsecurity-Oasis  Multiply Smart Contracts/multiply-proxy-actions-e277ac1471a95138aaa93b39cf2c16c36c769740/contracts/multiply/MultiplyProxyActions.sol",
            "function": "onFlashLoan",
            "impact": "Informational",
            "line": 1124,
            "line_end": 1176,
            "message": "Reentrancy in MultiplyProxyActions.onFlashLoan(address,address,uint256,uint256,bytes) (MultiplyProxyActions.sol#1124-1176):\n\tExternal calls:\n\t- _decreaseMP(exchangeData,cdpData,addressRegistry,fee) (MultiplyProxyActions.sol#1149)\n\t\t- destination.transfer(amount) (MultiplyProxyActions.sol#851)\n\tEvent emitted after the call(s):\n\t- MultipleActionCalled(cdpData.methodName,cdpData.cdpId,exchangeData.minToTokenAmount,exchangeData.toTokenAmount,0,daiLeft) (MultiplyProxyActions.sol#883-890)\n\t\t- _increaseMP(exchangeData,cdpData,addressRegistry,fee) (MultiplyProxyActions.sol#1152)\n",
            "name": "reentrancy-unlimited-gas",
            "check": "FP"
        }
    ],
    "infos": [],
    "parser": {
        "id": "slither-0.10.0",
        "mode": "solidity",
        "version": "2024/04/30"
    }
}