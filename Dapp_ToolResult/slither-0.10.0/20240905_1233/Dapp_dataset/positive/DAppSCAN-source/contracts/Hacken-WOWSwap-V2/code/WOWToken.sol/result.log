'solc --version' running
'solc /sb/WOWToken.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/sb' running
Compilation warnings/errors on /sb/WOWToken.sol:
Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.
--> /sb/WOWToken.sol

Warning: This contract has a payable fallback function, but no receive ether function. Consider adding a receive ether function.
   --> /sb/WOWToken.sol:209:1:
    |
209 | contract WOWSale is Owned {
    | ^ (Relevant source part starts here and spans across multiple lines).
Note: The payable fallback function is defined here.
   --> /sb/WOWToken.sol:289:5:
    |
289 |     fallback() external payable {
    |     ^ (Relevant source part starts here and spans across multiple lines).



WOWSale.buyTokens() (../../sb/WOWToken.sol#246-267) ignores return value by token.transfer(msg.sender,buyAmount) (../../sb/WOWToken.sol#264)
WOWSale.close() (../../sb/WOWToken.sol#269-286) ignores return value by token.transfer(msg.sender,tokensLeft) (../../sb/WOWToken.sol#275)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-transfer

WOWSale.buyTokens() (../../sb/WOWToken.sol#246-267) performs a multiplication on the result of a division:
	- tokenPriceInBNB = rate.mul(DEC).div(tokenPrice) (../../sb/WOWToken.sol#251)
	- buyAmount = value.mul(tokenPriceInBNB).div(DEC) (../../sb/WOWToken.sol#263)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply

WOWSale.close() (../../sb/WOWToken.sol#269-286) uses a dangerous strict equality:
	- require(bool,string)(block.timestamp >= endSale || tokensLeft == 0,Close requirements are not met) (../../sb/WOWToken.sol#271)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities

Owned.transferOwnership(address) (../../sb/WOWToken.sol#179-181) should emit an event for: 
	- owner = newOwner (../../sb/WOWToken.sol#180) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-access-control

WOWSale.changeEndSale(uint256) (../../sb/WOWToken.sol#238-241) should emit an event for: 
	- endSale = newEndSale (../../sb/WOWToken.sol#239) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-arithmetic

Owned.transferOwnership(address).newOwner (../../sb/WOWToken.sol#179) lacks a zero-check on :
		- owner = newOwner (../../sb/WOWToken.sol#180)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

Reentrancy in WOWSale.buyTokens() (../../sb/WOWToken.sol#246-267):
	External calls:
	- token.transfer(msg.sender,buyAmount) (../../sb/WOWToken.sol#264)
	External calls sending eth:
	- address(msg.sender).transfer(payBack) (../../sb/WOWToken.sol#259)
	Event emitted after the call(s):
	- Sold(msg.sender,buyAmount) (../../sb/WOWToken.sol#265)
Reentrancy in WOWSale.close() (../../sb/WOWToken.sol#269-286):
	External calls:
	- token.transfer(msg.sender,tokensLeft) (../../sb/WOWToken.sol#275)
	External calls sending eth:
	- address(msg.sender).transfer(collectedBNB) (../../sb/WOWToken.sol#281)
	Event emitted after the call(s):
	- CloseSale() (../../sb/WOWToken.sol#284)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

WOWSale.buyTokens() (../../sb/WOWToken.sol#246-267) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)((block.timestamp >= startSale && block.timestamp < endSale),Crowdsale is over) (../../sb/WOWToken.sol#247)
WOWSale.close() (../../sb/WOWToken.sol#269-286) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp >= endSale || tokensLeft == 0,Close requirements are not met) (../../sb/WOWToken.sol#271)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

SafeMath.mod(uint256,uint256) (../../sb/WOWToken.sol#144-146) is never used and should be removed
SafeMath.mod(uint256,uint256,string) (../../sb/WOWToken.sol#161-164) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code

WOWToken.DEC (../../sb/WOWToken.sol#300) is set pre-construction with a non-constant function or state variable:
	- 10 ** uint256(decimals)
WOWToken._totalSupply (../../sb/WOWToken.sol#301) is set pre-construction with a non-constant function or state variable:
	- 1000000 * DEC
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#function-initializing-state

Pragma version0.7.5 (../../sb/WOWToken.sol#1) allows old versions
solc-0.7.5 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Variable WOWSale.DEC (../../sb/WOWToken.sol#221) is not in mixedCase
Variable WOWToken.DEC (../../sb/WOWToken.sol#300) is not in mixedCase
Variable WOWToken._totalSupply (../../sb/WOWToken.sol#301) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Reentrancy in WOWSale.buyTokens() (../../sb/WOWToken.sol#246-267):
	External calls:
	- address(msg.sender).transfer(payBack) (../../sb/WOWToken.sol#259)
	Event emitted after the call(s):
	- Sold(msg.sender,buyAmount) (../../sb/WOWToken.sol#265)
Reentrancy in WOWSale.close() (../../sb/WOWToken.sol#269-286):
	External calls:
	- address(msg.sender).transfer(collectedBNB) (../../sb/WOWToken.sol#281)
	Event emitted after the call(s):
	- CloseSale() (../../sb/WOWToken.sol#284)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-4

WOWToken.slitherConstructorVariables() (../../sb/WOWToken.sol#294-357) uses literals with too many digits:
	- _totalSupply = 1000000 * DEC (../../sb/WOWToken.sol#301)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits

WOWSale.maxBNB (../../sb/WOWToken.sol#219) should be constant 
WOWSale.startSale (../../sb/WOWToken.sol#217) should be constant 
WOWSale.tokenPrice (../../sb/WOWToken.sol#216) should be constant 
WOWSale.totalSold (../../sb/WOWToken.sol#214) should be constant 
WOWToken.decimals (../../sb/WOWToken.sol#299) should be constant 
WOWToken.name (../../sb/WOWToken.sol#298) should be constant 
WOWToken.symbol (../../sb/WOWToken.sol#297) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant

WOWSale.DEC (../../sb/WOWToken.sol#221) should be immutable 
WOWSale.token (../../sb/WOWToken.sol#212) should be immutable 
WOWToken.DEC (../../sb/WOWToken.sol#300) should be immutable 
WOWToken._totalSupply (../../sb/WOWToken.sol#301) should be immutable 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-immutable
/sb/WOWToken.sol analyzed (6 contracts with 93 detectors), 34 result(s) found
