{
    "errors": [],
    "fails": [],
    "findings": [
        {
            "confidence": "Medium",
            "contract": "MiniDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-MiniDOGE Smart Contract/code/MiniDOGE.sol",
            "function": "swapETHForTokens",
            "impact": "High",
            "line": 828,
            "line_end": 843,
            "message": "MiniDOGE.swapETHForTokens(uint256) (MiniDOGE.sol#828-843) sends eth to arbitrary user\n\tDangerous calls:\n\t- uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,deadAddress,block.timestamp.add(300)) (MiniDOGE.sol#835-840)\n",
            "name": "arbitrary-send-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MiniDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-MiniDOGE Smart Contract/code/MiniDOGE.sol",
            "function": "addLiquidity",
            "impact": "High",
            "line": 845,
            "line_end": 858,
            "message": "MiniDOGE.addLiquidity(uint256,uint256) (MiniDOGE.sol#845-858) sends eth to arbitrary user\n\tDangerous calls:\n\t- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (MiniDOGE.sol#850-857)\n",
            "name": "arbitrary-send-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MiniDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-MiniDOGE Smart Contract/code/MiniDOGE.sol",
            "function": "_transfer",
            "impact": "High",
            "line": 671,
            "line_end": 788,
            "message": "MiniDOGE._transfer(address,address,uint256) (MiniDOGE.sol#671-788) uses a weak PRNG: \"_bBSLimit = _bBSLimitMin + uint256(keccak256(bytes)(abi.encodePacked(block.timestamp,block.difficulty))) % (_bBSLimitMax - _bBSLimitMin + 1) (MiniDOGE.sol#732)\" \n",
            "name": "weak-prng",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MiniDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-MiniDOGE Smart Contract/code/MiniDOGE.sol",
            "function": "_transfer",
            "impact": "High",
            "line": 671,
            "line_end": 788,
            "message": "Reentrancy in MiniDOGE._transfer(address,address,uint256) (MiniDOGE.sol#671-788):\n\tExternal calls:\n\t- swapTokens(contractTokenBalance) (MiniDOGE.sol#700)\n\t\t- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (MiniDOGE.sol#817-823)\n\tExternal calls sending eth:\n\t- swapTokens(contractTokenBalance) (MiniDOGE.sol#700)\n\t\t- recipient.transfer(amount) (MiniDOGE.sol#1141)\n\tState variables written after the call(s):\n\t- _removeOldSellHistories() (MiniDOGE.sol#727)\n\t\t- _sellHistories[i].time = _sellHistories[j].time (MiniDOGE.sol#1028)\n\t\t- _sellHistories[i].bnbAmount = _sellHistories[j].bnbAmount (MiniDOGE.sol#1029)\n\t\t- _sellHistories.pop() (MiniDOGE.sol#1039)\n\tMiniDOGE._sellHistories (MiniDOGE.sol#481) can be used in cross function reentrancies:\n\t- MiniDOGE._removeOldSellHistories() (MiniDOGE.sol#1020-1042)\n\t- MiniDOGE._sellHistories (MiniDOGE.sol#481)\n\t- MiniDOGE._transfer(address,address,uint256) (MiniDOGE.sol#671-788)\n",
            "name": "reentrancy-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MiniDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-MiniDOGE Smart Contract/code/MiniDOGE.sol",
            "function": "_transfer",
            "impact": "High",
            "line": 671,
            "line_end": 788,
            "message": "Reentrancy in MiniDOGE._transfer(address,address,uint256) (MiniDOGE.sol#671-788):\n\tExternal calls:\n\t- swapTokens(contractTokenBalance) (MiniDOGE.sol#700)\n\t\t- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (MiniDOGE.sol#817-823)\n\t- buyBackTokens(_bBSLimit) (MiniDOGE.sol#735)\n\t\t- uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,deadAddress,block.timestamp.add(300)) (MiniDOGE.sol#835-840)\n\tExternal calls sending eth:\n\t- swapTokens(contractTokenBalance) (MiniDOGE.sol#700)\n\t\t- recipient.transfer(amount) (MiniDOGE.sol#1141)\n\t- buyBackTokens(_bBSLimit) (MiniDOGE.sol#735)\n\t\t- uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,deadAddress,block.timestamp.add(300)) (MiniDOGE.sol#835-840)\n\tState variables written after the call(s):\n\t- _tokenTransfer(from,to,amount,takeFee) (MiniDOGE.sol#787)\n\t\t- _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity) (MiniDOGE.sol#964)\n\t\t- _rOwned[sender] = _rOwned[sender].sub(rAmount) (MiniDOGE.sol#889)\n\t\t- _rOwned[sender] = _rOwned[sender].sub(rAmount) (MiniDOGE.sol#880)\n\t\t- _rOwned[sender] = _rOwned[sender].sub(rAmount) (MiniDOGE.sol#900)\n\t\t- _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount) (MiniDOGE.sol#881)\n\t\t- _rOwned[sender] = _rOwned[sender].sub(rAmount) (MiniDOGE.sol#910)\n\t\t- _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount) (MiniDOGE.sol#901)\n\t\t- _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount) (MiniDOGE.sol#891)\n\t\t- _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount) (MiniDOGE.sol#912)\n\tMiniDOGE._rOwned (MiniDOGE.sol#421) can be used in cross function reentrancies:\n\t- MiniDOGE._getCurrentSupply() (MiniDOGE.sol#949-959)\n\t- MiniDOGE._takeLiquidity(uint256) (MiniDOGE.sol#961-967)\n\t- MiniDOGE._transferBothExcluded(address,address,uint256) (MiniDOGE.sol#907-916)\n\t- MiniDOGE._transferFromExcluded(address,address,uint256) (MiniDOGE.sol#897-905)\n\t- MiniDOGE._transferStandard(address,address,uint256) (MiniDOGE.sol#878-885)\n\t- MiniDOGE._transferToExcluded(address,address,uint256) (MiniDOGE.sol#887-895)\n\t- MiniDOGE.balanceOf(address) (MiniDOGE.sol#562-565)\n\t- MiniDOGE.constructor() (MiniDOGE.sol#522-544)\n\t- MiniDOGE.deliver(uint256) (MiniDOGE.sol#613-620)\n\t- MiniDOGE.excludeFromReward(address) (MiniDOGE.sol#640-648)\n\t- _tokenTransfer(from,to,amount,takeFee) (MiniDOGE.sol#787)\n\t\t- _rTotal = _rTotal.sub(rFee) (MiniDOGE.sol#919)\n\tMiniDOGE._rTotal (MiniDOGE.sol#432) can be used in cross function reentrancies:\n\t- MiniDOGE._getCurrentSupply() (MiniDOGE.sol#949-959)\n\t- MiniDOGE._reflectFee(uint256,uint256) (MiniDOGE.sol#918-921)\n\t- MiniDOGE.constructor() (MiniDOGE.sol#522-544)\n\t- MiniDOGE.deliver(uint256) (MiniDOGE.sol#613-620)\n\t- MiniDOGE.tokenFromReflection(uint256) (MiniDOGE.sol#634-638)\n\t- _tokenTransfer(from,to,amount,takeFee) (MiniDOGE.sol#787)\n\t\t- _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity) (MiniDOGE.sol#966)\n\t\t- _tOwned[sender] = _tOwned[sender].sub(tAmount) (MiniDOGE.sol#909)\n\t\t- _tOwned[sender] = _tOwned[sender].sub(tAmount) (MiniDOGE.sol#899)\n\t\t- _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount) (MiniDOGE.sol#890)\n\t\t- _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount) (MiniDOGE.sol#911)\n\tMiniDOGE._tOwned (MiniDOGE.sol#422) can be used in cross function reentrancies:\n\t- MiniDOGE._getCurrentSupply() (MiniDOGE.sol#949-959)\n\t- MiniDOGE._takeLiquidity(uint256) (MiniDOGE.sol#961-967)\n\t- MiniDOGE._transferBothExcluded(address,address,uint256) (MiniDOGE.sol#907-916)\n\t- MiniDOGE._transferFromExcluded(address,address,uint256) (MiniDOGE.sol#897-905)\n\t- MiniDOGE._transferToExcluded(address,address,uint256) (MiniDOGE.sol#887-895)\n\t- MiniDOGE.balanceOf(address) (MiniDOGE.sol#562-565)\n\t- MiniDOGE.excludeFromReward(address) (MiniDOGE.sol#640-648)\n\t- MiniDOGE.includeInReward(address) (MiniDOGE.sol#650-661)\n\t- buyBackTokens(_bBSLimit) (MiniDOGE.sol#735)\n\t\t- inSwapAndLiquify = true (MiniDOGE.sol#517)\n\t\t- inSwapAndLiquify = false (MiniDOGE.sol#519)\n\tMiniDOGE.inSwapAndLiquify (MiniDOGE.sol#490) can be used in cross function reentrancies:\n\t- MiniDOGE._transfer(address,address,uint256) (MiniDOGE.sol#671-788)\n\t- MiniDOGE.lockTheSwap() (MiniDOGE.sol#516-520)\n",
            "name": "reentrancy-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MiniDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-MiniDOGE Smart Contract/code/MiniDOGE.sol",
            "function": "addLiquidity",
            "impact": "Medium",
            "line": 845,
            "line_end": 858,
            "message": "MiniDOGE.addLiquidity(uint256,uint256) (MiniDOGE.sol#845-858) ignores return value by uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (MiniDOGE.sol#850-857)\n",
            "name": "unused-return",
            "check": "FP"
        },
        {
            "confidence": "High",
            "contract": "Ownable",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-MiniDOGE Smart Contract/code/MiniDOGE.sol",
            "function": "owner",
            "impact": "Low",
            "line": 572,
            "message": "MiniDOGE.allowance(address,address).owner (MiniDOGE.sol#572) shadows:\n\t- Ownable.owner() (MiniDOGE.sol#168-170) (function)\n",
            "name": "shadowing-local",
            "check": "FP"
        },
        {
            "confidence": "High",
            "contract": "Ownable",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-MiniDOGE Smart Contract/code/MiniDOGE.sol",
            "function": "owner",
            "impact": "Low",
            "line": 663,
            "message": "MiniDOGE._approve(address,address,uint256).owner (MiniDOGE.sol#663) shadows:\n\t- Ownable.owner() (MiniDOGE.sol#168-170) (function)\n",
            "name": "shadowing-local",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MiniDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-MiniDOGE Smart Contract/code/MiniDOGE.sol",
            "function": "setLiquidityFeePercent",
            "impact": "Low",
            "line": 1087,
            "line_end": 1089,
            "message": "MiniDOGE.setLiquidityFeePercent(uint256) (MiniDOGE.sol#1087-1089) should emit an event for: \n\t- _liquidityFee = liquidityFee (MiniDOGE.sol#1088) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MiniDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-MiniDOGE Smart Contract/code/MiniDOGE.sol",
            "function": "setMaxTxAmount",
            "impact": "Low",
            "line": 1095,
            "line_end": 1097,
            "message": "MiniDOGE.setMaxTxAmount(uint256) (MiniDOGE.sol#1095-1097) should emit an event for: \n\t- _maxTxAmount = maxTxAmount (MiniDOGE.sol#1096) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MiniDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-MiniDOGE Smart Contract/code/MiniDOGE.sol",
            "function": "setSellFee",
            "impact": "Low",
            "line": 1082,
            "line_end": 1085,
            "message": "MiniDOGE.setSellFee(uint256,uint256) (MiniDOGE.sol#1082-1085) should emit an event for: \n\t- _sellTaxFee = sellTaxFee (MiniDOGE.sol#1083) \n\t- _sellLiquidityFee = sellLiquidityFee (MiniDOGE.sol#1084) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MiniDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-MiniDOGE Smart Contract/code/MiniDOGE.sol",
            "function": "setNumTokensSellToAddToBuyBack",
            "impact": "Low",
            "line": 1103,
            "line_end": 1105,
            "message": "MiniDOGE.setNumTokensSellToAddToBuyBack(uint256) (MiniDOGE.sol#1103-1105) should emit an event for: \n\t- minimumTokensBeforeSwap = _minimumTokensBeforeSwap (MiniDOGE.sol#1104) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MiniDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-MiniDOGE Smart Contract/code/MiniDOGE.sol",
            "function": "SetBuyBackDivisor",
            "impact": "Low",
            "line": 1048,
            "line_end": 1050,
            "message": "MiniDOGE.SetBuyBackDivisor(uint256) (MiniDOGE.sol#1048-1050) should emit an event for: \n\t- _buyBackDivisor = newDivisor (MiniDOGE.sol#1049) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MiniDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-MiniDOGE Smart Contract/code/MiniDOGE.sol",
            "function": "SetBuyBackRangeRate",
            "impact": "Low",
            "line": 1060,
            "line_end": 1063,
            "message": "MiniDOGE.SetBuyBackRangeRate(uint256) (MiniDOGE.sol#1060-1063) should emit an event for: \n\t- _buyBackRangeRate = newPercent (MiniDOGE.sol#1062) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MiniDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-MiniDOGE Smart Contract/code/MiniDOGE.sol",
            "function": "setBuyFee",
            "impact": "Low",
            "line": 1077,
            "line_end": 1080,
            "message": "MiniDOGE.setBuyFee(uint256,uint256) (MiniDOGE.sol#1077-1080) should emit an event for: \n\t- _buyTaxFee = buyTaxFee (MiniDOGE.sol#1078) \n\t- _buyLiquidityFee = buyLiquidityFee (MiniDOGE.sol#1079) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MiniDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-MiniDOGE Smart Contract/code/MiniDOGE.sol",
            "function": "setTaxFeePercent",
            "impact": "Low",
            "line": 1073,
            "line_end": 1075,
            "message": "MiniDOGE.setTaxFeePercent(uint256) (MiniDOGE.sol#1073-1075) should emit an event for: \n\t- _taxFee = taxFee (MiniDOGE.sol#1074) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MiniDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-MiniDOGE Smart Contract/code/MiniDOGE.sol",
            "function": "SetSwapMinutes",
            "impact": "Low",
            "line": 1069,
            "line_end": 1071,
            "message": "MiniDOGE.SetSwapMinutes(uint256) (MiniDOGE.sol#1069-1071) should emit an event for: \n\t- _intervalMinutesForSwap = newMinutes * 60 (MiniDOGE.sol#1070) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MiniDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-MiniDOGE Smart Contract/code/MiniDOGE.sol",
            "function": "setMarketingDivisor",
            "impact": "Low",
            "line": 1099,
            "line_end": 1101,
            "message": "MiniDOGE.setMarketingDivisor(uint256) (MiniDOGE.sol#1099-1101) should emit an event for: \n\t- marketingDivisor = divisor (MiniDOGE.sol#1100) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MiniDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-MiniDOGE Smart Contract/code/MiniDOGE.sol",
            "function": "setBuyBackSellLimit",
            "impact": "Low",
            "line": 1091,
            "line_end": 1093,
            "message": "MiniDOGE.setBuyBackSellLimit(uint256) (MiniDOGE.sol#1091-1093) should emit an event for: \n\t- buyBackSellLimit = buyBackSellSetLimit (MiniDOGE.sol#1092) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MiniDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-MiniDOGE Smart Contract/code/MiniDOGE.sol",
            "function": "SetBuyBackTimeInterval",
            "impact": "Low",
            "line": 1056,
            "line_end": 1058,
            "message": "MiniDOGE.SetBuyBackTimeInterval(uint256) (MiniDOGE.sol#1056-1058) should emit an event for: \n\t- _buyBackTimeInterval = newMinutes * 60 (MiniDOGE.sol#1057) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MiniDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-MiniDOGE Smart Contract/code/MiniDOGE.sol",
            "function": "SetBuyBackMaxTimeForHistories",
            "impact": "Low",
            "line": 1044,
            "line_end": 1046,
            "message": "MiniDOGE.SetBuyBackMaxTimeForHistories(uint256) (MiniDOGE.sol#1044-1046) should emit an event for: \n\t- _buyBackMaxTimeForHistories = newMinutes * 60 (MiniDOGE.sol#1045) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MiniDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-MiniDOGE Smart Contract/code/MiniDOGE.sol",
            "function": "transferFrom",
            "impact": "Low",
            "line": 581,
            "line_end": 585,
            "message": "Reentrancy in MiniDOGE.transferFrom(address,address,uint256) (MiniDOGE.sol#581-585):\n\tExternal calls:\n\t- _transfer(sender,recipient,amount) (MiniDOGE.sol#582)\n\t\t- uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,deadAddress,block.timestamp.add(300)) (MiniDOGE.sol#835-840)\n\t\t- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (MiniDOGE.sol#817-823)\n\tExternal calls sending eth:\n\t- _transfer(sender,recipient,amount) (MiniDOGE.sol#582)\n\t\t- recipient.transfer(amount) (MiniDOGE.sol#1141)\n\t\t- uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,deadAddress,block.timestamp.add(300)) (MiniDOGE.sol#835-840)\n\tState variables written after the call(s):\n\t- _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,ERC20: transfer amount exceeds allowance)) (MiniDOGE.sol#583)\n\t\t- _allowances[owner][spender] = amount (MiniDOGE.sol#667)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MiniDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-MiniDOGE Smart Contract/code/MiniDOGE.sol",
            "function": "_transfer",
            "impact": "Low",
            "line": 671,
            "line_end": 788,
            "message": "Reentrancy in MiniDOGE._transfer(address,address,uint256) (MiniDOGE.sol#671-788):\n\tExternal calls:\n\t- swapTokens(contractTokenBalance) (MiniDOGE.sol#700)\n\t\t- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (MiniDOGE.sol#817-823)\n\t- buyBackTokens(_bBSLimit) (MiniDOGE.sol#735)\n\t\t- uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,deadAddress,block.timestamp.add(300)) (MiniDOGE.sol#835-840)\n\tExternal calls sending eth:\n\t- swapTokens(contractTokenBalance) (MiniDOGE.sol#700)\n\t\t- recipient.transfer(amount) (MiniDOGE.sol#1141)\n\t- buyBackTokens(_bBSLimit) (MiniDOGE.sol#735)\n\t\t- uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,deadAddress,block.timestamp.add(300)) (MiniDOGE.sol#835-840)\n\tState variables written after the call(s):\n\t- removeAllFee() (MiniDOGE.sol#751)\n\t\t- _liquidityFee = 0 (MiniDOGE.sol#988)\n\t- _liquidityFee = _buyLiquidityFee (MiniDOGE.sol#753)\n\t- removeAllFee() (MiniDOGE.sol#757)\n\t\t- _liquidityFee = 0 (MiniDOGE.sol#988)\n\t- _liquidityFee = _sellLiquidityFee (MiniDOGE.sol#759)\n\t- removeAllFee() (MiniDOGE.sol#764)\n\t\t- _liquidityFee = 0 (MiniDOGE.sol#988)\n\t- _liquidityFee = _addressFees[from]._liquidityFee (MiniDOGE.sol#766)\n\t- _liquidityFee = _addressFees[from]._sellLiquidityFee (MiniDOGE.sol#771)\n\t- removeAllFee() (MiniDOGE.sol#778)\n\t\t- _liquidityFee = 0 (MiniDOGE.sol#988)\n\t- _liquidityFee = _addressFees[to]._buyLiquidityFee (MiniDOGE.sol#781)\n\t- _tokenTransfer(from,to,amount,takeFee) (MiniDOGE.sol#787)\n\t\t- _liquidityFee = _previousLiquidityFee (MiniDOGE.sol#993)\n\t\t- _liquidityFee = 0 (MiniDOGE.sol#988)\n\t- removeAllFee() (MiniDOGE.sol#751)\n\t\t- _previousLiquidityFee = _liquidityFee (MiniDOGE.sol#985)\n\t- removeAllFee() (MiniDOGE.sol#757)\n\t\t- _previousLiquidityFee = _liquidityFee (MiniDOGE.sol#985)\n\t- removeAllFee() (MiniDOGE.sol#764)\n\t\t- _previousLiquidityFee = _liquidityFee (MiniDOGE.sol#985)\n\t- removeAllFee() (MiniDOGE.sol#778)\n\t\t- _previousLiquidityFee = _liquidityFee (MiniDOGE.sol#985)\n\t- _tokenTransfer(from,to,amount,takeFee) (MiniDOGE.sol#787)\n\t\t- _previousLiquidityFee = _liquidityFee (MiniDOGE.sol#985)\n\t- removeAllFee() (MiniDOGE.sol#751)\n\t\t- _previousTaxFee = _taxFee (MiniDOGE.sol#984)\n\t- removeAllFee() (MiniDOGE.sol#757)\n\t\t- _previousTaxFee = _taxFee (MiniDOGE.sol#984)\n\t- removeAllFee() (MiniDOGE.sol#764)\n\t\t- _previousTaxFee = _taxFee (MiniDOGE.sol#984)\n\t- removeAllFee() (MiniDOGE.sol#778)\n\t\t- _previousTaxFee = _taxFee (MiniDOGE.sol#984)\n\t- _tokenTransfer(from,to,amount,takeFee) (MiniDOGE.sol#787)\n\t\t- _previousTaxFee = _taxFee (MiniDOGE.sol#984)\n\t- _tokenTransfer(from,to,amount,takeFee) (MiniDOGE.sol#787)\n\t\t- _tFeeTotal = _tFeeTotal.add(tFee) (MiniDOGE.sol#920)\n\t- removeAllFee() (MiniDOGE.sol#751)\n\t\t- _taxFee = 0 (MiniDOGE.sol#987)\n\t- _taxFee = _buyTaxFee (MiniDOGE.sol#752)\n\t- removeAllFee() (MiniDOGE.sol#757)\n\t\t- _taxFee = 0 (MiniDOGE.sol#987)\n\t- _taxFee = _sellTaxFee (MiniDOGE.sol#758)\n\t- removeAllFee() (MiniDOGE.sol#764)\n\t\t- _taxFee = 0 (MiniDOGE.sol#987)\n\t- _taxFee = _addressFees[from]._taxFee (MiniDOGE.sol#765)\n\t- _taxFee = _addressFees[from]._sellTaxFee (MiniDOGE.sol#770)\n\t- removeAllFee() (MiniDOGE.sol#778)\n\t\t- _taxFee = 0 (MiniDOGE.sol#987)\n\t- _taxFee = _addressFees[to]._buyTaxFee (MiniDOGE.sol#780)\n\t- _tokenTransfer(from,to,amount,takeFee) (MiniDOGE.sol#787)\n\t\t- _taxFee = _previousTaxFee (MiniDOGE.sol#992)\n\t\t- _taxFee = 0 (MiniDOGE.sol#987)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MiniDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-MiniDOGE Smart Contract/code/MiniDOGE.sol",
            "function": "changeRouterVersion",
            "impact": "Low",
            "line": 1144,
            "line_end": 1157,
            "message": "Reentrancy in MiniDOGE.changeRouterVersion(address) (MiniDOGE.sol#1144-1157):\n\tExternal calls:\n\t- _pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this),_uniswapV2Router.WETH()) (MiniDOGE.sol#1150-1151)\n\tState variables written after the call(s):\n\t- uniswapV2Pair = _pair (MiniDOGE.sol#1153)\n\t- uniswapV2Router = _uniswapV2Router (MiniDOGE.sol#1156)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MiniDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-MiniDOGE Smart Contract/code/MiniDOGE.sol",
            "function": "swapTokensForEth",
            "impact": "Low",
            "line": 808,
            "line_end": 826,
            "message": "Reentrancy in MiniDOGE.swapTokensForEth(uint256) (MiniDOGE.sol#808-826):\n\tExternal calls:\n\t- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (MiniDOGE.sol#817-823)\n\tEvent emitted after the call(s):\n\t- SwapTokensForETH(tokenAmount,path) (MiniDOGE.sol#825)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MiniDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-MiniDOGE Smart Contract/code/MiniDOGE.sol",
            "function": "_transfer",
            "impact": "Low",
            "line": 671,
            "line_end": 788,
            "message": "Reentrancy in MiniDOGE._transfer(address,address,uint256) (MiniDOGE.sol#671-788):\n\tExternal calls:\n\t- swapTokens(contractTokenBalance) (MiniDOGE.sol#700)\n\t\t- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (MiniDOGE.sol#817-823)\n\t- buyBackTokens(_bBSLimit) (MiniDOGE.sol#735)\n\t\t- uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,deadAddress,block.timestamp.add(300)) (MiniDOGE.sol#835-840)\n\tExternal calls sending eth:\n\t- swapTokens(contractTokenBalance) (MiniDOGE.sol#700)\n\t\t- recipient.transfer(amount) (MiniDOGE.sol#1141)\n\t- buyBackTokens(_bBSLimit) (MiniDOGE.sol#735)\n\t\t- uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,deadAddress,block.timestamp.add(300)) (MiniDOGE.sol#835-840)\n\tEvent emitted after the call(s):\n\t- SwapETHForTokens(amount,path) (MiniDOGE.sol#842)\n\t\t- buyBackTokens(_bBSLimit) (MiniDOGE.sol#735)\n\t- Transfer(sender,recipient,tTransferAmount) (MiniDOGE.sol#884)\n\t\t- _tokenTransfer(from,to,amount,takeFee) (MiniDOGE.sol#787)\n\t- Transfer(sender,recipient,tTransferAmount) (MiniDOGE.sol#904)\n\t\t- _tokenTransfer(from,to,amount,takeFee) (MiniDOGE.sol#787)\n\t- Transfer(sender,recipient,tTransferAmount) (MiniDOGE.sol#894)\n\t\t- _tokenTransfer(from,to,amount,takeFee) (MiniDOGE.sol#787)\n\t- Transfer(sender,recipient,tTransferAmount) (MiniDOGE.sol#915)\n\t\t- _tokenTransfer(from,to,amount,takeFee) (MiniDOGE.sol#787)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MiniDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-MiniDOGE Smart Contract/code/MiniDOGE.sol",
            "function": "transferFrom",
            "impact": "Low",
            "line": 581,
            "line_end": 585,
            "message": "Reentrancy in MiniDOGE.transferFrom(address,address,uint256) (MiniDOGE.sol#581-585):\n\tExternal calls:\n\t- _transfer(sender,recipient,amount) (MiniDOGE.sol#582)\n\t\t- uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,deadAddress,block.timestamp.add(300)) (MiniDOGE.sol#835-840)\n\t\t- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (MiniDOGE.sol#817-823)\n\tExternal calls sending eth:\n\t- _transfer(sender,recipient,amount) (MiniDOGE.sol#582)\n\t\t- recipient.transfer(amount) (MiniDOGE.sol#1141)\n\t\t- uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,deadAddress,block.timestamp.add(300)) (MiniDOGE.sol#835-840)\n\tEvent emitted after the call(s):\n\t- Approval(owner,spender,amount) (MiniDOGE.sol#668)\n\t\t- _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,ERC20: transfer amount exceeds allowance)) (MiniDOGE.sol#583)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MiniDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-MiniDOGE Smart Contract/code/MiniDOGE.sol",
            "function": "swapETHForTokens",
            "impact": "Low",
            "line": 828,
            "line_end": 843,
            "message": "Reentrancy in MiniDOGE.swapETHForTokens(uint256) (MiniDOGE.sol#828-843):\n\tExternal calls:\n\t- uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,deadAddress,block.timestamp.add(300)) (MiniDOGE.sol#835-840)\n\tEvent emitted after the call(s):\n\t- SwapETHForTokens(amount,path) (MiniDOGE.sol#842)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Ownable",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-MiniDOGE Smart Contract/code/MiniDOGE.sol",
            "function": "unlock",
            "impact": "Low",
            "line": 203,
            "line_end": 208,
            "message": "Ownable.unlock() (MiniDOGE.sol#203-208) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(block.timestamp > _lockTime,Contract is locked until 7 days) (MiniDOGE.sol#205)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MiniDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-MiniDOGE Smart Contract/code/MiniDOGE.sol",
            "function": "_transfer",
            "impact": "Low",
            "line": 671,
            "line_end": 788,
            "message": "MiniDOGE._transfer(address,address,uint256) (MiniDOGE.sol#671-788) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- overMinimumTokenBalance && _startTimeForSwap + _intervalMinutesForSwap <= block.timestamp (MiniDOGE.sol#697)\n\t- _sellHistories[i].time >= startTime (MiniDOGE.sol#717)\n\t- balance > _bBSLimit (MiniDOGE.sol#734)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MiniDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-MiniDOGE Smart Contract/code/MiniDOGE.sol",
            "function": "buyBackTokens",
            "impact": "Low",
            "line": 802,
            "line_end": 806,
            "message": "MiniDOGE.buyBackTokens(uint256) (MiniDOGE.sol#802-806) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- amount > 0 (MiniDOGE.sol#803)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MiniDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-MiniDOGE Smart Contract/code/MiniDOGE.sol",
            "function": "_removeOldSellHistories",
            "impact": "Low",
            "line": 1020,
            "line_end": 1042,
            "message": "MiniDOGE._removeOldSellHistories() (MiniDOGE.sol#1020-1042) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- _sellHistories[j].time >= maxStartTimeForHistories (MiniDOGE.sol#1026)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "High",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-MiniDOGE Smart Contract/code/MiniDOGE.sol",
            "impact": "Informational",
            "line": 2,
            "message": "Different versions of Solidity are used:\n\t- Version used: ['>=0.5.0', '>=0.6.2', '^0.8.4']\n\t- >=0.5.0 (MiniDOGE.sol#2)\n\t- >=0.5.0 (MiniDOGE.sol#3)\n\t- >=0.6.2 (MiniDOGE.sol#4)\n\t- >=0.6.2 (MiniDOGE.sol#5)\n\t- ^0.8.4 (MiniDOGE.sol#1)\n",
            "name": "pragma",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MiniDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-MiniDOGE Smart Contract/code/MiniDOGE.sol",
            "function": "includeInReward",
            "impact": "Informational",
            "line": 650,
            "line_end": 661,
            "message": "MiniDOGE.includeInReward(address) (MiniDOGE.sol#650-661) has costly operations inside a loop:\n\t- _excluded.pop() (MiniDOGE.sol#657)\n",
            "name": "costly-loop",
            "check": "TP"
        },
        {
            "confidence": "High",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-MiniDOGE Smart Contract/code/MiniDOGE.sol",
            "impact": "Informational",
            "line": 455,
            "message": "MiniDOGE._previousTaxFee (MiniDOGE.sol#455) is set pre-construction with a non-constant function or state variable:\n\t- _taxFee\n",
            "name": "function-init-state",
            "check": "FP"
        },
        {
            "confidence": "High",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-MiniDOGE Smart Contract/code/MiniDOGE.sol",
            "impact": "Informational",
            "line": 458,
            "message": "MiniDOGE._previousLiquidityFee (MiniDOGE.sol#458) is set pre-construction with a non-constant function or state variable:\n\t- _liquidityFee\n",
            "name": "function-init-state",
            "check": "FP"
        },
        {
            "confidence": "High",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-MiniDOGE Smart Contract/code/MiniDOGE.sol",
            "impact": "Informational",
            "line": 432,
            "message": "MiniDOGE._rTotal (MiniDOGE.sol#432) is set pre-construction with a non-constant function or state variable:\n\t- (MAX - (MAX % _tTotal))\n",
            "name": "function-init-state",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MiniDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-MiniDOGE Smart Contract/code/MiniDOGE.sol",
            "function": "_transfer",
            "impact": "Informational",
            "line": 671,
            "line_end": 788,
            "message": "Reentrancy in MiniDOGE._transfer(address,address,uint256) (MiniDOGE.sol#671-788):\n\tExternal calls:\n\t- swapTokens(contractTokenBalance) (MiniDOGE.sol#700)\n\t\t- recipient.transfer(amount) (MiniDOGE.sol#1141)\n\tState variables written after the call(s):\n\t- _removeOldSellHistories() (MiniDOGE.sol#727)\n\t\t- _sellHistories[i].time = _sellHistories[j].time (MiniDOGE.sol#1028)\n\t\t- _sellHistories[i].bnbAmount = _sellHistories[j].bnbAmount (MiniDOGE.sol#1029)\n\t\t- _sellHistories.pop() (MiniDOGE.sol#1039)\n",
            "name": "reentrancy-unlimited-gas",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MiniDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-MiniDOGE Smart Contract/code/MiniDOGE.sol",
            "function": "transferFrom",
            "impact": "Informational",
            "line": 581,
            "line_end": 585,
            "message": "Reentrancy in MiniDOGE.transferFrom(address,address,uint256) (MiniDOGE.sol#581-585):\n\tExternal calls:\n\t- _transfer(sender,recipient,amount) (MiniDOGE.sol#582)\n\t\t- recipient.transfer(amount) (MiniDOGE.sol#1141)\n\tExternal calls sending eth:\n\t- _transfer(sender,recipient,amount) (MiniDOGE.sol#582)\n\t\t- recipient.transfer(amount) (MiniDOGE.sol#1141)\n\t\t- uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,deadAddress,block.timestamp.add(300)) (MiniDOGE.sol#835-840)\n\tState variables written after the call(s):\n\t- _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,ERC20: transfer amount exceeds allowance)) (MiniDOGE.sol#583)\n\t\t- _allowances[owner][spender] = amount (MiniDOGE.sol#667)\n\tEvent emitted after the call(s):\n\t- Approval(owner,spender,amount) (MiniDOGE.sol#668)\n\t\t- _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,ERC20: transfer amount exceeds allowance)) (MiniDOGE.sol#583)\n",
            "name": "reentrancy-unlimited-gas",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MiniDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-MiniDOGE Smart Contract/code/MiniDOGE.sol",
            "function": "_transfer",
            "impact": "Informational",
            "line": 671,
            "line_end": 788,
            "message": "Reentrancy in MiniDOGE._transfer(address,address,uint256) (MiniDOGE.sol#671-788):\n\tExternal calls:\n\t- swapTokens(contractTokenBalance) (MiniDOGE.sol#700)\n\t\t- recipient.transfer(amount) (MiniDOGE.sol#1141)\n\tExternal calls sending eth:\n\t- swapTokens(contractTokenBalance) (MiniDOGE.sol#700)\n\t\t- recipient.transfer(amount) (MiniDOGE.sol#1141)\n\t- buyBackTokens(_bBSLimit) (MiniDOGE.sol#735)\n\t\t- uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,deadAddress,block.timestamp.add(300)) (MiniDOGE.sol#835-840)\n\tState variables written after the call(s):\n\t- removeAllFee() (MiniDOGE.sol#751)\n\t\t- _liquidityFee = 0 (MiniDOGE.sol#988)\n\t- _liquidityFee = _buyLiquidityFee (MiniDOGE.sol#753)\n\t- removeAllFee() (MiniDOGE.sol#757)\n\t\t- _liquidityFee = 0 (MiniDOGE.sol#988)\n\t- _liquidityFee = _sellLiquidityFee (MiniDOGE.sol#759)\n\t- removeAllFee() (MiniDOGE.sol#764)\n\t\t- _liquidityFee = 0 (MiniDOGE.sol#988)\n\t- _liquidityFee = _addressFees[from]._liquidityFee (MiniDOGE.sol#766)\n\t- _liquidityFee = _addressFees[from]._sellLiquidityFee (MiniDOGE.sol#771)\n\t- removeAllFee() (MiniDOGE.sol#778)\n\t\t- _liquidityFee = 0 (MiniDOGE.sol#988)\n\t- _liquidityFee = _addressFees[to]._buyLiquidityFee (MiniDOGE.sol#781)\n\t- _tokenTransfer(from,to,amount,takeFee) (MiniDOGE.sol#787)\n\t\t- _liquidityFee = _previousLiquidityFee (MiniDOGE.sol#993)\n\t\t- _liquidityFee = 0 (MiniDOGE.sol#988)\n\t- removeAllFee() (MiniDOGE.sol#751)\n\t\t- _previousLiquidityFee = _liquidityFee (MiniDOGE.sol#985)\n\t- removeAllFee() (MiniDOGE.sol#757)\n\t\t- _previousLiquidityFee = _liquidityFee (MiniDOGE.sol#985)\n\t- removeAllFee() (MiniDOGE.sol#764)\n\t\t- _previousLiquidityFee = _liquidityFee (MiniDOGE.sol#985)\n\t- removeAllFee() (MiniDOGE.sol#778)\n\t\t- _previousLiquidityFee = _liquidityFee (MiniDOGE.sol#985)\n\t- _tokenTransfer(from,to,amount,takeFee) (MiniDOGE.sol#787)\n\t\t- _previousLiquidityFee = _liquidityFee (MiniDOGE.sol#985)\n\t- removeAllFee() (MiniDOGE.sol#751)\n\t\t- _previousTaxFee = _taxFee (MiniDOGE.sol#984)\n\t- removeAllFee() (MiniDOGE.sol#757)\n\t\t- _previousTaxFee = _taxFee (MiniDOGE.sol#984)\n\t- removeAllFee() (MiniDOGE.sol#764)\n\t\t- _previousTaxFee = _taxFee (MiniDOGE.sol#984)\n\t- removeAllFee() (MiniDOGE.sol#778)\n\t\t- _previousTaxFee = _taxFee (MiniDOGE.sol#984)\n\t- _tokenTransfer(from,to,amount,takeFee) (MiniDOGE.sol#787)\n\t\t- _previousTaxFee = _taxFee (MiniDOGE.sol#984)\n\t- _tokenTransfer(from,to,amount,takeFee) (MiniDOGE.sol#787)\n\t\t- _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity) (MiniDOGE.sol#964)\n\t\t- _rOwned[sender] = _rOwned[sender].sub(rAmount) (MiniDOGE.sol#889)\n\t\t- _rOwned[sender] = _rOwned[sender].sub(rAmount) (MiniDOGE.sol#880)\n\t\t- _rOwned[sender] = _rOwned[sender].sub(rAmount) (MiniDOGE.sol#900)\n\t\t- _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount) (MiniDOGE.sol#881)\n\t\t- _rOwned[sender] = _rOwned[sender].sub(rAmount) (MiniDOGE.sol#910)\n\t\t- _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount) (MiniDOGE.sol#901)\n\t\t- _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount) (MiniDOGE.sol#891)\n\t\t- _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount) (MiniDOGE.sol#912)\n\t- _tokenTransfer(from,to,amount,takeFee) (MiniDOGE.sol#787)\n\t\t- _rTotal = _rTotal.sub(rFee) (MiniDOGE.sol#919)\n\t- _tokenTransfer(from,to,amount,takeFee) (MiniDOGE.sol#787)\n\t\t- _tFeeTotal = _tFeeTotal.add(tFee) (MiniDOGE.sol#920)\n\t- _tokenTransfer(from,to,amount,takeFee) (MiniDOGE.sol#787)\n\t\t- _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity) (MiniDOGE.sol#966)\n\t\t- _tOwned[sender] = _tOwned[sender].sub(tAmount) (MiniDOGE.sol#909)\n\t\t- _tOwned[sender] = _tOwned[sender].sub(tAmount) (MiniDOGE.sol#899)\n\t\t- _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount) (MiniDOGE.sol#890)\n\t\t- _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount) (MiniDOGE.sol#911)\n\t- removeAllFee() (MiniDOGE.sol#751)\n\t\t- _taxFee = 0 (MiniDOGE.sol#987)\n\t- _taxFee = _buyTaxFee (MiniDOGE.sol#752)\n\t- removeAllFee() (MiniDOGE.sol#757)\n\t\t- _taxFee = 0 (MiniDOGE.sol#987)\n\t- _taxFee = _sellTaxFee (MiniDOGE.sol#758)\n\t- removeAllFee() (MiniDOGE.sol#764)\n\t\t- _taxFee = 0 (MiniDOGE.sol#987)\n\t- _taxFee = _addressFees[from]._taxFee (MiniDOGE.sol#765)\n\t- _taxFee = _addressFees[from]._sellTaxFee (MiniDOGE.sol#770)\n\t- removeAllFee() (MiniDOGE.sol#778)\n\t\t- _taxFee = 0 (MiniDOGE.sol#987)\n\t- _taxFee = _addressFees[to]._buyTaxFee (MiniDOGE.sol#780)\n\t- _tokenTransfer(from,to,amount,takeFee) (MiniDOGE.sol#787)\n\t\t- _taxFee = _previousTaxFee (MiniDOGE.sol#992)\n\t\t- _taxFee = 0 (MiniDOGE.sol#987)\n\t- buyBackTokens(_bBSLimit) (MiniDOGE.sol#735)\n\t\t- inSwapAndLiquify = true (MiniDOGE.sol#517)\n\t\t- inSwapAndLiquify = false (MiniDOGE.sol#519)\n\tEvent emitted after the call(s):\n\t- SwapETHForTokens(amount,path) (MiniDOGE.sol#842)\n\t\t- buyBackTokens(_bBSLimit) (MiniDOGE.sol#735)\n\t- Transfer(sender,recipient,tTransferAmount) (MiniDOGE.sol#884)\n\t\t- _tokenTransfer(from,to,amount,takeFee) (MiniDOGE.sol#787)\n\t- Transfer(sender,recipient,tTransferAmount) (MiniDOGE.sol#904)\n\t\t- _tokenTransfer(from,to,amount,takeFee) (MiniDOGE.sol#787)\n\t- Transfer(sender,recipient,tTransferAmount) (MiniDOGE.sol#894)\n\t\t- _tokenTransfer(from,to,amount,takeFee) (MiniDOGE.sol#787)\n\t- Transfer(sender,recipient,tTransferAmount) (MiniDOGE.sol#915)\n\t\t- _tokenTransfer(from,to,amount,takeFee) (MiniDOGE.sol#787)\n",
            "name": "reentrancy-unlimited-gas",
            "check": "FP"
        }
    ],
    "infos": [],
    "parser": {
        "id": "slither-0.10.0",
        "mode": "solidity",
        "version": "2024/04/30"
    }
}