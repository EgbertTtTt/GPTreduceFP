{
    "errors": [],
    "fails": [],
    "findings": [
        {
            "confidence": "Medium",
            "contract": "MasterShiba",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-ShibaNova/Contracts-b6b1ce1fcaff83d360df8944309f49958842b7b8/shibanova/contracts/MasterShiba.sol",
            "function": "updatePool",
            "impact": "Medium",
            "line": 1202,
            "line_end": 1225,
            "message": "Reentrancy in MasterShiba.updatePool(uint256) (MasterShiba.sol#1202-1225):\n\tExternal calls:\n\t- Nova.mint(devaddr,devMintAmount) (MasterShiba.sol#1216)\n\t- sNova.mint(address(this),NovaReward) (MasterShiba.sol#1218)\n\t- Nova.mint(address(this),NovaReward) (MasterShiba.sol#1221)\n\tState variables written after the call(s):\n\t- pool.accNovaPerShare = pool.accNovaPerShare.add(NovaReward.mul(1e12).div(lpSupply)) (MasterShiba.sol#1223)\n\tMasterShiba.poolInfo (MasterShiba.sol#1032) can be used in cross function reentrancies:\n\t- MasterShiba.add(uint256,IBEP20,uint256,bool,bool) (MasterShiba.sol#1111-1127)\n\t- MasterShiba.constructor(ShibaBEP20,ShibaBEP20,ShibaBonusAggregator,address,address,uint256,uint256) (MasterShiba.sol#1056-1085)\n\t- MasterShiba.deposit(uint256,uint256) (MasterShiba.sol#1250-1288)\n\t- MasterShiba.emergencyWithdraw(uint256) (MasterShiba.sol#1319-1329)\n\t- MasterShiba.getPoolInfo(uint256) (MasterShiba.sol#1331-1342)\n\t- MasterShiba.massUpdatePools() (MasterShiba.sol#1194-1199)\n\t- MasterShiba.pendingNova(uint256,address) (MasterShiba.sol#1145-1161)\n\t- MasterShiba.poolInfo (MasterShiba.sol#1032)\n\t- MasterShiba.poolLength() (MasterShiba.sol#1097-1099)\n\t- MasterShiba.set(uint256,uint256,uint256,bool,bool) (MasterShiba.sol#1130-1142)\n\t- MasterShiba.updatePool(uint256) (MasterShiba.sol#1202-1225)\n\t- MasterShiba.updateUserBonus(address,uint256,uint256) (MasterShiba.sol#1228-1247)\n\t- MasterShiba.validatePool(uint256) (MasterShiba.sol#1087-1090)\n\t- MasterShiba.withdraw(uint256,uint256) (MasterShiba.sol#1291-1316)\n\t- pool.lastRewardBlock = block.number (MasterShiba.sol#1224)\n\tMasterShiba.poolInfo (MasterShiba.sol#1032) can be used in cross function reentrancies:\n\t- MasterShiba.add(uint256,IBEP20,uint256,bool,bool) (MasterShiba.sol#1111-1127)\n\t- MasterShiba.constructor(ShibaBEP20,ShibaBEP20,ShibaBonusAggregator,address,address,uint256,uint256) (MasterShiba.sol#1056-1085)\n\t- MasterShiba.deposit(uint256,uint256) (MasterShiba.sol#1250-1288)\n\t- MasterShiba.emergencyWithdraw(uint256) (MasterShiba.sol#1319-1329)\n\t- MasterShiba.getPoolInfo(uint256) (MasterShiba.sol#1331-1342)\n\t- MasterShiba.massUpdatePools() (MasterShiba.sol#1194-1199)\n\t- MasterShiba.pendingNova(uint256,address) (MasterShiba.sol#1145-1161)\n\t- MasterShiba.poolInfo (MasterShiba.sol#1032)\n\t- MasterShiba.poolLength() (MasterShiba.sol#1097-1099)\n\t- MasterShiba.set(uint256,uint256,uint256,bool,bool) (MasterShiba.sol#1130-1142)\n\t- MasterShiba.updatePool(uint256) (MasterShiba.sol#1202-1225)\n\t- MasterShiba.updateUserBonus(address,uint256,uint256) (MasterShiba.sol#1228-1247)\n\t- MasterShiba.validatePool(uint256) (MasterShiba.sol#1087-1090)\n\t- MasterShiba.withdraw(uint256,uint256) (MasterShiba.sol#1291-1316)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MasterShiba",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-ShibaNova/Contracts-b6b1ce1fcaff83d360df8944309f49958842b7b8/shibanova/contracts/MasterShiba.sol",
            "function": "updateUserBonus",
            "impact": "Medium",
            "line": 1228,
            "line_end": 1247,
            "message": "Reentrancy in MasterShiba.updateUserBonus(address,uint256,uint256) (MasterShiba.sol#1228-1247):\n\tExternal calls:\n\t- updatePool(_pid) (MasterShiba.sol#1231)\n\t\t- Nova.mint(devaddr,devMintAmount) (MasterShiba.sol#1216)\n\t\t- sNova.mint(address(this),NovaReward) (MasterShiba.sol#1218)\n\t\t- Nova.mint(address(this),NovaReward) (MasterShiba.sol#1221)\n\t- safeSNovaTransfer(_user,pending) (MasterShiba.sol#1236)\n\t\t- transferSuccess = sNova.transfer(_to,sNovaBal) (MasterShiba.sol#1361)\n\t\t- transferSuccess = sNova.transfer(_to,_amount) (MasterShiba.sol#1363)\n\t- safeNovaTransfer(_user,pending) (MasterShiba.sol#1239)\n\t\t- transferSuccess = Nova.transfer(_to,NovaBal) (MasterShiba.sol#1349)\n\t\t- transferSuccess = Nova.transfer(_to,_amount) (MasterShiba.sol#1351)\n\tState variables written after the call(s):\n\t- pool.lpSupply = pool.lpSupply.sub(user.amountWithBonus) (MasterShiba.sol#1243)\n\tMasterShiba.poolInfo (MasterShiba.sol#1032) can be used in cross function reentrancies:\n\t- MasterShiba.add(uint256,IBEP20,uint256,bool,bool) (MasterShiba.sol#1111-1127)\n\t- MasterShiba.constructor(ShibaBEP20,ShibaBEP20,ShibaBonusAggregator,address,address,uint256,uint256) (MasterShiba.sol#1056-1085)\n\t- MasterShiba.deposit(uint256,uint256) (MasterShiba.sol#1250-1288)\n\t- MasterShiba.emergencyWithdraw(uint256) (MasterShiba.sol#1319-1329)\n\t- MasterShiba.getPoolInfo(uint256) (MasterShiba.sol#1331-1342)\n\t- MasterShiba.massUpdatePools() (MasterShiba.sol#1194-1199)\n\t- MasterShiba.pendingNova(uint256,address) (MasterShiba.sol#1145-1161)\n\t- MasterShiba.poolInfo (MasterShiba.sol#1032)\n\t- MasterShiba.poolLength() (MasterShiba.sol#1097-1099)\n\t- MasterShiba.set(uint256,uint256,uint256,bool,bool) (MasterShiba.sol#1130-1142)\n\t- MasterShiba.updatePool(uint256) (MasterShiba.sol#1202-1225)\n\t- MasterShiba.updateUserBonus(address,uint256,uint256) (MasterShiba.sol#1228-1247)\n\t- MasterShiba.validatePool(uint256) (MasterShiba.sol#1087-1090)\n\t- MasterShiba.withdraw(uint256,uint256) (MasterShiba.sol#1291-1316)\n\t- pool.lpSupply = pool.lpSupply.add(user.amountWithBonus) (MasterShiba.sol#1245)\n\tMasterShiba.poolInfo (MasterShiba.sol#1032) can be used in cross function reentrancies:\n\t- MasterShiba.add(uint256,IBEP20,uint256,bool,bool) (MasterShiba.sol#1111-1127)\n\t- MasterShiba.constructor(ShibaBEP20,ShibaBEP20,ShibaBonusAggregator,address,address,uint256,uint256) (MasterShiba.sol#1056-1085)\n\t- MasterShiba.deposit(uint256,uint256) (MasterShiba.sol#1250-1288)\n\t- MasterShiba.emergencyWithdraw(uint256) (MasterShiba.sol#1319-1329)\n\t- MasterShiba.getPoolInfo(uint256) (MasterShiba.sol#1331-1342)\n\t- MasterShiba.massUpdatePools() (MasterShiba.sol#1194-1199)\n\t- MasterShiba.pendingNova(uint256,address) (MasterShiba.sol#1145-1161)\n\t- MasterShiba.poolInfo (MasterShiba.sol#1032)\n\t- MasterShiba.poolLength() (MasterShiba.sol#1097-1099)\n\t- MasterShiba.set(uint256,uint256,uint256,bool,bool) (MasterShiba.sol#1130-1142)\n\t- MasterShiba.updatePool(uint256) (MasterShiba.sol#1202-1225)\n\t- MasterShiba.updateUserBonus(address,uint256,uint256) (MasterShiba.sol#1228-1247)\n\t- MasterShiba.validatePool(uint256) (MasterShiba.sol#1087-1090)\n\t- MasterShiba.withdraw(uint256,uint256) (MasterShiba.sol#1291-1316)\n\t- user.amountWithBonus = user.amount.mul(bonus.add(10000)).div(10000) (MasterShiba.sol#1244)\n\tMasterShiba.userInfo (MasterShiba.sol#1034) can be used in cross function reentrancies:\n\t- MasterShiba.deposit(uint256,uint256) (MasterShiba.sol#1250-1288)\n\t- MasterShiba.emergencyWithdraw(uint256) (MasterShiba.sol#1319-1329)\n\t- MasterShiba.pendingNova(uint256,address) (MasterShiba.sol#1145-1161)\n\t- MasterShiba.updateUserBonus(address,uint256,uint256) (MasterShiba.sol#1228-1247)\n\t- MasterShiba.userInfo (MasterShiba.sol#1034)\n\t- MasterShiba.withdraw(uint256,uint256) (MasterShiba.sol#1291-1316)\n\t- user.rewardDebt = user.amountWithBonus.mul(pool.accNovaPerShare).div(1e12) (MasterShiba.sol#1246)\n\tMasterShiba.userInfo (MasterShiba.sol#1034) can be used in cross function reentrancies:\n\t- MasterShiba.deposit(uint256,uint256) (MasterShiba.sol#1250-1288)\n\t- MasterShiba.emergencyWithdraw(uint256) (MasterShiba.sol#1319-1329)\n\t- MasterShiba.pendingNova(uint256,address) (MasterShiba.sol#1145-1161)\n\t- MasterShiba.updateUserBonus(address,uint256,uint256) (MasterShiba.sol#1228-1247)\n\t- MasterShiba.userInfo (MasterShiba.sol#1034)\n\t- MasterShiba.withdraw(uint256,uint256) (MasterShiba.sol#1291-1316)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MasterShiba",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-ShibaNova/Contracts-b6b1ce1fcaff83d360df8944309f49958842b7b8/shibanova/contracts/MasterShiba.sol",
            "function": "set",
            "impact": "Medium",
            "line": 1130,
            "line_end": 1142,
            "message": "Reentrancy in MasterShiba.set(uint256,uint256,uint256,bool,bool) (MasterShiba.sol#1130-1142):\n\tExternal calls:\n\t- massUpdatePools() (MasterShiba.sol#1133)\n\t\t- Nova.mint(devaddr,devMintAmount) (MasterShiba.sol#1216)\n\t\t- sNova.mint(address(this),NovaReward) (MasterShiba.sol#1218)\n\t\t- Nova.mint(address(this),NovaReward) (MasterShiba.sol#1221)\n\tState variables written after the call(s):\n\t- poolInfo[_pid].allocPoint = _allocPoint (MasterShiba.sol#1136)\n\tMasterShiba.poolInfo (MasterShiba.sol#1032) can be used in cross function reentrancies:\n\t- MasterShiba.add(uint256,IBEP20,uint256,bool,bool) (MasterShiba.sol#1111-1127)\n\t- MasterShiba.constructor(ShibaBEP20,ShibaBEP20,ShibaBonusAggregator,address,address,uint256,uint256) (MasterShiba.sol#1056-1085)\n\t- MasterShiba.deposit(uint256,uint256) (MasterShiba.sol#1250-1288)\n\t- MasterShiba.emergencyWithdraw(uint256) (MasterShiba.sol#1319-1329)\n\t- MasterShiba.getPoolInfo(uint256) (MasterShiba.sol#1331-1342)\n\t- MasterShiba.massUpdatePools() (MasterShiba.sol#1194-1199)\n\t- MasterShiba.pendingNova(uint256,address) (MasterShiba.sol#1145-1161)\n\t- MasterShiba.poolInfo (MasterShiba.sol#1032)\n\t- MasterShiba.poolLength() (MasterShiba.sol#1097-1099)\n\t- MasterShiba.set(uint256,uint256,uint256,bool,bool) (MasterShiba.sol#1130-1142)\n\t- MasterShiba.updatePool(uint256) (MasterShiba.sol#1202-1225)\n\t- MasterShiba.updateUserBonus(address,uint256,uint256) (MasterShiba.sol#1228-1247)\n\t- MasterShiba.validatePool(uint256) (MasterShiba.sol#1087-1090)\n\t- MasterShiba.withdraw(uint256,uint256) (MasterShiba.sol#1291-1316)\n\t- poolInfo[_pid].depositFeeBP = _depositFeeBP (MasterShiba.sol#1137)\n\tMasterShiba.poolInfo (MasterShiba.sol#1032) can be used in cross function reentrancies:\n\t- MasterShiba.add(uint256,IBEP20,uint256,bool,bool) (MasterShiba.sol#1111-1127)\n\t- MasterShiba.constructor(ShibaBEP20,ShibaBEP20,ShibaBonusAggregator,address,address,uint256,uint256) (MasterShiba.sol#1056-1085)\n\t- MasterShiba.deposit(uint256,uint256) (MasterShiba.sol#1250-1288)\n\t- MasterShiba.emergencyWithdraw(uint256) (MasterShiba.sol#1319-1329)\n\t- MasterShiba.getPoolInfo(uint256) (MasterShiba.sol#1331-1342)\n\t- MasterShiba.massUpdatePools() (MasterShiba.sol#1194-1199)\n\t- MasterShiba.pendingNova(uint256,address) (MasterShiba.sol#1145-1161)\n\t- MasterShiba.poolInfo (MasterShiba.sol#1032)\n\t- MasterShiba.poolLength() (MasterShiba.sol#1097-1099)\n\t- MasterShiba.set(uint256,uint256,uint256,bool,bool) (MasterShiba.sol#1130-1142)\n\t- MasterShiba.updatePool(uint256) (MasterShiba.sol#1202-1225)\n\t- MasterShiba.updateUserBonus(address,uint256,uint256) (MasterShiba.sol#1228-1247)\n\t- MasterShiba.validatePool(uint256) (MasterShiba.sol#1087-1090)\n\t- MasterShiba.withdraw(uint256,uint256) (MasterShiba.sol#1291-1316)\n\t- poolInfo[_pid].isSNovaRewards = _isSNovaRewards (MasterShiba.sol#1138)\n\tMasterShiba.poolInfo (MasterShiba.sol#1032) can be used in cross function reentrancies:\n\t- MasterShiba.add(uint256,IBEP20,uint256,bool,bool) (MasterShiba.sol#1111-1127)\n\t- MasterShiba.constructor(ShibaBEP20,ShibaBEP20,ShibaBonusAggregator,address,address,uint256,uint256) (MasterShiba.sol#1056-1085)\n\t- MasterShiba.deposit(uint256,uint256) (MasterShiba.sol#1250-1288)\n\t- MasterShiba.emergencyWithdraw(uint256) (MasterShiba.sol#1319-1329)\n\t- MasterShiba.getPoolInfo(uint256) (MasterShiba.sol#1331-1342)\n\t- MasterShiba.massUpdatePools() (MasterShiba.sol#1194-1199)\n\t- MasterShiba.pendingNova(uint256,address) (MasterShiba.sol#1145-1161)\n\t- MasterShiba.poolInfo (MasterShiba.sol#1032)\n\t- MasterShiba.poolLength() (MasterShiba.sol#1097-1099)\n\t- MasterShiba.set(uint256,uint256,uint256,bool,bool) (MasterShiba.sol#1130-1142)\n\t- MasterShiba.updatePool(uint256) (MasterShiba.sol#1202-1225)\n\t- MasterShiba.updateUserBonus(address,uint256,uint256) (MasterShiba.sol#1228-1247)\n\t- MasterShiba.validatePool(uint256) (MasterShiba.sol#1087-1090)\n\t- MasterShiba.withdraw(uint256,uint256) (MasterShiba.sol#1291-1316)\n\t- totalAllocPoint = totalAllocPoint.sub(prevAllocPoint).add(_allocPoint) (MasterShiba.sol#1140)\n\tMasterShiba.totalAllocPoint (MasterShiba.sol#1036) can be used in cross function reentrancies:\n\t- MasterShiba.add(uint256,IBEP20,uint256,bool,bool) (MasterShiba.sol#1111-1127)\n\t- MasterShiba.constructor(ShibaBEP20,ShibaBEP20,ShibaBonusAggregator,address,address,uint256,uint256) (MasterShiba.sol#1056-1085)\n\t- MasterShiba.pendingNova(uint256,address) (MasterShiba.sol#1145-1161)\n\t- MasterShiba.set(uint256,uint256,uint256,bool,bool) (MasterShiba.sol#1130-1142)\n\t- MasterShiba.totalAllocPoint (MasterShiba.sol#1036)\n\t- MasterShiba.updatePool(uint256) (MasterShiba.sol#1202-1225)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MasterShiba",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-ShibaNova/Contracts-b6b1ce1fcaff83d360df8944309f49958842b7b8/shibanova/contracts/MasterShiba.sol",
            "function": "deposit",
            "impact": "Medium",
            "line": 1250,
            "line_end": 1288,
            "message": "Reentrancy in MasterShiba.deposit(uint256,uint256) (MasterShiba.sol#1250-1288):\n\tExternal calls:\n\t- updatePool(_pid) (MasterShiba.sol#1254)\n\t\t- Nova.mint(devaddr,devMintAmount) (MasterShiba.sol#1216)\n\t\t- sNova.mint(address(this),NovaReward) (MasterShiba.sol#1218)\n\t\t- Nova.mint(address(this),NovaReward) (MasterShiba.sol#1221)\n\t- safeSNovaTransfer(_user,pending) (MasterShiba.sol#1259)\n\t\t- transferSuccess = sNova.transfer(_to,sNovaBal) (MasterShiba.sol#1361)\n\t\t- transferSuccess = sNova.transfer(_to,_amount) (MasterShiba.sol#1363)\n\t- safeNovaTransfer(_user,pending) (MasterShiba.sol#1262)\n\t\t- transferSuccess = Nova.transfer(_to,NovaBal) (MasterShiba.sol#1349)\n\t\t- transferSuccess = Nova.transfer(_to,_amount) (MasterShiba.sol#1351)\n\t- pool.lpToken.safeTransferFrom(address(_user),address(this),_amount) (MasterShiba.sol#1267)\n\t- pool.lpToken.safeTransfer(feeAddress,depositFee) (MasterShiba.sol#1274)\n\tState variables written after the call(s):\n\t- pool.lpSupply = pool.lpSupply.add(_bonusAmount) (MasterShiba.sol#1278)\n\tMasterShiba.poolInfo (MasterShiba.sol#1032) can be used in cross function reentrancies:\n\t- MasterShiba.add(uint256,IBEP20,uint256,bool,bool) (MasterShiba.sol#1111-1127)\n\t- MasterShiba.constructor(ShibaBEP20,ShibaBEP20,ShibaBonusAggregator,address,address,uint256,uint256) (MasterShiba.sol#1056-1085)\n\t- MasterShiba.deposit(uint256,uint256) (MasterShiba.sol#1250-1288)\n\t- MasterShiba.emergencyWithdraw(uint256) (MasterShiba.sol#1319-1329)\n\t- MasterShiba.getPoolInfo(uint256) (MasterShiba.sol#1331-1342)\n\t- MasterShiba.massUpdatePools() (MasterShiba.sol#1194-1199)\n\t- MasterShiba.pendingNova(uint256,address) (MasterShiba.sol#1145-1161)\n\t- MasterShiba.poolInfo (MasterShiba.sol#1032)\n\t- MasterShiba.poolLength() (MasterShiba.sol#1097-1099)\n\t- MasterShiba.set(uint256,uint256,uint256,bool,bool) (MasterShiba.sol#1130-1142)\n\t- MasterShiba.updatePool(uint256) (MasterShiba.sol#1202-1225)\n\t- MasterShiba.updateUserBonus(address,uint256,uint256) (MasterShiba.sol#1228-1247)\n\t- MasterShiba.validatePool(uint256) (MasterShiba.sol#1087-1090)\n\t- MasterShiba.withdraw(uint256,uint256) (MasterShiba.sol#1291-1316)\n\t- user.amount = user.amount.add(_amount).sub(depositFee) (MasterShiba.sol#1275)\n\tMasterShiba.userInfo (MasterShiba.sol#1034) can be used in cross function reentrancies:\n\t- MasterShiba.deposit(uint256,uint256) (MasterShiba.sol#1250-1288)\n\t- MasterShiba.emergencyWithdraw(uint256) (MasterShiba.sol#1319-1329)\n\t- MasterShiba.pendingNova(uint256,address) (MasterShiba.sol#1145-1161)\n\t- MasterShiba.updateUserBonus(address,uint256,uint256) (MasterShiba.sol#1228-1247)\n\t- MasterShiba.userInfo (MasterShiba.sol#1034)\n\t- MasterShiba.withdraw(uint256,uint256) (MasterShiba.sol#1291-1316)\n\t- user.amountWithBonus = user.amountWithBonus.add(_bonusAmount) (MasterShiba.sol#1277)\n\tMasterShiba.userInfo (MasterShiba.sol#1034) can be used in cross function reentrancies:\n\t- MasterShiba.deposit(uint256,uint256) (MasterShiba.sol#1250-1288)\n\t- MasterShiba.emergencyWithdraw(uint256) (MasterShiba.sol#1319-1329)\n\t- MasterShiba.pendingNova(uint256,address) (MasterShiba.sol#1145-1161)\n\t- MasterShiba.updateUserBonus(address,uint256,uint256) (MasterShiba.sol#1228-1247)\n\t- MasterShiba.userInfo (MasterShiba.sol#1034)\n\t- MasterShiba.withdraw(uint256,uint256) (MasterShiba.sol#1291-1316)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MasterShiba",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-ShibaNova/Contracts-b6b1ce1fcaff83d360df8944309f49958842b7b8/shibanova/contracts/MasterShiba.sol",
            "function": "deposit",
            "impact": "Medium",
            "line": 1250,
            "line_end": 1288,
            "message": "Reentrancy in MasterShiba.deposit(uint256,uint256) (MasterShiba.sol#1250-1288):\n\tExternal calls:\n\t- updatePool(_pid) (MasterShiba.sol#1254)\n\t\t- Nova.mint(devaddr,devMintAmount) (MasterShiba.sol#1216)\n\t\t- sNova.mint(address(this),NovaReward) (MasterShiba.sol#1218)\n\t\t- Nova.mint(address(this),NovaReward) (MasterShiba.sol#1221)\n\t- safeSNovaTransfer(_user,pending) (MasterShiba.sol#1259)\n\t\t- transferSuccess = sNova.transfer(_to,sNovaBal) (MasterShiba.sol#1361)\n\t\t- transferSuccess = sNova.transfer(_to,_amount) (MasterShiba.sol#1363)\n\t- safeNovaTransfer(_user,pending) (MasterShiba.sol#1262)\n\t\t- transferSuccess = Nova.transfer(_to,NovaBal) (MasterShiba.sol#1349)\n\t\t- transferSuccess = Nova.transfer(_to,_amount) (MasterShiba.sol#1351)\n\t- pool.lpToken.safeTransferFrom(address(_user),address(this),_amount) (MasterShiba.sol#1267)\n\tState variables written after the call(s):\n\t- pool.lpSupply = pool.lpSupply.add(_bonusAmount_scope_0) (MasterShiba.sol#1283)\n\tMasterShiba.poolInfo (MasterShiba.sol#1032) can be used in cross function reentrancies:\n\t- MasterShiba.add(uint256,IBEP20,uint256,bool,bool) (MasterShiba.sol#1111-1127)\n\t- MasterShiba.constructor(ShibaBEP20,ShibaBEP20,ShibaBonusAggregator,address,address,uint256,uint256) (MasterShiba.sol#1056-1085)\n\t- MasterShiba.deposit(uint256,uint256) (MasterShiba.sol#1250-1288)\n\t- MasterShiba.emergencyWithdraw(uint256) (MasterShiba.sol#1319-1329)\n\t- MasterShiba.getPoolInfo(uint256) (MasterShiba.sol#1331-1342)\n\t- MasterShiba.massUpdatePools() (MasterShiba.sol#1194-1199)\n\t- MasterShiba.pendingNova(uint256,address) (MasterShiba.sol#1145-1161)\n\t- MasterShiba.poolInfo (MasterShiba.sol#1032)\n\t- MasterShiba.poolLength() (MasterShiba.sol#1097-1099)\n\t- MasterShiba.set(uint256,uint256,uint256,bool,bool) (MasterShiba.sol#1130-1142)\n\t- MasterShiba.updatePool(uint256) (MasterShiba.sol#1202-1225)\n\t- MasterShiba.updateUserBonus(address,uint256,uint256) (MasterShiba.sol#1228-1247)\n\t- MasterShiba.validatePool(uint256) (MasterShiba.sol#1087-1090)\n\t- MasterShiba.withdraw(uint256,uint256) (MasterShiba.sol#1291-1316)\n\t- user.amount = user.amount.add(_amount) (MasterShiba.sol#1280)\n\tMasterShiba.userInfo (MasterShiba.sol#1034) can be used in cross function reentrancies:\n\t- MasterShiba.deposit(uint256,uint256) (MasterShiba.sol#1250-1288)\n\t- MasterShiba.emergencyWithdraw(uint256) (MasterShiba.sol#1319-1329)\n\t- MasterShiba.pendingNova(uint256,address) (MasterShiba.sol#1145-1161)\n\t- MasterShiba.updateUserBonus(address,uint256,uint256) (MasterShiba.sol#1228-1247)\n\t- MasterShiba.userInfo (MasterShiba.sol#1034)\n\t- MasterShiba.withdraw(uint256,uint256) (MasterShiba.sol#1291-1316)\n\t- user.amountWithBonus = user.amountWithBonus.add(_bonusAmount_scope_0) (MasterShiba.sol#1282)\n\tMasterShiba.userInfo (MasterShiba.sol#1034) can be used in cross function reentrancies:\n\t- MasterShiba.deposit(uint256,uint256) (MasterShiba.sol#1250-1288)\n\t- MasterShiba.emergencyWithdraw(uint256) (MasterShiba.sol#1319-1329)\n\t- MasterShiba.pendingNova(uint256,address) (MasterShiba.sol#1145-1161)\n\t- MasterShiba.updateUserBonus(address,uint256,uint256) (MasterShiba.sol#1228-1247)\n\t- MasterShiba.userInfo (MasterShiba.sol#1034)\n\t- MasterShiba.withdraw(uint256,uint256) (MasterShiba.sol#1291-1316)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MasterShiba",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-ShibaNova/Contracts-b6b1ce1fcaff83d360df8944309f49958842b7b8/shibanova/contracts/MasterShiba.sol",
            "function": "withdraw",
            "impact": "Medium",
            "line": 1291,
            "line_end": 1316,
            "message": "Reentrancy in MasterShiba.withdraw(uint256,uint256) (MasterShiba.sol#1291-1316):\n\tExternal calls:\n\t- updatePool(_pid) (MasterShiba.sol#1296)\n\t\t- Nova.mint(devaddr,devMintAmount) (MasterShiba.sol#1216)\n\t\t- sNova.mint(address(this),NovaReward) (MasterShiba.sol#1218)\n\t\t- Nova.mint(address(this),NovaReward) (MasterShiba.sol#1221)\n\t- safeSNovaTransfer(msg.sender,pending) (MasterShiba.sol#1300)\n\t\t- transferSuccess = sNova.transfer(_to,sNovaBal) (MasterShiba.sol#1361)\n\t\t- transferSuccess = sNova.transfer(_to,_amount) (MasterShiba.sol#1363)\n\t- safeNovaTransfer(msg.sender,pending) (MasterShiba.sol#1303)\n\t\t- transferSuccess = Nova.transfer(_to,NovaBal) (MasterShiba.sol#1349)\n\t\t- transferSuccess = Nova.transfer(_to,_amount) (MasterShiba.sol#1351)\n\t- pool.lpToken.safeTransfer(address(msg.sender),_amount) (MasterShiba.sol#1311)\n\tState variables written after the call(s):\n\t- pool.lpSupply = pool.lpSupply.sub(_bonusAmount) (MasterShiba.sol#1312)\n\tMasterShiba.poolInfo (MasterShiba.sol#1032) can be used in cross function reentrancies:\n\t- MasterShiba.add(uint256,IBEP20,uint256,bool,bool) (MasterShiba.sol#1111-1127)\n\t- MasterShiba.constructor(ShibaBEP20,ShibaBEP20,ShibaBonusAggregator,address,address,uint256,uint256) (MasterShiba.sol#1056-1085)\n\t- MasterShiba.deposit(uint256,uint256) (MasterShiba.sol#1250-1288)\n\t- MasterShiba.emergencyWithdraw(uint256) (MasterShiba.sol#1319-1329)\n\t- MasterShiba.getPoolInfo(uint256) (MasterShiba.sol#1331-1342)\n\t- MasterShiba.massUpdatePools() (MasterShiba.sol#1194-1199)\n\t- MasterShiba.pendingNova(uint256,address) (MasterShiba.sol#1145-1161)\n\t- MasterShiba.poolInfo (MasterShiba.sol#1032)\n\t- MasterShiba.poolLength() (MasterShiba.sol#1097-1099)\n\t- MasterShiba.set(uint256,uint256,uint256,bool,bool) (MasterShiba.sol#1130-1142)\n\t- MasterShiba.updatePool(uint256) (MasterShiba.sol#1202-1225)\n\t- MasterShiba.updateUserBonus(address,uint256,uint256) (MasterShiba.sol#1228-1247)\n\t- MasterShiba.validatePool(uint256) (MasterShiba.sol#1087-1090)\n\t- MasterShiba.withdraw(uint256,uint256) (MasterShiba.sol#1291-1316)\n\t- user.rewardDebt = user.amountWithBonus.mul(pool.accNovaPerShare).div(1e12) (MasterShiba.sol#1314)\n\tMasterShiba.userInfo (MasterShiba.sol#1034) can be used in cross function reentrancies:\n\t- MasterShiba.deposit(uint256,uint256) (MasterShiba.sol#1250-1288)\n\t- MasterShiba.emergencyWithdraw(uint256) (MasterShiba.sol#1319-1329)\n\t- MasterShiba.pendingNova(uint256,address) (MasterShiba.sol#1145-1161)\n\t- MasterShiba.updateUserBonus(address,uint256,uint256) (MasterShiba.sol#1228-1247)\n\t- MasterShiba.userInfo (MasterShiba.sol#1034)\n\t- MasterShiba.withdraw(uint256,uint256) (MasterShiba.sol#1291-1316)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MasterShiba",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-ShibaNova/Contracts-b6b1ce1fcaff83d360df8944309f49958842b7b8/shibanova/contracts/MasterShiba.sol",
            "function": "add",
            "impact": "Medium",
            "line": 1111,
            "line_end": 1127,
            "message": "Reentrancy in MasterShiba.add(uint256,IBEP20,uint256,bool,bool) (MasterShiba.sol#1111-1127):\n\tExternal calls:\n\t- massUpdatePools() (MasterShiba.sol#1114)\n\t\t- Nova.mint(devaddr,devMintAmount) (MasterShiba.sol#1216)\n\t\t- sNova.mint(address(this),NovaReward) (MasterShiba.sol#1218)\n\t\t- Nova.mint(address(this),NovaReward) (MasterShiba.sol#1221)\n\tState variables written after the call(s):\n\t- poolInfo.push(PoolInfo({lpToken:_lpToken,lpSupply:0,allocPoint:_allocPoint,lastRewardBlock:lastRewardBlock,accNovaPerShare:0,depositFeeBP:_depositFeeBP,isSNovaRewards:_isSNovaRewards})) (MasterShiba.sol#1118-1126)\n\tMasterShiba.poolInfo (MasterShiba.sol#1032) can be used in cross function reentrancies:\n\t- MasterShiba.add(uint256,IBEP20,uint256,bool,bool) (MasterShiba.sol#1111-1127)\n\t- MasterShiba.constructor(ShibaBEP20,ShibaBEP20,ShibaBonusAggregator,address,address,uint256,uint256) (MasterShiba.sol#1056-1085)\n\t- MasterShiba.deposit(uint256,uint256) (MasterShiba.sol#1250-1288)\n\t- MasterShiba.emergencyWithdraw(uint256) (MasterShiba.sol#1319-1329)\n\t- MasterShiba.getPoolInfo(uint256) (MasterShiba.sol#1331-1342)\n\t- MasterShiba.massUpdatePools() (MasterShiba.sol#1194-1199)\n\t- MasterShiba.pendingNova(uint256,address) (MasterShiba.sol#1145-1161)\n\t- MasterShiba.poolInfo (MasterShiba.sol#1032)\n\t- MasterShiba.poolLength() (MasterShiba.sol#1097-1099)\n\t- MasterShiba.set(uint256,uint256,uint256,bool,bool) (MasterShiba.sol#1130-1142)\n\t- MasterShiba.updatePool(uint256) (MasterShiba.sol#1202-1225)\n\t- MasterShiba.updateUserBonus(address,uint256,uint256) (MasterShiba.sol#1228-1247)\n\t- MasterShiba.validatePool(uint256) (MasterShiba.sol#1087-1090)\n\t- MasterShiba.withdraw(uint256,uint256) (MasterShiba.sol#1291-1316)\n\t- totalAllocPoint = totalAllocPoint.add(_allocPoint) (MasterShiba.sol#1117)\n\tMasterShiba.totalAllocPoint (MasterShiba.sol#1036) can be used in cross function reentrancies:\n\t- MasterShiba.add(uint256,IBEP20,uint256,bool,bool) (MasterShiba.sol#1111-1127)\n\t- MasterShiba.constructor(ShibaBEP20,ShibaBEP20,ShibaBonusAggregator,address,address,uint256,uint256) (MasterShiba.sol#1056-1085)\n\t- MasterShiba.pendingNova(uint256,address) (MasterShiba.sol#1145-1161)\n\t- MasterShiba.set(uint256,uint256,uint256,bool,bool) (MasterShiba.sol#1130-1142)\n\t- MasterShiba.totalAllocPoint (MasterShiba.sol#1036)\n\t- MasterShiba.updatePool(uint256) (MasterShiba.sol#1202-1225)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MasterShiba",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-ShibaNova/Contracts-b6b1ce1fcaff83d360df8944309f49958842b7b8/shibanova/contracts/MasterShiba.sol",
            "function": "withdraw",
            "impact": "Medium",
            "line": 1291,
            "line_end": 1316,
            "message": "Reentrancy in MasterShiba.withdraw(uint256,uint256) (MasterShiba.sol#1291-1316):\n\tExternal calls:\n\t- updatePool(_pid) (MasterShiba.sol#1296)\n\t\t- Nova.mint(devaddr,devMintAmount) (MasterShiba.sol#1216)\n\t\t- sNova.mint(address(this),NovaReward) (MasterShiba.sol#1218)\n\t\t- Nova.mint(address(this),NovaReward) (MasterShiba.sol#1221)\n\t- safeSNovaTransfer(msg.sender,pending) (MasterShiba.sol#1300)\n\t\t- transferSuccess = sNova.transfer(_to,sNovaBal) (MasterShiba.sol#1361)\n\t\t- transferSuccess = sNova.transfer(_to,_amount) (MasterShiba.sol#1363)\n\t- safeNovaTransfer(msg.sender,pending) (MasterShiba.sol#1303)\n\t\t- transferSuccess = Nova.transfer(_to,NovaBal) (MasterShiba.sol#1349)\n\t\t- transferSuccess = Nova.transfer(_to,_amount) (MasterShiba.sol#1351)\n\tState variables written after the call(s):\n\t- user.amount = user.amount.sub(_amount) (MasterShiba.sol#1307)\n\tMasterShiba.userInfo (MasterShiba.sol#1034) can be used in cross function reentrancies:\n\t- MasterShiba.deposit(uint256,uint256) (MasterShiba.sol#1250-1288)\n\t- MasterShiba.emergencyWithdraw(uint256) (MasterShiba.sol#1319-1329)\n\t- MasterShiba.pendingNova(uint256,address) (MasterShiba.sol#1145-1161)\n\t- MasterShiba.updateUserBonus(address,uint256,uint256) (MasterShiba.sol#1228-1247)\n\t- MasterShiba.userInfo (MasterShiba.sol#1034)\n\t- MasterShiba.withdraw(uint256,uint256) (MasterShiba.sol#1291-1316)\n\t- user.amountWithBonus = user.amountWithBonus.sub(_bonusAmount) (MasterShiba.sol#1309)\n\tMasterShiba.userInfo (MasterShiba.sol#1034) can be used in cross function reentrancies:\n\t- MasterShiba.deposit(uint256,uint256) (MasterShiba.sol#1250-1288)\n\t- MasterShiba.emergencyWithdraw(uint256) (MasterShiba.sol#1319-1329)\n\t- MasterShiba.pendingNova(uint256,address) (MasterShiba.sol#1145-1161)\n\t- MasterShiba.updateUserBonus(address,uint256,uint256) (MasterShiba.sol#1228-1247)\n\t- MasterShiba.userInfo (MasterShiba.sol#1034)\n\t- MasterShiba.withdraw(uint256,uint256) (MasterShiba.sol#1291-1316)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "High",
            "contract": "Ownable",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-ShibaNova/Contracts-b6b1ce1fcaff83d360df8944309f49958842b7b8/shibanova/contracts/MasterShiba.sol",
            "function": "owner",
            "impact": "Low",
            "line": 793,
            "message": "ShibaBEP20.allowance(address,address).owner (MasterShiba.sol#793) shadows:\n\t- Ownable.owner() (MasterShiba.sol#592-594) (function)\n",
            "name": "shadowing-local",
            "check": "FP"
        },
        {
            "confidence": "High",
            "contract": "ShibaBEP20",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-ShibaNova/Contracts-b6b1ce1fcaff83d360df8944309f49958842b7b8/shibanova/contracts/MasterShiba.sol",
            "function": "name",
            "impact": "Low",
            "line": 722,
            "message": "ShibaBEP20.constructor(string,string).name (MasterShiba.sol#722) shadows:\n\t- ShibaBEP20.name() (MasterShiba.sol#738-740) (function)\n\t- IBEP20.name() (MasterShiba.sol#210) (function)\n",
            "name": "shadowing-local",
            "check": "FP"
        },
        {
            "confidence": "High",
            "contract": "ShibaBEP20",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-ShibaNova/Contracts-b6b1ce1fcaff83d360df8944309f49958842b7b8/shibanova/contracts/MasterShiba.sol",
            "function": "symbol",
            "impact": "Low",
            "line": 722,
            "message": "ShibaBEP20.constructor(string,string).symbol (MasterShiba.sol#722) shadows:\n\t- ShibaBEP20.symbol() (MasterShiba.sol#752-754) (function)\n\t- IBEP20.symbol() (MasterShiba.sol#205) (function)\n",
            "name": "shadowing-local",
            "check": "FP"
        },
        {
            "confidence": "High",
            "contract": "Ownable",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-ShibaNova/Contracts-b6b1ce1fcaff83d360df8944309f49958842b7b8/shibanova/contracts/MasterShiba.sol",
            "function": "owner",
            "impact": "Low",
            "line": 956,
            "message": "ShibaBEP20._approve(address,address,uint256).owner (MasterShiba.sol#956) shadows:\n\t- Ownable.owner() (MasterShiba.sol#592-594) (function)\n",
            "name": "shadowing-local",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MasterShiba",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-ShibaNova/Contracts-b6b1ce1fcaff83d360df8944309f49958842b7b8/shibanova/contracts/MasterShiba.sol",
            "function": "set",
            "impact": "Low",
            "line": 1130,
            "line_end": 1142,
            "message": "MasterShiba.set(uint256,uint256,uint256,bool,bool) (MasterShiba.sol#1130-1142) should emit an event for: \n\t- totalAllocPoint = totalAllocPoint.sub(prevAllocPoint).add(_allocPoint) (MasterShiba.sol#1140) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MasterShiba",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-ShibaNova/Contracts-b6b1ce1fcaff83d360df8944309f49958842b7b8/shibanova/contracts/MasterShiba.sol",
            "function": "updateMinimumEmissionRate",
            "impact": "Low",
            "line": 1378,
            "line_end": 1384,
            "message": "MasterShiba.updateMinimumEmissionRate(uint256) (MasterShiba.sol#1378-1384) should emit an event for: \n\t- minimumEmissionRate = _minimumEmissionRate (MasterShiba.sol#1380) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MasterShiba",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-ShibaNova/Contracts-b6b1ce1fcaff83d360df8944309f49958842b7b8/shibanova/contracts/MasterShiba.sol",
            "function": "add",
            "impact": "Low",
            "line": 1111,
            "line_end": 1127,
            "message": "MasterShiba.add(uint256,IBEP20,uint256,bool,bool) (MasterShiba.sol#1111-1127) should emit an event for: \n\t- totalAllocPoint = totalAllocPoint.add(_allocPoint) (MasterShiba.sol#1117) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MasterShiba",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-ShibaNova/Contracts-b6b1ce1fcaff83d360df8944309f49958842b7b8/shibanova/contracts/MasterShiba.sol",
            "function": "updatePool",
            "impact": "Low",
            "line": 1202,
            "line_end": 1225,
            "message": "MasterShiba.updatePool(uint256) (MasterShiba.sol#1202-1225) has external calls inside a loop: Nova.mint(devaddr,devMintAmount) (MasterShiba.sol#1216)\n",
            "name": "calls-loop",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MasterShiba",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-ShibaNova/Contracts-b6b1ce1fcaff83d360df8944309f49958842b7b8/shibanova/contracts/MasterShiba.sol",
            "function": "updatePool",
            "impact": "Low",
            "line": 1202,
            "line_end": 1225,
            "message": "MasterShiba.updatePool(uint256) (MasterShiba.sol#1202-1225) has external calls inside a loop: sNova.mint(address(this),NovaReward) (MasterShiba.sol#1218)\n",
            "name": "calls-loop",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MasterShiba",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-ShibaNova/Contracts-b6b1ce1fcaff83d360df8944309f49958842b7b8/shibanova/contracts/MasterShiba.sol",
            "function": "updatePool",
            "impact": "Low",
            "line": 1202,
            "line_end": 1225,
            "message": "MasterShiba.updatePool(uint256) (MasterShiba.sol#1202-1225) has external calls inside a loop: Nova.mint(address(this),NovaReward) (MasterShiba.sol#1221)\n",
            "name": "calls-loop",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MasterShiba",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-ShibaNova/Contracts-b6b1ce1fcaff83d360df8944309f49958842b7b8/shibanova/contracts/MasterShiba.sol",
            "function": "withdraw",
            "impact": "Low",
            "line": 1291,
            "line_end": 1316,
            "message": "Reentrancy in MasterShiba.withdraw(uint256,uint256) (MasterShiba.sol#1291-1316):\n\tExternal calls:\n\t- updatePool(_pid) (MasterShiba.sol#1296)\n\t\t- Nova.mint(devaddr,devMintAmount) (MasterShiba.sol#1216)\n\t\t- sNova.mint(address(this),NovaReward) (MasterShiba.sol#1218)\n\t\t- Nova.mint(address(this),NovaReward) (MasterShiba.sol#1221)\n\t- safeSNovaTransfer(msg.sender,pending) (MasterShiba.sol#1300)\n\t\t- transferSuccess = sNova.transfer(_to,sNovaBal) (MasterShiba.sol#1361)\n\t\t- transferSuccess = sNova.transfer(_to,_amount) (MasterShiba.sol#1363)\n\t- safeNovaTransfer(msg.sender,pending) (MasterShiba.sol#1303)\n\t\t- transferSuccess = Nova.transfer(_to,NovaBal) (MasterShiba.sol#1349)\n\t\t- transferSuccess = Nova.transfer(_to,_amount) (MasterShiba.sol#1351)\n\t- pool.lpToken.safeTransfer(address(msg.sender),_amount) (MasterShiba.sol#1311)\n\tEvent emitted after the call(s):\n\t- Withdraw(msg.sender,_pid,_amount) (MasterShiba.sol#1315)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MasterShiba",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-ShibaNova/Contracts-b6b1ce1fcaff83d360df8944309f49958842b7b8/shibanova/contracts/MasterShiba.sol",
            "function": "deposit",
            "impact": "Low",
            "line": 1250,
            "line_end": 1288,
            "message": "Reentrancy in MasterShiba.deposit(uint256,uint256) (MasterShiba.sol#1250-1288):\n\tExternal calls:\n\t- updatePool(_pid) (MasterShiba.sol#1254)\n\t\t- Nova.mint(devaddr,devMintAmount) (MasterShiba.sol#1216)\n\t\t- sNova.mint(address(this),NovaReward) (MasterShiba.sol#1218)\n\t\t- Nova.mint(address(this),NovaReward) (MasterShiba.sol#1221)\n\t- safeSNovaTransfer(_user,pending) (MasterShiba.sol#1259)\n\t\t- transferSuccess = sNova.transfer(_to,sNovaBal) (MasterShiba.sol#1361)\n\t\t- transferSuccess = sNova.transfer(_to,_amount) (MasterShiba.sol#1363)\n\t- safeNovaTransfer(_user,pending) (MasterShiba.sol#1262)\n\t\t- transferSuccess = Nova.transfer(_to,NovaBal) (MasterShiba.sol#1349)\n\t\t- transferSuccess = Nova.transfer(_to,_amount) (MasterShiba.sol#1351)\n\t- pool.lpToken.safeTransferFrom(address(_user),address(this),_amount) (MasterShiba.sol#1267)\n\t- pool.lpToken.safeTransfer(feeAddress,depositFee) (MasterShiba.sol#1274)\n\tEvent emitted after the call(s):\n\t- Deposit(_user,_pid,_amount) (MasterShiba.sol#1287)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MasterShiba",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-ShibaNova/Contracts-b6b1ce1fcaff83d360df8944309f49958842b7b8/shibanova/contracts/MasterShiba.sol",
            "function": "emergencyWithdraw",
            "impact": "Low",
            "line": 1319,
            "line_end": 1329,
            "message": "Reentrancy in MasterShiba.emergencyWithdraw(uint256) (MasterShiba.sol#1319-1329):\n\tExternal calls:\n\t- pool.lpToken.safeTransfer(address(msg.sender),amount) (MasterShiba.sol#1327)\n\tEvent emitted after the call(s):\n\t- EmergencyWithdraw(msg.sender,_pid,amount) (MasterShiba.sol#1328)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MasterShiba",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-ShibaNova/Contracts-b6b1ce1fcaff83d360df8944309f49958842b7b8/shibanova/contracts/MasterShiba.sol",
            "function": "updateEmissionRate",
            "impact": "Informational",
            "line": 1164,
            "line_end": 1191,
            "message": "MasterShiba.updateEmissionRate() (MasterShiba.sol#1164-1191) has costly operations inside a loop:\n\t- NovaPerBlock = newEmissionRate (MasterShiba.sol#1189)\n",
            "name": "costly-loop",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "MasterShiba",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-ShibaNova/Contracts-b6b1ce1fcaff83d360df8944309f49958842b7b8/shibanova/contracts/MasterShiba.sol",
            "function": "updateEmissionRate",
            "impact": "Informational",
            "line": 1164,
            "line_end": 1191,
            "message": "MasterShiba.updateEmissionRate() (MasterShiba.sol#1164-1191) has costly operations inside a loop:\n\t- lastReductionPeriodIndex = currentIndex (MasterShiba.sol#1187)\n",
            "name": "costly-loop",
            "check": "FP"
        }
    ],
    "infos": [],
    "parser": {
        "id": "slither-0.10.0",
        "mode": "solidity",
        "version": "2024/04/30"
    }
}