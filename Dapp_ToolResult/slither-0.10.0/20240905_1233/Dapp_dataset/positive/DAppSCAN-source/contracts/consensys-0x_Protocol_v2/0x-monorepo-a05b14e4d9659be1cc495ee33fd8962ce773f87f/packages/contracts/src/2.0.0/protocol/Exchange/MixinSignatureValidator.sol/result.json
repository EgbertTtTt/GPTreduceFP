{
    "errors": [],
    "fails": [],
    "findings": [
        {
            "confidence": "Medium",
            "contract": "MixinSignatureValidator",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/consensys-0x_Protocol_v2/0x-monorepo-a05b14e4d9659be1cc495ee33fd8962ce773f87f/packages/contracts/src/2.0.0/protocol/Exchange/MixinSignatureValidator.sol",
            "function": "preSign",
            "impact": "Medium",
            "line": 817,
            "line_end": 834,
            "message": "Reentrancy in MixinSignatureValidator.preSign(bytes32,address,bytes) (MixinSignatureValidator.sol#817-834):\n\tExternal calls:\n\t- require(bool,string)(isValidSignature(hash,signerAddress,signature),INVALID_SIGNATURE) (MixinSignatureValidator.sol#825-832)\n\t\t- isValid = IWallet(signerAddress).isValidSignature(hash,signature) (MixinSignatureValidator.sol#962)\n\t\t- isValid = IValidator(validatorAddress).isValidSignature(hash,signerAddress,signature) (MixinSignatureValidator.sol#981-985)\n\tState variables written after the call(s):\n\t- preSigned[hash][signerAddress] = true (MixinSignatureValidator.sol#833)\n\tMixinSignatureValidator.preSigned (MixinSignatureValidator.sol#808) can be used in cross function reentrancies:\n\t- MixinSignatureValidator.isValidSignature(bytes32,address,bytes) (MixinSignatureValidator.sol#859-1028)\n\t- MixinSignatureValidator.preSign(bytes32,address,bytes) (MixinSignatureValidator.sol#817-834)\n\t- MixinSignatureValidator.preSigned (MixinSignatureValidator.sol#808)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        }
    ],
    "infos": [],
    "parser": {
        "id": "slither-0.10.0",
        "mode": "solidity",
        "version": "2024/04/30"
    }
}