'solc --version' running
'solc /sb/Vault.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes --allow-paths .,/sb' running
Compilation warnings/errors on /sb/Vault.sol:
Warning: This declaration shadows an existing declaration.
   --> /sb/Vault.sol:227:7:
    |
227 |       address collateral,
    |       ^^^^^^^^^^^^^^^^^^
Note: The shadowed declaration is here:
   --> /sb/Vault.sol:177:3:
    |
177 |   address public override collateral;
    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Warning: This declaration shadows an existing declaration.
   --> /sb/Vault.sol:229:7:
    |
229 |       address debt,
    |       ^^^^^^^^^^^^
Note: The shadowed declaration is here:
   --> /sb/Vault.sol:173:3:
    |
173 |   address public override debt;
    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Warning: Visibility for constructor is ignored. If you want the contract to be non-deployable, making it "abstract" is sufficient.
   --> /sb/Vault.sol:187:3:
    |
187 |   constructor() public {
    |   ^ (Relevant source part starts here and spans across multiple lines).

Warning: "selfdestruct" has been deprecated. Note that, starting from the Cancun hard fork, the underlying opcode no longer deletes the code and data associated with an account and only transfers its Ether to the beneficiary, unless executed in the same transaction in which the contract was created (see EIP-6780). Any use in newly deployed contracts is strongly discouraged even if the new behavior is taken into account. Future changes to the EVM might further reduce the functionality of the opcode.
   --> /sb/Vault.sol:268:5:
    |
268 |     selfdestruct(payable(msg.sender));
    |     ^^^^^^^^^^^^

Warning: "selfdestruct" has been deprecated. Note that, starting from the Cancun hard fork, the underlying opcode no longer deletes the code and data associated with an account and only transfers its Ether to the beneficiary, unless executed in the same transaction in which the contract was created (see EIP-6780). Any use in newly deployed contracts is strongly discouraged even if the new behavior is taken into account. Future changes to the EVM might further reduce the functionality of the opcode.
   --> /sb/Vault.sol:392:5:
    |
392 |     selfdestruct(payable(msg.sender));
    |     ^^^^^^^^^^^^



Vault.liquidate() (../../sb/Vault.sol#241-269) allows anyone to destruct the contract
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#suicidal

Vault._calculateFee() (../../sb/Vault.sol#403-412) performs a multiplication on the result of a division:
	- duration = (block.timestamp - createdAt) / 60 / 60 / 24 / 30 (../../sb/Vault.sol#409)
	- (sfrTimesV / 100) * duration (../../sb/Vault.sol#411)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply

Vault.closeVault(uint256) (../../sb/Vault.sol#378-393) uses a dangerous strict equality:
	- require(bool,string)(fee + borrow == amount_,Vault: not enough balance to payback) (../../sb/Vault.sol#381)
Vault.withdrawCollateral(uint256) (../../sb/Vault.sol#314-333) uses a dangerous strict equality:
	- require(bool,string)(IVaultManager(manager).isValidCDP(collateral,debt,test,borrow) == true,Vault: below MCR) (../../sb/Vault.sol#325-328)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities

Reentrancy in Vault.payDebt(uint256) (../../sb/Vault.sol#366-376):
	External calls:
	- fee = _calculateFee() (../../sb/Vault.sol#368)
		- assetValue = IVaultManager(manager).getAssetValue(debt,borrow) (../../sb/Vault.sol#404)
	- TransferHelper.safeTransferFrom(debt,msg.sender,address(this),amount_) (../../sb/Vault.sol#371)
	- left = _sendFee(debt,amount_,fee) (../../sb/Vault.sol#372)
		- (success,data) = token.call(abi.encodeWithSelector(0xa9059cbb,to,value)) (../../sb/Vault.sol#21)
		- TransferHelper.safeTransfer(asset_,dividend,half) (../../sb/Vault.sol#433)
		- TransferHelper.safeTransfer(asset_,feeTo,half) (../../sb/Vault.sol#434)
		- TransferHelper.safeTransfer(asset_,dividend,third) (../../sb/Vault.sol#437)
		- TransferHelper.safeTransfer(asset_,feeTo,third) (../../sb/Vault.sol#438)
		- TransferHelper.safeTransfer(asset_,treasury,third) (../../sb/Vault.sol#439)
		- TransferHelper.safeTransfer(asset_,feeTo,fee_) (../../sb/Vault.sol#441)
	- _burnMTRFromVault(left) (../../sb/Vault.sol#373)
		- IStablecoin(debt).burn(amount_) (../../sb/Vault.sol#400)
	State variables written after the call(s):
	- borrow -= left (../../sb/Vault.sol#374)
	Vault.borrow (../../sb/Vault.sol#181) can be used in cross function reentrancies:
	- Vault._calculateFee() (../../sb/Vault.sol#403-412)
	- Vault.borrow (../../sb/Vault.sol#181)
	- Vault.closeVault(uint256) (../../sb/Vault.sol#378-393)
	- Vault.getDebt() (../../sb/Vault.sol#414-416)
	- Vault.initialize(address,uint256,address,address,address,uint256,address,address) (../../sb/Vault.sol#201-220)
	- Vault.payDebt(uint256) (../../sb/Vault.sol#366-376)
	- Vault.withdrawCollateral(uint256) (../../sb/Vault.sol#314-333)
	- Vault.withdrawCollateralNative(uint256) (../../sb/Vault.sol#289-312)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1

IVault.getStatus().collateral (../../sb/Vault.sol#68) shadows:
	- IVault.collateral() (../../sb/Vault.sol#54) (function)
IVault.getStatus().debt (../../sb/Vault.sol#68) shadows:
	- IVault.debt() (../../sb/Vault.sol#50) (function)
Vault.getStatus().collateral (../../sb/Vault.sol#227) shadows:
	- Vault.collateral (../../sb/Vault.sol#177) (state variable)
	- IVault.collateral() (../../sb/Vault.sol#54) (function)
Vault.getStatus().debt (../../sb/Vault.sol#229) shadows:
	- Vault.debt (../../sb/Vault.sol#173) (state variable)
	- IVault.debt() (../../sb/Vault.sol#50) (function)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing

Vault.initialize(address,uint256,address,address,address,uint256,address,address) (../../sb/Vault.sol#201-220) should emit an event for: 
	- v1 = v1_ (../../sb/Vault.sol#215) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-access-control

Vault.initialize(address,uint256,address,address,address,uint256,address,address) (../../sb/Vault.sol#201-220) should emit an event for: 
	- vaultId = vaultId_ (../../sb/Vault.sol#212) 
	- borrow = amount_ (../../sb/Vault.sol#216) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-arithmetic

Vault.initialize(address,uint256,address,address,address,uint256,address,address).collateral_ (../../sb/Vault.sol#204) lacks a zero-check on :
		- collateral = collateral_ (../../sb/Vault.sol#213)
Vault.initialize(address,uint256,address,address,address,uint256,address,address).debt_ (../../sb/Vault.sol#205) lacks a zero-check on :
		- debt = debt_ (../../sb/Vault.sol#214)
Vault.initialize(address,uint256,address,address,address,uint256,address,address).v1_ (../../sb/Vault.sol#206) lacks a zero-check on :
		- v1 = v1_ (../../sb/Vault.sol#215)
Vault.initialize(address,uint256,address,address,address,uint256,address,address).v2Factory_ (../../sb/Vault.sol#208) lacks a zero-check on :
		- v2Factory = v2Factory_ (../../sb/Vault.sol#217)
Vault.initialize(address,uint256,address,address,address,uint256,address,address).weth_ (../../sb/Vault.sol#209) lacks a zero-check on :
		- WETH = weth_ (../../sb/Vault.sol#218)
Vault.initialize(address,uint256,address,address,address,uint256,address,address).manager_ (../../sb/Vault.sol#202) lacks a zero-check on :
		- manager = manager_ (../../sb/Vault.sol#219)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

Reentrancy in Vault.closeVault(uint256) (../../sb/Vault.sol#378-393):
	External calls:
	- fee = _calculateFee() (../../sb/Vault.sol#380)
		- assetValue = IVaultManager(manager).getAssetValue(debt,borrow) (../../sb/Vault.sol#404)
	- TransferHelper.safeTransferFrom(debt,msg.sender,address(this),amount_) (../../sb/Vault.sol#383)
	- left = _sendFee(debt,amount_,fee) (../../sb/Vault.sol#385)
		- (success,data) = token.call(abi.encodeWithSelector(0xa9059cbb,to,value)) (../../sb/Vault.sol#21)
		- TransferHelper.safeTransfer(asset_,dividend,half) (../../sb/Vault.sol#433)
		- TransferHelper.safeTransfer(asset_,feeTo,half) (../../sb/Vault.sol#434)
		- TransferHelper.safeTransfer(asset_,dividend,third) (../../sb/Vault.sol#437)
		- TransferHelper.safeTransfer(asset_,feeTo,third) (../../sb/Vault.sol#438)
		- TransferHelper.safeTransfer(asset_,treasury,third) (../../sb/Vault.sol#439)
		- TransferHelper.safeTransfer(asset_,feeTo,fee_) (../../sb/Vault.sol#441)
	- _burnMTRFromVault(left) (../../sb/Vault.sol#387)
		- IStablecoin(debt).burn(amount_) (../../sb/Vault.sol#400)
	- _burnV1FromVault() (../../sb/Vault.sol#389)
		- IV1(v1).burnFromVault(vaultId) (../../sb/Vault.sol#396)
	Event emitted after the call(s):
	- CloseVault(vaultId,amount_,fee) (../../sb/Vault.sol#390)
Reentrancy in Vault.depositCollateral(uint256) (../../sb/Vault.sol#278-286):
	External calls:
	- TransferHelper.safeTransferFrom(collateral,msg.sender,address(this),amount_) (../../sb/Vault.sol#279-284)
	Event emitted after the call(s):
	- DepositCollateral(vaultId,amount_) (../../sb/Vault.sol#285)
Reentrancy in Vault.depositCollateralNative() (../../sb/Vault.sol#271-276):
	External calls:
	- IWETH(WETH).deposit{value: msg.value}() (../../sb/Vault.sol#274)
	Event emitted after the call(s):
	- DepositCollateral(vaultId,msg.value) (../../sb/Vault.sol#275)
Reentrancy in Vault.liquidate() (../../sb/Vault.sol#241-269):
	External calls:
	- require(bool,string)(! IVaultManager(manager).isValidCDP(collateral,debt,IERC20Minimal(collateral).balanceOf(address(this)),IERC20Minimal(debt).balanceOf(address(this))),Vault: Position is still safe) (../../sb/Vault.sol#242-250)
	- left = _sendFee(collateral,balance,liquidationFee) (../../sb/Vault.sol#260)
		- (success,data) = token.call(abi.encodeWithSelector(0xa9059cbb,to,value)) (../../sb/Vault.sol#21)
		- TransferHelper.safeTransfer(asset_,dividend,half) (../../sb/Vault.sol#433)
		- TransferHelper.safeTransfer(asset_,feeTo,half) (../../sb/Vault.sol#434)
		- TransferHelper.safeTransfer(asset_,dividend,third) (../../sb/Vault.sol#437)
		- TransferHelper.safeTransfer(asset_,feeTo,third) (../../sb/Vault.sol#438)
		- TransferHelper.safeTransfer(asset_,treasury,third) (../../sb/Vault.sol#439)
		- TransferHelper.safeTransfer(asset_,feeTo,fee_) (../../sb/Vault.sol#441)
	- TransferHelper.safeTransfer(collateral,liquidator,left) (../../sb/Vault.sol#263)
	- _burnV1FromVault() (../../sb/Vault.sol#265)
		- IV1(v1).burnFromVault(vaultId) (../../sb/Vault.sol#396)
	Event emitted after the call(s):
	- Liquidated(vaultId,collateral,balance) (../../sb/Vault.sol#266)
Reentrancy in Vault.payDebt(uint256) (../../sb/Vault.sol#366-376):
	External calls:
	- fee = _calculateFee() (../../sb/Vault.sol#368)
		- assetValue = IVaultManager(manager).getAssetValue(debt,borrow) (../../sb/Vault.sol#404)
	- TransferHelper.safeTransferFrom(debt,msg.sender,address(this),amount_) (../../sb/Vault.sol#371)
	- left = _sendFee(debt,amount_,fee) (../../sb/Vault.sol#372)
		- (success,data) = token.call(abi.encodeWithSelector(0xa9059cbb,to,value)) (../../sb/Vault.sol#21)
		- TransferHelper.safeTransfer(asset_,dividend,half) (../../sb/Vault.sol#433)
		- TransferHelper.safeTransfer(asset_,feeTo,half) (../../sb/Vault.sol#434)
		- TransferHelper.safeTransfer(asset_,dividend,third) (../../sb/Vault.sol#437)
		- TransferHelper.safeTransfer(asset_,feeTo,third) (../../sb/Vault.sol#438)
		- TransferHelper.safeTransfer(asset_,treasury,third) (../../sb/Vault.sol#439)
		- TransferHelper.safeTransfer(asset_,feeTo,fee_) (../../sb/Vault.sol#441)
	- _burnMTRFromVault(left) (../../sb/Vault.sol#373)
		- IStablecoin(debt).burn(amount_) (../../sb/Vault.sol#400)
	Event emitted after the call(s):
	- PayBack(vaultId,borrow,fee,amount_) (../../sb/Vault.sol#375)
Reentrancy in Vault.withdrawCollateral(uint256) (../../sb/Vault.sol#314-333):
	External calls:
	- require(bool,string)(IVaultManager(manager).isValidCDP(collateral,debt,test,borrow) == true,Vault: below MCR) (../../sb/Vault.sol#325-328)
	- TransferHelper.safeTransfer(collateral,msg.sender,amount_) (../../sb/Vault.sol#331)
	Event emitted after the call(s):
	- WithdrawCollateral(vaultId,amount_) (../../sb/Vault.sol#332)
Reentrancy in Vault.withdrawCollateralNative(uint256) (../../sb/Vault.sol#289-312):
	External calls:
	- require(bool,string)(IVaultManager(manager).isValidCDP(collateral,debt,IERC20Minimal(collateral).balanceOf(address(this)) - amount_,borrow),Vault: below MCR) (../../sb/Vault.sol#297-305)
	- IWETH(WETH).withdraw(amount_) (../../sb/Vault.sol#308)
	- TransferHelper.safeTransferETH(msg.sender,address(this).balance) (../../sb/Vault.sol#310)
	Event emitted after the call(s):
	- WithdrawCollateral(vaultId,amount_) (../../sb/Vault.sol#311)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

Vault.withdrawCollateralNative(uint256) (../../sb/Vault.sol#289-312) uses timestamp for comparisons
	Dangerous comparisons:
	- borrow != 0 (../../sb/Vault.sol#296)
	- require(bool,string)(IVaultManager(manager).isValidCDP(collateral,debt,IERC20Minimal(collateral).balanceOf(address(this)) - amount_,borrow),Vault: below MCR) (../../sb/Vault.sol#297-305)
Vault.withdrawCollateral(uint256) (../../sb/Vault.sol#314-333) uses timestamp for comparisons
	Dangerous comparisons:
	- borrow != 0 (../../sb/Vault.sol#323)
	- require(bool,string)(IVaultManager(manager).isValidCDP(collateral,debt,test,borrow) == true,Vault: below MCR) (../../sb/Vault.sol#325-328)
Vault.closeVault(uint256) (../../sb/Vault.sol#378-393) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(fee + borrow == amount_,Vault: not enough balance to payback) (../../sb/Vault.sol#381)
Vault._calculateFee() (../../sb/Vault.sol#403-412) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(sfrTimesV >= assetValue) (../../sb/Vault.sol#410)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

Vault.withdrawCollateral(uint256) (../../sb/Vault.sol#314-333) compares to a boolean constant:
	-require(bool,string)(IVaultManager(manager).isValidCDP(collateral,debt,test,borrow) == true,Vault: below MCR) (../../sb/Vault.sol#325-328)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#boolean-equality

TransferHelper.safeApprove(address,address,uint256) (../../sb/Vault.sol#13-17) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code

Pragma version^0.8.0 (../../sb/Vault.sol#1) allows old versions
solc-0.8.27 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Low level call in TransferHelper.safeApprove(address,address,uint256) (../../sb/Vault.sol#13-17):
	- (success,data) = token.call(abi.encodeWithSelector(0x095ea7b3,to,value)) (../../sb/Vault.sol#15)
Low level call in TransferHelper.safeTransfer(address,address,uint256) (../../sb/Vault.sol#19-23):
	- (success,data) = token.call(abi.encodeWithSelector(0xa9059cbb,to,value)) (../../sb/Vault.sol#21)
Low level call in TransferHelper.safeTransferFrom(address,address,address,uint256) (../../sb/Vault.sol#25-29):
	- (success,data) = token.call(abi.encodeWithSelector(0x23b872dd,from,to,value)) (../../sb/Vault.sol#27)
Low level call in TransferHelper.safeTransferETH(address,uint256) (../../sb/Vault.sol#31-34):
	- (success) = to.call{value: value}(new bytes(0)) (../../sb/Vault.sol#32)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls

Function IVault.WETH() (../../sb/Vault.sol#62) is not in mixedCase
Variable Vault.WETH (../../sb/Vault.sol#185) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Vault.createdAt (../../sb/Vault.sol#183) should be immutable 
Vault.factory (../../sb/Vault.sol#171) should be immutable 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-immutable
/sb/Vault.sol analyzed (10 contracts with 93 detectors), 40 result(s) found
