{
    "errors": [],
    "fails": [],
    "findings": [
        {
            "confidence": "Medium",
            "contract": "StakingPool",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Hacken-TrustSwap-V1/code/StakingPool.sol",
            "function": "withdrawRewardsOnly",
            "impact": "High",
            "line": 270,
            "line_end": 313,
            "message": "StakingPool.withdrawRewardsOnly() (StakingPool.sol#270-313) ignores return value by rewardToken.transfer(msg.sender,rewardAmount) (StakingPool.sol#311)\n",
            "name": "unchecked-transfer",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StakingPool",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Hacken-TrustSwap-V1/code/StakingPool.sol",
            "function": "ownerSetPoolRewards",
            "impact": "High",
            "line": 120,
            "line_end": 134,
            "message": "StakingPool.ownerSetPoolRewards(uint256) (StakingPool.sol#120-134) ignores return value by rewardToken.transferFrom(msg.sender,this,_rewardAmount) (StakingPool.sol#132)\n",
            "name": "unchecked-transfer",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StakingPool",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Hacken-TrustSwap-V1/code/StakingPool.sol",
            "function": "withdrawStaking",
            "impact": "High",
            "line": 207,
            "line_end": 267,
            "message": "StakingPool.withdrawStaking(uint256) (StakingPool.sol#207-267) ignores return value by tswap.transfer(msg.sender,amount) (StakingPool.sol#263)\n",
            "name": "unchecked-transfer",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StakingPool",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Hacken-TrustSwap-V1/code/StakingPool.sol",
            "function": "withdrawStaking",
            "impact": "High",
            "line": 207,
            "line_end": 267,
            "message": "StakingPool.withdrawStaking(uint256) (StakingPool.sol#207-267) ignores return value by rewardToken.transfer(msg.sender,rewardAmount) (StakingPool.sol#262)\n",
            "name": "unchecked-transfer",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StakingPool",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Hacken-TrustSwap-V1/code/StakingPool.sol",
            "function": "stake",
            "impact": "High",
            "line": 137,
            "line_end": 153,
            "message": "StakingPool.stake(uint256) (StakingPool.sol#137-153) ignores return value by tswap.transferFrom(msg.sender,this,amount) (StakingPool.sol#151)\n",
            "name": "unchecked-transfer",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StakingPool",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Hacken-TrustSwap-V1/code/StakingPool.sol",
            "function": "ownerSetPoolRewards",
            "impact": "Low",
            "line": 120,
            "line_end": 134,
            "message": "Reentrancy in StakingPool.ownerSetPoolRewards(uint256) (StakingPool.sol#120-134):\n\tExternal calls:\n\t- rewardToken.transferFrom(msg.sender,this,_rewardAmount) (StakingPool.sol#132)\n\tEvent emitted after the call(s):\n\t- OwnerSetReward(_rewardAmount) (StakingPool.sol#133)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StakingPool",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Hacken-TrustSwap-V1/code/StakingPool.sol",
            "function": "withdrawStaking",
            "impact": "Low",
            "line": 207,
            "line_end": 267,
            "message": "Reentrancy in StakingPool.withdrawStaking(uint256) (StakingPool.sol#207-267):\n\tExternal calls:\n\t- rewardToken.transfer(msg.sender,rewardAmount) (StakingPool.sol#262)\n\t- tswap.transfer(msg.sender,amount) (StakingPool.sol#263)\n\tEvent emitted after the call(s):\n\t- RewardWithdrawal(msg.sender,rewardAmount) (StakingPool.sol#265)\n\t- StakingWithdrawal(msg.sender,amount) (StakingPool.sol#266)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StakingPool",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Hacken-TrustSwap-V1/code/StakingPool.sol",
            "function": "withdrawRewardsOnly",
            "impact": "Low",
            "line": 270,
            "line_end": 313,
            "message": "Reentrancy in StakingPool.withdrawRewardsOnly() (StakingPool.sol#270-313):\n\tExternal calls:\n\t- rewardToken.transfer(msg.sender,rewardAmount) (StakingPool.sol#311)\n\tEvent emitted after the call(s):\n\t- RewardWithdrawal(msg.sender,rewardAmount) (StakingPool.sol#312)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StakingPool",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Hacken-TrustSwap-V1/code/StakingPool.sol",
            "function": "stake",
            "impact": "Low",
            "line": 137,
            "line_end": 153,
            "message": "Reentrancy in StakingPool.stake(uint256) (StakingPool.sol#137-153):\n\tExternal calls:\n\t- tswap.transferFrom(msg.sender,this,amount) (StakingPool.sol#151)\n\tEvent emitted after the call(s):\n\t- Staked(msg.sender,amount) (StakingPool.sol#152)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StakingPool",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Hacken-TrustSwap-V1/code/StakingPool.sol",
            "function": "stake",
            "impact": "Low",
            "line": 137,
            "line_end": 153,
            "message": "StakingPool.stake(uint256) (StakingPool.sol#137-153) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(now < poolEndTime,Staking pool is closed) (StakingPool.sol#139)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StakingPool",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Hacken-TrustSwap-V1/code/StakingPool.sol",
            "function": "withdrawRewardsOnly",
            "impact": "Low",
            "line": 270,
            "line_end": 313,
            "message": "StakingPool.withdrawRewardsOnly() (StakingPool.sol#270-313) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(_rwdAmount > 0,You do not have enough rewards) (StakingPool.sol#272)\n\t- now > poolEndTime (StakingPool.sol#285)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StakingPool",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Hacken-TrustSwap-V1/code/StakingPool.sol",
            "function": "calculateReward",
            "impact": "Low",
            "line": 174,
            "line_end": 204,
            "message": "StakingPool.calculateReward(address) (StakingPool.sol#174-204) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- now > poolEndTime (StakingPool.sol#186)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StakingPool",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Hacken-TrustSwap-V1/code/StakingPool.sol",
            "function": "withdrawStaking",
            "impact": "Low",
            "line": 207,
            "line_end": 267,
            "message": "StakingPool.withdrawStaking(uint256) (StakingPool.sol#207-267) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- now > poolEndTime (StakingPool.sol#221)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "StakingPool",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/Hacken-TrustSwap-V1/code/StakingPool.sol",
            "function": "ownerSetPoolRewards",
            "impact": "Low",
            "line": 120,
            "line_end": 134,
            "message": "StakingPool.ownerSetPoolRewards(uint256) (StakingPool.sol#120-134) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(poolStartTime == 0,Pool rewards already set) (StakingPool.sol#121)\n",
            "name": "timestamp",
            "check": "FP"
        }
    ],
    "infos": [],
    "parser": {
        "id": "slither-0.10.0",
        "mode": "solidity",
        "version": "2024/04/30"
    }
}