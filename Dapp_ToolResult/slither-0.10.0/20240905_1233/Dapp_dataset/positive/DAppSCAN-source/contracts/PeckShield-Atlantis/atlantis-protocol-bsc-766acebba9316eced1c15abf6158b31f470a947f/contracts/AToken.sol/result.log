'solc --version' running
'solc /sb/AToken.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/sb' running

EIP20NonStandardInterface (../../sb/AToken.sol#113-175) has incorrect ERC20 function interface:EIP20NonStandardInterface.transfer(address,uint256) (../../sb/AToken.sol#139)
EIP20NonStandardInterface (../../sb/AToken.sol#113-175) has incorrect ERC20 function interface:EIP20NonStandardInterface.transferFrom(address,address,uint256) (../../sb/AToken.sol#153)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-erc20-interface

AToken.accrueInterest() (../../sb/AToken.sol#1580-1658) uses a dangerous strict equality:
	- accrualBlockNumberPrior == currentBlockNumber (../../sb/AToken.sol#1586)
AToken.accrueInterest() (../../sb/AToken.sol#1580-1658) uses a dangerous strict equality:
	- require(bool,string)(mathErr == MathError.NO_ERROR,could not calculate block delta) (../../sb/AToken.sol#1602)
AToken.balanceOfUnderlying(address) (../../sb/AToken.sol#1386-1391) uses a dangerous strict equality:
	- require(bool,string)(mErr == MathError.NO_ERROR,balance could not be calculated) (../../sb/AToken.sol#1389)
AToken.borrowBalanceStored(address) (../../sb/AToken.sol#1467-1471) uses a dangerous strict equality:
	- require(bool,string)(err == MathError.NO_ERROR,borrowBalanceStored: borrowBalanceStoredInternal failed) (../../sb/AToken.sol#1469)
CarefulMath.divUInt(uint256,uint256) (../../sb/AToken.sol#726-732) uses a dangerous strict equality:
	- b == 0 (../../sb/AToken.sol#727)
AToken.exchangeRateStored() (../../sb/AToken.sol#1524-1528) uses a dangerous strict equality:
	- require(bool,string)(err == MathError.NO_ERROR,exchangeRateStored: exchangeRateStoredInternal failed) (../../sb/AToken.sol#1526)
AToken.exchangeRateStoredInternal() (../../sb/AToken.sol#1535-1565) uses a dangerous strict equality:
	- _totalSupply == 0 (../../sb/AToken.sol#1537)
AToken.initialize(ComptrollerInterface,InterestRateModel,uint256,string,string,uint8) (../../sb/AToken.sol#1221-1252) uses a dangerous strict equality:
	- require(bool,string)(accrualBlockNumber == 0 && borrowIndex == 0,market may only be initialized once) (../../sb/AToken.sol#1228)
AToken.initialize(ComptrollerInterface,InterestRateModel,uint256,string,string,uint8) (../../sb/AToken.sol#1221-1252) uses a dangerous strict equality:
	- require(bool,string)(err == uint256(Error.NO_ERROR),setting comptroller failed) (../../sb/AToken.sol#1236)
AToken.initialize(ComptrollerInterface,InterestRateModel,uint256,string,string,uint8) (../../sb/AToken.sol#1221-1252) uses a dangerous strict equality:
	- require(bool,string)(err == uint256(Error.NO_ERROR),setting interest rate model failed) (../../sb/AToken.sol#1244)
AToken.liquidateBorrowFresh(address,address,uint256,ATokenInterface) (../../sb/AToken.sol#2152-2221) uses a dangerous strict equality:
	- require(bool,string)(amountSeizeError == uint256(Error.NO_ERROR),LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED) (../../sb/AToken.sol#2197)
AToken.liquidateBorrowFresh(address,address,uint256,ATokenInterface) (../../sb/AToken.sol#2152-2221) uses a dangerous strict equality:
	- require(bool,string)(seizeError == uint256(Error.NO_ERROR),token seizure failed) (../../sb/AToken.sol#2211)
AToken.mintFresh(address,uint256) (../../sb/AToken.sol#1693-1758) uses a dangerous strict equality:
	- require(bool,string)(vars.mathErr == MathError.NO_ERROR,MINT_EXCHANGE_CALCULATION_FAILED) (../../sb/AToken.sol#1732)
AToken.mintFresh(address,uint256) (../../sb/AToken.sol#1693-1758) uses a dangerous strict equality:
	- require(bool,string)(vars.mathErr == MathError.NO_ERROR,MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED) (../../sb/AToken.sol#1740)
AToken.mintFresh(address,uint256) (../../sb/AToken.sol#1693-1758) uses a dangerous strict equality:
	- require(bool,string)(vars.mathErr == MathError.NO_ERROR,MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED) (../../sb/AToken.sol#1743)
Exponential.mulExp(ExponentialNoError.Exp,ExponentialNoError.Exp) (../../sb/AToken.sol#1095-1115) uses a dangerous strict equality:
	- assert(bool)(err2 == MathError.NO_ERROR) (../../sb/AToken.sol#1112)
CarefulMath.mulUInt(uint256,uint256) (../../sb/AToken.sol#709-721) uses a dangerous strict equality:
	- a == 0 (../../sb/AToken.sol#710)
ExponentialNoError.mul_(uint256,uint256,string) (../../sb/AToken.sol#919-926) uses a dangerous strict equality:
	- a == 0 || b == 0 (../../sb/AToken.sol#920)
ExponentialNoError.mul_(uint256,uint256,string) (../../sb/AToken.sol#919-926) uses a dangerous strict equality:
	- require(bool,string)(c / a == b,errorMessage) (../../sb/AToken.sol#924)
AToken.repayBorrowFresh(address,address,uint256) (../../sb/AToken.sol#2049-2116) uses a dangerous strict equality:
	- require(bool,string)(vars.mathErr == MathError.NO_ERROR,REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED) (../../sb/AToken.sol#2098)
AToken.repayBorrowFresh(address,address,uint256) (../../sb/AToken.sol#2049-2116) uses a dangerous strict equality:
	- require(bool,string)(vars.mathErr == MathError.NO_ERROR,REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED) (../../sb/AToken.sol#2101)
AToken.seizeInternal(address,address,address,uint256) (../../sb/AToken.sol#2258-2318) uses a dangerous strict equality:
	- require(bool,string)(vars.mathErr == MathError.NO_ERROR,exchange rate math error) (../../sb/AToken.sol#2286)
AToken.transfer(address,uint256) (../../sb/AToken.sol#1331-1333) uses a dangerous strict equality:
	- transferTokens(msg.sender,msg.sender,dst,amount) == uint256(Error.NO_ERROR) (../../sb/AToken.sol#1332)
AToken.transferFrom(address,address,uint256) (../../sb/AToken.sol#1342-1344) uses a dangerous strict equality:
	- transferTokens(msg.sender,src,dst,amount) == uint256(Error.NO_ERROR) (../../sb/AToken.sol#1343)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities

Reentrancy in AToken.liquidateBorrowInternal(address,uint256,ATokenInterface) (../../sb/AToken.sol#2126-2141):
	External calls:
	- error = aTokenCollateral.accrueInterest() (../../sb/AToken.sol#2133)
	- liquidateBorrowFresh(msg.sender,borrower,repayAmount,aTokenCollateral) (../../sb/AToken.sol#2140)
		- allowed = comptroller.seizeAllowed(address(this),seizerToken,liquidator,borrower,seizeTokens) (../../sb/AToken.sol#2260)
		- allowed = comptroller.liquidateBorrowAllowed(address(this),address(aTokenCollateral),liquidator,borrower,repayAmount) (../../sb/AToken.sol#2154)
		- allowed = comptroller.repayBorrowAllowed(address(this),payer,borrower,repayAmount) (../../sb/AToken.sol#2051)
		- seizeError = aTokenCollateral.seize(liquidator,borrower,seizeTokens) (../../sb/AToken.sol#2207)
	State variables written after the call(s):
	- liquidateBorrowFresh(msg.sender,borrower,repayAmount,aTokenCollateral) (../../sb/AToken.sol#2140)
		- totalBorrows = vars.totalBorrowsNew (../../sb/AToken.sol#2106)
	ATokenStorage.totalBorrows (../../sb/AToken.sol#252) can be used in cross function reentrancies:
	- AToken.accrueInterest() (../../sb/AToken.sol#1580-1658)
	- AToken.borrowRatePerBlock() (../../sb/AToken.sol#1431-1433)
	- AToken.exchangeRateStoredInternal() (../../sb/AToken.sol#1535-1565)
	- AToken.supplyRatePerBlock() (../../sb/AToken.sol#1439-1441)
	- ATokenStorage.totalBorrows (../../sb/AToken.sol#252)
	- liquidateBorrowFresh(msg.sender,borrower,repayAmount,aTokenCollateral) (../../sb/AToken.sol#2140)
		- totalReserves = vars.totalReservesNew (../../sb/AToken.sol#2303)
	ATokenStorage.totalReserves (../../sb/AToken.sol#257) can be used in cross function reentrancies:
	- AToken.accrueInterest() (../../sb/AToken.sol#1580-1658)
	- AToken.borrowRatePerBlock() (../../sb/AToken.sol#1431-1433)
	- AToken.exchangeRateStoredInternal() (../../sb/AToken.sol#1535-1565)
	- AToken.supplyRatePerBlock() (../../sb/AToken.sol#1439-1441)
	- ATokenStorage.totalReserves (../../sb/AToken.sol#257)
Reentrancy in AToken.redeemFresh(address,uint256,uint256) (../../sb/AToken.sol#1810-1904):
	External calls:
	- allowed = comptroller.redeemAllowed(address(this),redeemer,vars.redeemTokens) (../../sb/AToken.sol#1850)
	State variables written after the call(s):
	- totalSupply = vars.totalSupplyNew (../../sb/AToken.sol#1893)
	ATokenStorage.totalSupply (../../sb/AToken.sol#262) can be used in cross function reentrancies:
	- AToken.exchangeRateStoredInternal() (../../sb/AToken.sol#1535-1565)
	- ATokenStorage.totalSupply (../../sb/AToken.sol#262)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1

AToken._addReservesFresh(uint256).actualAddAmount (../../sb/AToken.sol#2468) is a local variable never initialized
AToken.borrowFresh(address,uint256).vars (../../sb/AToken.sol#1951) is a local variable never initialized
AToken.redeemFresh(address,uint256,uint256).vars (../../sb/AToken.sol#1813) is a local variable never initialized
AToken.repayBorrowFresh(address,address,uint256).vars (../../sb/AToken.sol#2061) is a local variable never initialized
AToken.mintFresh(address,uint256).vars (../../sb/AToken.sol#1705) is a local variable never initialized
AToken.seizeInternal(address,address,address,uint256).vars (../../sb/AToken.sol#2270) is a local variable never initialized
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-local-variables

Exponential.divScalarByExpTruncate(uint256,ExponentialNoError.Exp).fraction (../../sb/AToken.sol#1084) shadows:
	- ExponentialNoError.fraction(uint256,uint256) (../../sb/AToken.sol#961-963) (function)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing

AToken.initialize(ComptrollerInterface,InterestRateModel,uint256,string,string,uint8) (../../sb/AToken.sol#1221-1252) should emit an event for: 
	- initialExchangeRateMantissa = initialExchangeRateMantissa_ (../../sb/AToken.sol#1231) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-arithmetic

AToken._setPendingAdmin(address).newPendingAdmin (../../sb/AToken.sol#2329) lacks a zero-check on :
		- pendingAdmin = newPendingAdmin (../../sb/AToken.sol#2339)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

Reentrancy in AToken.borrowFresh(address,uint256) (../../sb/AToken.sol#1934-1998):
	External calls:
	- allowed = comptroller.borrowAllowed(address(this),borrower,borrowAmount) (../../sb/AToken.sol#1936)
	State variables written after the call(s):
	- accountBorrows[borrower].principal = vars.accountBorrowsNew (../../sb/AToken.sol#1986)
	- accountBorrows[borrower].interestIndex = borrowIndex (../../sb/AToken.sol#1987)
	- totalBorrows = vars.totalBorrowsNew (../../sb/AToken.sol#1988)
Reentrancy in AToken.mintFresh(address,uint256) (../../sb/AToken.sol#1693-1758):
	External calls:
	- allowed = comptroller.mintAllowed(address(this),minter,mintAmount) (../../sb/AToken.sol#1695)
	State variables written after the call(s):
	- accountTokens[minter] = vars.accountTokensNew (../../sb/AToken.sol#1747)
	- totalSupply = vars.totalSupplyNew (../../sb/AToken.sol#1746)
Reentrancy in AToken.redeemFresh(address,uint256,uint256) (../../sb/AToken.sol#1810-1904):
	External calls:
	- allowed = comptroller.redeemAllowed(address(this),redeemer,vars.redeemTokens) (../../sb/AToken.sol#1850)
	State variables written after the call(s):
	- accountTokens[redeemer] = vars.accountTokensNew (../../sb/AToken.sol#1894)
Reentrancy in AToken.repayBorrowFresh(address,address,uint256) (../../sb/AToken.sol#2049-2116):
	External calls:
	- allowed = comptroller.repayBorrowAllowed(address(this),payer,borrower,repayAmount) (../../sb/AToken.sol#2051)
	State variables written after the call(s):
	- accountBorrows[borrower].principal = vars.accountBorrowsNew (../../sb/AToken.sol#2104)
	- accountBorrows[borrower].interestIndex = borrowIndex (../../sb/AToken.sol#2105)
	- totalBorrows = vars.totalBorrowsNew (../../sb/AToken.sol#2106)
Reentrancy in AToken.seizeInternal(address,address,address,uint256) (../../sb/AToken.sol#2258-2318):
	External calls:
	- allowed = comptroller.seizeAllowed(address(this),seizerToken,liquidator,borrower,seizeTokens) (../../sb/AToken.sol#2260)
	State variables written after the call(s):
	- accountTokens[borrower] = vars.borrowerTokensNew (../../sb/AToken.sol#2305)
	- accountTokens[liquidator] = vars.liquidatorTokensNew (../../sb/AToken.sol#2306)
	- totalReserves = vars.totalReservesNew (../../sb/AToken.sol#2303)
	- totalSupply = vars.totalSupplyNew (../../sb/AToken.sol#2304)
Reentrancy in AToken.transferTokens(address,address,address,uint256) (../../sb/AToken.sol#1263-1323):
	External calls:
	- allowed = comptroller.transferAllowed(address(this),src,dst,tokens) (../../sb/AToken.sol#1265)
	State variables written after the call(s):
	- accountTokens[src] = sraTokensNew (../../sb/AToken.sol#1308)
	- accountTokens[dst] = dstTokensNew (../../sb/AToken.sol#1309)
	- transferAllowances[src][spender] = allowanceNew (../../sb/AToken.sol#1313)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

Reentrancy in AToken.borrowFresh(address,uint256) (../../sb/AToken.sol#1934-1998):
	External calls:
	- allowed = comptroller.borrowAllowed(address(this),borrower,borrowAmount) (../../sb/AToken.sol#1936)
	Event emitted after the call(s):
	- Borrow(borrower,borrowAmount,vars.accountBorrowsNew,vars.totalBorrowsNew) (../../sb/AToken.sol#1991)
	- Failure(uint256(err),uint256(info),opaqueError) (../../sb/AToken.sol#682)
		- failOpaque(Error.MATH_ERROR,FailureInfo.BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,uint256(vars.mathErr)) (../../sb/AToken.sol#1965)
	- Failure(uint256(err),uint256(info),opaqueError) (../../sb/AToken.sol#682)
		- failOpaque(Error.MATH_ERROR,FailureInfo.BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,uint256(vars.mathErr)) (../../sb/AToken.sol#1970)
	- Failure(uint256(err),uint256(info),0) (../../sb/AToken.sol#673)
		- fail(Error.MARKET_NOT_FRESH,FailureInfo.BORROW_FRESHNESS_CHECK) (../../sb/AToken.sol#1943)
	- Failure(uint256(err),uint256(info),0) (../../sb/AToken.sol#673)
		- fail(Error.TOKEN_INSUFFICIENT_CASH,FailureInfo.BORROW_CASH_NOT_AVAILABLE) (../../sb/AToken.sol#1948)
	- Failure(uint256(err),uint256(info),opaqueError) (../../sb/AToken.sol#682)
		- failOpaque(Error.COMPTROLLER_REJECTION,FailureInfo.BORROW_COMPTROLLER_REJECTION,allowed) (../../sb/AToken.sol#1938)
	- Failure(uint256(err),uint256(info),opaqueError) (../../sb/AToken.sol#682)
		- failOpaque(Error.MATH_ERROR,FailureInfo.BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,uint256(vars.mathErr)) (../../sb/AToken.sol#1960)
Reentrancy in AToken.liquidateBorrowFresh(address,address,uint256,ATokenInterface) (../../sb/AToken.sol#2152-2221):
	External calls:
	- allowed = comptroller.liquidateBorrowAllowed(address(this),address(aTokenCollateral),liquidator,borrower,repayAmount) (../../sb/AToken.sol#2154)
	Event emitted after the call(s):
	- Failure(uint256(err),uint256(info),0) (../../sb/AToken.sol#673)
		- (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED,FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_ZERO),0) (../../sb/AToken.sol#2176)
	- Failure(uint256(err),uint256(info),0) (../../sb/AToken.sol#673)
		- (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED,FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX),0) (../../sb/AToken.sol#2181)
	- Failure(uint256(err),uint256(info),opaqueError) (../../sb/AToken.sol#682)
		- (failOpaque(Error.COMPTROLLER_REJECTION,FailureInfo.LIQUIDATE_COMPTROLLER_REJECTION,allowed),0) (../../sb/AToken.sol#2156)
	- Failure(uint256(err),uint256(info),0) (../../sb/AToken.sol#673)
		- (fail(Error.MARKET_NOT_FRESH,FailureInfo.LIQUIDATE_COLLATERAL_FRESHNESS_CHECK),0) (../../sb/AToken.sol#2166)
	- Failure(uint256(err),uint256(info),0) (../../sb/AToken.sol#673)
		- (fail(Error.INVALID_ACCOUNT_PAIR,FailureInfo.LIQUIDATE_LIQUIDATOR_IS_BORROWER),0) (../../sb/AToken.sol#2171)
	- Failure(uint256(err),uint256(info),0) (../../sb/AToken.sol#673)
		- (fail(Error.MARKET_NOT_FRESH,FailureInfo.LIQUIDATE_FRESHNESS_CHECK),0) (../../sb/AToken.sol#2161)
Reentrancy in AToken.liquidateBorrowFresh(address,address,uint256,ATokenInterface) (../../sb/AToken.sol#2152-2221):
	External calls:
	- allowed = comptroller.liquidateBorrowAllowed(address(this),address(aTokenCollateral),liquidator,borrower,repayAmount) (../../sb/AToken.sol#2154)
	- (repayBorrowError,actualRepayAmount) = repayBorrowFresh(liquidator,borrower,repayAmount) (../../sb/AToken.sol#2186)
		- allowed = comptroller.repayBorrowAllowed(address(this),payer,borrower,repayAmount) (../../sb/AToken.sol#2051)
	Event emitted after the call(s):
	- Failure(uint256(err),uint256(info),0) (../../sb/AToken.sol#673)
		- (fail(TokenErrorReporter.Error(repayBorrowError),FailureInfo.LIQUIDATE_REPAY_BORROW_FRESH_FAILED),0) (../../sb/AToken.sol#2188)
	- Failure(uint256(err),uint256(info),0) (../../sb/AToken.sol#673)
		- (repayBorrowError,actualRepayAmount) = repayBorrowFresh(liquidator,borrower,repayAmount) (../../sb/AToken.sol#2186)
	- Failure(uint256(err),uint256(info),opaqueError) (../../sb/AToken.sol#682)
		- (repayBorrowError,actualRepayAmount) = repayBorrowFresh(liquidator,borrower,repayAmount) (../../sb/AToken.sol#2186)
	- RepayBorrow(payer,borrower,vars.actualRepayAmount,vars.accountBorrowsNew,vars.totalBorrowsNew) (../../sb/AToken.sol#2109)
		- (repayBorrowError,actualRepayAmount) = repayBorrowFresh(liquidator,borrower,repayAmount) (../../sb/AToken.sol#2186)
Reentrancy in AToken.liquidateBorrowFresh(address,address,uint256,ATokenInterface) (../../sb/AToken.sol#2152-2221):
	External calls:
	- allowed = comptroller.liquidateBorrowAllowed(address(this),address(aTokenCollateral),liquidator,borrower,repayAmount) (../../sb/AToken.sol#2154)
	- (repayBorrowError,actualRepayAmount) = repayBorrowFresh(liquidator,borrower,repayAmount) (../../sb/AToken.sol#2186)
		- allowed = comptroller.repayBorrowAllowed(address(this),payer,borrower,repayAmount) (../../sb/AToken.sol#2051)
	- seizeError = seizeInternal(address(this),liquidator,borrower,seizeTokens) (../../sb/AToken.sol#2205)
		- allowed = comptroller.seizeAllowed(address(this),seizerToken,liquidator,borrower,seizeTokens) (../../sb/AToken.sol#2260)
	Event emitted after the call(s):
	- Failure(uint256(err),uint256(info),opaqueError) (../../sb/AToken.sol#682)
		- seizeError = seizeInternal(address(this),liquidator,borrower,seizeTokens) (../../sb/AToken.sol#2205)
	- Failure(uint256(err),uint256(info),0) (../../sb/AToken.sol#673)
		- seizeError = seizeInternal(address(this),liquidator,borrower,seizeTokens) (../../sb/AToken.sol#2205)
	- ReservesAdded(address(this),vars.protocolSeizeAmount,vars.totalReservesNew) (../../sb/AToken.sol#2311)
		- seizeError = seizeInternal(address(this),liquidator,borrower,seizeTokens) (../../sb/AToken.sol#2205)
	- Transfer(borrower,liquidator,vars.liquidatorSeizeTokens) (../../sb/AToken.sol#2309)
		- seizeError = seizeInternal(address(this),liquidator,borrower,seizeTokens) (../../sb/AToken.sol#2205)
	- Transfer(borrower,address(this),vars.protocolSeizeTokens) (../../sb/AToken.sol#2310)
		- seizeError = seizeInternal(address(this),liquidator,borrower,seizeTokens) (../../sb/AToken.sol#2205)
Reentrancy in AToken.liquidateBorrowFresh(address,address,uint256,ATokenInterface) (../../sb/AToken.sol#2152-2221):
	External calls:
	- allowed = comptroller.liquidateBorrowAllowed(address(this),address(aTokenCollateral),liquidator,borrower,repayAmount) (../../sb/AToken.sol#2154)
	- (repayBorrowError,actualRepayAmount) = repayBorrowFresh(liquidator,borrower,repayAmount) (../../sb/AToken.sol#2186)
		- allowed = comptroller.repayBorrowAllowed(address(this),payer,borrower,repayAmount) (../../sb/AToken.sol#2051)
	- seizeError = seizeInternal(address(this),liquidator,borrower,seizeTokens) (../../sb/AToken.sol#2205)
		- allowed = comptroller.seizeAllowed(address(this),seizerToken,liquidator,borrower,seizeTokens) (../../sb/AToken.sol#2260)
	- seizeError = aTokenCollateral.seize(liquidator,borrower,seizeTokens) (../../sb/AToken.sol#2207)
	Event emitted after the call(s):
	- LiquidateBorrow(liquidator,borrower,actualRepayAmount,address(aTokenCollateral),seizeTokens) (../../sb/AToken.sol#2214)
Reentrancy in AToken.mintFresh(address,uint256) (../../sb/AToken.sol#1693-1758):
	External calls:
	- allowed = comptroller.mintAllowed(address(this),minter,mintAmount) (../../sb/AToken.sol#1695)
	Event emitted after the call(s):
	- Failure(uint256(err),uint256(info),opaqueError) (../../sb/AToken.sol#682)
		- (failOpaque(Error.COMPTROLLER_REJECTION,FailureInfo.MINT_COMPTROLLER_REJECTION,allowed),0) (../../sb/AToken.sol#1697)
	- Failure(uint256(err),uint256(info),opaqueError) (../../sb/AToken.sol#682)
		- (failOpaque(Error.MATH_ERROR,FailureInfo.MINT_EXCHANGE_RATE_READ_FAILED,uint256(vars.mathErr)),0) (../../sb/AToken.sol#1709)
	- Failure(uint256(err),uint256(info),0) (../../sb/AToken.sol#673)
		- (fail(Error.MARKET_NOT_FRESH,FailureInfo.MINT_FRESHNESS_CHECK),0) (../../sb/AToken.sol#1702)
	- Mint(minter,vars.actualMintAmount,vars.mintTokens) (../../sb/AToken.sol#1750)
	- Transfer(address(this),minter,vars.mintTokens) (../../sb/AToken.sol#1751)
Reentrancy in AToken.redeemFresh(address,uint256,uint256) (../../sb/AToken.sol#1810-1904):
	External calls:
	- allowed = comptroller.redeemAllowed(address(this),redeemer,vars.redeemTokens) (../../sb/AToken.sol#1850)
	Event emitted after the call(s):
	- Failure(uint256(err),uint256(info),opaqueError) (../../sb/AToken.sol#682)
		- failOpaque(Error.MATH_ERROR,FailureInfo.REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,uint256(vars.mathErr)) (../../sb/AToken.sol#1867)
	- Failure(uint256(err),uint256(info),0) (../../sb/AToken.sol#673)
		- fail(Error.TOKEN_INSUFFICIENT_CASH,FailureInfo.REDEEM_TRANSFER_OUT_NOT_POSSIBLE) (../../sb/AToken.sol#1877)
	- Failure(uint256(err),uint256(info),0) (../../sb/AToken.sol#673)
		- fail(Error.MARKET_NOT_FRESH,FailureInfo.REDEEM_FRESHNESS_CHECK) (../../sb/AToken.sol#1857)
	- Failure(uint256(err),uint256(info),opaqueError) (../../sb/AToken.sol#682)
		- failOpaque(Error.MATH_ERROR,FailureInfo.REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,uint256(vars.mathErr)) (../../sb/AToken.sol#1872)
	- Failure(uint256(err),uint256(info),opaqueError) (../../sb/AToken.sol#682)
		- failOpaque(Error.COMPTROLLER_REJECTION,FailureInfo.REDEEM_COMPTROLLER_REJECTION,allowed) (../../sb/AToken.sol#1852)
	- Redeem(redeemer,vars.redeemAmount,vars.redeemTokens) (../../sb/AToken.sol#1898)
	- Transfer(redeemer,address(this),vars.redeemTokens) (../../sb/AToken.sol#1897)
Reentrancy in AToken.repayBorrowFresh(address,address,uint256) (../../sb/AToken.sol#2049-2116):
	External calls:
	- allowed = comptroller.repayBorrowAllowed(address(this),payer,borrower,repayAmount) (../../sb/AToken.sol#2051)
	Event emitted after the call(s):
	- Failure(uint256(err),uint256(info),opaqueError) (../../sb/AToken.sol#682)
		- (failOpaque(Error.COMPTROLLER_REJECTION,FailureInfo.REPAY_BORROW_COMPTROLLER_REJECTION,allowed),0) (../../sb/AToken.sol#2053)
	- Failure(uint256(err),uint256(info),opaqueError) (../../sb/AToken.sol#682)
		- (failOpaque(Error.MATH_ERROR,FailureInfo.REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,uint256(vars.mathErr)),0) (../../sb/AToken.sol#2069)
	- Failure(uint256(err),uint256(info),0) (../../sb/AToken.sol#673)
		- (fail(Error.MARKET_NOT_FRESH,FailureInfo.REPAY_BORROW_FRESHNESS_CHECK),0) (../../sb/AToken.sol#2058)
	- RepayBorrow(payer,borrower,vars.actualRepayAmount,vars.accountBorrowsNew,vars.totalBorrowsNew) (../../sb/AToken.sol#2109)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

AToken._addReservesFresh(uint256) (../../sb/AToken.sol#2465-2502) is never used and should be removed
AToken._addReservesInternal(uint256) (../../sb/AToken.sol#2447-2457) is never used and should be removed
AToken.borrowFresh(address,uint256) (../../sb/AToken.sol#1934-1998) is never used and should be removed
AToken.borrowInternal(uint256) (../../sb/AToken.sol#1911-1919) is never used and should be removed
AToken.liquidateBorrowFresh(address,address,uint256,ATokenInterface) (../../sb/AToken.sol#2152-2221) is never used and should be removed
AToken.liquidateBorrowInternal(address,uint256,ATokenInterface) (../../sb/AToken.sol#2126-2141) is never used and should be removed
AToken.mintFresh(address,uint256) (../../sb/AToken.sol#1693-1758) is never used and should be removed
AToken.mintInternal(uint256) (../../sb/AToken.sol#1666-1674) is never used and should be removed
AToken.redeemFresh(address,uint256,uint256) (../../sb/AToken.sol#1810-1904) is never used and should be removed
AToken.redeemInternal(uint256) (../../sb/AToken.sol#1766-1774) is never used and should be removed
AToken.redeemUnderlyingInternal(uint256) (../../sb/AToken.sol#1782-1790) is never used and should be removed
AToken.repayBorrowBehalfInternal(address,uint256) (../../sb/AToken.sol#2021-2029) is never used and should be removed
AToken.repayBorrowFresh(address,address,uint256) (../../sb/AToken.sol#2049-2116) is never used and should be removed
AToken.repayBorrowInternal(uint256) (../../sb/AToken.sol#2005-2013) is never used and should be removed
ComptrollerErrorReporter.fail(ComptrollerErrorReporter.Error,ComptrollerErrorReporter.FailureInfo) (../../sb/AToken.sol#536-540) is never used and should be removed
ComptrollerErrorReporter.failOpaque(ComptrollerErrorReporter.Error,ComptrollerErrorReporter.FailureInfo,uint256) (../../sb/AToken.sol#545-549) is never used and should be removed
Exponential.addExp(ExponentialNoError.Exp,ExponentialNoError.Exp) (../../sb/AToken.sol#997-1001) is never used and should be removed
Exponential.divExp(ExponentialNoError.Exp,ExponentialNoError.Exp) (../../sb/AToken.sol#1140-1142) is never used and should be removed
Exponential.divScalar(ExponentialNoError.Exp,uint256) (../../sb/AToken.sol#1051-1058) is never used and should be removed
Exponential.divScalarByExp(uint256,ExponentialNoError.Exp) (../../sb/AToken.sol#1063-1078) is never used and should be removed
Exponential.divScalarByExpTruncate(uint256,ExponentialNoError.Exp) (../../sb/AToken.sol#1083-1090) is never used and should be removed
Exponential.mulExp(ExponentialNoError.Exp,ExponentialNoError.Exp) (../../sb/AToken.sol#1095-1115) is never used and should be removed
Exponential.mulExp(uint256,uint256) (../../sb/AToken.sol#1120-1122) is never used and should be removed
Exponential.mulExp3(ExponentialNoError.Exp,ExponentialNoError.Exp,ExponentialNoError.Exp) (../../sb/AToken.sol#1127-1133) is never used and should be removed
Exponential.subExp(ExponentialNoError.Exp,ExponentialNoError.Exp) (../../sb/AToken.sol#1006-1010) is never used and should be removed
ExponentialNoError.add_(ExponentialNoError.Double,ExponentialNoError.Double) (../../sb/AToken.sol#860-862) is never used and should be removed
ExponentialNoError.add_(ExponentialNoError.Exp,ExponentialNoError.Exp) (../../sb/AToken.sol#856-858) is never used and should be removed
ExponentialNoError.div_(ExponentialNoError.Double,ExponentialNoError.Double) (../../sb/AToken.sol#940-942) is never used and should be removed
ExponentialNoError.div_(ExponentialNoError.Double,uint256) (../../sb/AToken.sol#944-946) is never used and should be removed
ExponentialNoError.div_(ExponentialNoError.Exp,ExponentialNoError.Exp) (../../sb/AToken.sol#928-930) is never used and should be removed
ExponentialNoError.div_(ExponentialNoError.Exp,uint256) (../../sb/AToken.sol#932-934) is never used and should be removed
ExponentialNoError.div_(uint256,ExponentialNoError.Double) (../../sb/AToken.sol#948-950) is never used and should be removed
ExponentialNoError.div_(uint256,ExponentialNoError.Exp) (../../sb/AToken.sol#936-938) is never used and should be removed
ExponentialNoError.div_(uint256,uint256) (../../sb/AToken.sol#952-954) is never used and should be removed
ExponentialNoError.div_(uint256,uint256,string) (../../sb/AToken.sol#956-959) is never used and should be removed
ExponentialNoError.fraction(uint256,uint256) (../../sb/AToken.sol#961-963) is never used and should be removed
ExponentialNoError.greaterThanExp(ExponentialNoError.Exp,ExponentialNoError.Exp) (../../sb/AToken.sol#835-837) is never used and should be removed
ExponentialNoError.isZeroExp(ExponentialNoError.Exp) (../../sb/AToken.sol#842-844) is never used and should be removed
ExponentialNoError.lessThanExp(ExponentialNoError.Exp,ExponentialNoError.Exp) (../../sb/AToken.sol#821-823) is never used and should be removed
ExponentialNoError.lessThanOrEqualExp(ExponentialNoError.Exp,ExponentialNoError.Exp) (../../sb/AToken.sol#828-830) is never used and should be removed
ExponentialNoError.mul_(ExponentialNoError.Double,ExponentialNoError.Double) (../../sb/AToken.sol#903-905) is never used and should be removed
ExponentialNoError.mul_(ExponentialNoError.Double,uint256) (../../sb/AToken.sol#907-909) is never used and should be removed
ExponentialNoError.mul_(ExponentialNoError.Exp,ExponentialNoError.Exp) (../../sb/AToken.sol#891-893) is never used and should be removed
ExponentialNoError.mul_(uint256,ExponentialNoError.Double) (../../sb/AToken.sol#911-913) is never used and should be removed
ExponentialNoError.mul_ScalarTruncateAddUInt(ExponentialNoError.Exp,uint256,uint256) (../../sb/AToken.sol#813-816) is never used and should be removed
ExponentialNoError.safe224(uint256,string) (../../sb/AToken.sol#846-849) is never used and should be removed
ExponentialNoError.safe32(uint256,string) (../../sb/AToken.sol#851-854) is never used and should be removed
ExponentialNoError.sub_(ExponentialNoError.Double,ExponentialNoError.Double) (../../sb/AToken.sol#878-880) is never used and should be removed
ExponentialNoError.sub_(ExponentialNoError.Exp,ExponentialNoError.Exp) (../../sb/AToken.sol#874-876) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code

Pragma version^0.5.16 (../../sb/AToken.sol#1) allows old versions
solc-0.5.17 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Constant ATokenStorage.borrowRateMaxMantissa (../../sb/AToken.sol#202) is not in UPPER_CASE_WITH_UNDERSCORES
Constant ATokenStorage.reserveFactorMaxMantissa (../../sb/AToken.sol#207) is not in UPPER_CASE_WITH_UNDERSCORES
Function ATokenInterface._setPendingAdmin(address) (../../sb/AToken.sol#412) is not in mixedCase
Function ATokenInterface._acceptAdmin() (../../sb/AToken.sol#413) is not in mixedCase
Function ATokenInterface._setComptroller(ComptrollerInterface) (../../sb/AToken.sol#414) is not in mixedCase
Function ATokenInterface._setReserveFactor(uint256) (../../sb/AToken.sol#415) is not in mixedCase
Function ATokenInterface._reduceReserves(uint256) (../../sb/AToken.sol#416) is not in mixedCase
Function ATokenInterface._setInterestRateModel(InterestRateModel) (../../sb/AToken.sol#417) is not in mixedCase
Function ABep20Interface._addReserves(uint256) (../../sb/AToken.sol#443) is not in mixedCase
Function ADelegatorInterface._setImplementation(address,bool,bytes) (../../sb/AToken.sol#465) is not in mixedCase
Function ADelegateInterface._becomeImplementation(bytes) (../../sb/AToken.sol#474) is not in mixedCase
Function ADelegateInterface._resignImplementation() (../../sb/AToken.sol#479) is not in mixedCase
Function ExponentialNoError.mul_ScalarTruncate(ExponentialNoError.Exp,uint256) (../../sb/AToken.sol#805-808) is not in mixedCase
Function ExponentialNoError.mul_ScalarTruncateAddUInt(ExponentialNoError.Exp,uint256,uint256) (../../sb/AToken.sol#813-816) is not in mixedCase
Constant ExponentialNoError.expScale (../../sb/AToken.sol#780) is not in UPPER_CASE_WITH_UNDERSCORES
Constant ExponentialNoError.doubleScale (../../sb/AToken.sol#781) is not in UPPER_CASE_WITH_UNDERSCORES
Constant ExponentialNoError.halfExpScale (../../sb/AToken.sol#782) is not in UPPER_CASE_WITH_UNDERSCORES
Constant ExponentialNoError.mantissaOne (../../sb/AToken.sol#783) is not in UPPER_CASE_WITH_UNDERSCORES
Function AToken._setPendingAdmin(address) (../../sb/AToken.sol#2329-2345) is not in mixedCase
Function AToken._acceptAdmin() (../../sb/AToken.sol#2352-2372) is not in mixedCase
Function AToken._setComptroller(ComptrollerInterface) (../../sb/AToken.sol#2379-2396) is not in mixedCase
Function AToken._setReserveFactor(uint256) (../../sb/AToken.sol#2403-2411) is not in mixedCase
Function AToken._reduceReserves(uint256) (../../sb/AToken.sol#2510-2518) is not in mixedCase
Function AToken._setInterestRateModel(InterestRateModel) (../../sb/AToken.sol#2575-2583) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Variable AToken.seize(address,address,uint256).seizeTokens (../../sb/AToken.sol#2232) is too similar to AToken.seizeInternal(address,address,address,uint256).seizerToken (../../sb/AToken.sol#2258)
Variable AToken.liquidateBorrowFresh(address,address,uint256,ATokenInterface).seizeTokens (../../sb/AToken.sol#2196) is too similar to AToken.seizeInternal(address,address,address,uint256).seizerToken (../../sb/AToken.sol#2258)
Variable ATokenInterface.seize(address,address,uint256).seizeTokens (../../sb/AToken.sol#407) is too similar to AToken.seizeInternal(address,address,address,uint256).seizerToken (../../sb/AToken.sol#2258)
Variable AToken.seizeInternal(address,address,address,uint256).seizeTokens (../../sb/AToken.sol#2258) is too similar to AToken.seizeInternal(address,address,address,uint256).seizerToken (../../sb/AToken.sol#2258)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#variable-names-too-similar

AToken (../../sb/AToken.sol#1211-2655) does not implement functions:
	- AToken.doTransferIn(address,uint256) (../../sb/AToken.sol#2634)
	- AToken.doTransferOut(address,uint256) (../../sb/AToken.sol#2641)
	- AToken.getCashPrior() (../../sb/AToken.sol#2628)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unimplemented-functions

_setImplementation(address,bool,bytes) should be declared external:
	- ADelegatorInterface._setImplementation(address,bool,bytes) (../../sb/AToken.sol#465)
Moreover, the following function parameters should change its data location:
becomeImplementationData location should be calldata
_becomeImplementation(bytes) should be declared external:
	- ADelegateInterface._becomeImplementation(bytes) (../../sb/AToken.sol#474)
Moreover, the following function parameters should change its data location:
data location should be calldata
initialize(ComptrollerInterface,InterestRateModel,uint256,string,string,uint8) should be declared external:
	- AToken.initialize(ComptrollerInterface,InterestRateModel,uint256,string,string,uint8) (../../sb/AToken.sol#1221-1252)
Moreover, the following function parameters should change its data location:
name_ location should be calldata
symbol_ location should be calldata
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external
/sb/AToken.sol analyzed (18 contracts with 93 detectors), 134 result(s) found
