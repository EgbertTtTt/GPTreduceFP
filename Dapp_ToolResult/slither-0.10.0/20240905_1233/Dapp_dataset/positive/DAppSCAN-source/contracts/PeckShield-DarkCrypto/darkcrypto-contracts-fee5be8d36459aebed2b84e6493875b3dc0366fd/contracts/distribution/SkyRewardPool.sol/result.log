'solc --version' running
'solc /sb/SkyRewardPool.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/sb' running

Reentrancy in SkyRewardPool.deposit(uint256,uint256) (../../sb/SkyRewardPool.sol#730-748):
	External calls:
	- safeSkyTransfer(_sender,_pending) (../../sb/SkyRewardPool.sol#738)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sb/SkyRewardPool.sol#536)
		- sky.safeTransfer(_to,_skyBal) (../../sb/SkyRewardPool.sol#800)
		- sky.safeTransfer(_to,_amount) (../../sb/SkyRewardPool.sol#802)
		- (success,returndata) = target.call{value: value}(data) (../../sb/SkyRewardPool.sol#404)
	- pool.token.safeTransferFrom(_sender,address(this),_amount) (../../sb/SkyRewardPool.sol#743)
	External calls sending eth:
	- safeSkyTransfer(_sender,_pending) (../../sb/SkyRewardPool.sol#738)
		- (success,returndata) = target.call{value: value}(data) (../../sb/SkyRewardPool.sol#404)
	State variables written after the call(s):
	- user.amount = user.amount.add(_amount) (../../sb/SkyRewardPool.sol#744)
	SkyRewardPool.userInfo (../../sb/SkyRewardPool.sol#574) can be used in cross function reentrancies:
	- SkyRewardPool.deposit(uint256,uint256) (../../sb/SkyRewardPool.sol#730-748)
	- SkyRewardPool.emergencyWithdraw(uint256) (../../sb/SkyRewardPool.sol#785-793)
	- SkyRewardPool.harvestAllRewards() (../../sb/SkyRewardPool.sol#775-782)
	- SkyRewardPool.pendingReward(uint256,address) (../../sb/SkyRewardPool.sol#685-696)
	- SkyRewardPool.userInfo (../../sb/SkyRewardPool.sol#574)
	- SkyRewardPool.withdraw(uint256,uint256) (../../sb/SkyRewardPool.sol#752-769)
	- SkyRewardPool.withdrawAll(uint256) (../../sb/SkyRewardPool.sol#771-773)
Reentrancy in SkyRewardPool.deposit(uint256,uint256) (../../sb/SkyRewardPool.sol#730-748):
	External calls:
	- safeSkyTransfer(_sender,_pending) (../../sb/SkyRewardPool.sol#738)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sb/SkyRewardPool.sol#536)
		- sky.safeTransfer(_to,_skyBal) (../../sb/SkyRewardPool.sol#800)
		- (success,returndata) = target.call{value: value}(data) (../../sb/SkyRewardPool.sol#404)
		- sky.safeTransfer(_to,_amount) (../../sb/SkyRewardPool.sol#802)
	- pool.token.safeTransferFrom(_sender,address(this),_amount) (../../sb/SkyRewardPool.sol#743)
	External calls sending eth:
	- safeSkyTransfer(_sender,_pending) (../../sb/SkyRewardPool.sol#738)
		- (success,returndata) = target.call{value: value}(data) (../../sb/SkyRewardPool.sol#404)
	State variables written after the call(s):
	- user.rewardDebt = user.amount.mul(pool.accSkyPerShare).div(1e18) (../../sb/SkyRewardPool.sol#746)
	SkyRewardPool.userInfo (../../sb/SkyRewardPool.sol#574) can be used in cross function reentrancies:
	- SkyRewardPool.deposit(uint256,uint256) (../../sb/SkyRewardPool.sol#730-748)
	- SkyRewardPool.emergencyWithdraw(uint256) (../../sb/SkyRewardPool.sol#785-793)
	- SkyRewardPool.harvestAllRewards() (../../sb/SkyRewardPool.sol#775-782)
	- SkyRewardPool.pendingReward(uint256,address) (../../sb/SkyRewardPool.sol#685-696)
	- SkyRewardPool.userInfo (../../sb/SkyRewardPool.sol#574)
	- SkyRewardPool.withdraw(uint256,uint256) (../../sb/SkyRewardPool.sol#752-769)
	- SkyRewardPool.withdrawAll(uint256) (../../sb/SkyRewardPool.sol#771-773)
Reentrancy in SkyRewardPool.withdraw(uint256,uint256) (../../sb/SkyRewardPool.sol#752-769):
	External calls:
	- safeSkyTransfer(_sender,_pending) (../../sb/SkyRewardPool.sol#760)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sb/SkyRewardPool.sol#536)
		- sky.safeTransfer(_to,_skyBal) (../../sb/SkyRewardPool.sol#800)
		- sky.safeTransfer(_to,_amount) (../../sb/SkyRewardPool.sol#802)
		- (success,returndata) = target.call{value: value}(data) (../../sb/SkyRewardPool.sol#404)
	External calls sending eth:
	- safeSkyTransfer(_sender,_pending) (../../sb/SkyRewardPool.sol#760)
		- (success,returndata) = target.call{value: value}(data) (../../sb/SkyRewardPool.sol#404)
	State variables written after the call(s):
	- user.amount = user.amount.sub(_amount) (../../sb/SkyRewardPool.sol#764)
	SkyRewardPool.userInfo (../../sb/SkyRewardPool.sol#574) can be used in cross function reentrancies:
	- SkyRewardPool.deposit(uint256,uint256) (../../sb/SkyRewardPool.sol#730-748)
	- SkyRewardPool.emergencyWithdraw(uint256) (../../sb/SkyRewardPool.sol#785-793)
	- SkyRewardPool.harvestAllRewards() (../../sb/SkyRewardPool.sol#775-782)
	- SkyRewardPool.pendingReward(uint256,address) (../../sb/SkyRewardPool.sol#685-696)
	- SkyRewardPool.userInfo (../../sb/SkyRewardPool.sol#574)
	- SkyRewardPool.withdraw(uint256,uint256) (../../sb/SkyRewardPool.sol#752-769)
	- SkyRewardPool.withdrawAll(uint256) (../../sb/SkyRewardPool.sol#771-773)
Reentrancy in SkyRewardPool.withdraw(uint256,uint256) (../../sb/SkyRewardPool.sol#752-769):
	External calls:
	- safeSkyTransfer(_sender,_pending) (../../sb/SkyRewardPool.sol#760)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sb/SkyRewardPool.sol#536)
		- sky.safeTransfer(_to,_skyBal) (../../sb/SkyRewardPool.sol#800)
		- (success,returndata) = target.call{value: value}(data) (../../sb/SkyRewardPool.sol#404)
		- sky.safeTransfer(_to,_amount) (../../sb/SkyRewardPool.sol#802)
	- pool.token.safeTransfer(_sender,_amount) (../../sb/SkyRewardPool.sol#765)
	External calls sending eth:
	- safeSkyTransfer(_sender,_pending) (../../sb/SkyRewardPool.sol#760)
		- (success,returndata) = target.call{value: value}(data) (../../sb/SkyRewardPool.sol#404)
	State variables written after the call(s):
	- user.rewardDebt = user.amount.mul(pool.accSkyPerShare).div(1e18) (../../sb/SkyRewardPool.sol#767)
	SkyRewardPool.userInfo (../../sb/SkyRewardPool.sol#574) can be used in cross function reentrancies:
	- SkyRewardPool.deposit(uint256,uint256) (../../sb/SkyRewardPool.sol#730-748)
	- SkyRewardPool.emergencyWithdraw(uint256) (../../sb/SkyRewardPool.sol#785-793)
	- SkyRewardPool.harvestAllRewards() (../../sb/SkyRewardPool.sol#775-782)
	- SkyRewardPool.pendingReward(uint256,address) (../../sb/SkyRewardPool.sol#685-696)
	- SkyRewardPool.userInfo (../../sb/SkyRewardPool.sol#574)
	- SkyRewardPool.withdraw(uint256,uint256) (../../sb/SkyRewardPool.sol#752-769)
	- SkyRewardPool.withdrawAll(uint256) (../../sb/SkyRewardPool.sol#771-773)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities

SkyRewardPool.pendingReward(uint256,address) (../../sb/SkyRewardPool.sol#685-696) performs a multiplication on the result of a division:
	- _skyReward = _generatedReward.mul(pool.allocPoint).div(totalAllocPoint) (../../sb/SkyRewardPool.sol#692)
	- accSkyPerShare = accSkyPerShare.add(_skyReward.mul(1e18).div(tokenSupply)) (../../sb/SkyRewardPool.sol#693)
SkyRewardPool.updatePool(uint256) (../../sb/SkyRewardPool.sol#707-727) performs a multiplication on the result of a division:
	- _skyReward = _generatedReward.mul(pool.allocPoint).div(totalAllocPoint) (../../sb/SkyRewardPool.sol#723)
	- pool.accSkyPerShare = pool.accSkyPerShare.add(_skyReward.mul(1e18).div(tokenSupply)) (../../sb/SkyRewardPool.sol#724)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply

SkyRewardPool.updatePool(uint256) (../../sb/SkyRewardPool.sol#707-727) uses a dangerous strict equality:
	- tokenSupply == 0 (../../sb/SkyRewardPool.sol#713)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities

SkyRewardPool.setOperator(address) (../../sb/SkyRewardPool.sol#807-809) should emit an event for: 
	- operator = _operator (../../sb/SkyRewardPool.sol#808) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-access-control

SkyRewardPool.add(uint256,IERC20,bool,uint256) (../../sb/SkyRewardPool.sol#618-656) should emit an event for: 
	- totalAllocPoint = totalAllocPoint.add(_allocPoint) (../../sb/SkyRewardPool.sol#654) 
SkyRewardPool.set(uint256,uint256) (../../sb/SkyRewardPool.sol#659-668) should emit an event for: 
	- totalAllocPoint = totalAllocPoint.sub(pool.allocPoint).add(_allocPoint) (../../sb/SkyRewardPool.sol#663-665) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-arithmetic

SkyRewardPool.setOperator(address)._operator (../../sb/SkyRewardPool.sol#807) lacks a zero-check on :
		- operator = _operator (../../sb/SkyRewardPool.sol#808)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

SkyRewardPool.updatePool(uint256) (../../sb/SkyRewardPool.sol#707-727) has external calls inside a loop: tokenSupply = pool.token.balanceOf(address(this)) (../../sb/SkyRewardPool.sol#712)
SkyRewardPool.safeSkyTransfer(address,uint256) (../../sb/SkyRewardPool.sol#796-805) has external calls inside a loop: _skyBal = sky.balanceOf(address(this)) (../../sb/SkyRewardPool.sol#797)
Address.functionCallWithValue(address,bytes,uint256,string) (../../sb/SkyRewardPool.sol#399-406) has external calls inside a loop: (success,returndata) = target.call{value: value}(data) (../../sb/SkyRewardPool.sol#404)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop

Reentrancy in SkyRewardPool.deposit(uint256,uint256) (../../sb/SkyRewardPool.sol#730-748):
	External calls:
	- safeSkyTransfer(_sender,_pending) (../../sb/SkyRewardPool.sol#738)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sb/SkyRewardPool.sol#536)
		- sky.safeTransfer(_to,_skyBal) (../../sb/SkyRewardPool.sol#800)
		- sky.safeTransfer(_to,_amount) (../../sb/SkyRewardPool.sol#802)
		- (success,returndata) = target.call{value: value}(data) (../../sb/SkyRewardPool.sol#404)
	External calls sending eth:
	- safeSkyTransfer(_sender,_pending) (../../sb/SkyRewardPool.sol#738)
		- (success,returndata) = target.call{value: value}(data) (../../sb/SkyRewardPool.sol#404)
	Event emitted after the call(s):
	- RewardPaid(_sender,_pending) (../../sb/SkyRewardPool.sol#739)
Reentrancy in SkyRewardPool.deposit(uint256,uint256) (../../sb/SkyRewardPool.sol#730-748):
	External calls:
	- safeSkyTransfer(_sender,_pending) (../../sb/SkyRewardPool.sol#738)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sb/SkyRewardPool.sol#536)
		- sky.safeTransfer(_to,_skyBal) (../../sb/SkyRewardPool.sol#800)
		- (success,returndata) = target.call{value: value}(data) (../../sb/SkyRewardPool.sol#404)
		- sky.safeTransfer(_to,_amount) (../../sb/SkyRewardPool.sol#802)
	- pool.token.safeTransferFrom(_sender,address(this),_amount) (../../sb/SkyRewardPool.sol#743)
	External calls sending eth:
	- safeSkyTransfer(_sender,_pending) (../../sb/SkyRewardPool.sol#738)
		- (success,returndata) = target.call{value: value}(data) (../../sb/SkyRewardPool.sol#404)
	Event emitted after the call(s):
	- Deposit(_sender,_pid,_amount) (../../sb/SkyRewardPool.sol#747)
Reentrancy in SkyRewardPool.emergencyWithdraw(uint256) (../../sb/SkyRewardPool.sol#785-793):
	External calls:
	- pool.token.safeTransfer(msg.sender,_amount) (../../sb/SkyRewardPool.sol#791)
	Event emitted after the call(s):
	- EmergencyWithdraw(msg.sender,_pid,_amount) (../../sb/SkyRewardPool.sol#792)
Reentrancy in SkyRewardPool.withdraw(uint256,uint256) (../../sb/SkyRewardPool.sol#752-769):
	External calls:
	- safeSkyTransfer(_sender,_pending) (../../sb/SkyRewardPool.sol#760)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sb/SkyRewardPool.sol#536)
		- sky.safeTransfer(_to,_skyBal) (../../sb/SkyRewardPool.sol#800)
		- sky.safeTransfer(_to,_amount) (../../sb/SkyRewardPool.sol#802)
		- (success,returndata) = target.call{value: value}(data) (../../sb/SkyRewardPool.sol#404)
	External calls sending eth:
	- safeSkyTransfer(_sender,_pending) (../../sb/SkyRewardPool.sol#760)
		- (success,returndata) = target.call{value: value}(data) (../../sb/SkyRewardPool.sol#404)
	Event emitted after the call(s):
	- RewardPaid(_sender,_pending) (../../sb/SkyRewardPool.sol#761)
Reentrancy in SkyRewardPool.withdraw(uint256,uint256) (../../sb/SkyRewardPool.sol#752-769):
	External calls:
	- safeSkyTransfer(_sender,_pending) (../../sb/SkyRewardPool.sol#760)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sb/SkyRewardPool.sol#536)
		- sky.safeTransfer(_to,_skyBal) (../../sb/SkyRewardPool.sol#800)
		- (success,returndata) = target.call{value: value}(data) (../../sb/SkyRewardPool.sol#404)
		- sky.safeTransfer(_to,_amount) (../../sb/SkyRewardPool.sol#802)
	- pool.token.safeTransfer(_sender,_amount) (../../sb/SkyRewardPool.sol#765)
	External calls sending eth:
	- safeSkyTransfer(_sender,_pending) (../../sb/SkyRewardPool.sol#760)
		- (success,returndata) = target.call{value: value}(data) (../../sb/SkyRewardPool.sol#404)
	Event emitted after the call(s):
	- Withdraw(_sender,_pid,_amount) (../../sb/SkyRewardPool.sol#768)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

SkyRewardPool.constructor(address,uint256) (../../sb/SkyRewardPool.sol#594-603) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp < _poolStartTime,late) (../../sb/SkyRewardPool.sol#598)
SkyRewardPool.checkPoolDuplicate(IERC20) (../../sb/SkyRewardPool.sol#610-615) uses timestamp for comparisons
	Dangerous comparisons:
	- pid < length (../../sb/SkyRewardPool.sol#612)
	- require(bool,string)(poolInfo[pid].token != _token,SkyRewardPool: existing pool?) (../../sb/SkyRewardPool.sol#613)
SkyRewardPool.add(uint256,IERC20,bool,uint256) (../../sb/SkyRewardPool.sol#618-656) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp < poolStartTime (../../sb/SkyRewardPool.sol#628)
	- _lastRewardTime == 0 (../../sb/SkyRewardPool.sol#630)
	- _lastRewardTime < poolStartTime (../../sb/SkyRewardPool.sol#633)
	- _lastRewardTime == 0 || _lastRewardTime < block.timestamp (../../sb/SkyRewardPool.sol#639)
	- _isStarted = (_lastRewardTime <= poolStartTime) || (_lastRewardTime <= block.timestamp) (../../sb/SkyRewardPool.sol#643-645)
SkyRewardPool.getGeneratedReward(uint256,uint256) (../../sb/SkyRewardPool.sol#671-682) uses timestamp for comparisons
	Dangerous comparisons:
	- _fromTime >= _toTime (../../sb/SkyRewardPool.sol#672)
	- _toTime >= poolEndTime (../../sb/SkyRewardPool.sol#673)
	- _toTime <= poolStartTime (../../sb/SkyRewardPool.sol#678)
SkyRewardPool.pendingReward(uint256,address) (../../sb/SkyRewardPool.sol#685-696) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp > pool.lastRewardTime && tokenSupply != 0 (../../sb/SkyRewardPool.sol#690)
SkyRewardPool.massUpdatePools() (../../sb/SkyRewardPool.sol#699-704) uses timestamp for comparisons
	Dangerous comparisons:
	- pid < length (../../sb/SkyRewardPool.sol#701)
SkyRewardPool.updatePool(uint256) (../../sb/SkyRewardPool.sol#707-727) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp <= pool.lastRewardTime (../../sb/SkyRewardPool.sol#709)
SkyRewardPool.harvestAllRewards() (../../sb/SkyRewardPool.sol#775-782) uses timestamp for comparisons
	Dangerous comparisons:
	- pid < length (../../sb/SkyRewardPool.sol#777)
SkyRewardPool.governanceRecoverUnsupported(IERC20,uint256,address) (../../sb/SkyRewardPool.sol#811-822) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp < poolEndTime + 7776000 (../../sb/SkyRewardPool.sol#812)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

Address.isContract(address) (../../sb/SkyRewardPool.sol#311-320) uses assembly
	- INLINE ASM (../../sb/SkyRewardPool.sol#318)
Address._verifyCallResult(bool,bytes,string) (../../sb/SkyRewardPool.sol#456-473) uses assembly
	- INLINE ASM (../../sb/SkyRewardPool.sol#465-468)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage

SkyRewardPool.updatePool(uint256) (../../sb/SkyRewardPool.sol#707-727) has costly operations inside a loop:
	- totalAllocPoint = totalAllocPoint.add(pool.allocPoint) (../../sb/SkyRewardPool.sol#719)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#costly-operations-inside-a-loop

Address.functionCall(address,bytes) (../../sb/SkyRewardPool.sol#364-366) is never used and should be removed
Address.functionCallWithValue(address,bytes,uint256) (../../sb/SkyRewardPool.sol#389-391) is never used and should be removed
Address.functionDelegateCall(address,bytes) (../../sb/SkyRewardPool.sol#438-440) is never used and should be removed
Address.functionDelegateCall(address,bytes,string) (../../sb/SkyRewardPool.sol#448-454) is never used and should be removed
Address.functionStaticCall(address,bytes) (../../sb/SkyRewardPool.sol#414-416) is never used and should be removed
Address.functionStaticCall(address,bytes,string) (../../sb/SkyRewardPool.sol#424-430) is never used and should be removed
Address.sendValue(address,uint256) (../../sb/SkyRewardPool.sol#338-344) is never used and should be removed
SafeERC20.safeApprove(IERC20,address,uint256) (../../sb/SkyRewardPool.sol#504-513) is never used and should be removed
SafeERC20.safeDecreaseAllowance(IERC20,address,uint256) (../../sb/SkyRewardPool.sol#520-523) is never used and should be removed
SafeERC20.safeIncreaseAllowance(IERC20,address,uint256) (../../sb/SkyRewardPool.sol#515-518) is never used and should be removed
SafeMath.div(uint256,uint256,string) (../../sb/SkyRewardPool.sol#264-267) is never used and should be removed
SafeMath.mod(uint256,uint256) (../../sb/SkyRewardPool.sol#226-229) is never used and should be removed
SafeMath.mod(uint256,uint256,string) (../../sb/SkyRewardPool.sol#284-287) is never used and should be removed
SafeMath.sub(uint256,uint256,string) (../../sb/SkyRewardPool.sol#244-247) is never used and should be removed
SafeMath.tryAdd(uint256,uint256) (../../sb/SkyRewardPool.sol#98-102) is never used and should be removed
SafeMath.tryDiv(uint256,uint256) (../../sb/SkyRewardPool.sol#134-137) is never used and should be removed
SafeMath.tryMod(uint256,uint256) (../../sb/SkyRewardPool.sol#144-147) is never used and should be removed
SafeMath.tryMul(uint256,uint256) (../../sb/SkyRewardPool.sol#119-127) is never used and should be removed
SafeMath.trySub(uint256,uint256) (../../sb/SkyRewardPool.sol#109-112) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code

Pragma version0.6.12 (../../sb/SkyRewardPool.sol#1) allows old versions
solc-0.6.12 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Low level call in Address.sendValue(address,uint256) (../../sb/SkyRewardPool.sol#338-344):
	- (success) = recipient.call{value: amount}() (../../sb/SkyRewardPool.sol#342)
Low level call in Address.functionCallWithValue(address,bytes,uint256,string) (../../sb/SkyRewardPool.sol#399-406):
	- (success,returndata) = target.call{value: value}(data) (../../sb/SkyRewardPool.sol#404)
Low level call in Address.functionStaticCall(address,bytes,string) (../../sb/SkyRewardPool.sol#424-430):
	- (success,returndata) = target.staticcall(data) (../../sb/SkyRewardPool.sol#428)
Low level call in Address.functionDelegateCall(address,bytes,string) (../../sb/SkyRewardPool.sol#448-454):
	- (success,returndata) = target.delegatecall(data) (../../sb/SkyRewardPool.sol#452)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls

Parameter SkyRewardPool.checkPoolDuplicate(IERC20)._token (../../sb/SkyRewardPool.sol#610) is not in mixedCase
Parameter SkyRewardPool.add(uint256,IERC20,bool,uint256)._allocPoint (../../sb/SkyRewardPool.sol#619) is not in mixedCase
Parameter SkyRewardPool.add(uint256,IERC20,bool,uint256)._token (../../sb/SkyRewardPool.sol#620) is not in mixedCase
Parameter SkyRewardPool.add(uint256,IERC20,bool,uint256)._withUpdate (../../sb/SkyRewardPool.sol#621) is not in mixedCase
Parameter SkyRewardPool.add(uint256,IERC20,bool,uint256)._lastRewardTime (../../sb/SkyRewardPool.sol#622) is not in mixedCase
Parameter SkyRewardPool.set(uint256,uint256)._pid (../../sb/SkyRewardPool.sol#659) is not in mixedCase
Parameter SkyRewardPool.set(uint256,uint256)._allocPoint (../../sb/SkyRewardPool.sol#659) is not in mixedCase
Parameter SkyRewardPool.getGeneratedReward(uint256,uint256)._fromTime (../../sb/SkyRewardPool.sol#671) is not in mixedCase
Parameter SkyRewardPool.getGeneratedReward(uint256,uint256)._toTime (../../sb/SkyRewardPool.sol#671) is not in mixedCase
Parameter SkyRewardPool.pendingReward(uint256,address)._pid (../../sb/SkyRewardPool.sol#685) is not in mixedCase
Parameter SkyRewardPool.pendingReward(uint256,address)._user (../../sb/SkyRewardPool.sol#685) is not in mixedCase
Parameter SkyRewardPool.updatePool(uint256)._pid (../../sb/SkyRewardPool.sol#707) is not in mixedCase
Parameter SkyRewardPool.deposit(uint256,uint256)._pid (../../sb/SkyRewardPool.sol#730) is not in mixedCase
Parameter SkyRewardPool.deposit(uint256,uint256)._amount (../../sb/SkyRewardPool.sol#730) is not in mixedCase
Parameter SkyRewardPool.withdraw(uint256,uint256)._pid (../../sb/SkyRewardPool.sol#752) is not in mixedCase
Parameter SkyRewardPool.withdraw(uint256,uint256)._amount (../../sb/SkyRewardPool.sol#752) is not in mixedCase
Parameter SkyRewardPool.withdrawAll(uint256)._pid (../../sb/SkyRewardPool.sol#771) is not in mixedCase
Parameter SkyRewardPool.emergencyWithdraw(uint256)._pid (../../sb/SkyRewardPool.sol#785) is not in mixedCase
Parameter SkyRewardPool.safeSkyTransfer(address,uint256)._to (../../sb/SkyRewardPool.sol#796) is not in mixedCase
Parameter SkyRewardPool.safeSkyTransfer(address,uint256)._amount (../../sb/SkyRewardPool.sol#796) is not in mixedCase
Parameter SkyRewardPool.setOperator(address)._operator (../../sb/SkyRewardPool.sol#807) is not in mixedCase
Parameter SkyRewardPool.governanceRecoverUnsupported(IERC20,uint256,address)._token (../../sb/SkyRewardPool.sol#811) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

SkyRewardPool.rewardPerSecond (../../sb/SkyRewardPool.sol#585) should be constant 
SkyRewardPool.runningTime (../../sb/SkyRewardPool.sol#586) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant

SkyRewardPool.poolEndTime (../../sb/SkyRewardPool.sol#583) should be immutable 
SkyRewardPool.poolStartTime (../../sb/SkyRewardPool.sol#580) should be immutable 
SkyRewardPool.sky (../../sb/SkyRewardPool.sol#568) should be immutable 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-immutable
/sb/SkyRewardPool.sol analyzed (5 contracts with 93 detectors), 83 result(s) found
