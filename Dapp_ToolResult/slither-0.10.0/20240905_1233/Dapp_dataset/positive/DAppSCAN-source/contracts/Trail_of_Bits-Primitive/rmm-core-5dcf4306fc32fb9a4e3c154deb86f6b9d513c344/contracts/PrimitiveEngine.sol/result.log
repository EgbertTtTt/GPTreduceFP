'solc --version' running
'solc /sb/PrimitiveEngine.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/sb' running
Compilation warnings/errors on /sb/PrimitiveEngine.sol:
Warning: Contract code size exceeds 24576 bytes (a limit introduced in Spurious Dragon). This contract may not be deployable on mainnet. Consider enabling the optimizer (with a low "runs" value!), turning off revert strings, or using libraries.
    --> /sb/PrimitiveEngine.sol:1719:1:
     |
1719 | contract PrimitiveEngine is IPrimitiveEngine {
     | ^ (Relevant source part starts here and spans across multiple lines).



ABDKMath64x64.divuu(uint256,uint256) (../../sb/PrimitiveEngine.sol#696-751) performs a multiplication on the result of a division:
	- result = (x << (255 - msb)) / (((y - 1) >> (msb - 191)) + 1) (../../sb/PrimitiveEngine.sol#728)
	- hi = result * (y >> 128) (../../sb/PrimitiveEngine.sol#731)
ABDKMath64x64.divuu(uint256,uint256) (../../sb/PrimitiveEngine.sol#696-751) performs a multiplication on the result of a division:
	- result = (x << (255 - msb)) / (((y - 1) >> (msb - 191)) + 1) (../../sb/PrimitiveEngine.sol#728)
	- lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) (../../sb/PrimitiveEngine.sol#732)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply

PrimitiveEngine.deposit(address,uint256,uint256,bytes).balStable (../../sb/PrimitiveEngine.sol#1907) is a local variable never initialized
PrimitiveEngine.deposit(address,uint256,uint256,bytes).balRisky (../../sb/PrimitiveEngine.sol#1906) is a local variable never initialized
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-local-variables

PrimitiveEngine.withdraw(address,uint256,uint256) (../../sb/PrimitiveEngine.sol#1918-1928) ignores return value by margins.withdraw(delRisky,delStable) (../../sb/PrimitiveEngine.sol#1924)
PrimitiveEngine.allocate(bytes32,address,uint256,uint256,bool,bytes) (../../sb/PrimitiveEngine.sol#1934-1966) ignores return value by margins.withdraw(delRisky,delStable) (../../sb/PrimitiveEngine.sol#1957)
PrimitiveEngine.swap(address,bytes32,bool,uint256,uint256,bool,bool,bytes) (../../sb/PrimitiveEngine.sol#2000-2099) ignores return value by margins.withdraw(details.deltaIn,0) (../../sb/PrimitiveEngine.sol#2069)
PrimitiveEngine.swap(address,bytes32,bool,uint256,uint256,bool,bool,bytes) (../../sb/PrimitiveEngine.sol#2000-2099) ignores return value by margins.withdraw(0,details.deltaIn) (../../sb/PrimitiveEngine.sol#2083)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return

IPrimitiveEngineView.reserves(bytes32).liquidity (../../sb/PrimitiveEngine.sol#1550) shadows:
	- IPrimitiveEngineView.liquidity(address,bytes32) (../../sb/PrimitiveEngine.sol#1578) (function)
IPrimitiveEngineView.liquidity(address,bytes32).liquidity (../../sb/PrimitiveEngine.sol#1578) shadows:
	- IPrimitiveEngineView.liquidity(address,bytes32) (../../sb/PrimitiveEngine.sol#1578) (function)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing

Reentrancy in PrimitiveEngine.allocate(bytes32,address,uint256,uint256,bool,bytes) (../../sb/PrimitiveEngine.sol#1934-1966):
	External calls:
	- IPrimitiveLiquidityCallback(msg.sender).allocateCallback(delRisky,delStable,data) (../../sb/PrimitiveEngine.sol#1960)
	Event emitted after the call(s):
	- Allocate(msg.sender,recipient,poolId,delRisky,delStable) (../../sb/PrimitiveEngine.sol#1965)
Reentrancy in PrimitiveEngine.create(uint128,uint32,uint32,uint32,uint256,uint256,bytes) (../../sb/PrimitiveEngine.sol#1840-1892):
	External calls:
	- IPrimitiveCreateCallback(msg.sender).createCallback(delRisky,delStable,data) (../../sb/PrimitiveEngine.sol#1887)
	Event emitted after the call(s):
	- Create(msg.sender,cal.strike,cal.sigma,cal.maturity,cal.gamma) (../../sb/PrimitiveEngine.sol#1891)
Reentrancy in PrimitiveEngine.deposit(address,uint256,uint256,bytes) (../../sb/PrimitiveEngine.sol#1897-1914):
	External calls:
	- IPrimitiveDepositCallback(msg.sender).depositCallback(delRisky,delStable,data) (../../sb/PrimitiveEngine.sol#1910)
	Event emitted after the call(s):
	- Deposit(msg.sender,recipient,delRisky,delStable) (../../sb/PrimitiveEngine.sol#1913)
Reentrancy in PrimitiveEngine.swap(address,bytes32,bool,uint256,uint256,bool,bool,bytes) (../../sb/PrimitiveEngine.sol#2000-2099):
	External calls:
	- IERC20(stable).safeTransfer(details.recipient,details.deltaOut) (../../sb/PrimitiveEngine.sol#2065)
	- IPrimitiveSwapCallback(msg.sender).swapCallback(details.deltaIn,0,data) (../../sb/PrimitiveEngine.sol#2072)
	- IERC20(risky).safeTransfer(details.recipient,details.deltaOut) (../../sb/PrimitiveEngine.sol#2079)
	- IPrimitiveSwapCallback(msg.sender).swapCallback(0,details.deltaIn,data) (../../sb/PrimitiveEngine.sol#2086)
	Event emitted after the call(s):
	- Swap(msg.sender,details.recipient,details.poolId,details.riskyForStable,details.deltaIn,details.deltaOut) (../../sb/PrimitiveEngine.sol#2091-2098)
Reentrancy in PrimitiveEngine.withdraw(address,uint256,uint256) (../../sb/PrimitiveEngine.sol#1918-1928):
	External calls:
	- IERC20(risky).safeTransfer(recipient,delRisky) (../../sb/PrimitiveEngine.sol#1925)
	- IERC20(stable).safeTransfer(recipient,delStable) (../../sb/PrimitiveEngine.sol#1926)
	Event emitted after the call(s):
	- Withdraw(msg.sender,recipient,delRisky,delStable) (../../sb/PrimitiveEngine.sol#1927)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

ABDKMath64x64.pow(int128,uint256) (../../sb/PrimitiveEngine.sol#415-506) has a high cyclomatic complexity (19).
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) has a high cyclomatic complexity (65).
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#cyclomatic-complexity

ABDKMath64x64.avg(int128,int128) (../../sb/PrimitiveEngine.sol#384-388) is never used and should be removed
ABDKMath64x64.divi(int256,int256) (../../sb/PrimitiveEngine.sol#294-316) is never used and should be removed
ABDKMath64x64.from128x128(int256) (../../sb/PrimitiveEngine.sol#140-146) is never used and should be removed
ABDKMath64x64.fromInt(int256) (../../sb/PrimitiveEngine.sol#85-90) is never used and should be removed
ABDKMath64x64.fromUInt(uint256) (../../sb/PrimitiveEngine.sol#112-117) is never used and should be removed
ABDKMath64x64.gavg(int128,int128) (../../sb/PrimitiveEngine.sol#398-405) is never used and should be removed
ABDKMath64x64.inv(int128) (../../sb/PrimitiveEngine.sol#368-375) is never used and should be removed
ABDKMath64x64.muli(int128,int256) (../../sb/PrimitiveEngine.sol#214-242) is never used and should be removed
ABDKMath64x64.pow(int128,uint256) (../../sb/PrimitiveEngine.sol#415-506) is never used and should be removed
ABDKMath64x64.to128x128(int128) (../../sb/PrimitiveEngine.sol#155-159) is never used and should be removed
ABDKMath64x64.toInt(int128) (../../sb/PrimitiveEngine.sol#99-103) is never used and should be removed
ABDKMath64x64.toUInt(int128) (../../sb/PrimitiveEngine.sol#126-131) is never used and should be removed
ReplicationMath.getRiskyGivenStable(int128,uint256,uint256,uint256,uint256,uint256,uint256) (../../sb/PrimitiveEngine.sol#1045-1061) is never used and should be removed
Units.percentage(int128) (../../sb/PrimitiveEngine.sol#971-973) is never used and should be removed
Units.scaleDown(uint256,uint256) (../../sb/PrimitiveEngine.sol#936-938) is never used and should be removed
Units.scaleUp(uint256,uint256) (../../sb/PrimitiveEngine.sol#928-930) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code

Pragma version0.8.6 (../../sb/PrimitiveEngine.sol#1) allows old versions
solc-0.8.6 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Low level call in Transfers.safeTransfer(IERC20,address,uint256) (../../sb/PrimitiveEngine.sol#1243-1252):
	- (success,returnData) = address(token).call(abi.encodeWithSelector(token.transfer.selector,to,value)) (../../sb/PrimitiveEngine.sol#1248-1250)
Low level call in PrimitiveEngine.balanceRisky() (../../sb/PrimitiveEngine.sol#1785-1791):
	- (success,data) = risky.staticcall(abi.encodeWithSelector(IERC20.balanceOf.selector,address(this))) (../../sb/PrimitiveEngine.sol#1786-1788)
Low level call in PrimitiveEngine.balanceStable() (../../sb/PrimitiveEngine.sol#1794-1800):
	- (success,data) = stable.staticcall(abi.encodeWithSelector(IERC20.balanceOf.selector,address(this))) (../../sb/PrimitiveEngine.sol#1795-1797)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls

Function ABDKMath64x64.log_2(int128) (../../sb/PrimitiveEngine.sol#527-570) is not in mixedCase
Function ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) is not in mixedCase
Constant ABDKMath64x64.MIN_64x64 (../../sb/PrimitiveEngine.sol#71) is not in UPPER_CASE_WITH_UNDERSCORES
Constant ABDKMath64x64.MAX_64x64 (../../sb/PrimitiveEngine.sol#76) is not in UPPER_CASE_WITH_UNDERSCORES
Function IPrimitiveEngineView.PRECISION() (../../sb/PrimitiveEngine.sol#1508) is not in mixedCase
Function IPrimitiveEngineView.BUFFER() (../../sb/PrimitiveEngine.sol#1511) is not in mixedCase
Function IPrimitiveEngineView.MIN_LIQUIDITY() (../../sb/PrimitiveEngine.sol#1516) is not in mixedCase
Function IPrimitiveFactory.MIN_LIQUIDITY_FACTOR() (../../sb/PrimitiveEngine.sol#1682) is not in mixedCase
Variable PrimitiveEngine.MIN_LIQUIDITY (../../sb/PrimitiveEngine.sol#1748) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

ABDKMath64x64.fromInt(int256) (../../sb/PrimitiveEngine.sol#85-90) uses literals with too many digits:
	- require(bool)(x >= - 0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF) (../../sb/PrimitiveEngine.sol#87)
ABDKMath64x64.muli(int128,int256) (../../sb/PrimitiveEngine.sol#214-242) uses literals with too many digits:
	- require(bool)(y >= - 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF && y <= 0x1000000000000000000000000000000000000000000000000) (../../sb/PrimitiveEngine.sol#217-220)
ABDKMath64x64.muli(int128,int256) (../../sb/PrimitiveEngine.sol#214-242) uses literals with too many digits:
	- require(bool)(absoluteResult <= 0x8000000000000000000000000000000000000000000000000000000000000000) (../../sb/PrimitiveEngine.sol#234)
ABDKMath64x64.divi(int256,int256) (../../sb/PrimitiveEngine.sol#294-316) uses literals with too many digits:
	- require(bool)(absoluteResult <= 0x80000000000000000000000000000000) (../../sb/PrimitiveEngine.sol#309)
ABDKMath64x64.inv(int128) (../../sb/PrimitiveEngine.sol#368-375) uses literals with too many digits:
	- result = int256(0x100000000000000000000000000000000) / x (../../sb/PrimitiveEngine.sol#371)
ABDKMath64x64.gavg(int128,int128) (../../sb/PrimitiveEngine.sol#398-405) uses literals with too many digits:
	- require(bool)(m < 0x4000000000000000000000000000000000000000000000000000000000000000) (../../sb/PrimitiveEngine.sol#402)
ABDKMath64x64.pow(int128,uint256) (../../sb/PrimitiveEngine.sol#415-506) uses literals with too many digits:
	- absResult = 0x100000000000000000000000000000000 (../../sb/PrimitiveEngine.sol#421)
ABDKMath64x64.pow(int128,uint256) (../../sb/PrimitiveEngine.sol#415-506) uses literals with too many digits:
	- absX <= 0x10000000000000000 (../../sb/PrimitiveEngine.sol#423)
ABDKMath64x64.pow(int128,uint256) (../../sb/PrimitiveEngine.sol#415-506) uses literals with too many digits:
	- absX < 0x1000000000000000000000000 (../../sb/PrimitiveEngine.sol#452)
ABDKMath64x64.pow(int128,uint256) (../../sb/PrimitiveEngine.sol#415-506) uses literals with too many digits:
	- absX < 0x10000000000000000000000000000 (../../sb/PrimitiveEngine.sol#456)
ABDKMath64x64.pow(int128,uint256) (../../sb/PrimitiveEngine.sol#415-506) uses literals with too many digits:
	- absX < 0x1000000000000000000000000000000 (../../sb/PrimitiveEngine.sol#460)
ABDKMath64x64.pow(int128,uint256) (../../sb/PrimitiveEngine.sol#415-506) uses literals with too many digits:
	- absX < 0x10000000000000000000000000000000 (../../sb/PrimitiveEngine.sol#464)
ABDKMath64x64.pow(int128,uint256) (../../sb/PrimitiveEngine.sol#415-506) uses literals with too many digits:
	- absX < 0x40000000000000000000000000000000 (../../sb/PrimitiveEngine.sol#468)
ABDKMath64x64.pow(int128,uint256) (../../sb/PrimitiveEngine.sol#415-506) uses literals with too many digits:
	- absX < 0x80000000000000000000000000000000 (../../sb/PrimitiveEngine.sol#472)
ABDKMath64x64.pow(int128,uint256) (../../sb/PrimitiveEngine.sol#415-506) uses literals with too many digits:
	- absResult > 0x100000000000000000000000000000000 (../../sb/PrimitiveEngine.sol#484)
ABDKMath64x64.pow(int128,uint256) (../../sb/PrimitiveEngine.sol#415-506) uses literals with too many digits:
	- absX >= 0x100000000000000000000000000000000 (../../sb/PrimitiveEngine.sol#491)
ABDKMath64x64.log_2(int128) (../../sb/PrimitiveEngine.sol#527-570) uses literals with too many digits:
	- xc >= 0x10000000000000000 (../../sb/PrimitiveEngine.sol#533)
ABDKMath64x64.log_2(int128) (../../sb/PrimitiveEngine.sol#527-570) uses literals with too many digits:
	- xc >= 0x100000000 (../../sb/PrimitiveEngine.sol#537)
ABDKMath64x64.log_2(int128) (../../sb/PrimitiveEngine.sol#527-570) uses literals with too many digits:
	- bit = 0x8000000000000000 (../../sb/PrimitiveEngine.sol#561)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- require(bool)(x < 0x400000000000000000) (../../sb/PrimitiveEngine.sol#594)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- x < - 0x400000000000000000 (../../sb/PrimitiveEngine.sol#596)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- result = 0x80000000000000000000000000000000 (../../sb/PrimitiveEngine.sol#598)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- x & 0x8000000000000000 > 0 (../../sb/PrimitiveEngine.sol#600)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- x & 0x4000000000000000 > 0 (../../sb/PrimitiveEngine.sol#601)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- x & 0x2000000000000000 > 0 (../../sb/PrimitiveEngine.sol#602)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- x & 0x1000000000000000 > 0 (../../sb/PrimitiveEngine.sol#603)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- x & 0x800000000000000 > 0 (../../sb/PrimitiveEngine.sol#604)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- x & 0x400000000000000 > 0 (../../sb/PrimitiveEngine.sol#605)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- x & 0x200000000000000 > 0 (../../sb/PrimitiveEngine.sol#606)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- x & 0x100000000000000 > 0 (../../sb/PrimitiveEngine.sol#607)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- x & 0x80000000000000 > 0 (../../sb/PrimitiveEngine.sol#608)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- x & 0x40000000000000 > 0 (../../sb/PrimitiveEngine.sol#609)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- x & 0x20000000000000 > 0 (../../sb/PrimitiveEngine.sol#610)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- x & 0x10000000000000 > 0 (../../sb/PrimitiveEngine.sol#611)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- x & 0x8000000000000 > 0 (../../sb/PrimitiveEngine.sol#612)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- x & 0x4000000000000 > 0 (../../sb/PrimitiveEngine.sol#613)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- x & 0x2000000000000 > 0 (../../sb/PrimitiveEngine.sol#614)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- x & 0x1000000000000 > 0 (../../sb/PrimitiveEngine.sol#615)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- x & 0x800000000000 > 0 (../../sb/PrimitiveEngine.sol#616)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- x & 0x400000000000 > 0 (../../sb/PrimitiveEngine.sol#617)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- x & 0x200000000000 > 0 (../../sb/PrimitiveEngine.sol#618)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- x & 0x100000000000 > 0 (../../sb/PrimitiveEngine.sol#619)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- result = (result * 0x100000B1721BCFC99D9F890EA06911763) >> 128 (../../sb/PrimitiveEngine.sol#619)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- x & 0x80000000000 > 0 (../../sb/PrimitiveEngine.sol#620)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- result = (result * 0x10000058B90CF1E6D97F9CA14DBCC1628) >> 128 (../../sb/PrimitiveEngine.sol#620)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- x & 0x40000000000 > 0 (../../sb/PrimitiveEngine.sol#621)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- result = (result * 0x1000002C5C863B73F016468F6BAC5CA2B) >> 128 (../../sb/PrimitiveEngine.sol#621)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- x & 0x20000000000 > 0 (../../sb/PrimitiveEngine.sol#622)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- result = (result * 0x100000162E430E5A18F6119E3C02282A5) >> 128 (../../sb/PrimitiveEngine.sol#622)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- x & 0x10000000000 > 0 (../../sb/PrimitiveEngine.sol#623)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- result = (result * 0x1000000B1721835514B86E6D96EFD1BFE) >> 128 (../../sb/PrimitiveEngine.sol#623)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- x & 0x8000000000 > 0 (../../sb/PrimitiveEngine.sol#624)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- result = (result * 0x100000058B90C0B48C6BE5DF846C5B2EF) >> 128 (../../sb/PrimitiveEngine.sol#624)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- x & 0x4000000000 > 0 (../../sb/PrimitiveEngine.sol#625)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- result = (result * 0x10000002C5C8601CC6B9E94213C72737A) >> 128 (../../sb/PrimitiveEngine.sol#625)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- x & 0x2000000000 > 0 (../../sb/PrimitiveEngine.sol#626)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- result = (result * 0x1000000162E42FFF037DF38AA2B219F06) >> 128 (../../sb/PrimitiveEngine.sol#626)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- x & 0x1000000000 > 0 (../../sb/PrimitiveEngine.sol#627)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- result = (result * 0x10000000B17217FBA9C739AA5819F44F9) >> 128 (../../sb/PrimitiveEngine.sol#627)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- x & 0x800000000 > 0 (../../sb/PrimitiveEngine.sol#628)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- result = (result * 0x1000000058B90BFCDEE5ACD3C1CEDC823) >> 128 (../../sb/PrimitiveEngine.sol#628)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- x & 0x400000000 > 0 (../../sb/PrimitiveEngine.sol#629)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- result = (result * 0x100000002C5C85FE31F35A6A30DA1BE50) >> 128 (../../sb/PrimitiveEngine.sol#629)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- x & 0x200000000 > 0 (../../sb/PrimitiveEngine.sol#630)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- result = (result * 0x10000000162E42FF0999CE3541B9FFFCF) >> 128 (../../sb/PrimitiveEngine.sol#630)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- x & 0x100000000 > 0 (../../sb/PrimitiveEngine.sol#631)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- result = (result * 0x100000000B17217F80F4EF5AADDA45554) >> 128 (../../sb/PrimitiveEngine.sol#631)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- x & 0x80000000 > 0 (../../sb/PrimitiveEngine.sol#632)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- result = (result * 0x10000000058B90BFBF8479BD5A81B51AD) >> 128 (../../sb/PrimitiveEngine.sol#632)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- x & 0x40000000 > 0 (../../sb/PrimitiveEngine.sol#633)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- result = (result * 0x1000000002C5C85FDF84BD62AE30A74CC) >> 128 (../../sb/PrimitiveEngine.sol#633)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- x & 0x20000000 > 0 (../../sb/PrimitiveEngine.sol#634)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- result = (result * 0x100000000162E42FEFB2FED257559BDAA) >> 128 (../../sb/PrimitiveEngine.sol#634)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- x & 0x10000000 > 0 (../../sb/PrimitiveEngine.sol#635)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- result = (result * 0x1000000000B17217F7D5A7716BBA4A9AE) >> 128 (../../sb/PrimitiveEngine.sol#635)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- x & 0x8000000 > 0 (../../sb/PrimitiveEngine.sol#636)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- result = (result * 0x100000000058B90BFBE9DDBAC5E109CCE) >> 128 (../../sb/PrimitiveEngine.sol#636)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- x & 0x4000000 > 0 (../../sb/PrimitiveEngine.sol#637)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- result = (result * 0x10000000002C5C85FDF4B15DE6F17EB0D) >> 128 (../../sb/PrimitiveEngine.sol#637)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- x & 0x2000000 > 0 (../../sb/PrimitiveEngine.sol#638)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- result = (result * 0x1000000000162E42FEFA494F1478FDE05) >> 128 (../../sb/PrimitiveEngine.sol#638)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- x & 0x1000000 > 0 (../../sb/PrimitiveEngine.sol#639)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- result = (result * 0x10000000000B17217F7D20CF927C8E94C) >> 128 (../../sb/PrimitiveEngine.sol#639)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- x & 0x800000 > 0 (../../sb/PrimitiveEngine.sol#640)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- result = (result * 0x1000000000058B90BFBE8F71CB4E4B33D) >> 128 (../../sb/PrimitiveEngine.sol#640)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- x & 0x400000 > 0 (../../sb/PrimitiveEngine.sol#641)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- result = (result * 0x100000000002C5C85FDF477B662B26945) >> 128 (../../sb/PrimitiveEngine.sol#641)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- x & 0x200000 > 0 (../../sb/PrimitiveEngine.sol#642)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- result = (result * 0x10000000000162E42FEFA3AE53369388C) >> 128 (../../sb/PrimitiveEngine.sol#642)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- x & 0x100000 > 0 (../../sb/PrimitiveEngine.sol#643)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- result = (result * 0x100000000000B17217F7D1D351A389D40) >> 128 (../../sb/PrimitiveEngine.sol#643)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- result = (result * 0x10000000000058B90BFBE8E8B2D3D4EDE) >> 128 (../../sb/PrimitiveEngine.sol#644)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- result = (result * 0x1000000000002C5C85FDF4741BEA6E77E) >> 128 (../../sb/PrimitiveEngine.sol#645)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- result = (result * 0x100000000000162E42FEFA39FE95583C2) >> 128 (../../sb/PrimitiveEngine.sol#646)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- result = (result * 0x1000000000000B17217F7D1CFB72B45E1) >> 128 (../../sb/PrimitiveEngine.sol#647)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- result = (result * 0x100000000000058B90BFBE8E7CC35C3F0) >> 128 (../../sb/PrimitiveEngine.sol#648)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- result = (result * 0x10000000000002C5C85FDF473E242EA38) >> 128 (../../sb/PrimitiveEngine.sol#649)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- result = (result * 0x1000000000000162E42FEFA39F02B772C) >> 128 (../../sb/PrimitiveEngine.sol#650)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- result = (result * 0x10000000000000B17217F7D1CF7D83C1A) >> 128 (../../sb/PrimitiveEngine.sol#651)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- result = (result * 0x1000000000000058B90BFBE8E7BDCBE2E) >> 128 (../../sb/PrimitiveEngine.sol#652)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- result = (result * 0x100000000000002C5C85FDF473DEA871F) >> 128 (../../sb/PrimitiveEngine.sol#653)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- result = (result * 0x10000000000000162E42FEFA39EF44D91) >> 128 (../../sb/PrimitiveEngine.sol#654)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- result = (result * 0x100000000000000B17217F7D1CF79E949) >> 128 (../../sb/PrimitiveEngine.sol#655)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- result = (result * 0x10000000000000058B90BFBE8E7BCE544) >> 128 (../../sb/PrimitiveEngine.sol#656)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- result = (result * 0x1000000000000002C5C85FDF473DE6ECA) >> 128 (../../sb/PrimitiveEngine.sol#657)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- result = (result * 0x100000000000000162E42FEFA39EF366F) >> 128 (../../sb/PrimitiveEngine.sol#658)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- result = (result * 0x1000000000000000B17217F7D1CF79AFA) >> 128 (../../sb/PrimitiveEngine.sol#659)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- result = (result * 0x100000000000000058B90BFBE8E7BCD6D) >> 128 (../../sb/PrimitiveEngine.sol#660)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- result = (result * 0x10000000000000002C5C85FDF473DE6B2) >> 128 (../../sb/PrimitiveEngine.sol#661)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- result = (result * 0x1000000000000000162E42FEFA39EF358) >> 128 (../../sb/PrimitiveEngine.sol#662)
ABDKMath64x64.exp_2(int128) (../../sb/PrimitiveEngine.sol#592-670) uses literals with too many digits:
	- result = (result * 0x10000000000000000B17217F7D1CF79AB) >> 128 (../../sb/PrimitiveEngine.sol#663)
ABDKMath64x64.exp(int128) (../../sb/PrimitiveEngine.sol#678-686) uses literals with too many digits:
	- require(bool)(x < 0x400000000000000000) (../../sb/PrimitiveEngine.sol#680)
ABDKMath64x64.exp(int128) (../../sb/PrimitiveEngine.sol#678-686) uses literals with too many digits:
	- x < - 0x400000000000000000 (../../sb/PrimitiveEngine.sol#682)
ABDKMath64x64.divuu(uint256,uint256) (../../sb/PrimitiveEngine.sol#696-751) uses literals with too many digits:
	- xc >= 0x100000000 (../../sb/PrimitiveEngine.sol#706)
ABDKMath64x64.sqrtu(uint256) (../../sb/PrimitiveEngine.sol#760-804) uses literals with too many digits:
	- xx >= 0x100000000000000000000000000000000 (../../sb/PrimitiveEngine.sol#766)
ABDKMath64x64.sqrtu(uint256) (../../sb/PrimitiveEngine.sol#760-804) uses literals with too many digits:
	- xx >= 0x10000000000000000 (../../sb/PrimitiveEngine.sol#770)
ABDKMath64x64.sqrtu(uint256) (../../sb/PrimitiveEngine.sol#760-804) uses literals with too many digits:
	- xx >= 0x100000000 (../../sb/PrimitiveEngine.sol#774)
ABDKMath64x64.slitherConstructorConstantVariables() (../../sb/PrimitiveEngine.sol#67-805) uses literals with too many digits:
	- MIN_64x64 = - 0x80000000000000000000000000000000 (../../sb/PrimitiveEngine.sol#71)
CumulativeNormalDistribution.slitherConstructorConstantVariables() (../../sb/PrimitiveEngine.sol#809-909) uses literals with too many digits:
	- ONE_INT = 0x10000000000000000 (../../sb/PrimitiveEngine.sol#816)
CumulativeNormalDistribution.slitherConstructorConstantVariables() (../../sb/PrimitiveEngine.sol#809-909) uses literals with too many digits:
	- TWO_INT = 0x20000000000000000 (../../sb/PrimitiveEngine.sol#817)
CumulativeNormalDistribution.slitherConstructorConstantVariables() (../../sb/PrimitiveEngine.sol#809-909) uses literals with too many digits:
	- HALF_INT = 0x8000000000000000 (../../sb/PrimitiveEngine.sol#851)
ReplicationMath.slitherConstructorConstantVariables() (../../sb/PrimitiveEngine.sol#988-1092) uses literals with too many digits:
	- ONE_INT = 0x10000000000000000 (../../sb/PrimitiveEngine.sol#995)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits
/sb/PrimitiveEngine.sol analyzed (20 contracts with 93 detectors), 169 result(s) found
