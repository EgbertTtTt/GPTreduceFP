'solc --version' running
'solc /sb/Units.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes --allow-paths .,/sb' running

ABDKMath64x64.divuu(uint256,uint256) (../../sb/Units.sol#646-701) performs a multiplication on the result of a division:
	- result = (x << (255 - msb)) / (((y - 1) >> (msb - 191)) + 1) (../../sb/Units.sol#678)
	- hi = result * (y >> 128) (../../sb/Units.sol#681)
ABDKMath64x64.divuu(uint256,uint256) (../../sb/Units.sol#646-701) performs a multiplication on the result of a division:
	- result = (x << (255 - msb)) / (((y - 1) >> (msb - 191)) + 1) (../../sb/Units.sol#678)
	- lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) (../../sb/Units.sol#682)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply

ABDKMath64x64.pow(int128,uint256) (../../sb/Units.sol#365-456) has a high cyclomatic complexity (19).
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) has a high cyclomatic complexity (65).
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#cyclomatic-complexity

ABDKMath64x64.abs(int128) (../../sb/Units.sol#304-309) is never used and should be removed
ABDKMath64x64.add(int128,int128) (../../sb/Units.sol#118-124) is never used and should be removed
ABDKMath64x64.avg(int128,int128) (../../sb/Units.sol#334-338) is never used and should be removed
ABDKMath64x64.div(int128,int128) (../../sb/Units.sol#227-234) is never used and should be removed
ABDKMath64x64.divi(int256,int256) (../../sb/Units.sol#244-266) is never used and should be removed
ABDKMath64x64.divu(uint256,uint256) (../../sb/Units.sol#276-283) is never used and should be removed
ABDKMath64x64.divuu(uint256,uint256) (../../sb/Units.sol#646-701) is never used and should be removed
ABDKMath64x64.exp(int128) (../../sb/Units.sol#628-636) is never used and should be removed
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) is never used and should be removed
ABDKMath64x64.from128x128(int256) (../../sb/Units.sol#90-96) is never used and should be removed
ABDKMath64x64.fromInt(int256) (../../sb/Units.sol#35-40) is never used and should be removed
ABDKMath64x64.fromUInt(uint256) (../../sb/Units.sol#62-67) is never used and should be removed
ABDKMath64x64.gavg(int128,int128) (../../sb/Units.sol#348-355) is never used and should be removed
ABDKMath64x64.inv(int128) (../../sb/Units.sol#318-325) is never used and should be removed
ABDKMath64x64.ln(int128) (../../sb/Units.sol#528-534) is never used and should be removed
ABDKMath64x64.log_2(int128) (../../sb/Units.sol#477-520) is never used and should be removed
ABDKMath64x64.mul(int128,int128) (../../sb/Units.sol#148-154) is never used and should be removed
ABDKMath64x64.muli(int128,int256) (../../sb/Units.sol#164-192) is never used and should be removed
ABDKMath64x64.mulu(int128,uint256) (../../sb/Units.sol#202-217) is never used and should be removed
ABDKMath64x64.neg(int128) (../../sb/Units.sol#291-296) is never used and should be removed
ABDKMath64x64.pow(int128,uint256) (../../sb/Units.sol#365-456) is never used and should be removed
ABDKMath64x64.sqrt(int128) (../../sb/Units.sol#464-469) is never used and should be removed
ABDKMath64x64.sqrtu(uint256) (../../sb/Units.sol#710-754) is never used and should be removed
ABDKMath64x64.sub(int128,int128) (../../sb/Units.sol#133-139) is never used and should be removed
ABDKMath64x64.to128x128(int128) (../../sb/Units.sol#105-109) is never used and should be removed
ABDKMath64x64.toInt(int128) (../../sb/Units.sol#49-53) is never used and should be removed
ABDKMath64x64.toUInt(int128) (../../sb/Units.sol#76-81) is never used and should be removed
Units.percentage(int128) (../../sb/Units.sol#817-819) is never used and should be removed
Units.percentage(uint256) (../../sb/Units.sol#809-812) is never used and should be removed
Units.scaleDown(uint256,uint256) (../../sb/Units.sol#782-784) is never used and should be removed
Units.scaleToX64(uint256,uint256) (../../sb/Units.sol#791-794) is never used and should be removed
Units.scaleUp(uint256,uint256) (../../sb/Units.sol#774-776) is never used and should be removed
Units.scalefromX64(int128,uint256) (../../sb/Units.sol#800-803) is never used and should be removed
Units.toYears(uint256) (../../sb/Units.sol#825-827) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code

Pragma version^0.8.0 (../../sb/Units.sol#1) allows old versions
solc-0.8.27 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Function ABDKMath64x64.log_2(int128) (../../sb/Units.sol#477-520) is not in mixedCase
Function ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) is not in mixedCase
Constant ABDKMath64x64.MIN_64x64 (../../sb/Units.sol#21) is not in UPPER_CASE_WITH_UNDERSCORES
Constant ABDKMath64x64.MAX_64x64 (../../sb/Units.sol#26) is not in UPPER_CASE_WITH_UNDERSCORES
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

ABDKMath64x64.fromInt(int256) (../../sb/Units.sol#35-40) uses literals with too many digits:
	- require(bool)(x >= - 0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF) (../../sb/Units.sol#37)
ABDKMath64x64.muli(int128,int256) (../../sb/Units.sol#164-192) uses literals with too many digits:
	- require(bool)(y >= - 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF && y <= 0x1000000000000000000000000000000000000000000000000) (../../sb/Units.sol#167-170)
ABDKMath64x64.muli(int128,int256) (../../sb/Units.sol#164-192) uses literals with too many digits:
	- require(bool)(absoluteResult <= 0x8000000000000000000000000000000000000000000000000000000000000000) (../../sb/Units.sol#184)
ABDKMath64x64.divi(int256,int256) (../../sb/Units.sol#244-266) uses literals with too many digits:
	- require(bool)(absoluteResult <= 0x80000000000000000000000000000000) (../../sb/Units.sol#259)
ABDKMath64x64.inv(int128) (../../sb/Units.sol#318-325) uses literals with too many digits:
	- result = int256(0x100000000000000000000000000000000) / x (../../sb/Units.sol#321)
ABDKMath64x64.gavg(int128,int128) (../../sb/Units.sol#348-355) uses literals with too many digits:
	- require(bool)(m < 0x4000000000000000000000000000000000000000000000000000000000000000) (../../sb/Units.sol#352)
ABDKMath64x64.pow(int128,uint256) (../../sb/Units.sol#365-456) uses literals with too many digits:
	- absResult = 0x100000000000000000000000000000000 (../../sb/Units.sol#371)
ABDKMath64x64.pow(int128,uint256) (../../sb/Units.sol#365-456) uses literals with too many digits:
	- absX <= 0x10000000000000000 (../../sb/Units.sol#373)
ABDKMath64x64.pow(int128,uint256) (../../sb/Units.sol#365-456) uses literals with too many digits:
	- absX < 0x1000000000000000000000000 (../../sb/Units.sol#402)
ABDKMath64x64.pow(int128,uint256) (../../sb/Units.sol#365-456) uses literals with too many digits:
	- absX < 0x10000000000000000000000000000 (../../sb/Units.sol#406)
ABDKMath64x64.pow(int128,uint256) (../../sb/Units.sol#365-456) uses literals with too many digits:
	- absX < 0x1000000000000000000000000000000 (../../sb/Units.sol#410)
ABDKMath64x64.pow(int128,uint256) (../../sb/Units.sol#365-456) uses literals with too many digits:
	- absX < 0x10000000000000000000000000000000 (../../sb/Units.sol#414)
ABDKMath64x64.pow(int128,uint256) (../../sb/Units.sol#365-456) uses literals with too many digits:
	- absX < 0x40000000000000000000000000000000 (../../sb/Units.sol#418)
ABDKMath64x64.pow(int128,uint256) (../../sb/Units.sol#365-456) uses literals with too many digits:
	- absX < 0x80000000000000000000000000000000 (../../sb/Units.sol#422)
ABDKMath64x64.pow(int128,uint256) (../../sb/Units.sol#365-456) uses literals with too many digits:
	- absResult > 0x100000000000000000000000000000000 (../../sb/Units.sol#434)
ABDKMath64x64.pow(int128,uint256) (../../sb/Units.sol#365-456) uses literals with too many digits:
	- absX >= 0x100000000000000000000000000000000 (../../sb/Units.sol#441)
ABDKMath64x64.log_2(int128) (../../sb/Units.sol#477-520) uses literals with too many digits:
	- xc >= 0x10000000000000000 (../../sb/Units.sol#483)
ABDKMath64x64.log_2(int128) (../../sb/Units.sol#477-520) uses literals with too many digits:
	- xc >= 0x100000000 (../../sb/Units.sol#487)
ABDKMath64x64.log_2(int128) (../../sb/Units.sol#477-520) uses literals with too many digits:
	- bit = 0x8000000000000000 (../../sb/Units.sol#511)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- require(bool)(x < 0x400000000000000000) (../../sb/Units.sol#544)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- x < - 0x400000000000000000 (../../sb/Units.sol#546)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- result = 0x80000000000000000000000000000000 (../../sb/Units.sol#548)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- x & 0x8000000000000000 > 0 (../../sb/Units.sol#550)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- x & 0x4000000000000000 > 0 (../../sb/Units.sol#551)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- x & 0x2000000000000000 > 0 (../../sb/Units.sol#552)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- x & 0x1000000000000000 > 0 (../../sb/Units.sol#553)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- x & 0x800000000000000 > 0 (../../sb/Units.sol#554)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- x & 0x400000000000000 > 0 (../../sb/Units.sol#555)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- x & 0x200000000000000 > 0 (../../sb/Units.sol#556)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- x & 0x100000000000000 > 0 (../../sb/Units.sol#557)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- x & 0x80000000000000 > 0 (../../sb/Units.sol#558)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- x & 0x40000000000000 > 0 (../../sb/Units.sol#559)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- x & 0x20000000000000 > 0 (../../sb/Units.sol#560)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- x & 0x10000000000000 > 0 (../../sb/Units.sol#561)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- x & 0x8000000000000 > 0 (../../sb/Units.sol#562)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- x & 0x4000000000000 > 0 (../../sb/Units.sol#563)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- x & 0x2000000000000 > 0 (../../sb/Units.sol#564)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- x & 0x1000000000000 > 0 (../../sb/Units.sol#565)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- x & 0x800000000000 > 0 (../../sb/Units.sol#566)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- x & 0x400000000000 > 0 (../../sb/Units.sol#567)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- x & 0x200000000000 > 0 (../../sb/Units.sol#568)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- x & 0x100000000000 > 0 (../../sb/Units.sol#569)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- result = (result * 0x100000B1721BCFC99D9F890EA06911763) >> 128 (../../sb/Units.sol#569)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- x & 0x80000000000 > 0 (../../sb/Units.sol#570)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- result = (result * 0x10000058B90CF1E6D97F9CA14DBCC1628) >> 128 (../../sb/Units.sol#570)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- x & 0x40000000000 > 0 (../../sb/Units.sol#571)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- result = (result * 0x1000002C5C863B73F016468F6BAC5CA2B) >> 128 (../../sb/Units.sol#571)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- x & 0x20000000000 > 0 (../../sb/Units.sol#572)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- result = (result * 0x100000162E430E5A18F6119E3C02282A5) >> 128 (../../sb/Units.sol#572)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- x & 0x10000000000 > 0 (../../sb/Units.sol#573)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- result = (result * 0x1000000B1721835514B86E6D96EFD1BFE) >> 128 (../../sb/Units.sol#573)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- x & 0x8000000000 > 0 (../../sb/Units.sol#574)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- result = (result * 0x100000058B90C0B48C6BE5DF846C5B2EF) >> 128 (../../sb/Units.sol#574)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- x & 0x4000000000 > 0 (../../sb/Units.sol#575)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- result = (result * 0x10000002C5C8601CC6B9E94213C72737A) >> 128 (../../sb/Units.sol#575)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- x & 0x2000000000 > 0 (../../sb/Units.sol#576)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- result = (result * 0x1000000162E42FFF037DF38AA2B219F06) >> 128 (../../sb/Units.sol#576)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- x & 0x1000000000 > 0 (../../sb/Units.sol#577)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- result = (result * 0x10000000B17217FBA9C739AA5819F44F9) >> 128 (../../sb/Units.sol#577)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- x & 0x800000000 > 0 (../../sb/Units.sol#578)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- result = (result * 0x1000000058B90BFCDEE5ACD3C1CEDC823) >> 128 (../../sb/Units.sol#578)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- x & 0x400000000 > 0 (../../sb/Units.sol#579)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- result = (result * 0x100000002C5C85FE31F35A6A30DA1BE50) >> 128 (../../sb/Units.sol#579)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- x & 0x200000000 > 0 (../../sb/Units.sol#580)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- result = (result * 0x10000000162E42FF0999CE3541B9FFFCF) >> 128 (../../sb/Units.sol#580)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- x & 0x100000000 > 0 (../../sb/Units.sol#581)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- result = (result * 0x100000000B17217F80F4EF5AADDA45554) >> 128 (../../sb/Units.sol#581)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- x & 0x80000000 > 0 (../../sb/Units.sol#582)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- result = (result * 0x10000000058B90BFBF8479BD5A81B51AD) >> 128 (../../sb/Units.sol#582)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- x & 0x40000000 > 0 (../../sb/Units.sol#583)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- result = (result * 0x1000000002C5C85FDF84BD62AE30A74CC) >> 128 (../../sb/Units.sol#583)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- x & 0x20000000 > 0 (../../sb/Units.sol#584)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- result = (result * 0x100000000162E42FEFB2FED257559BDAA) >> 128 (../../sb/Units.sol#584)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- x & 0x10000000 > 0 (../../sb/Units.sol#585)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- result = (result * 0x1000000000B17217F7D5A7716BBA4A9AE) >> 128 (../../sb/Units.sol#585)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- x & 0x8000000 > 0 (../../sb/Units.sol#586)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- result = (result * 0x100000000058B90BFBE9DDBAC5E109CCE) >> 128 (../../sb/Units.sol#586)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- x & 0x4000000 > 0 (../../sb/Units.sol#587)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- result = (result * 0x10000000002C5C85FDF4B15DE6F17EB0D) >> 128 (../../sb/Units.sol#587)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- x & 0x2000000 > 0 (../../sb/Units.sol#588)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- result = (result * 0x1000000000162E42FEFA494F1478FDE05) >> 128 (../../sb/Units.sol#588)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- x & 0x1000000 > 0 (../../sb/Units.sol#589)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- result = (result * 0x10000000000B17217F7D20CF927C8E94C) >> 128 (../../sb/Units.sol#589)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- x & 0x800000 > 0 (../../sb/Units.sol#590)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- result = (result * 0x1000000000058B90BFBE8F71CB4E4B33D) >> 128 (../../sb/Units.sol#590)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- x & 0x400000 > 0 (../../sb/Units.sol#591)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- result = (result * 0x100000000002C5C85FDF477B662B26945) >> 128 (../../sb/Units.sol#591)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- x & 0x200000 > 0 (../../sb/Units.sol#592)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- result = (result * 0x10000000000162E42FEFA3AE53369388C) >> 128 (../../sb/Units.sol#592)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- x & 0x100000 > 0 (../../sb/Units.sol#593)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- result = (result * 0x100000000000B17217F7D1D351A389D40) >> 128 (../../sb/Units.sol#593)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- result = (result * 0x10000000000058B90BFBE8E8B2D3D4EDE) >> 128 (../../sb/Units.sol#594)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- result = (result * 0x1000000000002C5C85FDF4741BEA6E77E) >> 128 (../../sb/Units.sol#595)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- result = (result * 0x100000000000162E42FEFA39FE95583C2) >> 128 (../../sb/Units.sol#596)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- result = (result * 0x1000000000000B17217F7D1CFB72B45E1) >> 128 (../../sb/Units.sol#597)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- result = (result * 0x100000000000058B90BFBE8E7CC35C3F0) >> 128 (../../sb/Units.sol#598)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- result = (result * 0x10000000000002C5C85FDF473E242EA38) >> 128 (../../sb/Units.sol#599)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- result = (result * 0x1000000000000162E42FEFA39F02B772C) >> 128 (../../sb/Units.sol#600)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- result = (result * 0x10000000000000B17217F7D1CF7D83C1A) >> 128 (../../sb/Units.sol#601)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- result = (result * 0x1000000000000058B90BFBE8E7BDCBE2E) >> 128 (../../sb/Units.sol#602)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- result = (result * 0x100000000000002C5C85FDF473DEA871F) >> 128 (../../sb/Units.sol#603)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- result = (result * 0x10000000000000162E42FEFA39EF44D91) >> 128 (../../sb/Units.sol#604)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- result = (result * 0x100000000000000B17217F7D1CF79E949) >> 128 (../../sb/Units.sol#605)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- result = (result * 0x10000000000000058B90BFBE8E7BCE544) >> 128 (../../sb/Units.sol#606)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- result = (result * 0x1000000000000002C5C85FDF473DE6ECA) >> 128 (../../sb/Units.sol#607)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- result = (result * 0x100000000000000162E42FEFA39EF366F) >> 128 (../../sb/Units.sol#608)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- result = (result * 0x1000000000000000B17217F7D1CF79AFA) >> 128 (../../sb/Units.sol#609)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- result = (result * 0x100000000000000058B90BFBE8E7BCD6D) >> 128 (../../sb/Units.sol#610)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- result = (result * 0x10000000000000002C5C85FDF473DE6B2) >> 128 (../../sb/Units.sol#611)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- result = (result * 0x1000000000000000162E42FEFA39EF358) >> 128 (../../sb/Units.sol#612)
ABDKMath64x64.exp_2(int128) (../../sb/Units.sol#542-620) uses literals with too many digits:
	- result = (result * 0x10000000000000000B17217F7D1CF79AB) >> 128 (../../sb/Units.sol#613)
ABDKMath64x64.exp(int128) (../../sb/Units.sol#628-636) uses literals with too many digits:
	- require(bool)(x < 0x400000000000000000) (../../sb/Units.sol#630)
ABDKMath64x64.exp(int128) (../../sb/Units.sol#628-636) uses literals with too many digits:
	- x < - 0x400000000000000000 (../../sb/Units.sol#632)
ABDKMath64x64.divuu(uint256,uint256) (../../sb/Units.sol#646-701) uses literals with too many digits:
	- xc >= 0x100000000 (../../sb/Units.sol#656)
ABDKMath64x64.sqrtu(uint256) (../../sb/Units.sol#710-754) uses literals with too many digits:
	- xx >= 0x100000000000000000000000000000000 (../../sb/Units.sol#716)
ABDKMath64x64.sqrtu(uint256) (../../sb/Units.sol#710-754) uses literals with too many digits:
	- xx >= 0x10000000000000000 (../../sb/Units.sol#720)
ABDKMath64x64.sqrtu(uint256) (../../sb/Units.sol#710-754) uses literals with too many digits:
	- xx >= 0x100000000 (../../sb/Units.sol#724)
ABDKMath64x64.slitherConstructorConstantVariables() (../../sb/Units.sol#17-755) uses literals with too many digits:
	- MIN_64x64 = - 0x80000000000000000000000000000000 (../../sb/Units.sol#21)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits
/sb/Units.sol analyzed (2 contracts with 93 detectors), 162 result(s) found
