{
    "errors": [],
    "fails": [],
    "findings": [
        {
            "confidence": "Medium",
            "contract": "Legendary_v8",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/ImmuneBytes-BonFi(Legendary)- Final Audit Report/code/Legendary_v9.sol",
            "function": "changeLockDuration",
            "impact": "Low",
            "line": 263,
            "line_end": 265,
            "message": "Legendary_v8.changeLockDuration(uint256) (Legendary_v9.sol#263-265) should emit an event for: \n\t- lockDuration = lockduration_ (Legendary_v9.sol#264) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Legendary_v8",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/ImmuneBytes-BonFi(Legendary)- Final Audit Report/code/Legendary_v9.sol",
            "function": "addReward",
            "impact": "Low",
            "line": 288,
            "line_end": 303,
            "message": "Legendary_v8.addReward(uint256) (Legendary_v9.sol#288-303) should emit an event for: \n\t- rewardBalance = rewardBalance.add(rewardAmount) (Legendary_v9.sol#301) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Legendary_v8",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/ImmuneBytes-BonFi(Legendary)- Final Audit Report/code/Legendary_v9.sol",
            "function": "setEligibilityAmount",
            "impact": "Low",
            "line": 276,
            "line_end": 280,
            "message": "Legendary_v8.setEligibilityAmount(uint256) (Legendary_v9.sol#276-280) should emit an event for: \n\t- eligibilityAmount = eligibilityAmount_ (Legendary_v9.sol#279) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Legendary_v8",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/ImmuneBytes-BonFi(Legendary)- Final Audit Report/code/Legendary_v9.sol",
            "function": "addReward",
            "impact": "Low",
            "line": 288,
            "line_end": 303,
            "message": "Reentrancy in Legendary_v8.addReward(uint256) (Legendary_v9.sol#288-303):\n\tExternal calls:\n\t- ! _payMe(from,rewardAmount) (Legendary_v9.sol#296)\n\t\t- ERC20Interface.transferFrom(allower,receiver,amount) (Legendary_v9.sol#511)\n\tState variables written after the call(s):\n\t- rewardBalance = rewardBalance.add(rewardAmount) (Legendary_v9.sol#301)\n\t- totalReward = totalReward.add(rewardAmount) (Legendary_v9.sol#300)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Legendary_v8",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/ImmuneBytes-BonFi(Legendary)- Final Audit Report/code/Legendary_v9.sol",
            "function": "_stake",
            "impact": "Low",
            "line": 351,
            "line_end": 376,
            "message": "Reentrancy in Legendary_v8._stake(address,uint256) (Legendary_v9.sol#351-376):\n\tExternal calls:\n\t- ! _payMe(from,amount) (Legendary_v9.sol#352)\n\t\t- ERC20Interface.transferFrom(allower,receiver,amount) (Legendary_v9.sol#511)\n\tState variables written after the call(s):\n\t- deposits[from] = Deposits(amount,block.timestamp,block.timestamp.add((lockDuration.mul(86400))),index,false,stakerEligibility) (Legendary_v9.sol#362-369)\n\t- hasStaked[from] = true (Legendary_v9.sol#356)\n\t- stakedBalance = stakedBalance.add(amount) (Legendary_v9.sol#373)\n\t- stakedTotal = stakedTotal.add(amount) (Legendary_v9.sol#374)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Legendary_v8",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/ImmuneBytes-BonFi(Legendary)- Final Audit Report/code/Legendary_v9.sol",
            "function": "_withdraw",
            "impact": "Low",
            "line": 392,
            "line_end": 411,
            "message": "Reentrancy in Legendary_v8._withdraw(address) (Legendary_v9.sol#392-411):\n\tExternal calls:\n\t- _payDirect(from,payOut) (Legendary_v9.sol#406)\n\t\t- ERC20Interface.transfer(to,amount) (Legendary_v9.sol#516)\n\tEvent emitted after the call(s):\n\t- PaidOut(tokenAddress,from,amount,reward) (Legendary_v9.sol#407)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Legendary_v8",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/ImmuneBytes-BonFi(Legendary)- Final Audit Report/code/Legendary_v9.sol",
            "function": "_emergencyWithdraw",
            "impact": "Low",
            "line": 425,
            "line_end": 439,
            "message": "Reentrancy in Legendary_v8._emergencyWithdraw(address) (Legendary_v9.sol#425-439):\n\tExternal calls:\n\t- principalPaid = _payDirect(from,amount) (Legendary_v9.sol#434)\n\t\t- ERC20Interface.transfer(to,amount) (Legendary_v9.sol#516)\n\tEvent emitted after the call(s):\n\t- PaidOut(tokenAddress,from,amount,0) (Legendary_v9.sol#436)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Legendary_v8",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/ImmuneBytes-BonFi(Legendary)- Final Audit Report/code/Legendary_v9.sol",
            "function": "_stake",
            "impact": "Low",
            "line": 351,
            "line_end": 376,
            "message": "Reentrancy in Legendary_v8._stake(address,uint256) (Legendary_v9.sol#351-376):\n\tExternal calls:\n\t- ! _payMe(from,amount) (Legendary_v9.sol#352)\n\t\t- ERC20Interface.transferFrom(allower,receiver,amount) (Legendary_v9.sol#511)\n\tEvent emitted after the call(s):\n\t- Staked(tokenAddress,from,amount) (Legendary_v9.sol#371)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Legendary_v8",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/ImmuneBytes-BonFi(Legendary)- Final Audit Report/code/Legendary_v9.sol",
            "function": "_calculate",
            "impact": "Low",
            "line": 452,
            "line_end": 499,
            "message": "Legendary_v8._calculate(address) (Legendary_v9.sol#452-499) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- i < index (Legendary_v9.sol#470)\n\t- endTime < rates[i + 1].timeStamp (Legendary_v9.sol#472)\n\t- depositTime < endTime (Legendary_v9.sol#486)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Legendary_v8",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/ImmuneBytes-BonFi(Legendary)- Final Audit Report/code/Legendary_v9.sol",
            "function": "_emergencyWithdraw",
            "impact": "Low",
            "line": 425,
            "line_end": 439,
            "message": "Legendary_v8._emergencyWithdraw(address) (Legendary_v9.sol#425-439) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(principalPaid,Error paying) (Legendary_v9.sol#435)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Legendary_v8",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/ImmuneBytes-BonFi(Legendary)- Final Audit Report/code/Legendary_v9.sol",
            "function": "emergencyWithdraw",
            "impact": "Low",
            "line": 413,
            "line_end": 423,
            "message": "Legendary_v8.emergencyWithdraw() (Legendary_v9.sol#413-423) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(block.timestamp >= deposits[from].endTime,Requesting before lock time) (Legendary_v9.sol#416-419)\n\t- require(bool,string)(deposits[from].paid == false,Already paid out) (Legendary_v9.sol#420)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Legendary_v8",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/ImmuneBytes-BonFi(Legendary)- Final Audit Report/code/Legendary_v9.sol",
            "function": "_withdraw",
            "impact": "Low",
            "line": 392,
            "line_end": 411,
            "message": "Legendary_v8._withdraw(address) (Legendary_v9.sol#392-411) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(reward <= rewardBalance,Not enough rewards) (Legendary_v9.sol#396)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Legendary_v8",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/ImmuneBytes-BonFi(Legendary)- Final Audit Report/code/Legendary_v9.sol",
            "function": "withdraw",
            "impact": "Low",
            "line": 381,
            "line_end": 390,
            "message": "Legendary_v8.withdraw() (Legendary_v9.sol#381-390) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(block.timestamp >= deposits[from].endTime,Requesting before lock time) (Legendary_v9.sol#384-387)\n\t- require(bool,string)(deposits[from].paid == false,Already paid out) (Legendary_v9.sol#388)\n",
            "name": "timestamp",
            "check": "FP"
        }
    ],
    "infos": [],
    "parser": {
        "id": "slither-0.10.0",
        "mode": "solidity",
        "version": "2024/04/30"
    }
}