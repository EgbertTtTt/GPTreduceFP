{
    "errors": [],
    "fails": [],
    "findings": [
        {
            "confidence": "Medium",
            "contract": "LiquidityStaking",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-Tranchessv1.0/contract-core-5ac3d997da3ef37b0135565a11c5ebcc519862aa/contracts/governance/LiquidityStaking.sol",
            "function": "exit",
            "impact": "Medium",
            "line": 480,
            "line_end": 484,
            "message": "Reentrancy in LiquidityStaking.exit() (LiquidityStaking.sol#480-484):\n\tExternal calls:\n\t- _withdraw(msg.sender,stakes[msg.sender]) (LiquidityStaking.sol#482)\n\t\t- require(bool,string)(IERC20(stakedToken).transfer(account,amount),Staked transfer failed) (LiquidityStaking.sol#487)\n\t- rewards = _claimRewards(msg.sender) (LiquidityStaking.sol#483)\n\t\t- require(bool,string)(IERC20(rewardToken).transfer(account,rewards),Reward transfer failed) (LiquidityStaking.sol#494)\n\tState variables written after the call(s):\n\t- rewards = _claimRewards(msg.sender) (LiquidityStaking.sol#483)\n\t\t- delete claimableRewards[account] (LiquidityStaking.sol#495)\n\tLiquidityStaking.claimableRewards (LiquidityStaking.sol#425) can be used in cross function reentrancies:\n\t- LiquidityStaking._claimRewards(address) (LiquidityStaking.sol#492-496)\n\t- LiquidityStaking._rewardCheckpoint(address) (LiquidityStaking.sol#520-528)\n\t- LiquidityStaking.claimableRewards (LiquidityStaking.sol#425)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "LiquidityStaking",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-Tranchessv1.0/contract-core-5ac3d997da3ef37b0135565a11c5ebcc519862aa/contracts/governance/LiquidityStaking.sol",
            "function": "_claimRewards",
            "impact": "Medium",
            "line": 492,
            "line_end": 496,
            "message": "Reentrancy in LiquidityStaking._claimRewards(address) (LiquidityStaking.sol#492-496):\n\tExternal calls:\n\t- require(bool,string)(IERC20(rewardToken).transfer(account,rewards),Reward transfer failed) (LiquidityStaking.sol#494)\n\tState variables written after the call(s):\n\t- delete claimableRewards[account] (LiquidityStaking.sol#495)\n\tLiquidityStaking.claimableRewards (LiquidityStaking.sol#425) can be used in cross function reentrancies:\n\t- LiquidityStaking._claimRewards(address) (LiquidityStaking.sol#492-496)\n\t- LiquidityStaking._rewardCheckpoint(address) (LiquidityStaking.sol#520-528)\n\t- LiquidityStaking.claimableRewards (LiquidityStaking.sol#425)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "LiquidityStaking",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-Tranchessv1.0/contract-core-5ac3d997da3ef37b0135565a11c5ebcc519862aa/contracts/governance/LiquidityStaking.sol",
            "function": "deposit",
            "impact": "Medium",
            "line": 459,
            "line_end": 468,
            "message": "Reentrancy in LiquidityStaking.deposit(uint256) (LiquidityStaking.sol#459-468):\n\tExternal calls:\n\t- require(bool,string)(IERC20(stakedToken).transferFrom(msg.sender,address(this),amount),Staked transferFrom failed) (LiquidityStaking.sol#462-465)\n\tState variables written after the call(s):\n\t- stakes[msg.sender] = stakes[msg.sender].add(amount) (LiquidityStaking.sol#467)\n\tLiquidityStaking.stakes (LiquidityStaking.sol#424) can be used in cross function reentrancies:\n\t- LiquidityStaking._rewardCheckpoint(address) (LiquidityStaking.sol#520-528)\n\t- LiquidityStaking._withdraw(address,uint256) (LiquidityStaking.sol#486-490)\n\t- LiquidityStaking.deposit(uint256) (LiquidityStaking.sol#459-468)\n\t- LiquidityStaking.exit() (LiquidityStaking.sol#480-484)\n\t- LiquidityStaking.stakes (LiquidityStaking.sol#424)\n\t- totalStakes = totalStakes.add(amount) (LiquidityStaking.sol#466)\n\tLiquidityStaking.totalStakes (LiquidityStaking.sol#422) can be used in cross function reentrancies:\n\t- LiquidityStaking._checkpoint() (LiquidityStaking.sol#498-518)\n\t- LiquidityStaking._withdraw(address,uint256) (LiquidityStaking.sol#486-490)\n\t- LiquidityStaking.deposit(uint256) (LiquidityStaking.sol#459-468)\n\t- LiquidityStaking.totalStakes (LiquidityStaking.sol#422)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "LiquidityStaking",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-Tranchessv1.0/contract-core-5ac3d997da3ef37b0135565a11c5ebcc519862aa/contracts/governance/LiquidityStaking.sol",
            "function": "initialize",
            "impact": "Medium",
            "line": 441,
            "line_end": 452,
            "message": "Reentrancy in LiquidityStaking.initialize(uint256) (LiquidityStaking.sol#441-452):\n\tExternal calls:\n\t- require(bool,string)(IERC20(rewardToken).transferFrom(msg.sender,address(this),amount),Reward transferFrom failed) (LiquidityStaking.sol#446-449)\n\tState variables written after the call(s):\n\t- rate = rate_ (LiquidityStaking.sol#451)\n\tLiquidityStaking.rate (LiquidityStaking.sol#418) can be used in cross function reentrancies:\n\t- LiquidityStaking._checkpoint() (LiquidityStaking.sol#498-518)\n\t- LiquidityStaking.initialize(uint256) (LiquidityStaking.sol#441-452)\n\t- LiquidityStaking.rate (LiquidityStaking.sol#418)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "LiquidityStaking",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-Tranchessv1.0/contract-core-5ac3d997da3ef37b0135565a11c5ebcc519862aa/contracts/governance/LiquidityStaking.sol",
            "function": "deposit",
            "impact": "Low",
            "line": 459,
            "line_end": 468,
            "message": "LiquidityStaking.deposit(uint256) (LiquidityStaking.sol#459-468) should emit an event for: \n\t- totalStakes = totalStakes.add(amount) (LiquidityStaking.sol#466) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "LiquidityStaking",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-Tranchessv1.0/contract-core-5ac3d997da3ef37b0135565a11c5ebcc519862aa/contracts/governance/LiquidityStaking.sol",
            "function": "_withdraw",
            "impact": "Low",
            "line": 486,
            "line_end": 490,
            "message": "Reentrancy in LiquidityStaking._withdraw(address,uint256) (LiquidityStaking.sol#486-490):\n\tExternal calls:\n\t- require(bool,string)(IERC20(stakedToken).transfer(account,amount),Staked transfer failed) (LiquidityStaking.sol#487)\n\tState variables written after the call(s):\n\t- stakes[account] = stakes[account].sub(amount,Exceed staked balances) (LiquidityStaking.sol#489)\n\t- totalStakes = totalStakes.sub(amount,Exceed staked balances) (LiquidityStaking.sol#488)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "LiquidityStaking",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-Tranchessv1.0/contract-core-5ac3d997da3ef37b0135565a11c5ebcc519862aa/contracts/governance/LiquidityStaking.sol",
            "function": "constructor",
            "impact": "Low",
            "line": 427,
            "line_end": 439,
            "message": "LiquidityStaking.constructor(address,address,uint256,uint256) (LiquidityStaking.sol#427-439) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(startTimestamp_ >= block.timestamp,Start cannot be in the past) (LiquidityStaking.sol#433)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "LiquidityStaking",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-Tranchessv1.0/contract-core-5ac3d997da3ef37b0135565a11c5ebcc519862aa/contracts/governance/LiquidityStaking.sol",
            "function": "initialize",
            "impact": "Low",
            "line": 441,
            "line_end": 452,
            "message": "LiquidityStaking.initialize(uint256) (LiquidityStaking.sol#441-452) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(startTimestamp >= block.timestamp,Start cannot be in the past) (LiquidityStaking.sol#443)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "LiquidityStaking",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-Tranchessv1.0/contract-core-5ac3d997da3ef37b0135565a11c5ebcc519862aa/contracts/governance/LiquidityStaking.sol",
            "function": "_checkpoint",
            "impact": "Low",
            "line": 498,
            "line_end": 518,
            "message": "LiquidityStaking._checkpoint() (LiquidityStaking.sol#498-518) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp < startTimestamp (LiquidityStaking.sol#500)\n\t- timeLapse != 0 (LiquidityStaking.sol#506)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "LiquidityStaking",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/PeckShield-Tranchessv1.0/contract-core-5ac3d997da3ef37b0135565a11c5ebcc519862aa/contracts/governance/LiquidityStaking.sol",
            "function": "_claimRewards",
            "impact": "Low",
            "line": 492,
            "line_end": 496,
            "message": "LiquidityStaking._claimRewards(address) (LiquidityStaking.sol#492-496) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(IERC20(rewardToken).transfer(account,rewards),Reward transfer failed) (LiquidityStaking.sol#494)\n",
            "name": "timestamp",
            "check": "FP"
        }
    ],
    "infos": [],
    "parser": {
        "id": "slither-0.10.0",
        "mode": "solidity",
        "version": "2024/04/30"
    }
}