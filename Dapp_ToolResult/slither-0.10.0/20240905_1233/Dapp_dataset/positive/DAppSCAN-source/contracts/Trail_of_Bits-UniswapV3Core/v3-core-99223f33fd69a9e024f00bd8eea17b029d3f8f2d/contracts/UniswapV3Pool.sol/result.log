'solc --version' running
'solc /sb/UniswapV3Pool.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/sb' running
Compilation warnings/errors on /sb/UniswapV3Pool.sol:
Warning: Contract code size exceeds 24576 bytes (a limit introduced in Spurious Dragon). This contract may not be deployable on mainnet. Consider enabling the optimizer (with a low "runs" value!), turning off revert strings, or using libraries.
    --> /sb/UniswapV3Pool.sol:2226:1:
     |
2226 | contract UniswapV3Pool is IUniswapV3Pool, NoDelegateCall {
     | ^ (Relevant source part starts here and spans across multiple lines).



FullMath.mulDiv(uint256,uint256,uint256) (../../sb/UniswapV3Pool.sol#1176-1268) has bitwise-xor operator ^ instead of the exponentiation operator **: 
	 - inv = (3 * denominator) ^ 2 (../../sb/UniswapV3Pool.sol#1249)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-exponentiation

TickMath.getSqrtRatioAtTick(int24) (../../sb/UniswapV3Pool.sol#534-565) performs a multiplication on the result of a division:
	- ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128 (../../sb/UniswapV3Pool.sol#557)
	- ratio = type()(uint256).max / ratio (../../sb/UniswapV3Pool.sol#559)
TickMath.getSqrtRatioAtTick(int24) (../../sb/UniswapV3Pool.sol#534-565) performs a multiplication on the result of a division:
	- ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128 (../../sb/UniswapV3Pool.sol#556)
	- ratio = type()(uint256).max / ratio (../../sb/UniswapV3Pool.sol#559)
TickMath.getSqrtRatioAtTick(int24) (../../sb/UniswapV3Pool.sol#534-565) performs a multiplication on the result of a division:
	- ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128 (../../sb/UniswapV3Pool.sol#555)
	- ratio = type()(uint256).max / ratio (../../sb/UniswapV3Pool.sol#559)
TickMath.getSqrtRatioAtTick(int24) (../../sb/UniswapV3Pool.sol#534-565) performs a multiplication on the result of a division:
	- ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128 (../../sb/UniswapV3Pool.sol#554)
	- ratio = type()(uint256).max / ratio (../../sb/UniswapV3Pool.sol#559)
TickMath.getSqrtRatioAtTick(int24) (../../sb/UniswapV3Pool.sol#534-565) performs a multiplication on the result of a division:
	- ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128 (../../sb/UniswapV3Pool.sol#553)
	- ratio = type()(uint256).max / ratio (../../sb/UniswapV3Pool.sol#559)
TickMath.getSqrtRatioAtTick(int24) (../../sb/UniswapV3Pool.sol#534-565) performs a multiplication on the result of a division:
	- ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128 (../../sb/UniswapV3Pool.sol#552)
	- ratio = type()(uint256).max / ratio (../../sb/UniswapV3Pool.sol#559)
TickMath.getSqrtRatioAtTick(int24) (../../sb/UniswapV3Pool.sol#534-565) performs a multiplication on the result of a division:
	- ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128 (../../sb/UniswapV3Pool.sol#551)
	- ratio = type()(uint256).max / ratio (../../sb/UniswapV3Pool.sol#559)
TickMath.getSqrtRatioAtTick(int24) (../../sb/UniswapV3Pool.sol#534-565) performs a multiplication on the result of a division:
	- ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128 (../../sb/UniswapV3Pool.sol#550)
	- ratio = type()(uint256).max / ratio (../../sb/UniswapV3Pool.sol#559)
TickMath.getSqrtRatioAtTick(int24) (../../sb/UniswapV3Pool.sol#534-565) performs a multiplication on the result of a division:
	- ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128 (../../sb/UniswapV3Pool.sol#549)
	- ratio = type()(uint256).max / ratio (../../sb/UniswapV3Pool.sol#559)
TickMath.getSqrtRatioAtTick(int24) (../../sb/UniswapV3Pool.sol#534-565) performs a multiplication on the result of a division:
	- ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128 (../../sb/UniswapV3Pool.sol#548)
	- ratio = type()(uint256).max / ratio (../../sb/UniswapV3Pool.sol#559)
TickMath.getSqrtRatioAtTick(int24) (../../sb/UniswapV3Pool.sol#534-565) performs a multiplication on the result of a division:
	- ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128 (../../sb/UniswapV3Pool.sol#547)
	- ratio = type()(uint256).max / ratio (../../sb/UniswapV3Pool.sol#559)
TickMath.getSqrtRatioAtTick(int24) (../../sb/UniswapV3Pool.sol#534-565) performs a multiplication on the result of a division:
	- ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128 (../../sb/UniswapV3Pool.sol#546)
	- ratio = type()(uint256).max / ratio (../../sb/UniswapV3Pool.sol#559)
TickMath.getSqrtRatioAtTick(int24) (../../sb/UniswapV3Pool.sol#534-565) performs a multiplication on the result of a division:
	- ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128 (../../sb/UniswapV3Pool.sol#545)
	- ratio = type()(uint256).max / ratio (../../sb/UniswapV3Pool.sol#559)
TickMath.getSqrtRatioAtTick(int24) (../../sb/UniswapV3Pool.sol#534-565) performs a multiplication on the result of a division:
	- ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128 (../../sb/UniswapV3Pool.sol#544)
	- ratio = type()(uint256).max / ratio (../../sb/UniswapV3Pool.sol#559)
TickMath.getSqrtRatioAtTick(int24) (../../sb/UniswapV3Pool.sol#534-565) performs a multiplication on the result of a division:
	- ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128 (../../sb/UniswapV3Pool.sol#543)
	- ratio = type()(uint256).max / ratio (../../sb/UniswapV3Pool.sol#559)
TickMath.getSqrtRatioAtTick(int24) (../../sb/UniswapV3Pool.sol#534-565) performs a multiplication on the result of a division:
	- ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128 (../../sb/UniswapV3Pool.sol#542)
	- ratio = type()(uint256).max / ratio (../../sb/UniswapV3Pool.sol#559)
TickMath.getSqrtRatioAtTick(int24) (../../sb/UniswapV3Pool.sol#534-565) performs a multiplication on the result of a division:
	- ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128 (../../sb/UniswapV3Pool.sol#541)
	- ratio = type()(uint256).max / ratio (../../sb/UniswapV3Pool.sol#559)
TickMath.getSqrtRatioAtTick(int24) (../../sb/UniswapV3Pool.sol#534-565) performs a multiplication on the result of a division:
	- ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128 (../../sb/UniswapV3Pool.sol#540)
	- ratio = type()(uint256).max / ratio (../../sb/UniswapV3Pool.sol#559)
TickMath.getSqrtRatioAtTick(int24) (../../sb/UniswapV3Pool.sol#534-565) performs a multiplication on the result of a division:
	- ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128 (../../sb/UniswapV3Pool.sol#539)
	- ratio = type()(uint256).max / ratio (../../sb/UniswapV3Pool.sol#559)
Tick.tickSpacingToMaxLiquidityPerTick(int24) (../../sb/UniswapV3Pool.sol#754-759) performs a multiplication on the result of a division:
	- minTick = (TickMath.MIN_TICK / tickSpacing) * tickSpacing (../../sb/UniswapV3Pool.sol#755)
Tick.tickSpacingToMaxLiquidityPerTick(int24) (../../sb/UniswapV3Pool.sol#754-759) performs a multiplication on the result of a division:
	- maxTick = (TickMath.MAX_TICK / tickSpacing) * tickSpacing (../../sb/UniswapV3Pool.sol#756)
FullMath.mulDiv(uint256,uint256,uint256) (../../sb/UniswapV3Pool.sol#1176-1268) performs a multiplication on the result of a division:
	- denominator = denominator / twos (../../sb/UniswapV3Pool.sol#1229)
	- inv = (3 * denominator) ^ 2 (../../sb/UniswapV3Pool.sol#1249)
FullMath.mulDiv(uint256,uint256,uint256) (../../sb/UniswapV3Pool.sol#1176-1268) performs a multiplication on the result of a division:
	- denominator = denominator / twos (../../sb/UniswapV3Pool.sol#1229)
	- inv *= 2 - denominator * inv (../../sb/UniswapV3Pool.sol#1253)
FullMath.mulDiv(uint256,uint256,uint256) (../../sb/UniswapV3Pool.sol#1176-1268) performs a multiplication on the result of a division:
	- denominator = denominator / twos (../../sb/UniswapV3Pool.sol#1229)
	- inv *= 2 - denominator * inv (../../sb/UniswapV3Pool.sol#1254)
FullMath.mulDiv(uint256,uint256,uint256) (../../sb/UniswapV3Pool.sol#1176-1268) performs a multiplication on the result of a division:
	- denominator = denominator / twos (../../sb/UniswapV3Pool.sol#1229)
	- inv *= 2 - denominator * inv (../../sb/UniswapV3Pool.sol#1255)
FullMath.mulDiv(uint256,uint256,uint256) (../../sb/UniswapV3Pool.sol#1176-1268) performs a multiplication on the result of a division:
	- denominator = denominator / twos (../../sb/UniswapV3Pool.sol#1229)
	- inv *= 2 - denominator * inv (../../sb/UniswapV3Pool.sol#1256)
FullMath.mulDiv(uint256,uint256,uint256) (../../sb/UniswapV3Pool.sol#1176-1268) performs a multiplication on the result of a division:
	- denominator = denominator / twos (../../sb/UniswapV3Pool.sol#1229)
	- inv *= 2 - denominator * inv (../../sb/UniswapV3Pool.sol#1257)
FullMath.mulDiv(uint256,uint256,uint256) (../../sb/UniswapV3Pool.sol#1176-1268) performs a multiplication on the result of a division:
	- denominator = denominator / twos (../../sb/UniswapV3Pool.sol#1229)
	- inv *= 2 - denominator * inv (../../sb/UniswapV3Pool.sol#1258)
FullMath.mulDiv(uint256,uint256,uint256) (../../sb/UniswapV3Pool.sol#1176-1268) performs a multiplication on the result of a division:
	- prod0 = prod0 / twos (../../sb/UniswapV3Pool.sol#1234)
	- result = prod0 * inv (../../sb/UniswapV3Pool.sol#1266)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply

UniswapV3Pool.initialize(uint160) (../../sb/UniswapV3Pool.sol#2390-2408) uses a dangerous strict equality:
	- require(bool,string)(slot0.sqrtPriceX96 == 0,AI) (../../sb/UniswapV3Pool.sol#2391)
UniswapV3Pool.swap(address,bool,int256,uint160,bytes) (../../sb/UniswapV3Pool.sol#2699-2869) uses a dangerous strict equality:
	- state.sqrtPriceX96 == step.sqrtPriceNextX96 (../../sb/UniswapV3Pool.sol#2794)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities

Reentrancy in UniswapV3Pool.collectProtocol(address,uint128,uint128) (../../sb/UniswapV3Pool.sol#2929-2949):
	External calls:
	- TransferHelper.safeTransfer(token0,recipient,amount0) (../../sb/UniswapV3Pool.sol#2940)
	State variables written after the call(s):
	- protocolFees.token1 -= amount1 (../../sb/UniswapV3Pool.sol#2944)
	UniswapV3Pool.protocolFees (../../sb/UniswapV3Pool.sol#2284) can be used in cross function reentrancies:
	- UniswapV3Pool.collectProtocol(address,uint128,uint128) (../../sb/UniswapV3Pool.sol#2929-2949)
	- UniswapV3Pool.flash(address,uint256,uint256,bytes) (../../sb/UniswapV3Pool.sol#2872-2915)
	- UniswapV3Pool.protocolFees (../../sb/UniswapV3Pool.sol#2284)
	- UniswapV3Pool.swap(address,bool,int256,uint160,bytes) (../../sb/UniswapV3Pool.sol#2699-2869)
Reentrancy in UniswapV3Pool.swap(address,bool,int256,uint160,bytes) (../../sb/UniswapV3Pool.sol#2699-2869):
	External calls:
	- TransferHelper.safeTransfer(token1,recipient,uint256(- amount1)) (../../sb/UniswapV3Pool.sol#2854)
	- IUniswapV3SwapCallback(msg.sender).uniswapV3SwapCallback(amount0,amount1,data) (../../sb/UniswapV3Pool.sol#2857)
	- TransferHelper.safeTransfer(token0,recipient,uint256(- amount0)) (../../sb/UniswapV3Pool.sol#2860)
	- IUniswapV3SwapCallback(msg.sender).uniswapV3SwapCallback(amount0,amount1,data) (../../sb/UniswapV3Pool.sol#2863)
	State variables written after the call(s):
	- slot0.unlocked = true (../../sb/UniswapV3Pool.sol#2868)
	UniswapV3Pool.slot0 (../../sb/UniswapV3Pool.sol#2271) can be used in cross function reentrancies:
	- UniswapV3Pool._modifyPosition(UniswapV3Pool.ModifyPositionParams) (../../sb/UniswapV3Pool.sol#2425-2491)
	- UniswapV3Pool.flash(address,uint256,uint256,bytes) (../../sb/UniswapV3Pool.sol#2872-2915)
	- UniswapV3Pool.increaseObservationCardinalityNext(uint16) (../../sb/UniswapV3Pool.sol#2373-2385)
	- UniswapV3Pool.initialize(uint160) (../../sb/UniswapV3Pool.sol#2390-2408)
	- UniswapV3Pool.lock() (../../sb/UniswapV3Pool.sol#2303-2308)
	- UniswapV3Pool.observe(uint32[]) (../../sb/UniswapV3Pool.sol#2354-2370)
	- UniswapV3Pool.secondsInside(int24,int24) (../../sb/UniswapV3Pool.sol#2347-2351)
	- UniswapV3Pool.setFeeProtocol(uint8,uint8) (../../sb/UniswapV3Pool.sol#2918-2926)
	- UniswapV3Pool.slot0 (../../sb/UniswapV3Pool.sol#2271)
	- UniswapV3Pool.swap(address,bool,int256,uint160,bytes) (../../sb/UniswapV3Pool.sol#2699-2869)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1

UniswapV3Pool.mint(address,int24,int24,uint128,bytes).balance1Before (../../sb/UniswapV3Pool.sol#2587) is a local variable never initialized
SqrtPriceMath.getNextSqrtPriceFromAmount0RoundingUp(uint160,uint128,uint256,bool).product_scope_0 (../../sb/UniswapV3Pool.sol#1809) is a local variable never initialized
UniswapV3Pool._updatePosition(address,int24,int24,int128,int24).flippedLower (../../sb/UniswapV3Pool.sol#2511) is a local variable never initialized
UniswapV3Pool.mint(address,int24,int24,uint128,bytes).balance0Before (../../sb/UniswapV3Pool.sol#2586) is a local variable never initialized
UniswapV3Pool._updatePosition(address,int24,int24,int128,int24).flippedUpper (../../sb/UniswapV3Pool.sol#2512) is a local variable never initialized
SqrtPriceMath.getNextSqrtPriceFromAmount0RoundingUp(uint160,uint128,uint256,bool).product (../../sb/UniswapV3Pool.sol#1799) is a local variable never initialized
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-local-variables

UniswapV3Pool.observe(uint32[]) (../../sb/UniswapV3Pool.sol#2354-2370) ignores return value by observations.observe(_blockTimestamp(),secondsAgos,slot0.tick,slot0.observationIndex,liquidity,slot0.observationCardinality) (../../sb/UniswapV3Pool.sol#2361-2369)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return

Reentrancy in UniswapV3Pool.flash(address,uint256,uint256,bytes) (../../sb/UniswapV3Pool.sol#2872-2915):
	External calls:
	- TransferHelper.safeTransfer(token0,recipient,amount0) (../../sb/UniswapV3Pool.sol#2886)
	- TransferHelper.safeTransfer(token1,recipient,amount1) (../../sb/UniswapV3Pool.sol#2887)
	- IUniswapV3FlashCallback(msg.sender).uniswapV3FlashCallback(fee0,fee1,data) (../../sb/UniswapV3Pool.sol#2889)
	State variables written after the call(s):
	- feeGrowthGlobal0X128 += FullMath.mulDiv(paid0 - fees0,FixedPoint128.Q128,_liquidity) (../../sb/UniswapV3Pool.sol#2905)
	- feeGrowthGlobal1X128 += FullMath.mulDiv(paid1 - fees1,FixedPoint128.Q128,_liquidity) (../../sb/UniswapV3Pool.sol#2911)
	- protocolFees.token0 += uint128(fees0) (../../sb/UniswapV3Pool.sol#2904)
	- protocolFees.token1 += uint128(fees1) (../../sb/UniswapV3Pool.sol#2910)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

Reentrancy in UniswapV3Pool.collect(address,int24,int24,uint128,uint128) (../../sb/UniswapV3Pool.sol#2598-2621):
	External calls:
	- TransferHelper.safeTransfer(token0,recipient,amount0) (../../sb/UniswapV3Pool.sol#2613)
	- TransferHelper.safeTransfer(token1,recipient,amount1) (../../sb/UniswapV3Pool.sol#2617)
	Event emitted after the call(s):
	- Collect(msg.sender,recipient,tickLower,tickUpper,amount0,amount1) (../../sb/UniswapV3Pool.sol#2620)
Reentrancy in UniswapV3Pool.collectProtocol(address,uint128,uint128) (../../sb/UniswapV3Pool.sol#2929-2949):
	External calls:
	- TransferHelper.safeTransfer(token0,recipient,amount0) (../../sb/UniswapV3Pool.sol#2940)
	- TransferHelper.safeTransfer(token1,recipient,amount1) (../../sb/UniswapV3Pool.sol#2945)
	Event emitted after the call(s):
	- CollectProtocol(msg.sender,recipient,amount0,amount1) (../../sb/UniswapV3Pool.sol#2948)
Reentrancy in UniswapV3Pool.flash(address,uint256,uint256,bytes) (../../sb/UniswapV3Pool.sol#2872-2915):
	External calls:
	- TransferHelper.safeTransfer(token0,recipient,amount0) (../../sb/UniswapV3Pool.sol#2886)
	- TransferHelper.safeTransfer(token1,recipient,amount1) (../../sb/UniswapV3Pool.sol#2887)
	- IUniswapV3FlashCallback(msg.sender).uniswapV3FlashCallback(fee0,fee1,data) (../../sb/UniswapV3Pool.sol#2889)
	Event emitted after the call(s):
	- Flash(msg.sender,recipient,amount0,amount1,paid0,paid1) (../../sb/UniswapV3Pool.sol#2914)
Reentrancy in UniswapV3Pool.mint(address,int24,int24,uint128,bytes) (../../sb/UniswapV3Pool.sol#2565-2595):
	External calls:
	- IUniswapV3MintCallback(msg.sender).uniswapV3MintCallback(amount0,amount1,data) (../../sb/UniswapV3Pool.sol#2590)
	Event emitted after the call(s):
	- Mint(msg.sender,recipient,tickLower,tickUpper,amount,amount0,amount1) (../../sb/UniswapV3Pool.sol#2594)
Reentrancy in UniswapV3Pool.swap(address,bool,int256,uint160,bytes) (../../sb/UniswapV3Pool.sol#2699-2869):
	External calls:
	- TransferHelper.safeTransfer(token1,recipient,uint256(- amount1)) (../../sb/UniswapV3Pool.sol#2854)
	- IUniswapV3SwapCallback(msg.sender).uniswapV3SwapCallback(amount0,amount1,data) (../../sb/UniswapV3Pool.sol#2857)
	- TransferHelper.safeTransfer(token0,recipient,uint256(- amount0)) (../../sb/UniswapV3Pool.sol#2860)
	- IUniswapV3SwapCallback(msg.sender).uniswapV3SwapCallback(amount0,amount1,data) (../../sb/UniswapV3Pool.sol#2863)
	Event emitted after the call(s):
	- Swap(msg.sender,recipient,amount0,amount1,state.sqrtPriceX96,state.tick) (../../sb/UniswapV3Pool.sol#2867)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

UniswapV3Pool.initialize(uint160) (../../sb/UniswapV3Pool.sol#2390-2408) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(slot0.sqrtPriceX96 == 0,AI) (../../sb/UniswapV3Pool.sol#2391)
UniswapV3Pool.swap(address,bool,int256,uint160,bytes) (../../sb/UniswapV3Pool.sol#2699-2869) uses timestamp for comparisons
	Dangerous comparisons:
	- state.amountSpecifiedRemaining != 0 && state.sqrtPriceX96 != sqrtPriceLimitX96 (../../sb/UniswapV3Pool.sol#2742)
	- step.tickNext < TickMath.MIN_TICK (../../sb/UniswapV3Pool.sol#2754)
	- step.tickNext > TickMath.MAX_TICK (../../sb/UniswapV3Pool.sol#2756)
	- cache.feeProtocol > 0 (../../sb/UniswapV3Pool.sol#2783)
	- state.liquidity > 0 (../../sb/UniswapV3Pool.sol#2790)
	- state.sqrtPriceX96 == step.sqrtPriceNextX96 (../../sb/UniswapV3Pool.sol#2794)
	- state.sqrtPriceX96 != step.sqrtPriceStartX96 (../../sb/UniswapV3Pool.sol#2813)
	- state.tick != slot0Start.tick (../../sb/UniswapV3Pool.sol#2823)
	- cache.liquidityStart != state.liquidity (../../sb/UniswapV3Pool.sol#2836)
	- state.protocolFee > 0 (../../sb/UniswapV3Pool.sol#2842)
	- state.protocolFee > 0 (../../sb/UniswapV3Pool.sol#2845)
	- amount1 < 0 (../../sb/UniswapV3Pool.sol#2854)
	- require(bool,string)(balance0Before.add(uint256(amount0)) <= balance0(),IIA) (../../sb/UniswapV3Pool.sol#2858)
	- amount0 < 0 (../../sb/UniswapV3Pool.sol#2860)
	- require(bool,string)(balance1Before.add(uint256(amount1)) <= balance1(),IIA) (../../sb/UniswapV3Pool.sol#2864)
	- (step.sqrtPriceNextX96 < sqrtPriceLimitX96) (../../sb/UniswapV3Pool.sol#2764-2772)
	- (step.sqrtPriceNextX96 > sqrtPriceLimitX96) (../../sb/UniswapV3Pool.sol#2764-2772)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

TickMath.getTickAtSqrtRatio(uint160) (../../sb/UniswapV3Pool.sol#572-715) uses assembly
	- INLINE ASM (../../sb/UniswapV3Pool.sol#580-584)
	- INLINE ASM (../../sb/UniswapV3Pool.sol#585-589)
	- INLINE ASM (../../sb/UniswapV3Pool.sol#590-594)
	- INLINE ASM (../../sb/UniswapV3Pool.sol#595-599)
	- INLINE ASM (../../sb/UniswapV3Pool.sol#600-604)
	- INLINE ASM (../../sb/UniswapV3Pool.sol#605-609)
	- INLINE ASM (../../sb/UniswapV3Pool.sol#610-614)
	- INLINE ASM (../../sb/UniswapV3Pool.sol#615-618)
	- INLINE ASM (../../sb/UniswapV3Pool.sol#625-630)
	- INLINE ASM (../../sb/UniswapV3Pool.sol#631-636)
	- INLINE ASM (../../sb/UniswapV3Pool.sol#637-642)
	- INLINE ASM (../../sb/UniswapV3Pool.sol#643-648)
	- INLINE ASM (../../sb/UniswapV3Pool.sol#649-654)
	- INLINE ASM (../../sb/UniswapV3Pool.sol#655-660)
	- INLINE ASM (../../sb/UniswapV3Pool.sol#661-666)
	- INLINE ASM (../../sb/UniswapV3Pool.sol#667-672)
	- INLINE ASM (../../sb/UniswapV3Pool.sol#673-678)
	- INLINE ASM (../../sb/UniswapV3Pool.sol#679-684)
	- INLINE ASM (../../sb/UniswapV3Pool.sol#685-690)
	- INLINE ASM (../../sb/UniswapV3Pool.sol#691-696)
	- INLINE ASM (../../sb/UniswapV3Pool.sol#697-702)
	- INLINE ASM (../../sb/UniswapV3Pool.sol#703-707)
FullMath.mulDiv(uint256,uint256,uint256) (../../sb/UniswapV3Pool.sol#1176-1268) uses assembly
	- INLINE ASM (../../sb/UniswapV3Pool.sol#1188-1192)
	- INLINE ASM (../../sb/UniswapV3Pool.sol#1197-1199)
	- INLINE ASM (../../sb/UniswapV3Pool.sol#1214-1216)
	- INLINE ASM (../../sb/UniswapV3Pool.sol#1218-1221)
	- INLINE ASM (../../sb/UniswapV3Pool.sol#1228-1230)
	- INLINE ASM (../../sb/UniswapV3Pool.sol#1233-1235)
	- INLINE ASM (../../sb/UniswapV3Pool.sol#1239-1241)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage

TickMath.getSqrtRatioAtTick(int24) (../../sb/UniswapV3Pool.sol#534-565) has a high cyclomatic complexity (24).
SwapMath.computeSwapStep(uint160,uint160,uint128,int256,uint24) (../../sb/UniswapV3Pool.sol#2001-2077) has a high cyclomatic complexity (13).
UniswapV3Pool.swap(address,bool,int256,uint160,bytes) (../../sb/UniswapV3Pool.sol#2699-2869) has a high cyclomatic complexity (27).
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#cyclomatic-complexity

LowGasSafeMath.mul(uint256,uint256) (../../sb/UniswapV3Pool.sol#476-478) is never used and should be removed
LowGasSafeMath.sub(uint256,uint256) (../../sb/UniswapV3Pool.sol#470-472) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code

Pragma version=0.7.6 (../../sb/UniswapV3Pool.sol#1) allows old versions
solc-0.7.6 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Low level call in TransferHelper.safeTransfer(address,address,uint256) (../../sb/UniswapV3Pool.sol#1740-1749):
	- (success,data) = token.call(abi.encodeWithSelector(IERC20Minimal.transfer.selector,to,value)) (../../sb/UniswapV3Pool.sol#1745-1747)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls

Variable IUniswapV3PoolState.positions(bytes32).feeGrowthInside0LastX128 (../../sb/UniswapV3Pool.sol#125) is too similar to IUniswapV3PoolState.positions(bytes32).feeGrowthInside1LastX128 (../../sb/UniswapV3Pool.sol#126)
Variable IUniswapV3PoolState.ticks(int24).feeGrowthOutside0X128 (../../sb/UniswapV3Pool.sol#99) is too similar to IUniswapV3PoolState.ticks(int24).feeGrowthOutside1X128 (../../sb/UniswapV3Pool.sol#100)
Variable IUniswapV3PoolState.positions(bytes32).tokensOwed0 (../../sb/UniswapV3Pool.sol#127) is too similar to IUniswapV3PoolState.positions(bytes32).tokensOwed1 (../../sb/UniswapV3Pool.sol#128)
Variable IUniswapV3PoolActions.collect(address,int24,int24,uint128,uint128).amount0Requested (../../sb/UniswapV3Pool.sol#224) is too similar to IUniswapV3PoolActions.collect(address,int24,int24,uint128,uint128).amount1Requested (../../sb/UniswapV3Pool.sol#225)
Variable IUniswapV3PoolOwnerActions.collectProtocol(address,uint128,uint128).amount0Requested (../../sb/UniswapV3Pool.sol#298) is too similar to IUniswapV3PoolOwnerActions.collectProtocol(address,uint128,uint128).amount1Requested (../../sb/UniswapV3Pool.sol#299)
Variable IUniswapV3PoolOwnerActions.setFeeProtocol(uint8,uint8).feeProtocol0 (../../sb/UniswapV3Pool.sol#288) is too similar to IUniswapV3PoolOwnerActions.setFeeProtocol(uint8,uint8).feeProtocol1 (../../sb/UniswapV3Pool.sol#288)
Variable IUniswapV3PoolActions.collect(address,int24,int24,uint128,uint128).amount0Requested (../../sb/UniswapV3Pool.sol#224) is too similar to IUniswapV3PoolOwnerActions.collectProtocol(address,uint128,uint128).amount1Requested (../../sb/UniswapV3Pool.sol#299)
Variable IUniswapV3PoolOwnerActions.collectProtocol(address,uint128,uint128).amount0Requested (../../sb/UniswapV3Pool.sol#298) is too similar to IUniswapV3PoolActions.collect(address,int24,int24,uint128,uint128).amount1Requested (../../sb/UniswapV3Pool.sol#225)
Variable Tick.getFeeGrowthInside(mapping(int24 => Tick.Info),int24,int24,int24,uint256,uint256).feeGrowthAbove0X128 (../../sb/UniswapV3Pool.sol#793) is too similar to Tick.getFeeGrowthInside(mapping(int24 => Tick.Info),int24,int24,int24,uint256,uint256).feeGrowthAbove1X128 (../../sb/UniswapV3Pool.sol#794)
Variable Tick.getFeeGrowthInside(mapping(int24 => Tick.Info),int24,int24,int24,uint256,uint256).feeGrowthBelow0X128 (../../sb/UniswapV3Pool.sol#782) is too similar to Tick.getFeeGrowthInside(mapping(int24 => Tick.Info),int24,int24,int24,uint256,uint256).feeGrowthBelow1X128 (../../sb/UniswapV3Pool.sol#783)
Variable Tick.getFeeGrowthInside(mapping(int24 => Tick.Info),int24,int24,int24,uint256,uint256).feeGrowthGlobal0X128 (../../sb/UniswapV3Pool.sol#775) is too similar to Tick.update(mapping(int24 => Tick.Info),int24,int24,int128,uint256,uint256,bool,uint128).feeGrowthGlobal1X128 (../../sb/UniswapV3Pool.sol#823)
Variable Tick.update(mapping(int24 => Tick.Info),int24,int24,int128,uint256,uint256,bool,uint128).feeGrowthGlobal0X128 (../../sb/UniswapV3Pool.sol#822) is too similar to Tick.update(mapping(int24 => Tick.Info),int24,int24,int128,uint256,uint256,bool,uint128).feeGrowthGlobal1X128 (../../sb/UniswapV3Pool.sol#823)
Variable Tick.update(mapping(int24 => Tick.Info),int24,int24,int128,uint256,uint256,bool,uint128).feeGrowthGlobal0X128 (../../sb/UniswapV3Pool.sol#822) is too similar to Tick.cross(mapping(int24 => Tick.Info),int24,uint256,uint256).feeGrowthGlobal1X128 (../../sb/UniswapV3Pool.sol#869)
Variable Tick.getFeeGrowthInside(mapping(int24 => Tick.Info),int24,int24,int24,uint256,uint256).feeGrowthGlobal0X128 (../../sb/UniswapV3Pool.sol#775) is too similar to Tick.cross(mapping(int24 => Tick.Info),int24,uint256,uint256).feeGrowthGlobal1X128 (../../sb/UniswapV3Pool.sol#869)
Variable Tick.update(mapping(int24 => Tick.Info),int24,int24,int128,uint256,uint256,bool,uint128).feeGrowthGlobal0X128 (../../sb/UniswapV3Pool.sol#822) is too similar to Tick.getFeeGrowthInside(mapping(int24 => Tick.Info),int24,int24,int24,uint256,uint256).feeGrowthGlobal1X128 (../../sb/UniswapV3Pool.sol#776)
Variable Tick.getFeeGrowthInside(mapping(int24 => Tick.Info),int24,int24,int24,uint256,uint256).feeGrowthGlobal0X128 (../../sb/UniswapV3Pool.sol#775) is too similar to Tick.getFeeGrowthInside(mapping(int24 => Tick.Info),int24,int24,int24,uint256,uint256).feeGrowthGlobal1X128 (../../sb/UniswapV3Pool.sol#776)
Variable Tick.cross(mapping(int24 => Tick.Info),int24,uint256,uint256).feeGrowthGlobal0X128 (../../sb/UniswapV3Pool.sol#868) is too similar to Tick.cross(mapping(int24 => Tick.Info),int24,uint256,uint256).feeGrowthGlobal1X128 (../../sb/UniswapV3Pool.sol#869)
Variable Tick.cross(mapping(int24 => Tick.Info),int24,uint256,uint256).feeGrowthGlobal0X128 (../../sb/UniswapV3Pool.sol#868) is too similar to Tick.update(mapping(int24 => Tick.Info),int24,int24,int128,uint256,uint256,bool,uint128).feeGrowthGlobal1X128 (../../sb/UniswapV3Pool.sol#823)
Variable Tick.cross(mapping(int24 => Tick.Info),int24,uint256,uint256).feeGrowthGlobal0X128 (../../sb/UniswapV3Pool.sol#868) is too similar to Tick.getFeeGrowthInside(mapping(int24 => Tick.Info),int24,int24,int24,uint256,uint256).feeGrowthGlobal1X128 (../../sb/UniswapV3Pool.sol#776)
Variable Tick.getFeeGrowthInside(mapping(int24 => Tick.Info),int24,int24,int24,uint256,uint256).feeGrowthInside0X128 (../../sb/UniswapV3Pool.sol#777) is too similar to Tick.getFeeGrowthInside(mapping(int24 => Tick.Info),int24,int24,int24,uint256,uint256).feeGrowthInside1X128 (../../sb/UniswapV3Pool.sol#777)
Variable Position.update(Position.Info,int128,uint256,uint256).feeGrowthInside0X128 (../../sb/UniswapV3Pool.sol#1329) is too similar to Position.update(Position.Info,int128,uint256,uint256).feeGrowthInside1X128 (../../sb/UniswapV3Pool.sol#1330)
Variable Position.update(Position.Info,int128,uint256,uint256).tokensOwed0 (../../sb/UniswapV3Pool.sol#1343-1350) is too similar to Position.update(Position.Info,int128,uint256,uint256).tokensOwed1 (../../sb/UniswapV3Pool.sol#1351-1358)
Variable SqrtPriceMath.getAmount1Delta(uint160,uint160,int128).sqrtRatioAX96 (../../sb/UniswapV3Pool.sol#1976) is too similar to SqrtPriceMath.getAmount1Delta(uint160,uint160,int128).sqrtRatioBX96 (../../sb/UniswapV3Pool.sol#1977)
Variable SqrtPriceMath.getAmount1Delta(uint160,uint160,uint128,bool).sqrtRatioAX96 (../../sb/UniswapV3Pool.sol#1941) is too similar to SqrtPriceMath.getAmount1Delta(uint160,uint160,uint128,bool).sqrtRatioBX96 (../../sb/UniswapV3Pool.sol#1942)
Variable SqrtPriceMath.getAmount0Delta(uint160,uint160,uint128,bool).sqrtRatioAX96 (../../sb/UniswapV3Pool.sol#1914) is too similar to SqrtPriceMath.getAmount0Delta(uint160,uint160,uint128,bool).sqrtRatioBX96 (../../sb/UniswapV3Pool.sol#1915)
Variable SqrtPriceMath.getAmount0Delta(uint160,uint160,int128).sqrtRatioAX96 (../../sb/UniswapV3Pool.sol#1960) is too similar to SqrtPriceMath.getAmount1Delta(uint160,uint160,uint128,bool).sqrtRatioBX96 (../../sb/UniswapV3Pool.sol#1942)
Variable SqrtPriceMath.getAmount0Delta(uint160,uint160,uint128,bool).sqrtRatioAX96 (../../sb/UniswapV3Pool.sol#1914) is too similar to SqrtPriceMath.getAmount1Delta(uint160,uint160,uint128,bool).sqrtRatioBX96 (../../sb/UniswapV3Pool.sol#1942)
Variable SqrtPriceMath.getAmount1Delta(uint160,uint160,int128).sqrtRatioAX96 (../../sb/UniswapV3Pool.sol#1976) is too similar to SqrtPriceMath.getAmount0Delta(uint160,uint160,int128).sqrtRatioBX96 (../../sb/UniswapV3Pool.sol#1961)
Variable SqrtPriceMath.getAmount0Delta(uint160,uint160,int128).sqrtRatioAX96 (../../sb/UniswapV3Pool.sol#1960) is too similar to SqrtPriceMath.getAmount0Delta(uint160,uint160,int128).sqrtRatioBX96 (../../sb/UniswapV3Pool.sol#1961)
Variable SqrtPriceMath.getAmount1Delta(uint160,uint160,int128).sqrtRatioAX96 (../../sb/UniswapV3Pool.sol#1976) is too similar to SqrtPriceMath.getAmount1Delta(uint160,uint160,uint128,bool).sqrtRatioBX96 (../../sb/UniswapV3Pool.sol#1942)
Variable SqrtPriceMath.getAmount1Delta(uint160,uint160,int128).sqrtRatioAX96 (../../sb/UniswapV3Pool.sol#1976) is too similar to SqrtPriceMath.getAmount0Delta(uint160,uint160,uint128,bool).sqrtRatioBX96 (../../sb/UniswapV3Pool.sol#1915)
Variable SqrtPriceMath.getAmount0Delta(uint160,uint160,uint128,bool).sqrtRatioAX96 (../../sb/UniswapV3Pool.sol#1914) is too similar to SqrtPriceMath.getAmount0Delta(uint160,uint160,int128).sqrtRatioBX96 (../../sb/UniswapV3Pool.sol#1961)
Variable SqrtPriceMath.getAmount0Delta(uint160,uint160,int128).sqrtRatioAX96 (../../sb/UniswapV3Pool.sol#1960) is too similar to SqrtPriceMath.getAmount0Delta(uint160,uint160,uint128,bool).sqrtRatioBX96 (../../sb/UniswapV3Pool.sol#1915)
Variable SqrtPriceMath.getAmount1Delta(uint160,uint160,uint128,bool).sqrtRatioAX96 (../../sb/UniswapV3Pool.sol#1941) is too similar to SqrtPriceMath.getAmount0Delta(uint160,uint160,uint128,bool).sqrtRatioBX96 (../../sb/UniswapV3Pool.sol#1915)
Variable SqrtPriceMath.getAmount0Delta(uint160,uint160,int128).sqrtRatioAX96 (../../sb/UniswapV3Pool.sol#1960) is too similar to SqrtPriceMath.getAmount1Delta(uint160,uint160,int128).sqrtRatioBX96 (../../sb/UniswapV3Pool.sol#1977)
Variable SqrtPriceMath.getAmount1Delta(uint160,uint160,uint128,bool).sqrtRatioAX96 (../../sb/UniswapV3Pool.sol#1941) is too similar to SqrtPriceMath.getAmount1Delta(uint160,uint160,int128).sqrtRatioBX96 (../../sb/UniswapV3Pool.sol#1977)
Variable SqrtPriceMath.getAmount1Delta(uint160,uint160,uint128,bool).sqrtRatioAX96 (../../sb/UniswapV3Pool.sol#1941) is too similar to SqrtPriceMath.getAmount0Delta(uint160,uint160,int128).sqrtRatioBX96 (../../sb/UniswapV3Pool.sol#1961)
Variable SqrtPriceMath.getAmount0Delta(uint160,uint160,uint128,bool).sqrtRatioAX96 (../../sb/UniswapV3Pool.sol#1914) is too similar to SqrtPriceMath.getAmount1Delta(uint160,uint160,int128).sqrtRatioBX96 (../../sb/UniswapV3Pool.sol#1977)
Variable IUniswapV3MintCallback.uniswapV3MintCallback(uint256,uint256,bytes).amount0Owed (../../sb/UniswapV3Pool.sol#2186) is too similar to IUniswapV3MintCallback.uniswapV3MintCallback(uint256,uint256,bytes).amount1Owed (../../sb/UniswapV3Pool.sol#2187)
Variable IUniswapV3SwapCallback.uniswapV3SwapCallback(int256,int256,bytes).amount0Delta (../../sb/UniswapV3Pool.sol#2204) is too similar to IUniswapV3SwapCallback.uniswapV3SwapCallback(int256,int256,bytes).amount1Delta (../../sb/UniswapV3Pool.sol#2205)
Variable UniswapV3Pool._updatePosition(address,int24,int24,int128,int24)._feeGrowthGlobal0X128 (../../sb/UniswapV3Pool.sol#2507) is too similar to UniswapV3Pool._updatePosition(address,int24,int24,int128,int24)._feeGrowthGlobal1X128 (../../sb/UniswapV3Pool.sol#2508)
Variable IUniswapV3PoolActions.collect(address,int24,int24,uint128,uint128).amount0Requested (../../sb/UniswapV3Pool.sol#224) is too similar to UniswapV3Pool.collect(address,int24,int24,uint128,uint128).amount1Requested (../../sb/UniswapV3Pool.sol#2603)
Variable UniswapV3Pool.collectProtocol(address,uint128,uint128).amount0Requested (../../sb/UniswapV3Pool.sol#2931) is too similar to UniswapV3Pool.collect(address,int24,int24,uint128,uint128).amount1Requested (../../sb/UniswapV3Pool.sol#2603)
Variable UniswapV3Pool.collectProtocol(address,uint128,uint128).amount0Requested (../../sb/UniswapV3Pool.sol#2931) is too similar to IUniswapV3PoolOwnerActions.collectProtocol(address,uint128,uint128).amount1Requested (../../sb/UniswapV3Pool.sol#299)
Variable IUniswapV3PoolActions.collect(address,int24,int24,uint128,uint128).amount0Requested (../../sb/UniswapV3Pool.sol#224) is too similar to UniswapV3Pool.collectProtocol(address,uint128,uint128).amount1Requested (../../sb/UniswapV3Pool.sol#2932)
Variable UniswapV3Pool.collectProtocol(address,uint128,uint128).amount0Requested (../../sb/UniswapV3Pool.sol#2931) is too similar to UniswapV3Pool.collectProtocol(address,uint128,uint128).amount1Requested (../../sb/UniswapV3Pool.sol#2932)
Variable UniswapV3Pool.collect(address,int24,int24,uint128,uint128).amount0Requested (../../sb/UniswapV3Pool.sol#2602) is too similar to UniswapV3Pool.collect(address,int24,int24,uint128,uint128).amount1Requested (../../sb/UniswapV3Pool.sol#2603)
Variable UniswapV3Pool.collect(address,int24,int24,uint128,uint128).amount0Requested (../../sb/UniswapV3Pool.sol#2602) is too similar to IUniswapV3PoolOwnerActions.collectProtocol(address,uint128,uint128).amount1Requested (../../sb/UniswapV3Pool.sol#299)
Variable IUniswapV3PoolOwnerActions.collectProtocol(address,uint128,uint128).amount0Requested (../../sb/UniswapV3Pool.sol#298) is too similar to UniswapV3Pool.collect(address,int24,int24,uint128,uint128).amount1Requested (../../sb/UniswapV3Pool.sol#2603)
Variable UniswapV3Pool.collect(address,int24,int24,uint128,uint128).amount0Requested (../../sb/UniswapV3Pool.sol#2602) is too similar to UniswapV3Pool.collectProtocol(address,uint128,uint128).amount1Requested (../../sb/UniswapV3Pool.sol#2932)
Variable UniswapV3Pool.collect(address,int24,int24,uint128,uint128).amount0Requested (../../sb/UniswapV3Pool.sol#2602) is too similar to IUniswapV3PoolActions.collect(address,int24,int24,uint128,uint128).amount1Requested (../../sb/UniswapV3Pool.sol#225)
Variable IUniswapV3PoolOwnerActions.collectProtocol(address,uint128,uint128).amount0Requested (../../sb/UniswapV3Pool.sol#298) is too similar to UniswapV3Pool.collectProtocol(address,uint128,uint128).amount1Requested (../../sb/UniswapV3Pool.sol#2932)
Variable UniswapV3Pool.collectProtocol(address,uint128,uint128).amount0Requested (../../sb/UniswapV3Pool.sol#2931) is too similar to IUniswapV3PoolActions.collect(address,int24,int24,uint128,uint128).amount1Requested (../../sb/UniswapV3Pool.sol#225)
Variable UniswapV3Pool.flash(address,uint256,uint256,bytes).balance0After (../../sb/UniswapV3Pool.sol#2891) is too similar to UniswapV3Pool.flash(address,uint256,uint256,bytes).balance1After (../../sb/UniswapV3Pool.sol#2892)
Variable UniswapV3Pool.mint(address,int24,int24,uint128,bytes).balance0Before (../../sb/UniswapV3Pool.sol#2586) is too similar to UniswapV3Pool.flash(address,uint256,uint256,bytes).balance1Before (../../sb/UniswapV3Pool.sol#2884)
Variable UniswapV3Pool.swap(address,bool,int256,uint160,bytes).balance0Before (../../sb/UniswapV3Pool.sol#2856) is too similar to UniswapV3Pool.flash(address,uint256,uint256,bytes).balance1Before (../../sb/UniswapV3Pool.sol#2884)
Variable UniswapV3Pool.flash(address,uint256,uint256,bytes).balance0Before (../../sb/UniswapV3Pool.sol#2883) is too similar to UniswapV3Pool.flash(address,uint256,uint256,bytes).balance1Before (../../sb/UniswapV3Pool.sol#2884)
Variable UniswapV3Pool.mint(address,int24,int24,uint128,bytes).balance0Before (../../sb/UniswapV3Pool.sol#2586) is too similar to UniswapV3Pool.mint(address,int24,int24,uint128,bytes).balance1Before (../../sb/UniswapV3Pool.sol#2587)
Variable UniswapV3Pool.flash(address,uint256,uint256,bytes).balance0Before (../../sb/UniswapV3Pool.sol#2883) is too similar to UniswapV3Pool.swap(address,bool,int256,uint160,bytes).balance1Before (../../sb/UniswapV3Pool.sol#2862)
Variable UniswapV3Pool.flash(address,uint256,uint256,bytes).balance0Before (../../sb/UniswapV3Pool.sol#2883) is too similar to UniswapV3Pool.mint(address,int24,int24,uint128,bytes).balance1Before (../../sb/UniswapV3Pool.sol#2587)
Variable UniswapV3Pool.swap(address,bool,int256,uint160,bytes).balance0Before (../../sb/UniswapV3Pool.sol#2856) is too similar to UniswapV3Pool.swap(address,bool,int256,uint160,bytes).balance1Before (../../sb/UniswapV3Pool.sol#2862)
Variable UniswapV3Pool.mint(address,int24,int24,uint128,bytes).balance0Before (../../sb/UniswapV3Pool.sol#2586) is too similar to UniswapV3Pool.swap(address,bool,int256,uint160,bytes).balance1Before (../../sb/UniswapV3Pool.sol#2862)
Variable UniswapV3Pool.swap(address,bool,int256,uint160,bytes).balance0Before (../../sb/UniswapV3Pool.sol#2856) is too similar to UniswapV3Pool.mint(address,int24,int24,uint128,bytes).balance1Before (../../sb/UniswapV3Pool.sol#2587)
Variable UniswapV3Pool.feeGrowthGlobal0X128 (../../sb/UniswapV3Pool.sol#2274) is too similar to UniswapV3Pool.feeGrowthGlobal1X128 (../../sb/UniswapV3Pool.sol#2276)
Variable UniswapV3Pool._updatePosition(address,int24,int24,int128,int24).feeGrowthInside0X128 (../../sb/UniswapV3Pool.sol#2545) is too similar to UniswapV3Pool._updatePosition(address,int24,int24,int128,int24).feeGrowthInside1X128 (../../sb/UniswapV3Pool.sol#2545)
Variable UniswapV3Pool.flash(address,uint256,uint256,bytes).feeProtocol0 (../../sb/UniswapV3Pool.sol#2902) is too similar to UniswapV3Pool.setFeeProtocol(uint8,uint8).feeProtocol1 (../../sb/UniswapV3Pool.sol#2918)
Variable UniswapV3Pool.setFeeProtocol(uint8,uint8).feeProtocol0 (../../sb/UniswapV3Pool.sol#2918) is too similar to UniswapV3Pool.setFeeProtocol(uint8,uint8).feeProtocol1 (../../sb/UniswapV3Pool.sol#2918)
Variable UniswapV3Pool.flash(address,uint256,uint256,bytes).feeProtocol0 (../../sb/UniswapV3Pool.sol#2902) is too similar to UniswapV3Pool.flash(address,uint256,uint256,bytes).feeProtocol1 (../../sb/UniswapV3Pool.sol#2908)
Variable UniswapV3Pool.flash(address,uint256,uint256,bytes).feeProtocol0 (../../sb/UniswapV3Pool.sol#2902) is too similar to IUniswapV3PoolOwnerActions.setFeeProtocol(uint8,uint8).feeProtocol1 (../../sb/UniswapV3Pool.sol#288)
Variable UniswapV3Pool.setFeeProtocol(uint8,uint8).feeProtocol0 (../../sb/UniswapV3Pool.sol#2918) is too similar to UniswapV3Pool.flash(address,uint256,uint256,bytes).feeProtocol1 (../../sb/UniswapV3Pool.sol#2908)
Variable UniswapV3Pool.setFeeProtocol(uint8,uint8).feeProtocol0 (../../sb/UniswapV3Pool.sol#2918) is too similar to IUniswapV3PoolOwnerActions.setFeeProtocol(uint8,uint8).feeProtocol1 (../../sb/UniswapV3Pool.sol#288)
Variable IUniswapV3PoolOwnerActions.setFeeProtocol(uint8,uint8).feeProtocol0 (../../sb/UniswapV3Pool.sol#288) is too similar to UniswapV3Pool.flash(address,uint256,uint256,bytes).feeProtocol1 (../../sb/UniswapV3Pool.sol#2908)
Variable IUniswapV3PoolOwnerActions.setFeeProtocol(uint8,uint8).feeProtocol0 (../../sb/UniswapV3Pool.sol#288) is too similar to UniswapV3Pool.setFeeProtocol(uint8,uint8).feeProtocol1 (../../sb/UniswapV3Pool.sol#2918)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#variable-names-too-similar

TickMath.getSqrtRatioAtTick(int24) (../../sb/UniswapV3Pool.sol#534-565) uses literals with too many digits:
	- ratio = 0x100000000000000000000000000000000 (../../sb/UniswapV3Pool.sol#538)
BitMath.mostSignificantBit(uint256) (../../sb/UniswapV3Pool.sol#887-919) uses literals with too many digits:
	- x >= 0x100000000000000000000000000000000 (../../sb/UniswapV3Pool.sol#890)
BitMath.mostSignificantBit(uint256) (../../sb/UniswapV3Pool.sol#887-919) uses literals with too many digits:
	- x >= 0x10000000000000000 (../../sb/UniswapV3Pool.sol#894)
BitMath.mostSignificantBit(uint256) (../../sb/UniswapV3Pool.sol#887-919) uses literals with too many digits:
	- x >= 0x100000000 (../../sb/UniswapV3Pool.sol#898)
FixedPoint128.slitherConstructorConstantVariables() (../../sb/UniswapV3Pool.sol#1286-1288) uses literals with too many digits:
	- Q128 = 0x100000000000000000000000000000000 (../../sb/UniswapV3Pool.sol#1287)
FixedPoint96.slitherConstructorConstantVariables() (../../sb/UniswapV3Pool.sol#1766-1769) uses literals with too many digits:
	- Q96 = 0x1000000000000000000000000 (../../sb/UniswapV3Pool.sol#1768)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits
/sb/UniswapV3Pool.sol analyzed (32 contracts with 93 detectors), 138 result(s) found
