'solc --version' running
'solc /sb/GARFIELD.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,/sb' running
Compilation warnings/errors on /sb/GARFIELD.sol:
Warning: This declaration shadows an existing declaration.
    --> /sb/GARFIELD.sol:1303:9:
     |
1303 |         uint256 totalSupply = uint256(_tTotal)
     |         ^^^^^^^^^^^^^^^^^^^
Note: The shadowed declaration is here:
   --> /sb/GARFIELD.sol:972:5:
    |
972 |     function totalSupply() public view override returns (uint256) {
    |     ^ (Relevant source part starts here and spans across multiple lines).

Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
   --> /sb/GARFIELD.sol:708:9:
    |
708 |         uint256 _tTotal,
    |         ^^^^^^^^^^^^^^^

Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
   --> /sb/GARFIELD.sol:713:9:
    |
713 |         address ofAddress
    |         ^^^^^^^^^^^^^^^^^

Warning: Function state mutability can be restricted to view
   --> /sb/GARFIELD.sol:731:5:
    |
731 |     function calculateTopUpClaim(
    |     ^ (Relevant source part starts here and spans across multiple lines).

Warning: Function state mutability can be restricted to view
    --> /sb/GARFIELD.sol:1360:5:
     |
1360 |     function ensureMaxTxAmount(
     |     ^ (Relevant source part starts here and spans across multiple lines).



Utils.swapETHForTokens(address,address,uint256) (../../sb/GARFIELD.sol#778-797) sends eth to arbitrary user
	Dangerous calls:
	- pancakeRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value: ethAmount}(0,path,address(recipient),block.timestamp + 360) (../../sb/GARFIELD.sol#791-796)
Utils.addLiquidity(address,address,uint256,uint256) (../../sb/GARFIELD.sol#799-816) sends eth to arbitrary user
	Dangerous calls:
	- pancakeRouter.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner,block.timestamp + 360) (../../sb/GARFIELD.sol#808-815)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#functions-that-send-ether-to-arbitrary-destinations

Reentrancy in GARFIELD._transfer(address,address,uint256,uint256) (../../sb/GARFIELD.sol#1193-1218):
	External calls:
	- swapAndLiquify(from,to) (../../sb/GARFIELD.sol#1206)
		- pancakeRouter.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner,block.timestamp + 360) (../../sb/GARFIELD.sol#808-815)
		- pancakeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (../../sb/GARFIELD.sol#769-775)
		- Utils.swapTokensForEth(address(pancakeRouter),tokenAmountToBeSwapped) (../../sb/GARFIELD.sol#1415)
		- Utils.addLiquidity(address(pancakeRouter),owner(),otherPiece,bnbToBeAddedToLiquidity) (../../sb/GARFIELD.sol#1428)
	External calls sending eth:
	- swapAndLiquify(from,to) (../../sb/GARFIELD.sol#1206)
		- pancakeRouter.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner,block.timestamp + 360) (../../sb/GARFIELD.sol#808-815)
	State variables written after the call(s):
	- _tokenTransfer(from,to,amount,takeFee) (../../sb/GARFIELD.sol#1217)
		- _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity) (../../sb/GARFIELD.sol#1149)
		- _rOwned[sender] = _rOwned[sender].sub(rAmount) (../../sb/GARFIELD.sol#1255)
		- _rOwned[sender] = _rOwned[sender].sub(rAmount) (../../sb/GARFIELD.sol#1246)
		- _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount) (../../sb/GARFIELD.sol#1247)
		- _rOwned[sender] = _rOwned[sender].sub(rAmount) (../../sb/GARFIELD.sol#1071)
		- _rOwned[sender] = _rOwned[sender].sub(rAmount) (../../sb/GARFIELD.sol#1266)
		- _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount) (../../sb/GARFIELD.sol#1267)
		- _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount) (../../sb/GARFIELD.sol#1257)
		- _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount) (../../sb/GARFIELD.sol#1073)
	GARFIELD._rOwned (../../sb/GARFIELD.sol#889) can be used in cross function reentrancies:
	- GARFIELD._getCurrentSupply() (../../sb/GARFIELD.sol#1134-1144)
	- GARFIELD._takeLiquidity(uint256) (../../sb/GARFIELD.sol#1146-1152)
	- GARFIELD._transferBothExcluded(address,address,uint256) (../../sb/GARFIELD.sol#1068-1077)
	- GARFIELD._transferFromExcluded(address,address,uint256) (../../sb/GARFIELD.sol#1263-1271)
	- GARFIELD._transferStandard(address,address,uint256) (../../sb/GARFIELD.sol#1244-1251)
	- GARFIELD._transferToExcluded(address,address,uint256) (../../sb/GARFIELD.sol#1253-1261)
	- GARFIELD.balanceOf(address) (../../sb/GARFIELD.sol#976-979)
	- GARFIELD.constructor(address) (../../sb/GARFIELD.sol#934-958)
	- GARFIELD.deliver(uint256) (../../sb/GARFIELD.sol#1019-1026)
	- GARFIELD.excludeFromReward(address) (../../sb/GARFIELD.sol#1045-1053)
	- _tokenTransfer(from,to,amount,takeFee) (../../sb/GARFIELD.sol#1217)
		- _rTotal = _rTotal.sub(rFee) (../../sb/GARFIELD.sol#1104)
	GARFIELD._rTotal (../../sb/GARFIELD.sol#903) can be used in cross function reentrancies:
	- GARFIELD._getCurrentSupply() (../../sb/GARFIELD.sol#1134-1144)
	- GARFIELD._reflectFee(uint256,uint256) (../../sb/GARFIELD.sol#1103-1106)
	- GARFIELD.constructor(address) (../../sb/GARFIELD.sol#934-958)
	- GARFIELD.deliver(uint256) (../../sb/GARFIELD.sol#1019-1026)
	- GARFIELD.tokenFromReflection(uint256) (../../sb/GARFIELD.sol#1039-1043)
	- _tokenTransfer(from,to,amount,takeFee) (../../sb/GARFIELD.sol#1217)
		- _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity) (../../sb/GARFIELD.sol#1151)
		- _tOwned[sender] = _tOwned[sender].sub(tAmount) (../../sb/GARFIELD.sol#1070)
		- _tOwned[sender] = _tOwned[sender].sub(tAmount) (../../sb/GARFIELD.sol#1265)
		- _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount) (../../sb/GARFIELD.sol#1256)
		- _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount) (../../sb/GARFIELD.sol#1072)
	GARFIELD._tOwned (../../sb/GARFIELD.sol#890) can be used in cross function reentrancies:
	- GARFIELD._getCurrentSupply() (../../sb/GARFIELD.sol#1134-1144)
	- GARFIELD._takeLiquidity(uint256) (../../sb/GARFIELD.sol#1146-1152)
	- GARFIELD._transferBothExcluded(address,address,uint256) (../../sb/GARFIELD.sol#1068-1077)
	- GARFIELD._transferFromExcluded(address,address,uint256) (../../sb/GARFIELD.sol#1263-1271)
	- GARFIELD._transferToExcluded(address,address,uint256) (../../sb/GARFIELD.sol#1253-1261)
	- GARFIELD.balanceOf(address) (../../sb/GARFIELD.sol#976-979)
	- GARFIELD.excludeFromReward(address) (../../sb/GARFIELD.sol#1045-1053)
	- GARFIELD.includeInReward(address) (../../sb/GARFIELD.sol#1055-1066)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities

Reentrancy in GARFIELD.claimBNBReward() (../../sb/GARFIELD.sol#1324-1346):
	External calls:
	- Utils.swapETHForTokens(address(pancakeRouter),address(0x000000000000000000000000000000000000dEaD),reward.div(5)) (../../sb/GARFIELD.sol#1332-1336)
	State variables written after the call(s):
	- nextAvailableClaimDate[msg.sender] = block.timestamp + getRewardCycleBlock() (../../sb/GARFIELD.sol#1341)
	GARFIELD.nextAvailableClaimDate (../../sb/GARFIELD.sol#1279) can be used in cross function reentrancies:
	- GARFIELD.nextAvailableClaimDate (../../sb/GARFIELD.sol#1279)
	- GARFIELD.topUpClaimCycleAfterTransfer(address,uint256) (../../sb/GARFIELD.sol#1348-1358)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1

GARFIELD.claimBNBReward() (../../sb/GARFIELD.sol#1324-1346) contains a tautology or contradiction:
	- require(bool,string)(balanceOf(msg.sender) >= 0,Error: must own MRAT to claim reward) (../../sb/GARFIELD.sol#1326)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#tautology-or-contradiction

Utils.addLiquidity(address,address,uint256,uint256) (../../sb/GARFIELD.sol#799-816) ignores return value by pancakeRouter.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner,block.timestamp + 360) (../../sb/GARFIELD.sol#808-815)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return

GARFIELD.allowance(address,address).owner (../../sb/GARFIELD.sol#986) shadows:
	- Ownable.owner() (../../sb/GARFIELD.sol#424-426) (function)
GARFIELD._approve(address,address,uint256).owner (../../sb/GARFIELD.sol#1185) shadows:
	- Ownable.owner() (../../sb/GARFIELD.sol#424-426) (function)
GARFIELD.calculateBNBReward(address).totalSupply (../../sb/GARFIELD.sol#1303-1306) shadows:
	- GARFIELD.totalSupply() (../../sb/GARFIELD.sol#972-974) (function)
	- IBEP20.totalSupply() (../../sb/GARFIELD.sol#21) (function)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing

GARFIELD.setTaxFeePercent(uint256) (../../sb/GARFIELD.sol#1087-1089) should emit an event for: 
	- _taxFee = taxFee (../../sb/GARFIELD.sol#1088) 
GARFIELD.setLiquidityFeePercent(uint256) (../../sb/GARFIELD.sol#1091-1093) should emit an event for: 
	- _liquidityFee = liquidityFee (../../sb/GARFIELD.sol#1092) 
GARFIELD.setMaxTxPercent(uint256) (../../sb/GARFIELD.sol#1294-1296) should emit an event for: 
	- _maxTxAmount = _tTotal.mul(maxTxPercent).div(10000) (../../sb/GARFIELD.sol#1295) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-arithmetic

Reentrancy in GARFIELD._transfer(address,address,uint256,uint256) (../../sb/GARFIELD.sol#1193-1218):
	External calls:
	- swapAndLiquify(from,to) (../../sb/GARFIELD.sol#1206)
		- pancakeRouter.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner,block.timestamp + 360) (../../sb/GARFIELD.sol#808-815)
		- pancakeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (../../sb/GARFIELD.sol#769-775)
		- Utils.swapTokensForEth(address(pancakeRouter),tokenAmountToBeSwapped) (../../sb/GARFIELD.sol#1415)
		- Utils.addLiquidity(address(pancakeRouter),owner(),otherPiece,bnbToBeAddedToLiquidity) (../../sb/GARFIELD.sol#1428)
	External calls sending eth:
	- swapAndLiquify(from,to) (../../sb/GARFIELD.sol#1206)
		- pancakeRouter.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner,block.timestamp + 360) (../../sb/GARFIELD.sol#808-815)
	State variables written after the call(s):
	- _tokenTransfer(from,to,amount,takeFee) (../../sb/GARFIELD.sol#1217)
		- _liquidityFee = _previousLiquidityFee (../../sb/GARFIELD.sol#1178)
		- _liquidityFee = 0 (../../sb/GARFIELD.sol#1173)
	- _tokenTransfer(from,to,amount,takeFee) (../../sb/GARFIELD.sol#1217)
		- _previousLiquidityFee = _liquidityFee (../../sb/GARFIELD.sol#1170)
	- _tokenTransfer(from,to,amount,takeFee) (../../sb/GARFIELD.sol#1217)
		- _previousTaxFee = _taxFee (../../sb/GARFIELD.sol#1169)
	- _tokenTransfer(from,to,amount,takeFee) (../../sb/GARFIELD.sol#1217)
		- _tFeeTotal = _tFeeTotal.add(tFee) (../../sb/GARFIELD.sol#1105)
	- _tokenTransfer(from,to,amount,takeFee) (../../sb/GARFIELD.sol#1217)
		- _taxFee = _previousTaxFee (../../sb/GARFIELD.sol#1177)
		- _taxFee = 0 (../../sb/GARFIELD.sol#1172)
	- _tokenTransfer(from,to,amount,takeFee) (../../sb/GARFIELD.sol#1217)
		- nextAvailableClaimDate[recipient] = nextAvailableClaimDate[recipient] + Utils.calculateTopUpClaim(currentRecipientBalance,basedRewardCycleBlock,threshHoldTopUpRate,amount) (../../sb/GARFIELD.sol#1352-1357)
Reentrancy in GARFIELD.transferFrom(address,address,uint256) (../../sb/GARFIELD.sol#995-999):
	External calls:
	- _transfer(sender,recipient,amount,0) (../../sb/GARFIELD.sol#996)
		- pancakeRouter.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner,block.timestamp + 360) (../../sb/GARFIELD.sol#808-815)
		- pancakeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (../../sb/GARFIELD.sol#769-775)
		- Utils.swapTokensForEth(address(pancakeRouter),tokenAmountToBeSwapped) (../../sb/GARFIELD.sol#1415)
		- Utils.addLiquidity(address(pancakeRouter),owner(),otherPiece,bnbToBeAddedToLiquidity) (../../sb/GARFIELD.sol#1428)
	External calls sending eth:
	- _transfer(sender,recipient,amount,0) (../../sb/GARFIELD.sol#996)
		- pancakeRouter.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner,block.timestamp + 360) (../../sb/GARFIELD.sol#808-815)
	State variables written after the call(s):
	- _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,BEP20: transfer amount exceeds allowance)) (../../sb/GARFIELD.sol#997)
		- _allowances[owner][spender] = amount (../../sb/GARFIELD.sol#1189)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

Reentrancy in GARFIELD._transfer(address,address,uint256,uint256) (../../sb/GARFIELD.sol#1193-1218):
	External calls:
	- swapAndLiquify(from,to) (../../sb/GARFIELD.sol#1206)
		- pancakeRouter.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner,block.timestamp + 360) (../../sb/GARFIELD.sol#808-815)
		- pancakeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (../../sb/GARFIELD.sol#769-775)
		- Utils.swapTokensForEth(address(pancakeRouter),tokenAmountToBeSwapped) (../../sb/GARFIELD.sol#1415)
		- Utils.addLiquidity(address(pancakeRouter),owner(),otherPiece,bnbToBeAddedToLiquidity) (../../sb/GARFIELD.sol#1428)
	External calls sending eth:
	- swapAndLiquify(from,to) (../../sb/GARFIELD.sol#1206)
		- pancakeRouter.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner,block.timestamp + 360) (../../sb/GARFIELD.sol#808-815)
	Event emitted after the call(s):
	- Transfer(sender,recipient,tTransferAmount) (../../sb/GARFIELD.sol#1250)
		- _tokenTransfer(from,to,amount,takeFee) (../../sb/GARFIELD.sol#1217)
	- Transfer(sender,recipient,tTransferAmount) (../../sb/GARFIELD.sol#1270)
		- _tokenTransfer(from,to,amount,takeFee) (../../sb/GARFIELD.sol#1217)
	- Transfer(sender,recipient,tTransferAmount) (../../sb/GARFIELD.sol#1260)
		- _tokenTransfer(from,to,amount,takeFee) (../../sb/GARFIELD.sol#1217)
	- Transfer(sender,recipient,tTransferAmount) (../../sb/GARFIELD.sol#1076)
		- _tokenTransfer(from,to,amount,takeFee) (../../sb/GARFIELD.sol#1217)
Reentrancy in GARFIELD.swapAndLiquify(address,address) (../../sb/GARFIELD.sol#1381-1432):
	External calls:
	- Utils.swapTokensForEth(address(pancakeRouter),tokenAmountToBeSwapped) (../../sb/GARFIELD.sol#1415)
	- Utils.addLiquidity(address(pancakeRouter),owner(),otherPiece,bnbToBeAddedToLiquidity) (../../sb/GARFIELD.sol#1428)
	Event emitted after the call(s):
	- SwapAndLiquify(piece,deltaBalance,otherPiece) (../../sb/GARFIELD.sol#1430)
Reentrancy in GARFIELD.transferFrom(address,address,uint256) (../../sb/GARFIELD.sol#995-999):
	External calls:
	- _transfer(sender,recipient,amount,0) (../../sb/GARFIELD.sol#996)
		- pancakeRouter.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner,block.timestamp + 360) (../../sb/GARFIELD.sol#808-815)
		- pancakeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (../../sb/GARFIELD.sol#769-775)
		- Utils.swapTokensForEth(address(pancakeRouter),tokenAmountToBeSwapped) (../../sb/GARFIELD.sol#1415)
		- Utils.addLiquidity(address(pancakeRouter),owner(),otherPiece,bnbToBeAddedToLiquidity) (../../sb/GARFIELD.sol#1428)
	External calls sending eth:
	- _transfer(sender,recipient,amount,0) (../../sb/GARFIELD.sol#996)
		- pancakeRouter.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner,block.timestamp + 360) (../../sb/GARFIELD.sol#808-815)
	Event emitted after the call(s):
	- Approval(owner,spender,amount) (../../sb/GARFIELD.sol#1190)
		- _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,BEP20: transfer amount exceeds allowance)) (../../sb/GARFIELD.sol#997)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3

Ownable.unlock() (../../sb/GARFIELD.sol#471-476) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(now > _lockTime,Contract is locked until 7 days) (../../sb/GARFIELD.sol#473)
Utils.isLotteryWon(uint256,uint256) (../../sb/GARFIELD.sol#701-705) uses timestamp for comparisons
	Dangerous comparisons:
	- luckyNumber <= winPercentage (../../sb/GARFIELD.sol#704)
GARFIELD.getRewardCycleBlock() (../../sb/GARFIELD.sol#1319-1322) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp >= disableEasyRewardFrom (../../sb/GARFIELD.sol#1320)
GARFIELD.claimBNBReward() (../../sb/GARFIELD.sol#1324-1346) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(nextAvailableClaimDate[msg.sender] <= block.timestamp,Error: next available not reached) (../../sb/GARFIELD.sol#1325)
GARFIELD.ensureMaxTxAmount(address,address,uint256,uint256) (../../sb/GARFIELD.sol#1360-1374) uses timestamp for comparisons
	Dangerous comparisons:
	- value < disruptiveCoverageFee && block.timestamp >= disruptiveTransferEnabledFrom (../../sb/GARFIELD.sol#1370)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

Address.isContract(address) (../../sb/GARFIELD.sol#276-285) uses assembly
	- INLINE ASM (../../sb/GARFIELD.sol#283)
Address._functionCallWithValue(address,bytes,uint256,string) (../../sb/GARFIELD.sol#369-390) uses assembly
	- INLINE ASM (../../sb/GARFIELD.sol#382-385)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage

GARFIELD.ensureMaxTxAmount(address,address,uint256,uint256) (../../sb/GARFIELD.sol#1360-1374) compares to a boolean constant:
	-_isExcludedFromMaxTx[from] == false && _isExcludedFromMaxTx[to] == false (../../sb/GARFIELD.sol#1367-1368)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#boolean-equality

GARFIELD.includeInReward(address) (../../sb/GARFIELD.sol#1055-1066) has costly operations inside a loop:
	- _excluded.pop() (../../sb/GARFIELD.sol#1062)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#costly-operations-inside-a-loop

Address._functionCallWithValue(address,bytes,uint256,string) (../../sb/GARFIELD.sol#369-390) is never used and should be removed
Address.functionCall(address,bytes) (../../sb/GARFIELD.sol#329-331) is never used and should be removed
Address.functionCall(address,bytes,string) (../../sb/GARFIELD.sol#339-341) is never used and should be removed
Address.functionCallWithValue(address,bytes,uint256) (../../sb/GARFIELD.sol#354-356) is never used and should be removed
Address.functionCallWithValue(address,bytes,uint256,string) (../../sb/GARFIELD.sol#364-367) is never used and should be removed
Address.isContract(address) (../../sb/GARFIELD.sol#276-285) is never used and should be removed
Address.sendValue(address,uint256) (../../sb/GARFIELD.sol#303-309) is never used and should be removed
Context._msgData() (../../sb/GARFIELD.sol#249-252) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code

GARFIELD._rTotal (../../sb/GARFIELD.sol#903) is set pre-construction with a non-constant function or state variable:
	- (MAX - (MAX % _tTotal))
GARFIELD._maxTxAmount (../../sb/GARFIELD.sol#1277) is set pre-construction with a non-constant function or state variable:
	- _tTotal
GARFIELD._previousTaxFee (../../sb/GARFIELD.sol#1286) is set pre-construction with a non-constant function or state variable:
	- _taxFee
GARFIELD._previousLiquidityFee (../../sb/GARFIELD.sol#1289) is set pre-construction with a non-constant function or state variable:
	- _liquidityFee
GARFIELD.minTokenNumberToSell (../../sb/GARFIELD.sol#1292) is set pre-construction with a non-constant function or state variable:
	- _tTotal.mul(1).div(10000).div(10)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#function-initializing-state

Pragma version>=0.6.8 (../../sb/GARFIELD.sol#1) allows old versions
Pragma version>=0.6.8 (../../sb/GARFIELD.sol#2) allows old versions
Pragma version>=0.6.8 (../../sb/GARFIELD.sol#3) allows old versions
Pragma version>=0.6.8 (../../sb/GARFIELD.sol#4) allows old versions
solc-0.6.12 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

Low level call in Address.sendValue(address,uint256) (../../sb/GARFIELD.sol#303-309):
	- (success) = recipient.call{value: amount}() (../../sb/GARFIELD.sol#307)
Low level call in Address._functionCallWithValue(address,bytes,uint256,string) (../../sb/GARFIELD.sol#369-390):
	- (success,returndata) = target.call{value: weiValue}(data) (../../sb/GARFIELD.sol#373)
Low level call in GARFIELD.claimBNBReward() (../../sb/GARFIELD.sol#1324-1346):
	- (sent) = address(msg.sender).call{value: reward}() (../../sb/GARFIELD.sol#1344)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls

Function IPancakePair.DOMAIN_SEPARATOR() (../../sb/GARFIELD.sol#510) is not in mixedCase
Function IPancakePair.PERMIT_TYPEHASH() (../../sb/GARFIELD.sol#511) is not in mixedCase
Function IPancakePair.MINIMUM_LIQUIDITY() (../../sb/GARFIELD.sol#528) is not in mixedCase
Function IPancakeRouter01.WETH() (../../sb/GARFIELD.sol#548) is not in mixedCase
Parameter GARFIELD.setSwapAndLiquifyEnabled(bool)._enabled (../../sb/GARFIELD.sol#1095) is not in mixedCase
Parameter GARFIELD.calculateTaxFee(uint256)._amount (../../sb/GARFIELD.sol#1154) is not in mixedCase
Parameter GARFIELD.calculateLiquidityFee(uint256)._amount (../../sb/GARFIELD.sol#1160) is not in mixedCase
Parameter GARFIELD.setExcludeFromMaxTx(address,bool)._address (../../sb/GARFIELD.sol#1298) is not in mixedCase
Variable GARFIELD._maxTxAmount (../../sb/GARFIELD.sol#1277) is not in mixedCase
Variable GARFIELD._taxFee (../../sb/GARFIELD.sol#1285) is not in mixedCase
Variable GARFIELD._liquidityFee (../../sb/GARFIELD.sol#1288) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

Redundant expression "this (../../sb/GARFIELD.sol#250)" inContext (../../sb/GARFIELD.sol#244-253)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#redundant-statements

Variable IPancakeRouter01.addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256).amountADesired (../../sb/GARFIELD.sol#553) is too similar to IPancakeRouter01.addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256).amountBDesired (../../sb/GARFIELD.sol#554)
Variable GARFIELD._transferFromExcluded(address,address,uint256).rTransferAmount (../../sb/GARFIELD.sol#1264) is too similar to GARFIELD._transferStandard(address,address,uint256).tTransferAmount (../../sb/GARFIELD.sol#1245)
Variable GARFIELD._getValues(uint256).rTransferAmount (../../sb/GARFIELD.sol#1110) is too similar to GARFIELD._transferBothExcluded(address,address,uint256).tTransferAmount (../../sb/GARFIELD.sol#1069)
Variable GARFIELD._transferStandard(address,address,uint256).rTransferAmount (../../sb/GARFIELD.sol#1245) is too similar to GARFIELD._transferToExcluded(address,address,uint256).tTransferAmount (../../sb/GARFIELD.sol#1254)
Variable GARFIELD._getValues(uint256).rTransferAmount (../../sb/GARFIELD.sol#1110) is too similar to GARFIELD._transferToExcluded(address,address,uint256).tTransferAmount (../../sb/GARFIELD.sol#1254)
Variable GARFIELD._getValues(uint256).rTransferAmount (../../sb/GARFIELD.sol#1110) is too similar to GARFIELD._transferStandard(address,address,uint256).tTransferAmount (../../sb/GARFIELD.sol#1245)
Variable GARFIELD._transferStandard(address,address,uint256).rTransferAmount (../../sb/GARFIELD.sol#1245) is too similar to GARFIELD._transferStandard(address,address,uint256).tTransferAmount (../../sb/GARFIELD.sol#1245)
Variable GARFIELD.reflectionFromToken(uint256,bool).rTransferAmount (../../sb/GARFIELD.sol#1034) is too similar to GARFIELD._transferFromExcluded(address,address,uint256).tTransferAmount (../../sb/GARFIELD.sol#1264)
Variable GARFIELD.reflectionFromToken(uint256,bool).rTransferAmount (../../sb/GARFIELD.sol#1034) is too similar to GARFIELD._getValues(uint256).tTransferAmount (../../sb/GARFIELD.sol#1109)
Variable GARFIELD.reflectionFromToken(uint256,bool).rTransferAmount (../../sb/GARFIELD.sol#1034) is too similar to GARFIELD._transferBothExcluded(address,address,uint256).tTransferAmount (../../sb/GARFIELD.sol#1069)
Variable GARFIELD.reflectionFromToken(uint256,bool).rTransferAmount (../../sb/GARFIELD.sol#1034) is too similar to GARFIELD._transferToExcluded(address,address,uint256).tTransferAmount (../../sb/GARFIELD.sol#1254)
Variable GARFIELD._transferBothExcluded(address,address,uint256).rTransferAmount (../../sb/GARFIELD.sol#1069) is too similar to GARFIELD._transferBothExcluded(address,address,uint256).tTransferAmount (../../sb/GARFIELD.sol#1069)
Variable GARFIELD.reflectionFromToken(uint256,bool).rTransferAmount (../../sb/GARFIELD.sol#1034) is too similar to GARFIELD._transferStandard(address,address,uint256).tTransferAmount (../../sb/GARFIELD.sol#1245)
Variable GARFIELD._transferBothExcluded(address,address,uint256).rTransferAmount (../../sb/GARFIELD.sol#1069) is too similar to GARFIELD._transferToExcluded(address,address,uint256).tTransferAmount (../../sb/GARFIELD.sol#1254)
Variable GARFIELD._transferBothExcluded(address,address,uint256).rTransferAmount (../../sb/GARFIELD.sol#1069) is too similar to GARFIELD._transferStandard(address,address,uint256).tTransferAmount (../../sb/GARFIELD.sol#1245)
Variable GARFIELD._transferToExcluded(address,address,uint256).rTransferAmount (../../sb/GARFIELD.sol#1254) is too similar to GARFIELD._transferToExcluded(address,address,uint256).tTransferAmount (../../sb/GARFIELD.sol#1254)
Variable GARFIELD._transferToExcluded(address,address,uint256).rTransferAmount (../../sb/GARFIELD.sol#1254) is too similar to GARFIELD._transferStandard(address,address,uint256).tTransferAmount (../../sb/GARFIELD.sol#1245)
Variable GARFIELD._getRValues(uint256,uint256,uint256,uint256).rTransferAmount (../../sb/GARFIELD.sol#1125) is too similar to GARFIELD._transferStandard(address,address,uint256).tTransferAmount (../../sb/GARFIELD.sol#1245)
Variable GARFIELD._getRValues(uint256,uint256,uint256,uint256).rTransferAmount (../../sb/GARFIELD.sol#1125) is too similar to GARFIELD._transferBothExcluded(address,address,uint256).tTransferAmount (../../sb/GARFIELD.sol#1069)
Variable GARFIELD._getRValues(uint256,uint256,uint256,uint256).rTransferAmount (../../sb/GARFIELD.sol#1125) is too similar to GARFIELD._transferToExcluded(address,address,uint256).tTransferAmount (../../sb/GARFIELD.sol#1254)
Variable GARFIELD._transferFromExcluded(address,address,uint256).rTransferAmount (../../sb/GARFIELD.sol#1264) is too similar to GARFIELD._transferFromExcluded(address,address,uint256).tTransferAmount (../../sb/GARFIELD.sol#1264)
Variable GARFIELD._transferFromExcluded(address,address,uint256).rTransferAmount (../../sb/GARFIELD.sol#1264) is too similar to GARFIELD._getValues(uint256).tTransferAmount (../../sb/GARFIELD.sol#1109)
Variable GARFIELD._transferFromExcluded(address,address,uint256).rTransferAmount (../../sb/GARFIELD.sol#1264) is too similar to GARFIELD._transferBothExcluded(address,address,uint256).tTransferAmount (../../sb/GARFIELD.sol#1069)
Variable GARFIELD._transferFromExcluded(address,address,uint256).rTransferAmount (../../sb/GARFIELD.sol#1264) is too similar to GARFIELD._transferToExcluded(address,address,uint256).tTransferAmount (../../sb/GARFIELD.sol#1254)
Variable GARFIELD._transferToExcluded(address,address,uint256).rTransferAmount (../../sb/GARFIELD.sol#1254) is too similar to GARFIELD._transferBothExcluded(address,address,uint256).tTransferAmount (../../sb/GARFIELD.sol#1069)
Variable GARFIELD._transferStandard(address,address,uint256).rTransferAmount (../../sb/GARFIELD.sol#1245) is too similar to GARFIELD._transferBothExcluded(address,address,uint256).tTransferAmount (../../sb/GARFIELD.sol#1069)
Variable GARFIELD.reflectionFromToken(uint256,bool).rTransferAmount (../../sb/GARFIELD.sol#1034) is too similar to GARFIELD._getTValues(uint256).tTransferAmount (../../sb/GARFIELD.sol#1117)
Variable GARFIELD._getValues(uint256).rTransferAmount (../../sb/GARFIELD.sol#1110) is too similar to GARFIELD._getTValues(uint256).tTransferAmount (../../sb/GARFIELD.sol#1117)
Variable GARFIELD._getValues(uint256).rTransferAmount (../../sb/GARFIELD.sol#1110) is too similar to GARFIELD._getValues(uint256).tTransferAmount (../../sb/GARFIELD.sol#1109)
Variable GARFIELD._getValues(uint256).rTransferAmount (../../sb/GARFIELD.sol#1110) is too similar to GARFIELD._transferFromExcluded(address,address,uint256).tTransferAmount (../../sb/GARFIELD.sol#1264)
Variable GARFIELD._transferBothExcluded(address,address,uint256).rTransferAmount (../../sb/GARFIELD.sol#1069) is too similar to GARFIELD._getTValues(uint256).tTransferAmount (../../sb/GARFIELD.sol#1117)
Variable GARFIELD._transferFromExcluded(address,address,uint256).rTransferAmount (../../sb/GARFIELD.sol#1264) is too similar to GARFIELD._getTValues(uint256).tTransferAmount (../../sb/GARFIELD.sol#1117)
Variable GARFIELD._getRValues(uint256,uint256,uint256,uint256).rTransferAmount (../../sb/GARFIELD.sol#1125) is too similar to GARFIELD._getTValues(uint256).tTransferAmount (../../sb/GARFIELD.sol#1117)
Variable GARFIELD._transferToExcluded(address,address,uint256).rTransferAmount (../../sb/GARFIELD.sol#1254) is too similar to GARFIELD._getTValues(uint256).tTransferAmount (../../sb/GARFIELD.sol#1117)
Variable GARFIELD._transferStandard(address,address,uint256).rTransferAmount (../../sb/GARFIELD.sol#1245) is too similar to GARFIELD._getTValues(uint256).tTransferAmount (../../sb/GARFIELD.sol#1117)
Variable GARFIELD._getRValues(uint256,uint256,uint256,uint256).rTransferAmount (../../sb/GARFIELD.sol#1125) is too similar to GARFIELD._getValues(uint256).tTransferAmount (../../sb/GARFIELD.sol#1109)
Variable GARFIELD._transferBothExcluded(address,address,uint256).rTransferAmount (../../sb/GARFIELD.sol#1069) is too similar to GARFIELD._getValues(uint256).tTransferAmount (../../sb/GARFIELD.sol#1109)
Variable GARFIELD._transferToExcluded(address,address,uint256).rTransferAmount (../../sb/GARFIELD.sol#1254) is too similar to GARFIELD._getValues(uint256).tTransferAmount (../../sb/GARFIELD.sol#1109)
Variable GARFIELD._getRValues(uint256,uint256,uint256,uint256).rTransferAmount (../../sb/GARFIELD.sol#1125) is too similar to GARFIELD._transferFromExcluded(address,address,uint256).tTransferAmount (../../sb/GARFIELD.sol#1264)
Variable GARFIELD._transferBothExcluded(address,address,uint256).rTransferAmount (../../sb/GARFIELD.sol#1069) is too similar to GARFIELD._transferFromExcluded(address,address,uint256).tTransferAmount (../../sb/GARFIELD.sol#1264)
Variable GARFIELD._transferToExcluded(address,address,uint256).rTransferAmount (../../sb/GARFIELD.sol#1254) is too similar to GARFIELD._transferFromExcluded(address,address,uint256).tTransferAmount (../../sb/GARFIELD.sol#1264)
Variable GARFIELD._transferStandard(address,address,uint256).rTransferAmount (../../sb/GARFIELD.sol#1245) is too similar to GARFIELD._getValues(uint256).tTransferAmount (../../sb/GARFIELD.sol#1109)
Variable GARFIELD._transferStandard(address,address,uint256).rTransferAmount (../../sb/GARFIELD.sol#1245) is too similar to GARFIELD._transferFromExcluded(address,address,uint256).tTransferAmount (../../sb/GARFIELD.sol#1264)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#variable-names-too-similar

GARFIELD.slitherConstructorVariables() (../../sb/GARFIELD.sol#885-1451) uses literals with too many digits:
	- _tTotal = 1000000000000 * 10 ** 9 (../../sb/GARFIELD.sol#900)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits

Loop condition i < _excluded.length (../../sb/GARFIELD.sol#1137) should use cached array length instead of referencing `length` member of the storage array.
 Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#cache-array-length

GARFIELD._decimals (../../sb/GARFIELD.sol#908) should be constant 
GARFIELD._name (../../sb/GARFIELD.sol#906) should be constant 
GARFIELD._symbol (../../sb/GARFIELD.sol#907) should be constant 
GARFIELD._tTotal (../../sb/GARFIELD.sol#900) should be constant 
GARFIELD.rewardThreshold (../../sb/GARFIELD.sol#1290) should be constant 
GARFIELD.threshHoldTopUpRate (../../sb/GARFIELD.sol#1276) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant

GARFIELD.minTokenNumberToSell (../../sb/GARFIELD.sol#1292) should be immutable 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-immutable
/sb/GARFIELD.sol analyzed (12 contracts with 93 detectors), 111 result(s) found
