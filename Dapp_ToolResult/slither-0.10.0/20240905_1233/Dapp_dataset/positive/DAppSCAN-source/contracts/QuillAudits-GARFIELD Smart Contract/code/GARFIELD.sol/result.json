{
    "errors": [],
    "fails": [],
    "findings": [
        {
            "confidence": "Medium",
            "contract": "Utils",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-GARFIELD Smart Contract/code/GARFIELD.sol",
            "function": "addLiquidity",
            "impact": "High",
            "line": 799,
            "line_end": 816,
            "message": "Utils.addLiquidity(address,address,uint256,uint256) (GARFIELD.sol#799-816) sends eth to arbitrary user\n\tDangerous calls:\n\t- pancakeRouter.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner,block.timestamp + 360) (GARFIELD.sol#808-815)\n",
            "name": "arbitrary-send-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Utils",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-GARFIELD Smart Contract/code/GARFIELD.sol",
            "function": "swapETHForTokens",
            "impact": "High",
            "line": 778,
            "line_end": 797,
            "message": "Utils.swapETHForTokens(address,address,uint256) (GARFIELD.sol#778-797) sends eth to arbitrary user\n\tDangerous calls:\n\t- pancakeRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value: ethAmount}(0,path,address(recipient),block.timestamp + 360) (GARFIELD.sol#791-796)\n",
            "name": "arbitrary-send-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "GARFIELD",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-GARFIELD Smart Contract/code/GARFIELD.sol",
            "function": "_transfer",
            "impact": "High",
            "line": 1193,
            "line_end": 1218,
            "message": "Reentrancy in GARFIELD._transfer(address,address,uint256,uint256) (GARFIELD.sol#1193-1218):\n\tExternal calls:\n\t- swapAndLiquify(from,to) (GARFIELD.sol#1206)\n\t\t- pancakeRouter.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner,block.timestamp + 360) (GARFIELD.sol#808-815)\n\t\t- pancakeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (GARFIELD.sol#769-775)\n\t\t- Utils.swapTokensForEth(address(pancakeRouter),tokenAmountToBeSwapped) (GARFIELD.sol#1415)\n\t\t- Utils.addLiquidity(address(pancakeRouter),owner(),otherPiece,bnbToBeAddedToLiquidity) (GARFIELD.sol#1428)\n\tExternal calls sending eth:\n\t- swapAndLiquify(from,to) (GARFIELD.sol#1206)\n\t\t- pancakeRouter.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner,block.timestamp + 360) (GARFIELD.sol#808-815)\n\tState variables written after the call(s):\n\t- _tokenTransfer(from,to,amount,takeFee) (GARFIELD.sol#1217)\n\t\t- _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity) (GARFIELD.sol#1149)\n\t\t- _rOwned[sender] = _rOwned[sender].sub(rAmount) (GARFIELD.sol#1255)\n\t\t- _rOwned[sender] = _rOwned[sender].sub(rAmount) (GARFIELD.sol#1246)\n\t\t- _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount) (GARFIELD.sol#1247)\n\t\t- _rOwned[sender] = _rOwned[sender].sub(rAmount) (GARFIELD.sol#1071)\n\t\t- _rOwned[sender] = _rOwned[sender].sub(rAmount) (GARFIELD.sol#1266)\n\t\t- _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount) (GARFIELD.sol#1267)\n\t\t- _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount) (GARFIELD.sol#1257)\n\t\t- _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount) (GARFIELD.sol#1073)\n\tGARFIELD._rOwned (GARFIELD.sol#889) can be used in cross function reentrancies:\n\t- GARFIELD._getCurrentSupply() (GARFIELD.sol#1134-1144)\n\t- GARFIELD._takeLiquidity(uint256) (GARFIELD.sol#1146-1152)\n\t- GARFIELD._transferBothExcluded(address,address,uint256) (GARFIELD.sol#1068-1077)\n\t- GARFIELD._transferFromExcluded(address,address,uint256) (GARFIELD.sol#1263-1271)\n\t- GARFIELD._transferStandard(address,address,uint256) (GARFIELD.sol#1244-1251)\n\t- GARFIELD._transferToExcluded(address,address,uint256) (GARFIELD.sol#1253-1261)\n\t- GARFIELD.balanceOf(address) (GARFIELD.sol#976-979)\n\t- GARFIELD.constructor(address) (GARFIELD.sol#934-958)\n\t- GARFIELD.deliver(uint256) (GARFIELD.sol#1019-1026)\n\t- GARFIELD.excludeFromReward(address) (GARFIELD.sol#1045-1053)\n\t- _tokenTransfer(from,to,amount,takeFee) (GARFIELD.sol#1217)\n\t\t- _rTotal = _rTotal.sub(rFee) (GARFIELD.sol#1104)\n\tGARFIELD._rTotal (GARFIELD.sol#903) can be used in cross function reentrancies:\n\t- GARFIELD._getCurrentSupply() (GARFIELD.sol#1134-1144)\n\t- GARFIELD._reflectFee(uint256,uint256) (GARFIELD.sol#1103-1106)\n\t- GARFIELD.constructor(address) (GARFIELD.sol#934-958)\n\t- GARFIELD.deliver(uint256) (GARFIELD.sol#1019-1026)\n\t- GARFIELD.tokenFromReflection(uint256) (GARFIELD.sol#1039-1043)\n\t- _tokenTransfer(from,to,amount,takeFee) (GARFIELD.sol#1217)\n\t\t- _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity) (GARFIELD.sol#1151)\n\t\t- _tOwned[sender] = _tOwned[sender].sub(tAmount) (GARFIELD.sol#1070)\n\t\t- _tOwned[sender] = _tOwned[sender].sub(tAmount) (GARFIELD.sol#1265)\n\t\t- _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount) (GARFIELD.sol#1256)\n\t\t- _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount) (GARFIELD.sol#1072)\n\tGARFIELD._tOwned (GARFIELD.sol#890) can be used in cross function reentrancies:\n\t- GARFIELD._getCurrentSupply() (GARFIELD.sol#1134-1144)\n\t- GARFIELD._takeLiquidity(uint256) (GARFIELD.sol#1146-1152)\n\t- GARFIELD._transferBothExcluded(address,address,uint256) (GARFIELD.sol#1068-1077)\n\t- GARFIELD._transferFromExcluded(address,address,uint256) (GARFIELD.sol#1263-1271)\n\t- GARFIELD._transferToExcluded(address,address,uint256) (GARFIELD.sol#1253-1261)\n\t- GARFIELD.balanceOf(address) (GARFIELD.sol#976-979)\n\t- GARFIELD.excludeFromReward(address) (GARFIELD.sol#1045-1053)\n\t- GARFIELD.includeInReward(address) (GARFIELD.sol#1055-1066)\n",
            "name": "reentrancy-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "GARFIELD",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-GARFIELD Smart Contract/code/GARFIELD.sol",
            "function": "claimBNBReward",
            "impact": "Medium",
            "line": 1324,
            "line_end": 1346,
            "message": "Reentrancy in GARFIELD.claimBNBReward() (GARFIELD.sol#1324-1346):\n\tExternal calls:\n\t- Utils.swapETHForTokens(address(pancakeRouter),address(0x000000000000000000000000000000000000dEaD),reward.div(5)) (GARFIELD.sol#1332-1336)\n\tState variables written after the call(s):\n\t- nextAvailableClaimDate[msg.sender] = block.timestamp + getRewardCycleBlock() (GARFIELD.sol#1341)\n\tGARFIELD.nextAvailableClaimDate (GARFIELD.sol#1279) can be used in cross function reentrancies:\n\t- GARFIELD.nextAvailableClaimDate (GARFIELD.sol#1279)\n\t- GARFIELD.topUpClaimCycleAfterTransfer(address,uint256) (GARFIELD.sol#1348-1358)\n",
            "name": "reentrancy-no-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Utils",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-GARFIELD Smart Contract/code/GARFIELD.sol",
            "function": "addLiquidity",
            "impact": "Medium",
            "line": 799,
            "line_end": 816,
            "message": "Utils.addLiquidity(address,address,uint256,uint256) (GARFIELD.sol#799-816) ignores return value by pancakeRouter.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner,block.timestamp + 360) (GARFIELD.sol#808-815)\n",
            "name": "unused-return",
            "check": "FP"
        },
        {
            "confidence": "High",
            "contract": "Ownable",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-GARFIELD Smart Contract/code/GARFIELD.sol",
            "function": "owner",
            "impact": "Low",
            "line": 1185,
            "message": "GARFIELD._approve(address,address,uint256).owner (GARFIELD.sol#1185) shadows:\n\t- Ownable.owner() (GARFIELD.sol#424-426) (function)\n",
            "name": "shadowing-local",
            "check": "FP"
        },
        {
            "confidence": "High",
            "contract": "Ownable",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-GARFIELD Smart Contract/code/GARFIELD.sol",
            "function": "owner",
            "impact": "Low",
            "line": 986,
            "message": "GARFIELD.allowance(address,address).owner (GARFIELD.sol#986) shadows:\n\t- Ownable.owner() (GARFIELD.sol#424-426) (function)\n",
            "name": "shadowing-local",
            "check": "FP"
        },
        {
            "confidence": "High",
            "contract": "GARFIELD",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-GARFIELD Smart Contract/code/GARFIELD.sol",
            "function": "totalSupply",
            "impact": "Low",
            "line": 1303,
            "line_end": 1306,
            "message": "GARFIELD.calculateBNBReward(address).totalSupply (GARFIELD.sol#1303-1306) shadows:\n\t- GARFIELD.totalSupply() (GARFIELD.sol#972-974) (function)\n\t- IBEP20.totalSupply() (GARFIELD.sol#21) (function)\n",
            "name": "shadowing-local",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "GARFIELD",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-GARFIELD Smart Contract/code/GARFIELD.sol",
            "function": "setTaxFeePercent",
            "impact": "Low",
            "line": 1087,
            "line_end": 1089,
            "message": "GARFIELD.setTaxFeePercent(uint256) (GARFIELD.sol#1087-1089) should emit an event for: \n\t- _taxFee = taxFee (GARFIELD.sol#1088) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "GARFIELD",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-GARFIELD Smart Contract/code/GARFIELD.sol",
            "function": "setLiquidityFeePercent",
            "impact": "Low",
            "line": 1091,
            "line_end": 1093,
            "message": "GARFIELD.setLiquidityFeePercent(uint256) (GARFIELD.sol#1091-1093) should emit an event for: \n\t- _liquidityFee = liquidityFee (GARFIELD.sol#1092) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "GARFIELD",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-GARFIELD Smart Contract/code/GARFIELD.sol",
            "function": "setMaxTxPercent",
            "impact": "Low",
            "line": 1294,
            "line_end": 1296,
            "message": "GARFIELD.setMaxTxPercent(uint256) (GARFIELD.sol#1294-1296) should emit an event for: \n\t- _maxTxAmount = _tTotal.mul(maxTxPercent).div(10000) (GARFIELD.sol#1295) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "GARFIELD",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-GARFIELD Smart Contract/code/GARFIELD.sol",
            "function": "_transfer",
            "impact": "Low",
            "line": 1193,
            "line_end": 1218,
            "message": "Reentrancy in GARFIELD._transfer(address,address,uint256,uint256) (GARFIELD.sol#1193-1218):\n\tExternal calls:\n\t- swapAndLiquify(from,to) (GARFIELD.sol#1206)\n\t\t- pancakeRouter.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner,block.timestamp + 360) (GARFIELD.sol#808-815)\n\t\t- pancakeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (GARFIELD.sol#769-775)\n\t\t- Utils.swapTokensForEth(address(pancakeRouter),tokenAmountToBeSwapped) (GARFIELD.sol#1415)\n\t\t- Utils.addLiquidity(address(pancakeRouter),owner(),otherPiece,bnbToBeAddedToLiquidity) (GARFIELD.sol#1428)\n\tExternal calls sending eth:\n\t- swapAndLiquify(from,to) (GARFIELD.sol#1206)\n\t\t- pancakeRouter.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner,block.timestamp + 360) (GARFIELD.sol#808-815)\n\tState variables written after the call(s):\n\t- _tokenTransfer(from,to,amount,takeFee) (GARFIELD.sol#1217)\n\t\t- _liquidityFee = _previousLiquidityFee (GARFIELD.sol#1178)\n\t\t- _liquidityFee = 0 (GARFIELD.sol#1173)\n\t- _tokenTransfer(from,to,amount,takeFee) (GARFIELD.sol#1217)\n\t\t- _previousLiquidityFee = _liquidityFee (GARFIELD.sol#1170)\n\t- _tokenTransfer(from,to,amount,takeFee) (GARFIELD.sol#1217)\n\t\t- _previousTaxFee = _taxFee (GARFIELD.sol#1169)\n\t- _tokenTransfer(from,to,amount,takeFee) (GARFIELD.sol#1217)\n\t\t- _tFeeTotal = _tFeeTotal.add(tFee) (GARFIELD.sol#1105)\n\t- _tokenTransfer(from,to,amount,takeFee) (GARFIELD.sol#1217)\n\t\t- _taxFee = _previousTaxFee (GARFIELD.sol#1177)\n\t\t- _taxFee = 0 (GARFIELD.sol#1172)\n\t- _tokenTransfer(from,to,amount,takeFee) (GARFIELD.sol#1217)\n\t\t- nextAvailableClaimDate[recipient] = nextAvailableClaimDate[recipient] + Utils.calculateTopUpClaim(currentRecipientBalance,basedRewardCycleBlock,threshHoldTopUpRate,amount) (GARFIELD.sol#1352-1357)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "GARFIELD",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-GARFIELD Smart Contract/code/GARFIELD.sol",
            "function": "transferFrom",
            "impact": "Low",
            "line": 995,
            "line_end": 999,
            "message": "Reentrancy in GARFIELD.transferFrom(address,address,uint256) (GARFIELD.sol#995-999):\n\tExternal calls:\n\t- _transfer(sender,recipient,amount,0) (GARFIELD.sol#996)\n\t\t- pancakeRouter.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner,block.timestamp + 360) (GARFIELD.sol#808-815)\n\t\t- pancakeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (GARFIELD.sol#769-775)\n\t\t- Utils.swapTokensForEth(address(pancakeRouter),tokenAmountToBeSwapped) (GARFIELD.sol#1415)\n\t\t- Utils.addLiquidity(address(pancakeRouter),owner(),otherPiece,bnbToBeAddedToLiquidity) (GARFIELD.sol#1428)\n\tExternal calls sending eth:\n\t- _transfer(sender,recipient,amount,0) (GARFIELD.sol#996)\n\t\t- pancakeRouter.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner,block.timestamp + 360) (GARFIELD.sol#808-815)\n\tState variables written after the call(s):\n\t- _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,BEP20: transfer amount exceeds allowance)) (GARFIELD.sol#997)\n\t\t- _allowances[owner][spender] = amount (GARFIELD.sol#1189)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "GARFIELD",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-GARFIELD Smart Contract/code/GARFIELD.sol",
            "function": "swapAndLiquify",
            "impact": "Low",
            "line": 1381,
            "line_end": 1432,
            "message": "Reentrancy in GARFIELD.swapAndLiquify(address,address) (GARFIELD.sol#1381-1432):\n\tExternal calls:\n\t- Utils.swapTokensForEth(address(pancakeRouter),tokenAmountToBeSwapped) (GARFIELD.sol#1415)\n\t- Utils.addLiquidity(address(pancakeRouter),owner(),otherPiece,bnbToBeAddedToLiquidity) (GARFIELD.sol#1428)\n\tEvent emitted after the call(s):\n\t- SwapAndLiquify(piece,deltaBalance,otherPiece) (GARFIELD.sol#1430)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "GARFIELD",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-GARFIELD Smart Contract/code/GARFIELD.sol",
            "function": "_transfer",
            "impact": "Low",
            "line": 1193,
            "line_end": 1218,
            "message": "Reentrancy in GARFIELD._transfer(address,address,uint256,uint256) (GARFIELD.sol#1193-1218):\n\tExternal calls:\n\t- swapAndLiquify(from,to) (GARFIELD.sol#1206)\n\t\t- pancakeRouter.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner,block.timestamp + 360) (GARFIELD.sol#808-815)\n\t\t- pancakeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (GARFIELD.sol#769-775)\n\t\t- Utils.swapTokensForEth(address(pancakeRouter),tokenAmountToBeSwapped) (GARFIELD.sol#1415)\n\t\t- Utils.addLiquidity(address(pancakeRouter),owner(),otherPiece,bnbToBeAddedToLiquidity) (GARFIELD.sol#1428)\n\tExternal calls sending eth:\n\t- swapAndLiquify(from,to) (GARFIELD.sol#1206)\n\t\t- pancakeRouter.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner,block.timestamp + 360) (GARFIELD.sol#808-815)\n\tEvent emitted after the call(s):\n\t- Transfer(sender,recipient,tTransferAmount) (GARFIELD.sol#1250)\n\t\t- _tokenTransfer(from,to,amount,takeFee) (GARFIELD.sol#1217)\n\t- Transfer(sender,recipient,tTransferAmount) (GARFIELD.sol#1270)\n\t\t- _tokenTransfer(from,to,amount,takeFee) (GARFIELD.sol#1217)\n\t- Transfer(sender,recipient,tTransferAmount) (GARFIELD.sol#1260)\n\t\t- _tokenTransfer(from,to,amount,takeFee) (GARFIELD.sol#1217)\n\t- Transfer(sender,recipient,tTransferAmount) (GARFIELD.sol#1076)\n\t\t- _tokenTransfer(from,to,amount,takeFee) (GARFIELD.sol#1217)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "GARFIELD",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-GARFIELD Smart Contract/code/GARFIELD.sol",
            "function": "transferFrom",
            "impact": "Low",
            "line": 995,
            "line_end": 999,
            "message": "Reentrancy in GARFIELD.transferFrom(address,address,uint256) (GARFIELD.sol#995-999):\n\tExternal calls:\n\t- _transfer(sender,recipient,amount,0) (GARFIELD.sol#996)\n\t\t- pancakeRouter.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner,block.timestamp + 360) (GARFIELD.sol#808-815)\n\t\t- pancakeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (GARFIELD.sol#769-775)\n\t\t- Utils.swapTokensForEth(address(pancakeRouter),tokenAmountToBeSwapped) (GARFIELD.sol#1415)\n\t\t- Utils.addLiquidity(address(pancakeRouter),owner(),otherPiece,bnbToBeAddedToLiquidity) (GARFIELD.sol#1428)\n\tExternal calls sending eth:\n\t- _transfer(sender,recipient,amount,0) (GARFIELD.sol#996)\n\t\t- pancakeRouter.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner,block.timestamp + 360) (GARFIELD.sol#808-815)\n\tEvent emitted after the call(s):\n\t- Approval(owner,spender,amount) (GARFIELD.sol#1190)\n\t\t- _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,BEP20: transfer amount exceeds allowance)) (GARFIELD.sol#997)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Ownable",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-GARFIELD Smart Contract/code/GARFIELD.sol",
            "function": "unlock",
            "impact": "Low",
            "line": 471,
            "line_end": 476,
            "message": "Ownable.unlock() (GARFIELD.sol#471-476) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(now > _lockTime,Contract is locked until 7 days) (GARFIELD.sol#473)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "GARFIELD",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-GARFIELD Smart Contract/code/GARFIELD.sol",
            "function": "claimBNBReward",
            "impact": "Low",
            "line": 1324,
            "line_end": 1346,
            "message": "GARFIELD.claimBNBReward() (GARFIELD.sol#1324-1346) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(nextAvailableClaimDate[msg.sender] <= block.timestamp,Error: next available not reached) (GARFIELD.sol#1325)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "GARFIELD",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-GARFIELD Smart Contract/code/GARFIELD.sol",
            "function": "ensureMaxTxAmount",
            "impact": "Low",
            "line": 1360,
            "line_end": 1374,
            "message": "GARFIELD.ensureMaxTxAmount(address,address,uint256,uint256) (GARFIELD.sol#1360-1374) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- value < disruptiveCoverageFee && block.timestamp >= disruptiveTransferEnabledFrom (GARFIELD.sol#1370)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "GARFIELD",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-GARFIELD Smart Contract/code/GARFIELD.sol",
            "function": "getRewardCycleBlock",
            "impact": "Low",
            "line": 1319,
            "line_end": 1322,
            "message": "GARFIELD.getRewardCycleBlock() (GARFIELD.sol#1319-1322) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp >= disableEasyRewardFrom (GARFIELD.sol#1320)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Utils",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-GARFIELD Smart Contract/code/GARFIELD.sol",
            "function": "isLotteryWon",
            "impact": "Low",
            "line": 701,
            "line_end": 705,
            "message": "Utils.isLotteryWon(uint256,uint256) (GARFIELD.sol#701-705) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- luckyNumber <= winPercentage (GARFIELD.sol#704)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "GARFIELD",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-GARFIELD Smart Contract/code/GARFIELD.sol",
            "function": "includeInReward",
            "impact": "Informational",
            "line": 1055,
            "line_end": 1066,
            "message": "GARFIELD.includeInReward(address) (GARFIELD.sol#1055-1066) has costly operations inside a loop:\n\t- _excluded.pop() (GARFIELD.sol#1062)\n",
            "name": "costly-loop",
            "check": "FP"
        },
        {
            "confidence": "High",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-GARFIELD Smart Contract/code/GARFIELD.sol",
            "impact": "Informational",
            "line": 903,
            "message": "GARFIELD._rTotal (GARFIELD.sol#903) is set pre-construction with a non-constant function or state variable:\n\t- (MAX - (MAX % _tTotal))\n",
            "name": "function-init-state",
            "check": "FP"
        },
        {
            "confidence": "High",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-GARFIELD Smart Contract/code/GARFIELD.sol",
            "impact": "Informational",
            "line": 1286,
            "message": "GARFIELD._previousTaxFee (GARFIELD.sol#1286) is set pre-construction with a non-constant function or state variable:\n\t- _taxFee\n",
            "name": "function-init-state",
            "check": "FP"
        },
        {
            "confidence": "High",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-GARFIELD Smart Contract/code/GARFIELD.sol",
            "impact": "Informational",
            "line": 1289,
            "message": "GARFIELD._previousLiquidityFee (GARFIELD.sol#1289) is set pre-construction with a non-constant function or state variable:\n\t- _liquidityFee\n",
            "name": "function-init-state",
            "check": "FP"
        },
        {
            "confidence": "High",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-GARFIELD Smart Contract/code/GARFIELD.sol",
            "impact": "Informational",
            "line": 1292,
            "message": "GARFIELD.minTokenNumberToSell (GARFIELD.sol#1292) is set pre-construction with a non-constant function or state variable:\n\t- _tTotal.mul(1).div(10000).div(10)\n",
            "name": "function-init-state",
            "check": "FP"
        },
        {
            "confidence": "High",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-GARFIELD Smart Contract/code/GARFIELD.sol",
            "impact": "Informational",
            "line": 1277,
            "message": "GARFIELD._maxTxAmount (GARFIELD.sol#1277) is set pre-construction with a non-constant function or state variable:\n\t- _tTotal\n",
            "name": "function-init-state",
            "check": "FP"
        }
    ],
    "infos": [],
    "parser": {
        "id": "slither-0.10.0",
        "mode": "solidity",
        "version": "2024/04/30"
    }
}