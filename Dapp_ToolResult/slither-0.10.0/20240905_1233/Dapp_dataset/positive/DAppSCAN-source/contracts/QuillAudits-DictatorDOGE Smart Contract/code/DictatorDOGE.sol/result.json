{
    "errors": [],
    "fails": [],
    "findings": [
        {
            "confidence": "Medium",
            "contract": "DictatorDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-DictatorDOGE Smart Contract/code/DictatorDOGE.sol",
            "function": "addLiquidity",
            "impact": "High",
            "line": 842,
            "line_end": 855,
            "message": "DictatorDOGE.addLiquidity(uint256,uint256) (DictatorDOGE.sol#842-855) sends eth to arbitrary user\n\tDangerous calls:\n\t- uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (DictatorDOGE.sol#847-854)\n",
            "name": "arbitrary-send-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "DictatorDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-DictatorDOGE Smart Contract/code/DictatorDOGE.sol",
            "function": "swapETHForTokens",
            "impact": "High",
            "line": 825,
            "line_end": 840,
            "message": "DictatorDOGE.swapETHForTokens(uint256) (DictatorDOGE.sol#825-840) sends eth to arbitrary user\n\tDangerous calls:\n\t- uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,deadAddress,block.timestamp.add(300)) (DictatorDOGE.sol#832-837)\n",
            "name": "arbitrary-send-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "DictatorDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-DictatorDOGE Smart Contract/code/DictatorDOGE.sol",
            "function": "_transfer",
            "impact": "High",
            "line": 668,
            "line_end": 785,
            "message": "DictatorDOGE._transfer(address,address,uint256) (DictatorDOGE.sol#668-785) uses a weak PRNG: \"_bBSLimit = _bBSLimitMin + uint256(keccak256(bytes)(abi.encodePacked(block.timestamp,block.difficulty))) % (_bBSLimitMax - _bBSLimitMin + 1) (DictatorDOGE.sol#729)\" \n",
            "name": "weak-prng",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "DictatorDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-DictatorDOGE Smart Contract/code/DictatorDOGE.sol",
            "function": "_transfer",
            "impact": "High",
            "line": 668,
            "line_end": 785,
            "message": "Reentrancy in DictatorDOGE._transfer(address,address,uint256) (DictatorDOGE.sol#668-785):\n\tExternal calls:\n\t- swapTokens(contractTokenBalance) (DictatorDOGE.sol#697)\n\t\t- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (DictatorDOGE.sol#814-820)\n\tExternal calls sending eth:\n\t- swapTokens(contractTokenBalance) (DictatorDOGE.sol#697)\n\t\t- recipient.transfer(amount) (DictatorDOGE.sol#1138)\n\tState variables written after the call(s):\n\t- _removeOldSellHistories() (DictatorDOGE.sol#724)\n\t\t- _sellHistories[i].time = _sellHistories[j].time (DictatorDOGE.sol#1025)\n\t\t- _sellHistories[i].bnbAmount = _sellHistories[j].bnbAmount (DictatorDOGE.sol#1026)\n\t\t- _sellHistories.pop() (DictatorDOGE.sol#1036)\n\tDictatorDOGE._sellHistories (DictatorDOGE.sol#476) can be used in cross function reentrancies:\n\t- DictatorDOGE._removeOldSellHistories() (DictatorDOGE.sol#1017-1039)\n\t- DictatorDOGE._sellHistories (DictatorDOGE.sol#476)\n\t- DictatorDOGE._transfer(address,address,uint256) (DictatorDOGE.sol#668-785)\n",
            "name": "reentrancy-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "DictatorDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-DictatorDOGE Smart Contract/code/DictatorDOGE.sol",
            "function": "_transfer",
            "impact": "High",
            "line": 668,
            "line_end": 785,
            "message": "Reentrancy in DictatorDOGE._transfer(address,address,uint256) (DictatorDOGE.sol#668-785):\n\tExternal calls:\n\t- swapTokens(contractTokenBalance) (DictatorDOGE.sol#697)\n\t\t- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (DictatorDOGE.sol#814-820)\n\t- buyBackTokens(_bBSLimit) (DictatorDOGE.sol#732)\n\t\t- uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,deadAddress,block.timestamp.add(300)) (DictatorDOGE.sol#832-837)\n\tExternal calls sending eth:\n\t- swapTokens(contractTokenBalance) (DictatorDOGE.sol#697)\n\t\t- recipient.transfer(amount) (DictatorDOGE.sol#1138)\n\t- buyBackTokens(_bBSLimit) (DictatorDOGE.sol#732)\n\t\t- uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,deadAddress,block.timestamp.add(300)) (DictatorDOGE.sol#832-837)\n\tState variables written after the call(s):\n\t- _tokenTransfer(from,to,amount,takeFee) (DictatorDOGE.sol#784)\n\t\t- _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity) (DictatorDOGE.sol#961)\n\t\t- _rOwned[sender] = _rOwned[sender].sub(rAmount) (DictatorDOGE.sol#877)\n\t\t- _rOwned[sender] = _rOwned[sender].sub(rAmount) (DictatorDOGE.sol#886)\n\t\t- _rOwned[sender] = _rOwned[sender].sub(rAmount) (DictatorDOGE.sol#897)\n\t\t- _rOwned[sender] = _rOwned[sender].sub(rAmount) (DictatorDOGE.sol#907)\n\t\t- _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount) (DictatorDOGE.sol#878)\n\t\t- _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount) (DictatorDOGE.sol#898)\n\t\t- _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount) (DictatorDOGE.sol#888)\n\t\t- _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount) (DictatorDOGE.sol#909)\n\tDictatorDOGE._rOwned (DictatorDOGE.sol#416) can be used in cross function reentrancies:\n\t- DictatorDOGE._getCurrentSupply() (DictatorDOGE.sol#946-956)\n\t- DictatorDOGE._takeLiquidity(uint256) (DictatorDOGE.sol#958-964)\n\t- DictatorDOGE._transferBothExcluded(address,address,uint256) (DictatorDOGE.sol#904-913)\n\t- DictatorDOGE._transferFromExcluded(address,address,uint256) (DictatorDOGE.sol#894-902)\n\t- DictatorDOGE._transferStandard(address,address,uint256) (DictatorDOGE.sol#875-882)\n\t- DictatorDOGE._transferToExcluded(address,address,uint256) (DictatorDOGE.sol#884-892)\n\t- DictatorDOGE.balanceOf(address) (DictatorDOGE.sol#555-558)\n\t- DictatorDOGE.constructor() (DictatorDOGE.sol#517-537)\n\t- DictatorDOGE.deliver(uint256) (DictatorDOGE.sol#606-613)\n\t- DictatorDOGE.excludeFromReward(address) (DictatorDOGE.sol#633-641)\n\t- _tokenTransfer(from,to,amount,takeFee) (DictatorDOGE.sol#784)\n\t\t- _rTotal = _rTotal.sub(rFee) (DictatorDOGE.sol#916)\n\tDictatorDOGE._rTotal (DictatorDOGE.sol#427) can be used in cross function reentrancies:\n\t- DictatorDOGE._getCurrentSupply() (DictatorDOGE.sol#946-956)\n\t- DictatorDOGE._reflectFee(uint256,uint256) (DictatorDOGE.sol#915-918)\n\t- DictatorDOGE.constructor() (DictatorDOGE.sol#517-537)\n\t- DictatorDOGE.deliver(uint256) (DictatorDOGE.sol#606-613)\n\t- DictatorDOGE.tokenFromReflection(uint256) (DictatorDOGE.sol#627-631)\n\t- _tokenTransfer(from,to,amount,takeFee) (DictatorDOGE.sol#784)\n\t\t- _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity) (DictatorDOGE.sol#963)\n\t\t- _tOwned[sender] = _tOwned[sender].sub(tAmount) (DictatorDOGE.sol#906)\n\t\t- _tOwned[sender] = _tOwned[sender].sub(tAmount) (DictatorDOGE.sol#896)\n\t\t- _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount) (DictatorDOGE.sol#887)\n\t\t- _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount) (DictatorDOGE.sol#908)\n\tDictatorDOGE._tOwned (DictatorDOGE.sol#417) can be used in cross function reentrancies:\n\t- DictatorDOGE._getCurrentSupply() (DictatorDOGE.sol#946-956)\n\t- DictatorDOGE._takeLiquidity(uint256) (DictatorDOGE.sol#958-964)\n\t- DictatorDOGE._transferBothExcluded(address,address,uint256) (DictatorDOGE.sol#904-913)\n\t- DictatorDOGE._transferFromExcluded(address,address,uint256) (DictatorDOGE.sol#894-902)\n\t- DictatorDOGE._transferToExcluded(address,address,uint256) (DictatorDOGE.sol#884-892)\n\t- DictatorDOGE.balanceOf(address) (DictatorDOGE.sol#555-558)\n\t- DictatorDOGE.excludeFromReward(address) (DictatorDOGE.sol#633-641)\n\t- DictatorDOGE.includeInReward(address) (DictatorDOGE.sol#643-654)\n\t- buyBackTokens(_bBSLimit) (DictatorDOGE.sol#732)\n\t\t- inSwapAndLiquify = true (DictatorDOGE.sol#512)\n\t\t- inSwapAndLiquify = false (DictatorDOGE.sol#514)\n\tDictatorDOGE.inSwapAndLiquify (DictatorDOGE.sol#485) can be used in cross function reentrancies:\n\t- DictatorDOGE._transfer(address,address,uint256) (DictatorDOGE.sol#668-785)\n\t- DictatorDOGE.lockTheSwap() (DictatorDOGE.sol#511-515)\n",
            "name": "reentrancy-eth",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "DictatorDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-DictatorDOGE Smart Contract/code/DictatorDOGE.sol",
            "function": "addLiquidity",
            "impact": "Medium",
            "line": 842,
            "line_end": 855,
            "message": "DictatorDOGE.addLiquidity(uint256,uint256) (DictatorDOGE.sol#842-855) ignores return value by uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,owner(),block.timestamp) (DictatorDOGE.sol#847-854)\n",
            "name": "unused-return",
            "check": "FP"
        },
        {
            "confidence": "High",
            "contract": "Ownable",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-DictatorDOGE Smart Contract/code/DictatorDOGE.sol",
            "function": "owner",
            "impact": "Low",
            "line": 660,
            "message": "DictatorDOGE._approve(address,address,uint256).owner (DictatorDOGE.sol#660) shadows:\n\t- Ownable.owner() (DictatorDOGE.sol#163-165) (function)\n",
            "name": "shadowing-local",
            "check": "FP"
        },
        {
            "confidence": "High",
            "contract": "Ownable",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-DictatorDOGE Smart Contract/code/DictatorDOGE.sol",
            "function": "owner",
            "impact": "Low",
            "line": 565,
            "message": "DictatorDOGE.allowance(address,address).owner (DictatorDOGE.sol#565) shadows:\n\t- Ownable.owner() (DictatorDOGE.sol#163-165) (function)\n",
            "name": "shadowing-local",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "DictatorDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-DictatorDOGE Smart Contract/code/DictatorDOGE.sol",
            "function": "setMaxTxAmount",
            "impact": "Low",
            "line": 1092,
            "line_end": 1094,
            "message": "DictatorDOGE.setMaxTxAmount(uint256) (DictatorDOGE.sol#1092-1094) should emit an event for: \n\t- _maxTxAmount = maxTxAmount (DictatorDOGE.sol#1093) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "DictatorDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-DictatorDOGE Smart Contract/code/DictatorDOGE.sol",
            "function": "setBuyFee",
            "impact": "Low",
            "line": 1074,
            "line_end": 1077,
            "message": "DictatorDOGE.setBuyFee(uint256,uint256) (DictatorDOGE.sol#1074-1077) should emit an event for: \n\t- _buyTaxFee = buyTaxFee (DictatorDOGE.sol#1075) \n\t- _buyLiquidityFee = buyLiquidityFee (DictatorDOGE.sol#1076) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "DictatorDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-DictatorDOGE Smart Contract/code/DictatorDOGE.sol",
            "function": "setLiquidityFeePercent",
            "impact": "Low",
            "line": 1084,
            "line_end": 1086,
            "message": "DictatorDOGE.setLiquidityFeePercent(uint256) (DictatorDOGE.sol#1084-1086) should emit an event for: \n\t- _liquidityFee = liquidityFee (DictatorDOGE.sol#1085) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "DictatorDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-DictatorDOGE Smart Contract/code/DictatorDOGE.sol",
            "function": "setSellFee",
            "impact": "Low",
            "line": 1079,
            "line_end": 1082,
            "message": "DictatorDOGE.setSellFee(uint256,uint256) (DictatorDOGE.sol#1079-1082) should emit an event for: \n\t- _sellTaxFee = sellTaxFee (DictatorDOGE.sol#1080) \n\t- _sellLiquidityFee = sellLiquidityFee (DictatorDOGE.sol#1081) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "DictatorDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-DictatorDOGE Smart Contract/code/DictatorDOGE.sol",
            "function": "SetBuyBackTimeInterval",
            "impact": "Low",
            "line": 1053,
            "line_end": 1055,
            "message": "DictatorDOGE.SetBuyBackTimeInterval(uint256) (DictatorDOGE.sol#1053-1055) should emit an event for: \n\t- _buyBackTimeInterval = newMinutes * 60 (DictatorDOGE.sol#1054) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "DictatorDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-DictatorDOGE Smart Contract/code/DictatorDOGE.sol",
            "function": "setTaxFeePercent",
            "impact": "Low",
            "line": 1070,
            "line_end": 1072,
            "message": "DictatorDOGE.setTaxFeePercent(uint256) (DictatorDOGE.sol#1070-1072) should emit an event for: \n\t- _taxFee = taxFee (DictatorDOGE.sol#1071) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "DictatorDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-DictatorDOGE Smart Contract/code/DictatorDOGE.sol",
            "function": "SetBuyBackMaxTimeForHistories",
            "impact": "Low",
            "line": 1041,
            "line_end": 1043,
            "message": "DictatorDOGE.SetBuyBackMaxTimeForHistories(uint256) (DictatorDOGE.sol#1041-1043) should emit an event for: \n\t- _buyBackMaxTimeForHistories = newMinutes * 60 (DictatorDOGE.sol#1042) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "DictatorDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-DictatorDOGE Smart Contract/code/DictatorDOGE.sol",
            "function": "SetBuyBackRangeRate",
            "impact": "Low",
            "line": 1057,
            "line_end": 1060,
            "message": "DictatorDOGE.SetBuyBackRangeRate(uint256) (DictatorDOGE.sol#1057-1060) should emit an event for: \n\t- _buyBackRangeRate = newPercent (DictatorDOGE.sol#1059) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "DictatorDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-DictatorDOGE Smart Contract/code/DictatorDOGE.sol",
            "function": "setMarketingDivisor",
            "impact": "Low",
            "line": 1096,
            "line_end": 1098,
            "message": "DictatorDOGE.setMarketingDivisor(uint256) (DictatorDOGE.sol#1096-1098) should emit an event for: \n\t- marketingDivisor = divisor (DictatorDOGE.sol#1097) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "DictatorDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-DictatorDOGE Smart Contract/code/DictatorDOGE.sol",
            "function": "setNumTokensSellToAddToBuyBack",
            "impact": "Low",
            "line": 1100,
            "line_end": 1102,
            "message": "DictatorDOGE.setNumTokensSellToAddToBuyBack(uint256) (DictatorDOGE.sol#1100-1102) should emit an event for: \n\t- minimumTokensBeforeSwap = _minimumTokensBeforeSwap (DictatorDOGE.sol#1101) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "DictatorDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-DictatorDOGE Smart Contract/code/DictatorDOGE.sol",
            "function": "SetBuyBackDivisor",
            "impact": "Low",
            "line": 1045,
            "line_end": 1047,
            "message": "DictatorDOGE.SetBuyBackDivisor(uint256) (DictatorDOGE.sol#1045-1047) should emit an event for: \n\t- _buyBackDivisor = newDivisor (DictatorDOGE.sol#1046) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "DictatorDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-DictatorDOGE Smart Contract/code/DictatorDOGE.sol",
            "function": "SetSwapMinutes",
            "impact": "Low",
            "line": 1066,
            "line_end": 1068,
            "message": "DictatorDOGE.SetSwapMinutes(uint256) (DictatorDOGE.sol#1066-1068) should emit an event for: \n\t- _intervalMinutesForSwap = newMinutes * 60 (DictatorDOGE.sol#1067) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "DictatorDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-DictatorDOGE Smart Contract/code/DictatorDOGE.sol",
            "function": "setBuyBackSellLimit",
            "impact": "Low",
            "line": 1088,
            "line_end": 1090,
            "message": "DictatorDOGE.setBuyBackSellLimit(uint256) (DictatorDOGE.sol#1088-1090) should emit an event for: \n\t- buyBackSellLimit = buyBackSellSetLimit (DictatorDOGE.sol#1089) \n",
            "name": "events-maths",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "DictatorDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-DictatorDOGE Smart Contract/code/DictatorDOGE.sol",
            "function": "_transfer",
            "impact": "Low",
            "line": 668,
            "line_end": 785,
            "message": "Reentrancy in DictatorDOGE._transfer(address,address,uint256) (DictatorDOGE.sol#668-785):\n\tExternal calls:\n\t- swapTokens(contractTokenBalance) (DictatorDOGE.sol#697)\n\t\t- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (DictatorDOGE.sol#814-820)\n\t- buyBackTokens(_bBSLimit) (DictatorDOGE.sol#732)\n\t\t- uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,deadAddress,block.timestamp.add(300)) (DictatorDOGE.sol#832-837)\n\tExternal calls sending eth:\n\t- swapTokens(contractTokenBalance) (DictatorDOGE.sol#697)\n\t\t- recipient.transfer(amount) (DictatorDOGE.sol#1138)\n\t- buyBackTokens(_bBSLimit) (DictatorDOGE.sol#732)\n\t\t- uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,deadAddress,block.timestamp.add(300)) (DictatorDOGE.sol#832-837)\n\tState variables written after the call(s):\n\t- removeAllFee() (DictatorDOGE.sol#748)\n\t\t- _liquidityFee = 0 (DictatorDOGE.sol#985)\n\t- _liquidityFee = _buyLiquidityFee (DictatorDOGE.sol#750)\n\t- removeAllFee() (DictatorDOGE.sol#754)\n\t\t- _liquidityFee = 0 (DictatorDOGE.sol#985)\n\t- _liquidityFee = _sellLiquidityFee (DictatorDOGE.sol#756)\n\t- removeAllFee() (DictatorDOGE.sol#761)\n\t\t- _liquidityFee = 0 (DictatorDOGE.sol#985)\n\t- _liquidityFee = _addressFees[from]._liquidityFee (DictatorDOGE.sol#763)\n\t- _liquidityFee = _addressFees[from]._sellLiquidityFee (DictatorDOGE.sol#768)\n\t- removeAllFee() (DictatorDOGE.sol#775)\n\t\t- _liquidityFee = 0 (DictatorDOGE.sol#985)\n\t- _liquidityFee = _addressFees[to]._buyLiquidityFee (DictatorDOGE.sol#778)\n\t- _tokenTransfer(from,to,amount,takeFee) (DictatorDOGE.sol#784)\n\t\t- _liquidityFee = _previousLiquidityFee (DictatorDOGE.sol#990)\n\t\t- _liquidityFee = 0 (DictatorDOGE.sol#985)\n\t- removeAllFee() (DictatorDOGE.sol#748)\n\t\t- _previousLiquidityFee = _liquidityFee (DictatorDOGE.sol#982)\n\t- removeAllFee() (DictatorDOGE.sol#754)\n\t\t- _previousLiquidityFee = _liquidityFee (DictatorDOGE.sol#982)\n\t- removeAllFee() (DictatorDOGE.sol#761)\n\t\t- _previousLiquidityFee = _liquidityFee (DictatorDOGE.sol#982)\n\t- removeAllFee() (DictatorDOGE.sol#775)\n\t\t- _previousLiquidityFee = _liquidityFee (DictatorDOGE.sol#982)\n\t- _tokenTransfer(from,to,amount,takeFee) (DictatorDOGE.sol#784)\n\t\t- _previousLiquidityFee = _liquidityFee (DictatorDOGE.sol#982)\n\t- removeAllFee() (DictatorDOGE.sol#748)\n\t\t- _previousTaxFee = _taxFee (DictatorDOGE.sol#981)\n\t- removeAllFee() (DictatorDOGE.sol#754)\n\t\t- _previousTaxFee = _taxFee (DictatorDOGE.sol#981)\n\t- removeAllFee() (DictatorDOGE.sol#761)\n\t\t- _previousTaxFee = _taxFee (DictatorDOGE.sol#981)\n\t- removeAllFee() (DictatorDOGE.sol#775)\n\t\t- _previousTaxFee = _taxFee (DictatorDOGE.sol#981)\n\t- _tokenTransfer(from,to,amount,takeFee) (DictatorDOGE.sol#784)\n\t\t- _previousTaxFee = _taxFee (DictatorDOGE.sol#981)\n\t- _tokenTransfer(from,to,amount,takeFee) (DictatorDOGE.sol#784)\n\t\t- _tFeeTotal = _tFeeTotal.add(tFee) (DictatorDOGE.sol#917)\n\t- removeAllFee() (DictatorDOGE.sol#748)\n\t\t- _taxFee = 0 (DictatorDOGE.sol#984)\n\t- _taxFee = _buyTaxFee (DictatorDOGE.sol#749)\n\t- removeAllFee() (DictatorDOGE.sol#754)\n\t\t- _taxFee = 0 (DictatorDOGE.sol#984)\n\t- _taxFee = _sellTaxFee (DictatorDOGE.sol#755)\n\t- removeAllFee() (DictatorDOGE.sol#761)\n\t\t- _taxFee = 0 (DictatorDOGE.sol#984)\n\t- _taxFee = _addressFees[from]._taxFee (DictatorDOGE.sol#762)\n\t- _taxFee = _addressFees[from]._sellTaxFee (DictatorDOGE.sol#767)\n\t- removeAllFee() (DictatorDOGE.sol#775)\n\t\t- _taxFee = 0 (DictatorDOGE.sol#984)\n\t- _taxFee = _addressFees[to]._buyTaxFee (DictatorDOGE.sol#777)\n\t- _tokenTransfer(from,to,amount,takeFee) (DictatorDOGE.sol#784)\n\t\t- _taxFee = _previousTaxFee (DictatorDOGE.sol#989)\n\t\t- _taxFee = 0 (DictatorDOGE.sol#984)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "DictatorDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-DictatorDOGE Smart Contract/code/DictatorDOGE.sol",
            "function": "transferFrom",
            "impact": "Low",
            "line": 574,
            "line_end": 578,
            "message": "Reentrancy in DictatorDOGE.transferFrom(address,address,uint256) (DictatorDOGE.sol#574-578):\n\tExternal calls:\n\t- _transfer(sender,recipient,amount) (DictatorDOGE.sol#575)\n\t\t- uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,deadAddress,block.timestamp.add(300)) (DictatorDOGE.sol#832-837)\n\t\t- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (DictatorDOGE.sol#814-820)\n\tExternal calls sending eth:\n\t- _transfer(sender,recipient,amount) (DictatorDOGE.sol#575)\n\t\t- recipient.transfer(amount) (DictatorDOGE.sol#1138)\n\t\t- uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,deadAddress,block.timestamp.add(300)) (DictatorDOGE.sol#832-837)\n\tState variables written after the call(s):\n\t- _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,ERC20: transfer amount exceeds allowance)) (DictatorDOGE.sol#576)\n\t\t- _allowances[owner][spender] = amount (DictatorDOGE.sol#664)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "DictatorDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-DictatorDOGE Smart Contract/code/DictatorDOGE.sol",
            "function": "changeRouterVersion",
            "impact": "Low",
            "line": 1141,
            "line_end": 1154,
            "message": "Reentrancy in DictatorDOGE.changeRouterVersion(address) (DictatorDOGE.sol#1141-1154):\n\tExternal calls:\n\t- _pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this),_uniswapV2Router.WETH()) (DictatorDOGE.sol#1147-1148)\n\tState variables written after the call(s):\n\t- uniswapV2Pair = _pair (DictatorDOGE.sol#1150)\n\t- uniswapV2Router = _uniswapV2Router (DictatorDOGE.sol#1153)\n",
            "name": "reentrancy-benign",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "DictatorDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-DictatorDOGE Smart Contract/code/DictatorDOGE.sol",
            "function": "swapETHForTokens",
            "impact": "Low",
            "line": 825,
            "line_end": 840,
            "message": "Reentrancy in DictatorDOGE.swapETHForTokens(uint256) (DictatorDOGE.sol#825-840):\n\tExternal calls:\n\t- uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,deadAddress,block.timestamp.add(300)) (DictatorDOGE.sol#832-837)\n\tEvent emitted after the call(s):\n\t- SwapETHForTokens(amount,path) (DictatorDOGE.sol#839)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "DictatorDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-DictatorDOGE Smart Contract/code/DictatorDOGE.sol",
            "function": "transferFrom",
            "impact": "Low",
            "line": 574,
            "line_end": 578,
            "message": "Reentrancy in DictatorDOGE.transferFrom(address,address,uint256) (DictatorDOGE.sol#574-578):\n\tExternal calls:\n\t- _transfer(sender,recipient,amount) (DictatorDOGE.sol#575)\n\t\t- uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,deadAddress,block.timestamp.add(300)) (DictatorDOGE.sol#832-837)\n\t\t- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (DictatorDOGE.sol#814-820)\n\tExternal calls sending eth:\n\t- _transfer(sender,recipient,amount) (DictatorDOGE.sol#575)\n\t\t- recipient.transfer(amount) (DictatorDOGE.sol#1138)\n\t\t- uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,deadAddress,block.timestamp.add(300)) (DictatorDOGE.sol#832-837)\n\tEvent emitted after the call(s):\n\t- Approval(owner,spender,amount) (DictatorDOGE.sol#665)\n\t\t- _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,ERC20: transfer amount exceeds allowance)) (DictatorDOGE.sol#576)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "DictatorDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-DictatorDOGE Smart Contract/code/DictatorDOGE.sol",
            "function": "swapTokensForEth",
            "impact": "Low",
            "line": 805,
            "line_end": 823,
            "message": "Reentrancy in DictatorDOGE.swapTokensForEth(uint256) (DictatorDOGE.sol#805-823):\n\tExternal calls:\n\t- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (DictatorDOGE.sol#814-820)\n\tEvent emitted after the call(s):\n\t- SwapTokensForETH(tokenAmount,path) (DictatorDOGE.sol#822)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "DictatorDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-DictatorDOGE Smart Contract/code/DictatorDOGE.sol",
            "function": "_transfer",
            "impact": "Low",
            "line": 668,
            "line_end": 785,
            "message": "Reentrancy in DictatorDOGE._transfer(address,address,uint256) (DictatorDOGE.sol#668-785):\n\tExternal calls:\n\t- swapTokens(contractTokenBalance) (DictatorDOGE.sol#697)\n\t\t- uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp) (DictatorDOGE.sol#814-820)\n\t- buyBackTokens(_bBSLimit) (DictatorDOGE.sol#732)\n\t\t- uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,deadAddress,block.timestamp.add(300)) (DictatorDOGE.sol#832-837)\n\tExternal calls sending eth:\n\t- swapTokens(contractTokenBalance) (DictatorDOGE.sol#697)\n\t\t- recipient.transfer(amount) (DictatorDOGE.sol#1138)\n\t- buyBackTokens(_bBSLimit) (DictatorDOGE.sol#732)\n\t\t- uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,deadAddress,block.timestamp.add(300)) (DictatorDOGE.sol#832-837)\n\tEvent emitted after the call(s):\n\t- SwapETHForTokens(amount,path) (DictatorDOGE.sol#839)\n\t\t- buyBackTokens(_bBSLimit) (DictatorDOGE.sol#732)\n\t- Transfer(sender,recipient,tTransferAmount) (DictatorDOGE.sol#881)\n\t\t- _tokenTransfer(from,to,amount,takeFee) (DictatorDOGE.sol#784)\n\t- Transfer(sender,recipient,tTransferAmount) (DictatorDOGE.sol#901)\n\t\t- _tokenTransfer(from,to,amount,takeFee) (DictatorDOGE.sol#784)\n\t- Transfer(sender,recipient,tTransferAmount) (DictatorDOGE.sol#891)\n\t\t- _tokenTransfer(from,to,amount,takeFee) (DictatorDOGE.sol#784)\n\t- Transfer(sender,recipient,tTransferAmount) (DictatorDOGE.sol#912)\n\t\t- _tokenTransfer(from,to,amount,takeFee) (DictatorDOGE.sol#784)\n",
            "name": "reentrancy-events",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "DictatorDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-DictatorDOGE Smart Contract/code/DictatorDOGE.sol",
            "function": "_transfer",
            "impact": "Low",
            "line": 668,
            "line_end": 785,
            "message": "DictatorDOGE._transfer(address,address,uint256) (DictatorDOGE.sol#668-785) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- overMinimumTokenBalance && _startTimeForSwap + _intervalMinutesForSwap <= block.timestamp (DictatorDOGE.sol#694)\n\t- _sellHistories[i].time >= startTime (DictatorDOGE.sol#714)\n\t- balance > _bBSLimit (DictatorDOGE.sol#731)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "Ownable",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-DictatorDOGE Smart Contract/code/DictatorDOGE.sol",
            "function": "unlock",
            "impact": "Low",
            "line": 198,
            "line_end": 203,
            "message": "Ownable.unlock() (DictatorDOGE.sol#198-203) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(block.timestamp > _lockTime,Contract is locked until 7 days) (DictatorDOGE.sol#200)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "DictatorDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-DictatorDOGE Smart Contract/code/DictatorDOGE.sol",
            "function": "buyBackTokens",
            "impact": "Low",
            "line": 799,
            "line_end": 803,
            "message": "DictatorDOGE.buyBackTokens(uint256) (DictatorDOGE.sol#799-803) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- amount > 0 (DictatorDOGE.sol#800)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "DictatorDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-DictatorDOGE Smart Contract/code/DictatorDOGE.sol",
            "function": "_removeOldSellHistories",
            "impact": "Low",
            "line": 1017,
            "line_end": 1039,
            "message": "DictatorDOGE._removeOldSellHistories() (DictatorDOGE.sol#1017-1039) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- _sellHistories[j].time >= maxStartTimeForHistories (DictatorDOGE.sol#1023)\n",
            "name": "timestamp",
            "check": "FP"
        },
        {
            "confidence": "High",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-DictatorDOGE Smart Contract/code/DictatorDOGE.sol",
            "impact": "Informational",
            "line": 2,
            "message": "Different versions of Solidity are used:\n\t- Version used: ['>=0.5.0', '>=0.6.2', '^0.8.4']\n\t- >=0.5.0 (DictatorDOGE.sol#2)\n\t- >=0.5.0 (DictatorDOGE.sol#3)\n\t- >=0.6.2 (DictatorDOGE.sol#4)\n\t- >=0.6.2 (DictatorDOGE.sol#5)\n\t- ^0.8.4 (DictatorDOGE.sol#1)\n",
            "name": "pragma",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "DictatorDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-DictatorDOGE Smart Contract/code/DictatorDOGE.sol",
            "function": "includeInReward",
            "impact": "Informational",
            "line": 643,
            "line_end": 654,
            "message": "DictatorDOGE.includeInReward(address) (DictatorDOGE.sol#643-654) has costly operations inside a loop:\n\t- _excluded.pop() (DictatorDOGE.sol#650)\n",
            "name": "costly-loop",
            "check": "TP"
        },
        {
            "confidence": "High",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-DictatorDOGE Smart Contract/code/DictatorDOGE.sol",
            "impact": "Informational",
            "line": 453,
            "message": "DictatorDOGE._previousLiquidityFee (DictatorDOGE.sol#453) is set pre-construction with a non-constant function or state variable:\n\t- _liquidityFee\n",
            "name": "function-init-state",
            "check": "FP"
        },
        {
            "confidence": "High",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-DictatorDOGE Smart Contract/code/DictatorDOGE.sol",
            "impact": "Informational",
            "line": 450,
            "message": "DictatorDOGE._previousTaxFee (DictatorDOGE.sol#450) is set pre-construction with a non-constant function or state variable:\n\t- _taxFee\n",
            "name": "function-init-state",
            "check": "FP"
        },
        {
            "confidence": "High",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-DictatorDOGE Smart Contract/code/DictatorDOGE.sol",
            "impact": "Informational",
            "line": 427,
            "message": "DictatorDOGE._rTotal (DictatorDOGE.sol#427) is set pre-construction with a non-constant function or state variable:\n\t- (MAX - (MAX % _tTotal))\n",
            "name": "function-init-state",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "DictatorDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-DictatorDOGE Smart Contract/code/DictatorDOGE.sol",
            "function": "_transfer",
            "impact": "Informational",
            "line": 668,
            "line_end": 785,
            "message": "Reentrancy in DictatorDOGE._transfer(address,address,uint256) (DictatorDOGE.sol#668-785):\n\tExternal calls:\n\t- swapTokens(contractTokenBalance) (DictatorDOGE.sol#697)\n\t\t- recipient.transfer(amount) (DictatorDOGE.sol#1138)\n\tState variables written after the call(s):\n\t- _removeOldSellHistories() (DictatorDOGE.sol#724)\n\t\t- _sellHistories[i].time = _sellHistories[j].time (DictatorDOGE.sol#1025)\n\t\t- _sellHistories[i].bnbAmount = _sellHistories[j].bnbAmount (DictatorDOGE.sol#1026)\n\t\t- _sellHistories.pop() (DictatorDOGE.sol#1036)\n",
            "name": "reentrancy-unlimited-gas",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "DictatorDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-DictatorDOGE Smart Contract/code/DictatorDOGE.sol",
            "function": "transferFrom",
            "impact": "Informational",
            "line": 574,
            "line_end": 578,
            "message": "Reentrancy in DictatorDOGE.transferFrom(address,address,uint256) (DictatorDOGE.sol#574-578):\n\tExternal calls:\n\t- _transfer(sender,recipient,amount) (DictatorDOGE.sol#575)\n\t\t- recipient.transfer(amount) (DictatorDOGE.sol#1138)\n\tExternal calls sending eth:\n\t- _transfer(sender,recipient,amount) (DictatorDOGE.sol#575)\n\t\t- recipient.transfer(amount) (DictatorDOGE.sol#1138)\n\t\t- uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,deadAddress,block.timestamp.add(300)) (DictatorDOGE.sol#832-837)\n\tState variables written after the call(s):\n\t- _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,ERC20: transfer amount exceeds allowance)) (DictatorDOGE.sol#576)\n\t\t- _allowances[owner][spender] = amount (DictatorDOGE.sol#664)\n\tEvent emitted after the call(s):\n\t- Approval(owner,spender,amount) (DictatorDOGE.sol#665)\n\t\t- _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,ERC20: transfer amount exceeds allowance)) (DictatorDOGE.sol#576)\n",
            "name": "reentrancy-unlimited-gas",
            "check": "FP"
        },
        {
            "confidence": "Medium",
            "contract": "DictatorDOGE",
            "filename": "Dapp_dataset/positive/DAppSCAN-source/contracts/QuillAudits-DictatorDOGE Smart Contract/code/DictatorDOGE.sol",
            "function": "_transfer",
            "impact": "Informational",
            "line": 668,
            "line_end": 785,
            "message": "Reentrancy in DictatorDOGE._transfer(address,address,uint256) (DictatorDOGE.sol#668-785):\n\tExternal calls:\n\t- swapTokens(contractTokenBalance) (DictatorDOGE.sol#697)\n\t\t- recipient.transfer(amount) (DictatorDOGE.sol#1138)\n\tExternal calls sending eth:\n\t- swapTokens(contractTokenBalance) (DictatorDOGE.sol#697)\n\t\t- recipient.transfer(amount) (DictatorDOGE.sol#1138)\n\t- buyBackTokens(_bBSLimit) (DictatorDOGE.sol#732)\n\t\t- uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(0,path,deadAddress,block.timestamp.add(300)) (DictatorDOGE.sol#832-837)\n\tState variables written after the call(s):\n\t- removeAllFee() (DictatorDOGE.sol#748)\n\t\t- _liquidityFee = 0 (DictatorDOGE.sol#985)\n\t- _liquidityFee = _buyLiquidityFee (DictatorDOGE.sol#750)\n\t- removeAllFee() (DictatorDOGE.sol#754)\n\t\t- _liquidityFee = 0 (DictatorDOGE.sol#985)\n\t- _liquidityFee = _sellLiquidityFee (DictatorDOGE.sol#756)\n\t- removeAllFee() (DictatorDOGE.sol#761)\n\t\t- _liquidityFee = 0 (DictatorDOGE.sol#985)\n\t- _liquidityFee = _addressFees[from]._liquidityFee (DictatorDOGE.sol#763)\n\t- _liquidityFee = _addressFees[from]._sellLiquidityFee (DictatorDOGE.sol#768)\n\t- removeAllFee() (DictatorDOGE.sol#775)\n\t\t- _liquidityFee = 0 (DictatorDOGE.sol#985)\n\t- _liquidityFee = _addressFees[to]._buyLiquidityFee (DictatorDOGE.sol#778)\n\t- _tokenTransfer(from,to,amount,takeFee) (DictatorDOGE.sol#784)\n\t\t- _liquidityFee = _previousLiquidityFee (DictatorDOGE.sol#990)\n\t\t- _liquidityFee = 0 (DictatorDOGE.sol#985)\n\t- removeAllFee() (DictatorDOGE.sol#748)\n\t\t- _previousLiquidityFee = _liquidityFee (DictatorDOGE.sol#982)\n\t- removeAllFee() (DictatorDOGE.sol#754)\n\t\t- _previousLiquidityFee = _liquidityFee (DictatorDOGE.sol#982)\n\t- removeAllFee() (DictatorDOGE.sol#761)\n\t\t- _previousLiquidityFee = _liquidityFee (DictatorDOGE.sol#982)\n\t- removeAllFee() (DictatorDOGE.sol#775)\n\t\t- _previousLiquidityFee = _liquidityFee (DictatorDOGE.sol#982)\n\t- _tokenTransfer(from,to,amount,takeFee) (DictatorDOGE.sol#784)\n\t\t- _previousLiquidityFee = _liquidityFee (DictatorDOGE.sol#982)\n\t- removeAllFee() (DictatorDOGE.sol#748)\n\t\t- _previousTaxFee = _taxFee (DictatorDOGE.sol#981)\n\t- removeAllFee() (DictatorDOGE.sol#754)\n\t\t- _previousTaxFee = _taxFee (DictatorDOGE.sol#981)\n\t- removeAllFee() (DictatorDOGE.sol#761)\n\t\t- _previousTaxFee = _taxFee (DictatorDOGE.sol#981)\n\t- removeAllFee() (DictatorDOGE.sol#775)\n\t\t- _previousTaxFee = _taxFee (DictatorDOGE.sol#981)\n\t- _tokenTransfer(from,to,amount,takeFee) (DictatorDOGE.sol#784)\n\t\t- _previousTaxFee = _taxFee (DictatorDOGE.sol#981)\n\t- _tokenTransfer(from,to,amount,takeFee) (DictatorDOGE.sol#784)\n\t\t- _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity) (DictatorDOGE.sol#961)\n\t\t- _rOwned[sender] = _rOwned[sender].sub(rAmount) (DictatorDOGE.sol#877)\n\t\t- _rOwned[sender] = _rOwned[sender].sub(rAmount) (DictatorDOGE.sol#886)\n\t\t- _rOwned[sender] = _rOwned[sender].sub(rAmount) (DictatorDOGE.sol#897)\n\t\t- _rOwned[sender] = _rOwned[sender].sub(rAmount) (DictatorDOGE.sol#907)\n\t\t- _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount) (DictatorDOGE.sol#878)\n\t\t- _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount) (DictatorDOGE.sol#898)\n\t\t- _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount) (DictatorDOGE.sol#888)\n\t\t- _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount) (DictatorDOGE.sol#909)\n\t- _tokenTransfer(from,to,amount,takeFee) (DictatorDOGE.sol#784)\n\t\t- _rTotal = _rTotal.sub(rFee) (DictatorDOGE.sol#916)\n\t- _tokenTransfer(from,to,amount,takeFee) (DictatorDOGE.sol#784)\n\t\t- _tFeeTotal = _tFeeTotal.add(tFee) (DictatorDOGE.sol#917)\n\t- _tokenTransfer(from,to,amount,takeFee) (DictatorDOGE.sol#784)\n\t\t- _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity) (DictatorDOGE.sol#963)\n\t\t- _tOwned[sender] = _tOwned[sender].sub(tAmount) (DictatorDOGE.sol#906)\n\t\t- _tOwned[sender] = _tOwned[sender].sub(tAmount) (DictatorDOGE.sol#896)\n\t\t- _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount) (DictatorDOGE.sol#887)\n\t\t- _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount) (DictatorDOGE.sol#908)\n\t- removeAllFee() (DictatorDOGE.sol#748)\n\t\t- _taxFee = 0 (DictatorDOGE.sol#984)\n\t- _taxFee = _buyTaxFee (DictatorDOGE.sol#749)\n\t- removeAllFee() (DictatorDOGE.sol#754)\n\t\t- _taxFee = 0 (DictatorDOGE.sol#984)\n\t- _taxFee = _sellTaxFee (DictatorDOGE.sol#755)\n\t- removeAllFee() (DictatorDOGE.sol#761)\n\t\t- _taxFee = 0 (DictatorDOGE.sol#984)\n\t- _taxFee = _addressFees[from]._taxFee (DictatorDOGE.sol#762)\n\t- _taxFee = _addressFees[from]._sellTaxFee (DictatorDOGE.sol#767)\n\t- removeAllFee() (DictatorDOGE.sol#775)\n\t\t- _taxFee = 0 (DictatorDOGE.sol#984)\n\t- _taxFee = _addressFees[to]._buyTaxFee (DictatorDOGE.sol#777)\n\t- _tokenTransfer(from,to,amount,takeFee) (DictatorDOGE.sol#784)\n\t\t- _taxFee = _previousTaxFee (DictatorDOGE.sol#989)\n\t\t- _taxFee = 0 (DictatorDOGE.sol#984)\n\t- buyBackTokens(_bBSLimit) (DictatorDOGE.sol#732)\n\t\t- inSwapAndLiquify = true (DictatorDOGE.sol#512)\n\t\t- inSwapAndLiquify = false (DictatorDOGE.sol#514)\n\tEvent emitted after the call(s):\n\t- SwapETHForTokens(amount,path) (DictatorDOGE.sol#839)\n\t\t- buyBackTokens(_bBSLimit) (DictatorDOGE.sol#732)\n\t- Transfer(sender,recipient,tTransferAmount) (DictatorDOGE.sol#881)\n\t\t- _tokenTransfer(from,to,amount,takeFee) (DictatorDOGE.sol#784)\n\t- Transfer(sender,recipient,tTransferAmount) (DictatorDOGE.sol#901)\n\t\t- _tokenTransfer(from,to,amount,takeFee) (DictatorDOGE.sol#784)\n\t- Transfer(sender,recipient,tTransferAmount) (DictatorDOGE.sol#891)\n\t\t- _tokenTransfer(from,to,amount,takeFee) (DictatorDOGE.sol#784)\n\t- Transfer(sender,recipient,tTransferAmount) (DictatorDOGE.sol#912)\n\t\t- _tokenTransfer(from,to,amount,takeFee) (DictatorDOGE.sol#784)\n",
            "name": "reentrancy-unlimited-gas",
            "check": "FP"
        }
    ],
    "infos": [],
    "parser": {
        "id": "slither-0.10.0",
        "mode": "solidity",
        "version": "2024/04/30"
    }
}